
STM32_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfe0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800d1e0  0800d1e0  0001d1e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d73c  0800d73c  00020230  2**0
                  CONTENTS
  4 .ARM          00000008  0800d73c  0800d73c  0001d73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d744  0800d744  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d744  0800d744  0001d744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d748  0800d748  0001d748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800d74c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  20000230  0800d97c  00020230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000085c  0800d97c  0002085c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e43a  00000000  00000000  0002025e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a91  00000000  00000000  0003e698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  00042130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001420  00000000  00000000  000436c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b4c0  00000000  00000000  00044ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a155  00000000  00000000  0006ffa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010719d  00000000  00000000  0008a0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cc  00000000  00000000  0019129a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070a0  00000000  00000000  00191368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000230 	.word	0x20000230
 800021c:	00000000 	.word	0x00000000
 8000220:	0800d1c8 	.word	0x0800d1c8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000234 	.word	0x20000234
 800023c:	0800d1c8 	.word	0x0800d1c8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000678:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <delay>:
#define timer htim3


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <delay+0x30>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 80009e2:	bf00      	nop
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <delay+0x30>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009ea:	88fb      	ldrh	r3, [r7, #6]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d3f9      	bcc.n	80009e4 <delay+0x14>
}
 80009f0:	bf00      	nop
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	2000074c 	.word	0x2000074c

08000a04 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	461a      	mov	r2, r3
 8000a16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a1a:	4820      	ldr	r0, [pc, #128]	; (8000a9c <send_to_lcd+0x98>)
 8000a1c:	f002 fd54 	bl	80034c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000a20:	2201      	movs	r2, #1
 8000a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a26:	481e      	ldr	r0, [pc, #120]	; (8000aa0 <send_to_lcd+0x9c>)
 8000a28:	f002 fd4e 	bl	80034c8 <HAL_GPIO_WritePin>
//	delay (0.05);
	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	08db      	lsrs	r3, r3, #3
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	461a      	mov	r2, r3
 8000a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a3e:	4819      	ldr	r0, [pc, #100]	; (8000aa4 <send_to_lcd+0xa0>)
 8000a40:	f002 fd42 	bl	80034c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	089b      	lsrs	r3, r3, #2
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	461a      	mov	r2, r3
 8000a52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a56:	4812      	ldr	r0, [pc, #72]	; (8000aa0 <send_to_lcd+0x9c>)
 8000a58:	f002 fd36 	bl	80034c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	085b      	lsrs	r3, r3, #1
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	461a      	mov	r2, r3
 8000a6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a6e:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <send_to_lcd+0x9c>)
 8000a70:	f002 fd2a 	bl	80034c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a82:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <send_to_lcd+0xa0>)
 8000a84:	f002 fd20 	bl	80034c8 <HAL_GPIO_WritePin>
	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8e:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <send_to_lcd+0x9c>)
 8000a90:	f002 fd1a 	bl	80034c8 <HAL_GPIO_WritePin>
//	delay (200);
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40021800 	.word	0x40021800
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40021400 	.word	0x40021400

08000aa8 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	091b      	lsrs	r3, r3, #4
 8000ab6:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ffa1 	bl	8000a04 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f003 030f 	and.w	r3, r3, #15
 8000ac8:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff ff98 	bl	8000a04 <send_to_lcd>
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <lcd_send_data>:

void lcd_send_data (char data)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	091b      	lsrs	r3, r3, #4
 8000aea:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
 8000aee:	2101      	movs	r1, #1
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff87 	bl	8000a04 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	f003 030f 	and.w	r3, r3, #15
 8000afc:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	2101      	movs	r1, #1
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff7e 	bl	8000a04 <send_to_lcd>
}
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <Lcd_clear>:

void Lcd_clear (void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000b14:	2001      	movs	r0, #1
 8000b16:	f7ff ffc7 	bl	8000aa8 <lcd_send_cmd>
	HAL_Delay(2);
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f002 f960 	bl	8002de0 <HAL_Delay>
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <Lcd_put_cur>:

void Lcd_put_cur(int row, int col)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
	switch(row)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <Lcd_put_cur+0x18>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d005      	beq.n	8000b46 <Lcd_put_cur+0x22>
 8000b3a:	e009      	b.n	8000b50 <Lcd_put_cur+0x2c>
	{
	case 0:
		col |=0x80;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b42:	603b      	str	r3, [r7, #0]
		break;
 8000b44:	e004      	b.n	8000b50 <Lcd_put_cur+0x2c>
	case 1:
		col |= 0xC0;
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000b4c:	603b      	str	r3, [r7, #0]
		break;
 8000b4e:	bf00      	nop
	}
    lcd_send_cmd (col);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ffa7 	bl	8000aa8 <lcd_send_cmd>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <Lcd_init>:


void Lcd_init (void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000b66:	2032      	movs	r0, #50	; 0x32
 8000b68:	f002 f93a 	bl	8002de0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000b6c:	2030      	movs	r0, #48	; 0x30
 8000b6e:	f7ff ff9b 	bl	8000aa8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000b72:	2005      	movs	r0, #5
 8000b74:	f002 f934 	bl	8002de0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000b78:	2030      	movs	r0, #48	; 0x30
 8000b7a:	f7ff ff95 	bl	8000aa8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f002 f92e 	bl	8002de0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000b84:	2030      	movs	r0, #48	; 0x30
 8000b86:	f7ff ff8f 	bl	8000aa8 <lcd_send_cmd>
	HAL_Delay(10);
 8000b8a:	200a      	movs	r0, #10
 8000b8c:	f002 f928 	bl	8002de0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000b90:	2020      	movs	r0, #32
 8000b92:	f7ff ff89 	bl	8000aa8 <lcd_send_cmd>
	HAL_Delay(10);
 8000b96:	200a      	movs	r0, #10
 8000b98:	f002 f922 	bl	8002de0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000b9c:	2028      	movs	r0, #40	; 0x28
 8000b9e:	f7ff ff83 	bl	8000aa8 <lcd_send_cmd>
	HAL_Delay(1);
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f002 f91c 	bl	8002de0 <HAL_Delay>

	lcd_send_cmd (0x08);  // clear display
 8000ba8:	2008      	movs	r0, #8
 8000baa:	f7ff ff7d 	bl	8000aa8 <lcd_send_cmd>
	HAL_Delay(1);
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f002 f916 	bl	8002de0 <HAL_Delay>
	HAL_Delay(1);
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f002 f913 	bl	8002de0 <HAL_Delay>
	lcd_send_cmd (0x01); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f7ff ff74 	bl	8000aa8 <lcd_send_cmd>
	HAL_Delay(1);
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f002 f90d 	bl	8002de0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000bc6:	200c      	movs	r0, #12
 8000bc8:	f7ff ff6e 	bl	8000aa8 <lcd_send_cmd>



	HAL_Delay(1);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f002 f907 	bl	8002de0 <HAL_Delay>
	HAL_Delay(1);
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f002 f904 	bl	8002de0 <HAL_Delay>
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <Lcd_send_string>:

void Lcd_send_string (char *str)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(str); i++){
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]
 8000be8:	e00c      	b.n	8000c04 <Lcd_send_string+0x28>
		lcd_send_data( str[i]);
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	4413      	add	r3, r2
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ff72 	bl	8000adc <lcd_send_data>
		delay(100);
 8000bf8:	2064      	movs	r0, #100	; 0x64
 8000bfa:	f7ff fee9 	bl	80009d0 <delay>
	for(uint8_t i = 0; i < strlen(str); i++){
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	3301      	adds	r3, #1
 8000c02:	73fb      	strb	r3, [r7, #15]
 8000c04:	7bfc      	ldrb	r4, [r7, #15]
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff fb1a 	bl	8000240 <strlen>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	429c      	cmp	r4, r3
 8000c10:	d3eb      	bcc.n	8000bea <Lcd_send_string+0xe>
	}

}
 8000c12:	bf00      	nop
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd90      	pop	{r4, r7, pc}

08000c1c <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f000 fa4b 	bl	80010c0 <null_ptr_check>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d117      	bne.n	8000c66 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	20d0      	movs	r0, #208	; 0xd0
 8000c3e:	f000 f818 	bl	8000c72 <bmp2_get_regs>
 8000c42:	4603      	mov	r3, r0
 8000c44:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10b      	bne.n	8000c66 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b58      	cmp	r3, #88	; 0x58
 8000c54:	d105      	bne.n	8000c62 <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f000 fa7d 	bl	8001156 <get_calib_param>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	73fb      	strb	r3, [r7, #15]
 8000c60:	e001      	b.n	8000c66 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8000c62:	23fc      	movs	r3, #252	; 0xfc
 8000c64:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000c72:	b590      	push	{r4, r7, lr}
 8000c74:	b087      	sub	sp, #28
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4603      	mov	r3, r0
 8000c80:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000c82:	6838      	ldr	r0, [r7, #0]
 8000c84:	f000 fa1c 	bl	80010c0 <null_ptr_check>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8000c8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d11e      	bne.n	8000cd2 <bmp2_get_regs+0x60>
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d01b      	beq.n	8000cd2 <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	785b      	ldrb	r3, [r3, #1]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d103      	bne.n	8000caa <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ca8:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	68dc      	ldr	r4, [r3, #12]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	7bf8      	ldrb	r0, [r7, #15]
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	68b9      	ldr	r1, [r7, #8]
 8000cb8:	47a0      	blx	r4
 8000cba:	4603      	mov	r3, r0
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d004      	beq.n	8000cd6 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8000ccc:	23fe      	movs	r3, #254	; 0xfe
 8000cce:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000cd0:	e001      	b.n	8000cd6 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000cd2:	23ff      	movs	r3, #255	; 0xff
 8000cd4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000cd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	371c      	adds	r7, #28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd90      	pop	{r4, r7, pc}

08000ce2 <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000ce2:	b590      	push	{r4, r7, lr}
 8000ce4:	b08b      	sub	sp, #44	; 0x2c
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	60f8      	str	r0, [r7, #12]
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	d901      	bls.n	8000cfa <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8000cfa:	6838      	ldr	r0, [r7, #0]
 8000cfc:	f000 f9e0 	bl	80010c0 <null_ptr_check>
 8000d00:	4603      	mov	r3, r0
 8000d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000d06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d150      	bne.n	8000db0 <bmp2_set_regs+0xce>
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d04d      	beq.n	8000db0 <bmp2_set_regs+0xce>
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d04a      	beq.n	8000db0 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d043      	beq.n	8000da8 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	785b      	ldrb	r3, [r3, #1]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d114      	bne.n	8000d58 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	77fb      	strb	r3, [r7, #31]
 8000d32:	e00d      	b.n	8000d50 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8000d34:	7ffb      	ldrb	r3, [r7, #31]
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	4413      	add	r3, r2
 8000d3a:	781a      	ldrb	r2, [r3, #0]
 8000d3c:	7ffb      	ldrb	r3, [r7, #31]
 8000d3e:	68f9      	ldr	r1, [r7, #12]
 8000d40:	440b      	add	r3, r1
 8000d42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000d4a:	7ffb      	ldrb	r3, [r7, #31]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	77fb      	strb	r3, [r7, #31]
 8000d50:	7ffb      	ldrb	r3, [r7, #31]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d8ed      	bhi.n	8000d34 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d90b      	bls.n	8000d76 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8000d5e:	f107 0114 	add.w	r1, r7, #20
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68ba      	ldr	r2, [r7, #8]
 8000d66:	68f8      	ldr	r0, [r7, #12]
 8000d68:	f000 f9ca 	bl	8001100 <interleave_data>
                temp_len = ((len * 2) - 1);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	3b01      	subs	r3, #1
 8000d72:	623b      	str	r3, [r7, #32]
 8000d74:	e001      	b.n	8000d7a <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	691c      	ldr	r4, [r3, #16]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	7818      	ldrb	r0, [r3, #0]
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f107 0114 	add.w	r1, r7, #20
 8000d8a:	6a3a      	ldr	r2, [r7, #32]
 8000d8c:	47a0      	blx	r4
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00b      	beq.n	8000db8 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 8000da0:	23fe      	movs	r3, #254	; 0xfe
 8000da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8000da6:	e007      	b.n	8000db8 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8000da8:	23fd      	movs	r3, #253	; 0xfd
 8000daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8000dae:	e003      	b.n	8000db8 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000db0:	23ff      	movs	r3, #255	; 0xff
 8000db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000db6:	e000      	b.n	8000dba <bmp2_set_regs+0xd8>
        if (len > 0)
 8000db8:	bf00      	nop
    }

    return rslt;
 8000dba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	372c      	adds	r7, #44	; 0x2c
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd90      	pop	{r4, r7, pc}

08000dc6 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b084      	sub	sp, #16
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 8000dce:	23e0      	movs	r3, #224	; 0xe0
 8000dd0:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 8000dd2:	23b6      	movs	r3, #182	; 0xb6
 8000dd4:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000dd6:	f107 010d 	add.w	r1, r7, #13
 8000dda:	f107 000e 	add.w	r0, r7, #14
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2201      	movs	r2, #1
 8000de2:	f7ff ff7e 	bl	8000ce2 <bmp2_set_regs>
 8000de6:	4603      	mov	r3, r0
 8000de8:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b084      	sub	sp, #16
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8000e00:	2300      	movs	r3, #0
 8000e02:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d02d      	beq.n	8000e66 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8000e0a:	f107 010c 	add.w	r1, r7, #12
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	2202      	movs	r2, #2
 8000e12:	20f4      	movs	r0, #244	; 0xf4
 8000e14:	f7ff ff2d 	bl	8000c72 <bmp2_get_regs>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8000e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d122      	bne.n	8000e6a <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8000e24:	7b3b      	ldrb	r3, [r7, #12]
 8000e26:	095b      	lsrs	r3, r3, #5
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 8000e2e:	7b3b      	ldrb	r3, [r7, #12]
 8000e30:	109b      	asrs	r3, r3, #2
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	f003 0307 	and.w	r3, r3, #7
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 8000e3e:	7b7b      	ldrb	r3, [r7, #13]
 8000e40:	095b      	lsrs	r3, r3, #5
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 8000e48:	7b7b      	ldrb	r3, [r7, #13]
 8000e4a:	109b      	asrs	r3, r3, #2
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 8000e58:	7b7b      	ldrb	r3, [r7, #13]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	715a      	strb	r2, [r3, #5]
 8000e64:	e001      	b.n	8000e6a <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000e66:	23ff      	movs	r3, #255	; 0xff
 8000e68:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 8000e80:	683a      	ldr	r2, [r7, #0]
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	2000      	movs	r0, #0
 8000e86:	f000 fa01 	bl	800128c <conf_sensor>
 8000e8a:	4603      	mov	r3, r0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d01b      	beq.n	8000edc <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 8000ea4:	f107 010e 	add.w	r1, r7, #14
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	20f3      	movs	r0, #243	; 0xf3
 8000eae:	f7ff fee0 	bl	8000c72 <bmp2_get_regs>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d110      	bne.n	8000ee0 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 8000ebe:	7bbb      	ldrb	r3, [r7, #14]
 8000ec0:	10db      	asrs	r3, r3, #3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 8000ece:	7bbb      	ldrb	r3, [r7, #14]
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	705a      	strb	r2, [r3, #1]
 8000eda:	e001      	b.n	8000ee0 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000edc:	23ff      	movs	r3, #255	; 0xff
 8000ede:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	68b9      	ldr	r1, [r7, #8]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f9c3 	bl	800128c <conf_sensor>
 8000f06:	4603      	mov	r3, r0
 8000f08:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8000f0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 8000f20:	2300      	movs	r3, #0
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	2300      	movs	r3, #0
 8000f26:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d024      	beq.n	8000f82 <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8000f38:	f107 0110 	add.w	r1, r7, #16
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	2206      	movs	r2, #6
 8000f40:	20f7      	movs	r0, #247	; 0xf7
 8000f42:	f7ff fe96 	bl	8000c72 <bmp2_get_regs>
 8000f46:	4603      	mov	r3, r0
 8000f48:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8000f4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d119      	bne.n	8000f86 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 8000f52:	f107 0208 	add.w	r2, r7, #8
 8000f56:	f107 0310 	add.w	r3, r7, #16
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fabd 	bl	80014dc <parse_sensor_data>
 8000f62:	4603      	mov	r3, r0
 8000f64:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8000f66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10b      	bne.n	8000f86 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 8000f6e:	f107 0308 	add.w	r3, r7, #8
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f80b 	bl	8000f92 <bmp2_compensate_data>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	75fb      	strb	r3, [r7, #23]
 8000f80:	e001      	b.n	8000f86 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000f82:	23ff      	movs	r3, #255	; 0xff
 8000f84:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000f86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f88e 	bl	80010c0 <null_ptr_check>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8000fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d129      	bne.n	8001004 <bmp2_compensate_data+0x72>
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d026      	beq.n	8001004 <bmp2_compensate_data+0x72>
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d023      	beq.n	8001004 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	f04f 0300 	mov.w	r3, #0
 8000fc6:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8000fca:	68b9      	ldr	r1, [r7, #8]
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	3308      	adds	r3, #8
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	68f9      	ldr	r1, [r7, #12]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fac1 	bl	8001568 <compensate_temperature>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8000fea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10a      	bne.n	8001008 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	68f9      	ldr	r1, [r7, #12]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 fb81 	bl	8001700 <compensate_pressure>
 8000ffe:	4603      	mov	r3, r0
 8001000:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 8001002:	e001      	b.n	8001008 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001004:	23ff      	movs	r3, #255	; 0xff
 8001006:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001008:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001014:	b5b0      	push	{r4, r5, r7, lr}
 8001016:	b092      	sub	sp, #72	; 0x48
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <bmp2_compute_meas_time+0xa4>)
 8001022:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001026:	461d      	mov	r5, r3
 8001028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102c:	682b      	ldr	r3, [r5, #0]
 800102e:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <bmp2_compute_meas_time+0xa8>)
 8001032:	f107 0410 	add.w	r4, r7, #16
 8001036:	461d      	mov	r5, r3
 8001038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 f83b 	bl	80010c0 <null_ptr_check>
 800104a:	4603      	mov	r3, r0
 800104c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 8001050:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001054:	2b00      	cmp	r3, #0
 8001056:	d125      	bne.n	80010a4 <bmp2_compute_meas_time+0x90>
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d022      	beq.n	80010a4 <bmp2_compute_meas_time+0x90>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	7e1b      	ldrb	r3, [r3, #24]
 8001062:	2b03      	cmp	r3, #3
 8001064:	d113      	bne.n	800108e <bmp2_compute_meas_time+0x7a>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	78db      	ldrb	r3, [r3, #3]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001070:	4413      	add	r3, r2
 8001072:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	789b      	ldrb	r3, [r3, #2]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001080:	440b      	add	r3, r1
 8001082:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001086:	441a      	add	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 800108c:	e00d      	b.n	80010aa <bmp2_compute_meas_time+0x96>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	78db      	ldrb	r3, [r3, #3]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001098:	4413      	add	r3, r2
 800109a:	f853 2c18 	ldr.w	r2, [r3, #-24]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80010a2:	e002      	b.n	80010aa <bmp2_compute_meas_time+0x96>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80010a4:	23ff      	movs	r3, #255	; 0xff
 80010a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 80010aa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3748      	adds	r7, #72	; 0x48
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bdb0      	pop	{r4, r5, r7, pc}
 80010b6:	bf00      	nop
 80010b8:	0800d1e0 	.word	0x0800d1e0
 80010bc:	0800d1f4 	.word	0x0800d1f4

080010c0 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00b      	beq.n	80010e6 <null_ptr_check+0x26>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d007      	beq.n	80010e6 <null_ptr_check+0x26>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <null_ptr_check+0x26>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d102      	bne.n	80010ec <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 80010e6:	23ff      	movs	r3, #255	; 0xff
 80010e8:	73fb      	strb	r3, [r7, #15]
 80010ea:	e001      	b.n	80010f0 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80010f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001100:	b480      	push	{r7}
 8001102:	b087      	sub	sp, #28
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 800110e:	2301      	movs	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	e015      	b.n	8001140 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	441a      	add	r2, r3
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	3b01      	subs	r3, #1
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	440b      	add	r3, r1
 8001124:	7812      	ldrb	r2, [r2, #0]
 8001126:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	441a      	add	r2, r3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	68b9      	ldr	r1, [r7, #8]
 8001134:	440b      	add	r3, r1
 8001136:	7812      	ldrb	r2, [r2, #0]
 8001138:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d3e5      	bcc.n	8001114 <interleave_data+0x14>
    }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	371c      	adds	r7, #28
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b08a      	sub	sp, #40	; 0x28
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]
 8001172:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 8001174:	f107 010c 	add.w	r1, r7, #12
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2219      	movs	r2, #25
 800117c:	2088      	movs	r0, #136	; 0x88
 800117e:	f7ff fd78 	bl	8000c72 <bmp2_get_regs>
 8001182:	4603      	mov	r3, r0
 8001184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 8001188:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800118c:	2b00      	cmp	r3, #0
 800118e:	d177      	bne.n	8001280 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 8001190:	7b7b      	ldrb	r3, [r7, #13]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b21a      	sxth	r2, r3
 8001196:	7b3b      	ldrb	r3, [r7, #12]
 8001198:	b21b      	sxth	r3, r3
 800119a:	4313      	orrs	r3, r2
 800119c:	b21b      	sxth	r3, r3
 800119e:	b29a      	uxth	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	7bbb      	ldrb	r3, [r7, #14]
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	4313      	orrs	r3, r2
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 80011b6:	7c7b      	ldrb	r3, [r7, #17]
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	7c3b      	ldrb	r3, [r7, #16]
 80011be:	b21b      	sxth	r3, r3
 80011c0:	4313      	orrs	r3, r2
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 80011c8:	7cfb      	ldrb	r3, [r7, #19]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	7cbb      	ldrb	r3, [r7, #18]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 80011dc:	7d7b      	ldrb	r3, [r7, #21]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	7d3b      	ldrb	r3, [r7, #20]
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 80011ee:	7dfb      	ldrb	r3, [r7, #23]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	7dbb      	ldrb	r3, [r7, #22]
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	4313      	orrs	r3, r2
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001200:	7e7b      	ldrb	r3, [r7, #25]
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	b21a      	sxth	r2, r3
 8001206:	7e3b      	ldrb	r3, [r7, #24]
 8001208:	b21b      	sxth	r3, r3
 800120a:	4313      	orrs	r3, r2
 800120c:	b21a      	sxth	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8001212:	7efb      	ldrb	r3, [r7, #27]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b21a      	sxth	r2, r3
 8001218:	7ebb      	ldrb	r3, [r7, #26]
 800121a:	b21b      	sxth	r3, r3
 800121c:	4313      	orrs	r3, r2
 800121e:	b21a      	sxth	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001224:	7f7b      	ldrb	r3, [r7, #29]
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b21a      	sxth	r2, r3
 800122a:	7f3b      	ldrb	r3, [r7, #28]
 800122c:	b21b      	sxth	r3, r3
 800122e:	4313      	orrs	r3, r2
 8001230:	b21a      	sxth	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 8001236:	7ffb      	ldrb	r3, [r7, #31]
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	b21a      	sxth	r2, r3
 800123c:	7fbb      	ldrb	r3, [r7, #30]
 800123e:	b21b      	sxth	r3, r3
 8001240:	4313      	orrs	r3, r2
 8001242:	b21a      	sxth	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8001248:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001254:	b21b      	sxth	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	b21a      	sxth	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 800125e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	b21a      	sxth	r2, r3
 8001266:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21a      	sxth	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 8001274:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001278:	b25a      	sxtb	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 8001280:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001284:	4618      	mov	r0, r3
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800129a:	2300      	movs	r3, #0
 800129c:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 800129e:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 80012a2:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d074      	beq.n	8001394 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80012aa:	f107 0114 	add.w	r1, r7, #20
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2202      	movs	r2, #2
 80012b2:	20f4      	movs	r0, #244	; 0xf4
 80012b4:	f7ff fcdd 	bl	8000c72 <bmp2_get_regs>
 80012b8:	4603      	mov	r3, r0
 80012ba:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80012bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d169      	bne.n	8001398 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff fd7e 	bl	8000dc6 <bmp2_soft_reset>
 80012ca:	4603      	mov	r3, r0
 80012cc:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80012ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d160      	bne.n	8001398 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	68b9      	ldr	r1, [r7, #8]
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 f861 	bl	80013a4 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 80012e2:	7d7b      	ldrb	r3, [r7, #21]
 80012e4:	b25b      	sxtb	r3, r3
 80012e6:	f003 031f 	and.w	r3, r3, #31
 80012ea:	b25a      	sxtb	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	789b      	ldrb	r3, [r3, #2]
 80012f0:	015b      	lsls	r3, r3, #5
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 80012fc:	7d7b      	ldrb	r3, [r7, #21]
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	f023 031c 	bic.w	r3, r3, #28
 8001304:	b25a      	sxtb	r2, r3
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	791b      	ldrb	r3, [r3, #4]
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	b25b      	sxtb	r3, r3
 800130e:	f003 031c 	and.w	r3, r3, #28
 8001312:	b25b      	sxtb	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b25b      	sxtb	r3, r3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 800131c:	7d7b      	ldrb	r3, [r7, #21]
 800131e:	b25b      	sxtb	r3, r3
 8001320:	f023 0301 	bic.w	r3, r3, #1
 8001324:	b25a      	sxtb	r2, r3
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	795b      	ldrb	r3, [r3, #5]
 800132a:	b25b      	sxtb	r3, r3
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	b25b      	sxtb	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	b25b      	sxtb	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 800133a:	f107 0114 	add.w	r1, r7, #20
 800133e:	f107 0010 	add.w	r0, r7, #16
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2202      	movs	r2, #2
 8001346:	f7ff fccc 	bl	8000ce2 <bmp2_set_regs>
 800134a:	4603      	mov	r3, r0
 800134c:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 800134e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d120      	bne.n	8001398 <conf_sensor+0x10c>
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d01d      	beq.n	8001398 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 8001362:	7d3b      	ldrb	r3, [r7, #20]
 8001364:	b25b      	sxtb	r3, r3
 8001366:	f023 0303 	bic.w	r3, r3, #3
 800136a:	b25a      	sxtb	r2, r3
 800136c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	b25b      	sxtb	r3, r3
 8001376:	4313      	orrs	r3, r2
 8001378:	b25b      	sxtb	r3, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 800137e:	f107 0114 	add.w	r1, r7, #20
 8001382:	f107 0010 	add.w	r0, r7, #16
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	f7ff fcaa 	bl	8000ce2 <bmp2_set_regs>
 800138e:	4603      	mov	r3, r0
 8001390:	75fb      	strb	r3, [r7, #23]
 8001392:	e001      	b.n	8001398 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001394:	23ff      	movs	r3, #255	; 0xff
 8001396:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001398:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	78db      	ldrb	r3, [r3, #3]
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	f200 808b 	bhi.w	80014ce <set_os_mode+0x12a>
 80013b8:	a201      	add	r2, pc, #4	; (adr r2, 80013c0 <set_os_mode+0x1c>)
 80013ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013be:	bf00      	nop
 80013c0:	080013d5 	.word	0x080013d5
 80013c4:	08001407 	.word	0x08001407
 80013c8:	08001439 	.word	0x08001439
 80013cc:	0800146b 	.word	0x0800146b
 80013d0:	0800149d 	.word	0x0800149d
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	f043 0320 	orr.w	r3, r3, #32
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b25b      	sxtb	r3, r3
 80013f2:	f023 031c 	bic.w	r3, r3, #28
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	b25b      	sxtb	r3, r3
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	701a      	strb	r2, [r3, #0]
            break;
 8001404:	e064      	b.n	80014d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b25b      	sxtb	r3, r3
 800140c:	f003 031f 	and.w	r3, r3, #31
 8001410:	b25b      	sxtb	r3, r3
 8001412:	f043 0320 	orr.w	r3, r3, #32
 8001416:	b25b      	sxtb	r3, r3
 8001418:	b2da      	uxtb	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b25b      	sxtb	r3, r3
 8001424:	f023 031c 	bic.w	r3, r3, #28
 8001428:	b25b      	sxtb	r3, r3
 800142a:	f043 0308 	orr.w	r3, r3, #8
 800142e:	b25b      	sxtb	r3, r3
 8001430:	b2da      	uxtb	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	701a      	strb	r2, [r3, #0]
            break;
 8001436:	e04b      	b.n	80014d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b25b      	sxtb	r3, r3
 800143e:	f003 031f 	and.w	r3, r3, #31
 8001442:	b25b      	sxtb	r3, r3
 8001444:	f043 0320 	orr.w	r3, r3, #32
 8001448:	b25b      	sxtb	r3, r3
 800144a:	b2da      	uxtb	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b25b      	sxtb	r3, r3
 8001456:	f023 031c 	bic.w	r3, r3, #28
 800145a:	b25b      	sxtb	r3, r3
 800145c:	f043 030c 	orr.w	r3, r3, #12
 8001460:	b25b      	sxtb	r3, r3
 8001462:	b2da      	uxtb	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	701a      	strb	r2, [r3, #0]
            break;
 8001468:	e032      	b.n	80014d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	b25b      	sxtb	r3, r3
 8001470:	f003 031f 	and.w	r3, r3, #31
 8001474:	b25b      	sxtb	r3, r3
 8001476:	f043 0320 	orr.w	r3, r3, #32
 800147a:	b25b      	sxtb	r3, r3
 800147c:	b2da      	uxtb	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	b25b      	sxtb	r3, r3
 8001488:	f023 031c 	bic.w	r3, r3, #28
 800148c:	b25b      	sxtb	r3, r3
 800148e:	f043 0310 	orr.w	r3, r3, #16
 8001492:	b25b      	sxtb	r3, r3
 8001494:	b2da      	uxtb	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	701a      	strb	r2, [r3, #0]
            break;
 800149a:	e019      	b.n	80014d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	f003 031f 	and.w	r3, r3, #31
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ac:	b25b      	sxtb	r3, r3
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	f023 031c 	bic.w	r3, r3, #28
 80014be:	b25b      	sxtb	r3, r3
 80014c0:	f043 0314 	orr.w	r3, r3, #20
 80014c4:	b25b      	sxtb	r3, r3
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	701a      	strb	r2, [r3, #0]
            break;
 80014cc:	e000      	b.n	80014d0 <set_os_mode+0x12c>
        default:
            break;
 80014ce:	bf00      	nop
    }
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	031b      	lsls	r3, r3, #12
 80014ec:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3301      	adds	r3, #1
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3302      	adds	r3, #2
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	b2db      	uxtb	r3, r3
 8001502:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	431a      	orrs	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	431a      	orrs	r2, r3
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3303      	adds	r3, #3
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	031b      	lsls	r3, r3, #12
 800151a:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3304      	adds	r3, #4
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3305      	adds	r3, #5
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	091b      	lsrs	r3, r3, #4
 800152e:	b2db      	uxtb	r3, r3
 8001530:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	431a      	orrs	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4313      	orrs	r3, r2
 800153c:	461a      	mov	r2, r3
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	4619      	mov	r1, r3
 800154c:	4610      	mov	r0, r2
 800154e:	f000 fa33 	bl	80019b8 <st_check_boundaries>
 8001552:	4603      	mov	r3, r0
 8001554:	72fb      	strb	r3, [r7, #11]

    return rslt;
 8001556:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	0000      	movs	r0, r0
 8001564:	0000      	movs	r0, r0
	...

08001568 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001568:	b480      	push	{r7}
 800156a:	b08d      	sub	sp, #52	; 0x34
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001586:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 80016c0 <compensate_temperature+0x158>
 800158a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	8b9b      	ldrh	r3, [r3, #28]
 8001592:	ee07 3a90 	vmov	s15, r3
 8001596:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 800159a:	ed9f 4b4b 	vldr	d4, [pc, #300]	; 80016c8 <compensate_temperature+0x160>
 800159e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80015a2:	ee36 6b47 	vsub.f64	d6, d6, d7
           ((double) dev->calib_param.dig_t2);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80015b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015b8:	ed87 7b06 	vstr	d7, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	ee07 3a90 	vmov	s15, r3
 80015c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80015c8:	ed9f 5b41 	vldr	d5, [pc, #260]	; 80016d0 <compensate_temperature+0x168>
 80015cc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	8b9b      	ldrh	r3, [r3, #28]
 80015d4:	ee07 3a90 	vmov	s15, r3
 80015d8:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 80015dc:	ed9f 4b3e 	vldr	d4, [pc, #248]	; 80016d8 <compensate_temperature+0x170>
 80015e0:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80015e4:	ee36 6b47 	vsub.f64	d6, d6, d7
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	ee07 3a90 	vmov	s15, r3
 80015f0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80015f4:	ed9f 4b36 	vldr	d4, [pc, #216]	; 80016d0 <compensate_temperature+0x168>
 80015f8:	ee87 5b04 	vdiv.f64	d5, d7, d4
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	8b9b      	ldrh	r3, [r3, #28]
 8001600:	ee07 3a90 	vmov	s15, r3
 8001604:	eeb8 4b67 	vcvt.f64.u32	d4, s15
 8001608:	ed9f 3b33 	vldr	d3, [pc, #204]	; 80016d8 <compensate_temperature+0x170>
 800160c:	ee84 7b03 	vdiv.f64	d7, d4, d3
 8001610:	ee35 7b47 	vsub.f64	d7, d5, d7
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001614:	ee26 6b07 	vmul.f64	d6, d6, d7
        ((double) dev->calib_param.dig_t3);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    var2 =
 8001626:	ee26 7b07 	vmul.f64	d7, d6, d7
 800162a:	ed87 7b04 	vstr	d7, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 800162e:	ed97 6b06 	vldr	d6, [r7, #24]
 8001632:	ed97 7b04 	vldr	d7, [r7, #16]
 8001636:	ee36 7b07 	vadd.f64	d7, d6, d7
 800163a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800163e:	ee17 2a90 	vmov	r2, s15
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 8001646:	ed97 6b06 	vldr	d6, [r7, #24]
 800164a:	ed97 7b04 	vldr	d7, [r7, #16]
 800164e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001652:	ed9f 5b23 	vldr	d5, [pc, #140]	; 80016e0 <compensate_temperature+0x178>
 8001656:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800165a:	ed87 7b08 	vstr	d7, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 800165e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001662:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80016e8 <compensate_temperature+0x180>
 8001666:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800166a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166e:	d507      	bpl.n	8001680 <compensate_temperature+0x118>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <compensate_temperature+0x190>)
 8001676:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 800167a:	2301      	movs	r3, #1
 800167c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001680:	ed97 7b08 	vldr	d7, [r7, #32]
 8001684:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80016f0 <compensate_temperature+0x188>
 8001688:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800168c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001690:	dd07      	ble.n	80016a2 <compensate_temperature+0x13a>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	4b19      	ldr	r3, [pc, #100]	; (80016fc <compensate_temperature+0x194>)
 8001698:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 800169c:	2302      	movs	r3, #2
 800169e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 80016a2:	68f9      	ldr	r1, [r7, #12]
 80016a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016a8:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 80016ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3734      	adds	r7, #52	; 0x34
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	f3af 8000 	nop.w
 80016c0:	00000000 	.word	0x00000000
 80016c4:	40d00000 	.word	0x40d00000
 80016c8:	00000000 	.word	0x00000000
 80016cc:	40900000 	.word	0x40900000
 80016d0:	00000000 	.word	0x00000000
 80016d4:	41000000 	.word	0x41000000
 80016d8:	00000000 	.word	0x00000000
 80016dc:	40c00000 	.word	0x40c00000
 80016e0:	00000000 	.word	0x00000000
 80016e4:	40b40000 	.word	0x40b40000
 80016e8:	00000000 	.word	0x00000000
 80016ec:	c0440000 	.word	0xc0440000
 80016f0:	00000000 	.word	0x00000000
 80016f4:	40554000 	.word	0x40554000
 80016f8:	c0440000 	.word	0xc0440000
 80016fc:	40554000 	.word	0x40554000

08001700 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001700:	b480      	push	{r7}
 8001702:	b08d      	sub	sp, #52	; 0x34
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001722:	ee07 3a90 	vmov	s15, r3
 8001726:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800172a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800172e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001732:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8001968 <compensate_pressure+0x268>
 8001736:	ee37 7b46 	vsub.f64	d7, d7, d6
 800173a:	ed87 7b06 	vstr	d7, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 800173e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001742:	ee27 6b07 	vmul.f64	d6, d7, d7
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001754:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001758:	ed9f 5b85 	vldr	d5, [pc, #532]	; 8001970 <compensate_pressure+0x270>
 800175c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001760:	ed87 7b04 	vstr	d7, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001772:	ed97 7b06 	vldr	d7, [r7, #24]
 8001776:	ee26 7b07 	vmul.f64	d7, d6, d7
 800177a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800177e:	ed97 6b04 	vldr	d6, [r7, #16]
 8001782:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001786:	ed87 7b04 	vstr	d7, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 800178a:	ed97 7b04 	vldr	d7, [r7, #16]
 800178e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001792:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800179c:	ee07 3a90 	vmov	s15, r3
 80017a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80017a4:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8001978 <compensate_pressure+0x278>
 80017a8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80017ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017b0:	ed87 7b04 	vstr	d7, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80017c2:	ed97 7b06 	vldr	d7, [r7, #24]
 80017c6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80017ca:	ed97 7b06 	vldr	d7, [r7, #24]
 80017ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017d2:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8001980 <compensate_pressure+0x280>
 80017d6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80017e0:	ee07 3a90 	vmov	s15, r3
 80017e4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80017e8:	ed97 7b06 	vldr	d7, [r7, #24]
 80017ec:	ee25 7b07 	vmul.f64	d7, d5, d7
 80017f0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80017f4:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8001980 <compensate_pressure+0x280>
 80017f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017fc:	ed87 7b06 	vstr	d7, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001800:	ed97 6b06 	vldr	d6, [r7, #24]
 8001804:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 8001970 <compensate_pressure+0x270>
 8001808:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800180c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001810:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001818:	ee07 3a90 	vmov	s15, r3
 800181c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001820:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001824:	ed87 7b06 	vstr	d7, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001828:	ed97 7b06 	vldr	d7, [r7, #24]
 800182c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001834:	d407      	bmi.n	8001846 <compensate_pressure+0x146>
 8001836:	ed97 7b06 	vldr	d7, [r7, #24]
 800183a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800183e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001842:	f340 8086 	ble.w	8001952 <compensate_pressure+0x252>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001852:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8001988 <compensate_pressure+0x288>
 8001856:	ee36 7b47 	vsub.f64	d7, d6, d7
 800185a:	ed87 7b08 	vstr	d7, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 800185e:	ed97 6b04 	vldr	d6, [r7, #16]
 8001862:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 8001990 <compensate_pressure+0x290>
 8001866:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800186a:	ed97 6b08 	vldr	d6, [r7, #32]
 800186e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001872:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8001998 <compensate_pressure+0x298>
 8001876:	ee27 5b06 	vmul.f64	d5, d7, d6
 800187a:	ed97 6b06 	vldr	d6, [r7, #24]
 800187e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001882:	ed87 7b08 	vstr	d7, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001894:	ed97 7b08 	vldr	d7, [r7, #32]
 8001898:	ee26 6b07 	vmul.f64	d6, d6, d7
 800189c:	ed97 7b08 	vldr	d7, [r7, #32]
 80018a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80018a4:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 80019a0 <compensate_pressure+0x2a0>
 80018a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018ac:	ed87 7b06 	vstr	d7, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80018b6:	ee07 3a90 	vmov	s15, r3
 80018ba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018be:	ed97 7b08 	vldr	d7, [r7, #32]
 80018c2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80018c6:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8001970 <compensate_pressure+0x270>
 80018ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018ce:	ed87 7b04 	vstr	d7, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 80018d2:	ed97 6b06 	vldr	d6, [r7, #24]
 80018d6:	ed97 7b04 	vldr	d7, [r7, #16]
 80018da:	ee36 6b07 	vadd.f64	d6, d6, d7
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80018e4:	ee07 3a90 	vmov	s15, r3
 80018e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80018ec:	ee36 6b07 	vadd.f64	d6, d6, d7
 80018f0:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 80018f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018f8:	ed97 6b08 	vldr	d6, [r7, #32]
 80018fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001900:	ed87 7b08 	vstr	d7, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001904:	ed97 7b08 	vldr	d7, [r7, #32]
 8001908:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80019a8 <compensate_pressure+0x2a8>
 800190c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001914:	d507      	bpl.n	8001926 <compensate_pressure+0x226>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001916:	a324      	add	r3, pc, #144	; (adr r3, 80019a8 <compensate_pressure+0x2a8>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001920:	2303      	movs	r3, #3
 8001922:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001926:	ed97 7b08 	vldr	d7, [r7, #32]
 800192a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80019b0 <compensate_pressure+0x2b0>
 800192e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001936:	dd07      	ble.n	8001948 <compensate_pressure+0x248>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001938:	a31d      	add	r3, pc, #116	; (adr r3, 80019b0 <compensate_pressure+0x2b0>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001942:	2304      	movs	r3, #4
 8001944:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 8001948:	68f9      	ldr	r1, [r7, #12]
 800194a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800194e:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001952:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001956:	4618      	mov	r0, r3
 8001958:	3734      	adds	r7, #52	; 0x34
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	f3af 8000 	nop.w
 8001968:	00000000 	.word	0x00000000
 800196c:	40ef4000 	.word	0x40ef4000
 8001970:	00000000 	.word	0x00000000
 8001974:	40e00000 	.word	0x40e00000
 8001978:	00000000 	.word	0x00000000
 800197c:	40f00000 	.word	0x40f00000
 8001980:	00000000 	.word	0x00000000
 8001984:	41200000 	.word	0x41200000
 8001988:	00000000 	.word	0x00000000
 800198c:	41300000 	.word	0x41300000
 8001990:	00000000 	.word	0x00000000
 8001994:	40b00000 	.word	0x40b00000
 8001998:	00000000 	.word	0x00000000
 800199c:	40b86a00 	.word	0x40b86a00
 80019a0:	00000000 	.word	0x00000000
 80019a4:	41e00000 	.word	0x41e00000
 80019a8:	00000000 	.word	0x00000000
 80019ac:	40dd4c00 	.word	0x40dd4c00
 80019b0:	00000000 	.word	0x00000000
 80019b4:	40fadb00 	.word	0x40fadb00

080019b8 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	db03      	blt.n	80019d4 <st_check_boundaries+0x1c>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	4a1c      	ldr	r2, [pc, #112]	; (8001a40 <st_check_boundaries+0x88>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	dd09      	ble.n	80019e8 <st_check_boundaries+0x30>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db06      	blt.n	80019e8 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a18      	ldr	r2, [pc, #96]	; (8001a40 <st_check_boundaries+0x88>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	dc02      	bgt.n	80019e8 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 80019e2:	23fa      	movs	r3, #250	; 0xfa
 80019e4:	73fb      	strb	r3, [r7, #15]
 80019e6:	e023      	b.n	8001a30 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db03      	blt.n	80019f6 <st_check_boundaries+0x3e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a13      	ldr	r2, [pc, #76]	; (8001a40 <st_check_boundaries+0x88>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	dd09      	ble.n	8001a0a <st_check_boundaries+0x52>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	db06      	blt.n	8001a0a <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <st_check_boundaries+0x88>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	dc02      	bgt.n	8001a0a <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001a04:	23fb      	movs	r3, #251	; 0xfb
 8001a06:	73fb      	strb	r3, [r7, #15]
 8001a08:	e012      	b.n	8001a30 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db03      	blt.n	8001a18 <st_check_boundaries+0x60>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	4a0b      	ldr	r2, [pc, #44]	; (8001a40 <st_check_boundaries+0x88>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	dd09      	ble.n	8001a2c <st_check_boundaries+0x74>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	db03      	blt.n	8001a26 <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <st_check_boundaries+0x88>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	dd02      	ble.n	8001a2c <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001a26:	23f9      	movs	r3, #249	; 0xf9
 8001a28:	73fb      	strb	r3, [r7, #15]
 8001a2a:	e001      	b.n	8001a30 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	000ffff0 	.word	0x000ffff0

08001a44 <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff f8e5 	bl	8000c1c <bmp2_init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff f9ca 	bl	8000df6 <bmp2_get_config>
 8001a62:	4603      	mov	r3, r0
 8001a64:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_OFF;
 8001a66:	2300      	movs	r3, #0
 8001a68:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001a72:	f107 0308 	add.w	r3, r7, #8
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff f9fc 	bl	8000e76 <bmp2_set_config>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	2003      	movs	r0, #3
 8001a8c:	f7ff fa2e 	bl	8000eec <bmp2_set_power_mode>
 8001a90:	4603      	mov	r3, r0
 8001a92:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001a94:	f107 0108 	add.w	r1, r7, #8
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fab8 	bl	8001014 <bmp2_compute_meas_time>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001aa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b096      	sub	sp, #88	; 0x58
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint8_t txarray[BMP2_SPI_BUFFER_LEN] = {0,};
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	633b      	str	r3, [r7, #48]	; 0x30
 8001ad4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
 8001ae4:	615a      	str	r2, [r3, #20]
  uint8_t rxarray[BMP2_SPI_BUFFER_LEN] = {0,};
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	f107 0318 	add.w	r3, r7, #24
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
 8001af8:	611a      	str	r2, [r3, #16]
 8001afa:	615a      	str	r2, [r3, #20]
  uint8_t cs = *(uint8_t*)intf_ptr;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8001b04:	7bfb      	ldrb	r3, [r7, #15]

  /* Copy selected register address to transmit buffer */
  memcpy(&txarray[BMP2_REG_ADDR_INDEX],  &reg_addr,  BMP2_REG_ADDR_LEN);
 8001b06:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(BMP2_CS_Ports[cs], BMP2_CS_Pins[cs], GPIO_PIN_RESET);
 8001b0a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001b0e:	4a26      	ldr	r2, [pc, #152]	; (8001ba8 <bmp2_spi_read+0xf4>)
 8001b10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b14:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001b18:	4a24      	ldr	r2, [pc, #144]	; (8001bac <bmp2_spi_read+0xf8>)
 8001b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	4619      	mov	r1, r3
 8001b22:	f001 fcd1 	bl	80034c8 <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_TransmitReceive(BMP2_SPI, (uint8_t*)(&txarray), (uint8_t*)(&rxarray), length+BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	f107 0214 	add.w	r2, r7, #20
 8001b32:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001b36:	2005      	movs	r0, #5
 8001b38:	9000      	str	r0, [sp, #0]
 8001b3a:	481d      	ldr	r0, [pc, #116]	; (8001bb0 <bmp2_spi_read+0xfc>)
 8001b3c:	f003 f977 	bl	8004e2e <HAL_SPI_TransmitReceive>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001b4c:	e012      	b.n	8001b74 <bmp2_spi_read+0xc0>
  {
    HAL_GPIO_WritePin(BMP2_CS_Ports[i], BMP2_CS_Pins[i], GPIO_PIN_SET);
 8001b4e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001b52:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <bmp2_spi_read+0xf4>)
 8001b54:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b58:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001b5c:	4a13      	ldr	r2, [pc, #76]	; (8001bac <bmp2_spi_read+0xf8>)
 8001b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b62:	2201      	movs	r2, #1
 8001b64:	4619      	mov	r1, r3
 8001b66:	f001 fcaf 	bl	80034c8 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001b6a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001b6e:	3301      	adds	r3, #1
 8001b70:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001b74:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d9e8      	bls.n	8001b4e <bmp2_spi_read+0x9a>
  }

  if (status != HAL_OK)
 8001b7c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <bmp2_spi_read+0xd6>
  {
    // The BME2xx API calls for 0 return value as a success, and -1 returned as failure
    iError = (-1);
 8001b84:	23ff      	movs	r3, #255	; 0xff
 8001b86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  /* Copy data content from receive buffer */
  memcpy(reg_data, &rxarray[BMP2_DATA_INDEX], length);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	3301      	adds	r3, #1
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	4619      	mov	r1, r3
 8001b94:	68b8      	ldr	r0, [r7, #8]
 8001b96:	f006 fb7f 	bl	8008298 <memcpy>

  return iError;
 8001b9a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3750      	adds	r7, #80	; 0x50
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000004 	.word	0x20000004
 8001bac:	2000000c 	.word	0x2000000c
 8001bb0:	200007b0 	.word	0x200007b0

08001bb4 <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08c      	sub	sp, #48	; 0x30
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t txarray[BMP2_SPI_BUFFER_LEN] = {0,};
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
 8001be4:	615a      	str	r2, [r3, #20]
  uint8_t cs = *(uint8_t*)intf_ptr;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001bee:	7bfb      	ldrb	r3, [r7, #15]

  /* Copy selected register address and data content to transmit buffer */
  memcpy(&txarray[BMP2_REG_ADDR_INDEX],  &reg_addr,  BMP2_REG_ADDR_LEN);
 8001bf0:	743b      	strb	r3, [r7, #16]
  memcpy(&txarray[BMP2_DATA_INDEX],       reg_data,  length);
 8001bf2:	f107 0310 	add.w	r3, r7, #16
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	68b9      	ldr	r1, [r7, #8]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f006 fb4b 	bl	8008298 <memcpy>

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(BMP2_CS_Ports[cs], BMP2_CS_Pins[cs], GPIO_PIN_RESET);
 8001c02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c06:	4a20      	ldr	r2, [pc, #128]	; (8001c88 <bmp2_spi_write+0xd4>)
 8001c08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c10:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <bmp2_spi_write+0xd8>)
 8001c12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c16:	2200      	movs	r2, #0
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f001 fc55 	bl	80034c8 <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_Transmit(BMP2_SPI, (uint8_t*)(&txarray), length+BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3301      	adds	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	f107 0110 	add.w	r1, r7, #16
 8001c2a:	2305      	movs	r3, #5
 8001c2c:	4818      	ldr	r0, [pc, #96]	; (8001c90 <bmp2_spi_write+0xdc>)
 8001c2e:	f002 ff90 	bl	8004b52 <HAL_SPI_Transmit>
 8001c32:	4603      	mov	r3, r0
 8001c34:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001c3e:	e012      	b.n	8001c66 <bmp2_spi_write+0xb2>
  {
    HAL_GPIO_WritePin(BMP2_CS_Ports[i], BMP2_CS_Pins[i], GPIO_PIN_SET);
 8001c40:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001c44:	4a10      	ldr	r2, [pc, #64]	; (8001c88 <bmp2_spi_write+0xd4>)
 8001c46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001c4e:	4a0f      	ldr	r2, [pc, #60]	; (8001c8c <bmp2_spi_write+0xd8>)
 8001c50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c54:	2201      	movs	r2, #1
 8001c56:	4619      	mov	r1, r3
 8001c58:	f001 fc36 	bl	80034c8 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001c5c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001c60:	3301      	adds	r3, #1
 8001c62:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001c66:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d9e8      	bls.n	8001c40 <bmp2_spi_write+0x8c>
  }

  if (status != HAL_OK)
 8001c6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <bmp2_spi_write+0xc8>
  {
    // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
    iError = (-1);
 8001c76:	23ff      	movs	r3, #255	; 0xff
 8001c78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return iError;
 8001c7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3730      	adds	r7, #48	; 0x30
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000004 	.word	0x20000004
 8001c8c:	2000000c 	.word	0x2000000c
 8001c90:	200007b0 	.word	0x200007b0

08001c94 <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <bmp2_delay_us+0x24>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	099b      	lsrs	r3, r3, #6
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f001 f899 	bl	8002de0 <HAL_Delay>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	10624dd3 	.word	0x10624dd3

08001cbc <BMP2_ReadTemperature_degC>:
 *  @param[in]  dev   : BMP2xx device structure
 *
 *  @return Temperature measurement [degC]
 */
double BMP2_ReadTemperature_degC(struct bmp2_dev *dev)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08c      	sub	sp, #48	; 0x30
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMP2_E_NULL_PTR;
 8001cc4:	23ff      	movs	r3, #255	; 0xff
 8001cc6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    struct bmp2_status status;
    struct bmp2_data comp_data;
    double temp = -1.0;
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <BMP2_ReadTemperature_degC+0x78>)
 8001cd0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int8_t try = 10;
 8001cd4:	230a      	movs	r3, #10
 8001cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    do {
      /* Read sensor status */
      rslt = bmp2_get_status(&status, dev);
 8001cda:	f107 031c 	add.w	r3, r7, #28
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff f8d7 	bl	8000e94 <bmp2_get_status>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      /* Read compensated data */
      rslt = bmp2_get_sensor_data(&comp_data, dev);
 8001cec:	f107 0308 	add.w	r3, r7, #8
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff f90f 	bl	8000f16 <bmp2_get_sensor_data>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      temp = comp_data.temperature;
 8001cfe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d02:	e9c7 2308 	strd	r2, r3, [r7, #32]
      try--;
 8001d06:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8001d14:	7f3b      	ldrb	r3, [r7, #28]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <BMP2_ReadTemperature_degC+0x66>
 8001d1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	dcdb      	bgt.n	8001cda <BMP2_ReadTemperature_degC+0x1e>

    return temp;
 8001d22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d26:	ec43 2b17 	vmov	d7, r2, r3
//
//	  /* Calculate measurement time in microseconds */
//	  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
//
//	  return rslt;
}
 8001d2a:	eeb0 0b47 	vmov.f64	d0, d7
 8001d2e:	3730      	adds	r7, #48	; 0x30
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	bff00000 	.word	0xbff00000

08001d38 <LINEAR_TRANSFORM>:
#include "common.h"
#include <math.h>
#include "arm_math.h"
#include "math_helper.h"

float32_t LINEAR_TRANSFORM(float32_t x, float32_t amin,float32_t amax, float32_t bmin, float32_t bmax){
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001d42:	edc7 0a04 	vstr	s1, [r7, #16]
 8001d46:	ed87 1a03 	vstr	s2, [r7, #12]
 8001d4a:	edc7 1a02 	vstr	s3, [r7, #8]
 8001d4e:	ed87 2a01 	vstr	s4, [r7, #4]
	if(x>=amin && x<=amax){
 8001d52:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d56:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	db23      	blt.n	8001dac <LINEAR_TRANSFORM+0x74>
 8001d64:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d68:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d74:	d81a      	bhi.n	8001dac <LINEAR_TRANSFORM+0x74>
	return (((x-amin)/(amax-amin))*(bmax-bmin)+bmin);
 8001d76:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d7e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d82:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d86:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d92:	edd7 6a01 	vldr	s13, [r7, #4]
 8001d96:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d9a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001da2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001daa:	e017      	b.n	8001ddc <LINEAR_TRANSFORM+0xa4>
	}
	if(x>amax){
 8001dac:	ed97 7a05 	vldr	s14, [r7, #20]
 8001db0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001db4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbc:	dd02      	ble.n	8001dc4 <LINEAR_TRANSFORM+0x8c>
		return bmax;
 8001dbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dc2:	e00b      	b.n	8001ddc <LINEAR_TRANSFORM+0xa4>
	}
	if(x<amin){
 8001dc4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd4:	d502      	bpl.n	8001ddc <LINEAR_TRANSFORM+0xa4>
		return bmin;
 8001dd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dda:	e7ff      	b.n	8001ddc <LINEAR_TRANSFORM+0xa4>
	}
}
 8001ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8001de0:	371c      	adds	r7, #28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <Steering__temp>:
float32_t control_signal =0;
float32_t lin_con_sig =0;
float32_t diff_temp=0;


void Steering__temp (float duty_cycle){
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	ed87 0a01 	vstr	s0, [r7, #4]
	if (duty_cycle >=0){
 8001df6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e02:	da00      	bge.n	8001e06 <Steering__temp+0x1a>
					duty_cycle = 0;
				}

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, duty_cycle*10.0);
	}
}
 8001e04:	e023      	b.n	8001e4e <Steering__temp+0x62>
		if (duty_cycle >60){
 8001e06:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e0a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001e5c <Steering__temp+0x70>
 8001e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e16:	dd01      	ble.n	8001e1c <Steering__temp+0x30>
			duty_cycle = 60;
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <Steering__temp+0x74>)
 8001e1a:	607b      	str	r3, [r7, #4]
		if (duty_cycle <0){
 8001e1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e28:	d502      	bpl.n	8001e30 <Steering__temp+0x44>
					duty_cycle = 0;
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	607b      	str	r3, [r7, #4]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, duty_cycle*10.0);
 8001e30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e38:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8001e3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e40:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <Steering__temp+0x78>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e48:	ee17 2a90 	vmov	r2, s15
 8001e4c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	42700000 	.word	0x42700000
 8001e60:	42700000 	.word	0x42700000
 8001e64:	20000274 	.word	0x20000274

08001e68 <Steering_fan>:

void Steering_fan (int duty_cycle){
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, duty_cycle*10);
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <Steering_fan+0x28>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000274 	.word	0x20000274

08001e94 <HAL_UART_RxCpltCallback>:



char received_message[5]="";
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

HAL_UART_Receive_IT(&huart3, (uint8_t*)received_message, 5);
 8001e9c:	2205      	movs	r2, #5
 8001e9e:	4906      	ldr	r1, [pc, #24]	; (8001eb8 <HAL_UART_RxCpltCallback+0x24>)
 8001ea0:	4806      	ldr	r0, [pc, #24]	; (8001ebc <HAL_UART_RxCpltCallback+0x28>)
 8001ea2:	f004 fc8e 	bl	80067c2 <HAL_UART_Receive_IT>
sscanf(received_message, "%f", &stemp);
 8001ea6:	4a06      	ldr	r2, [pc, #24]	; (8001ec0 <HAL_UART_RxCpltCallback+0x2c>)
 8001ea8:	4906      	ldr	r1, [pc, #24]	; (8001ec4 <HAL_UART_RxCpltCallback+0x30>)
 8001eaa:	4803      	ldr	r0, [pc, #12]	; (8001eb8 <HAL_UART_RxCpltCallback+0x24>)
 8001eac:	f007 f878 	bl	8008fa0 <siscanf>


}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	2000025c 	.word	0x2000025c
 8001ebc:	200002c0 	.word	0x200002c0
 8001ec0:	2000004c 	.word	0x2000004c
 8001ec4:	0800d214 	.word	0x0800d214

08001ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b094      	sub	sp, #80	; 0x50
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	arm_pid_instance_f32 myp_PID;


	myp_PID.Kp = 200;  //100
 8001ece:	4b88      	ldr	r3, [pc, #544]	; (80020f0 <main+0x228>)
 8001ed0:	63bb      	str	r3, [r7, #56]	; 0x38
	myp_PID.Ki =0.5; //10
 8001ed2:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
	myp_PID.Kd = 00.00000000000000000000000001; //0.01
 8001ed8:	4b86      	ldr	r3, [pc, #536]	; (80020f4 <main+0x22c>)
 8001eda:	643b      	str	r3, [r7, #64]	; 0x40
	arm_pid_init_f32(&myp_PID, 1);
 8001edc:	f107 0320 	add.w	r3, r7, #32
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f006 f990 	bl	8008208 <arm_pid_init_f32>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ee8:	f000 ff1d 	bl	8002d26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eec:	f000 f92e 	bl	800214c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ef0:	f000 fb38 	bl	8002564 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001ef4:	f000 fad8 	bl	80024a8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001ef8:	f000 fb06 	bl	8002508 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8001efc:	f000 f9fe 	bl	80022fc <MX_TIM3_Init>
  MX_SPI4_Init();
 8001f00:	f000 f9be 	bl	8002280 <MX_SPI4_Init>
  MX_TIM4_Init();
 8001f04:	f000 fa48 	bl	8002398 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8001f08:	487b      	ldr	r0, [pc, #492]	; (80020f8 <main+0x230>)
 8001f0a:	f003 fb83 	bl	8005614 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8001f0e:	487b      	ldr	r0, [pc, #492]	; (80020fc <main+0x234>)
 8001f10:	f003 fb80 	bl	8005614 <HAL_TIM_Base_Start>
  Lcd_init();
 8001f14:	f7fe fe25 	bl	8000b62 <Lcd_init>

  BMP2_Init(&hbmp2_1);
 8001f18:	4879      	ldr	r0, [pc, #484]	; (8002100 <main+0x238>)
 8001f1a:	f7ff fd93 	bl	8001a44 <BMP2_Init>

  HAL_UART_Receive_IT(&huart3, (uint8_t*)received_message, 5);
 8001f1e:	2205      	movs	r2, #5
 8001f20:	4978      	ldr	r1, [pc, #480]	; (8002104 <main+0x23c>)
 8001f22:	4879      	ldr	r0, [pc, #484]	; (8002108 <main+0x240>)
 8001f24:	f004 fc4d 	bl	80067c2 <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8001f28:	2108      	movs	r1, #8
 8001f2a:	4874      	ldr	r0, [pc, #464]	; (80020fc <main+0x234>)
 8001f2c:	f003 fc44 	bl	80057b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8001f30:	210c      	movs	r1, #12
 8001f32:	4872      	ldr	r0, [pc, #456]	; (80020fc <main+0x234>)
 8001f34:	f003 fc40 	bl	80057b8 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  temp =  BMP2_ReadTemperature_degC(&hbmp2_1);
 8001f38:	4871      	ldr	r0, [pc, #452]	; (8002100 <main+0x238>)
 8001f3a:	f7ff febf 	bl	8001cbc <BMP2_ReadTemperature_degC>
 8001f3e:	eeb0 7b40 	vmov.f64	d7, d0
 8001f42:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f46:	4b71      	ldr	r3, [pc, #452]	; (800210c <main+0x244>)
 8001f48:	edc3 7a00 	vstr	s15, [r3]
	  char data_msg[32];
	  n = sprintf(data_msg, "Temp: %4.02f \r\n", (float)temp);
 8001f4c:	4b6f      	ldr	r3, [pc, #444]	; (800210c <main+0x244>)
 8001f4e:	edd3 7a00 	vldr	s15, [r3]
 8001f52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f56:	4638      	mov	r0, r7
 8001f58:	ec53 2b17 	vmov	r2, r3, d7
 8001f5c:	496c      	ldr	r1, [pc, #432]	; (8002110 <main+0x248>)
 8001f5e:	f006 ffff 	bl	8008f60 <siprintf>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4a6b      	ldr	r2, [pc, #428]	; (8002114 <main+0x24c>)
 8001f66:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t*)data_msg, n, 0xffff);
 8001f68:	4b6a      	ldr	r3, [pc, #424]	; (8002114 <main+0x24c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	4639      	mov	r1, r7
 8001f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f74:	4864      	ldr	r0, [pc, #400]	; (8002108 <main+0x240>)
 8001f76:	f004 fb91 	bl	800669c <HAL_UART_Transmit>


	  Lcd_clear();
 8001f7a:	f7fe fdc9 	bl	8000b10 <Lcd_clear>
	  Lcd_put_cur(0, 0);
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2000      	movs	r0, #0
 8001f82:	f7fe fdcf 	bl	8000b24 <Lcd_put_cur>

	  sprintf (buffer,"Set temp = %4.02f", stemp);
 8001f86:	4b64      	ldr	r3, [pc, #400]	; (8002118 <main+0x250>)
 8001f88:	edd3 7a00 	vldr	s15, [r3]
 8001f8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f90:	ec53 2b17 	vmov	r2, r3, d7
 8001f94:	4961      	ldr	r1, [pc, #388]	; (800211c <main+0x254>)
 8001f96:	4862      	ldr	r0, [pc, #392]	; (8002120 <main+0x258>)
 8001f98:	f006 ffe2 	bl	8008f60 <siprintf>
	  Lcd_send_string(buffer);
 8001f9c:	4860      	ldr	r0, [pc, #384]	; (8002120 <main+0x258>)
 8001f9e:	f7fe fe1d 	bl	8000bdc <Lcd_send_string>


	  Lcd_put_cur(1, 0);
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f7fe fdbd 	bl	8000b24 <Lcd_put_cur>



	  //PID

	  diff_temp = stemp-temp;
 8001faa:	4b5b      	ldr	r3, [pc, #364]	; (8002118 <main+0x250>)
 8001fac:	ed93 7a00 	vldr	s14, [r3]
 8001fb0:	4b56      	ldr	r3, [pc, #344]	; (800210c <main+0x244>)
 8001fb2:	edd3 7a00 	vldr	s15, [r3]
 8001fb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fba:	4b5a      	ldr	r3, [pc, #360]	; (8002124 <main+0x25c>)
 8001fbc:	edc3 7a00 	vstr	s15, [r3]

	  if(diff_temp<-0.15){
 8001fc0:	4b58      	ldr	r3, [pc, #352]	; (8002124 <main+0x25c>)
 8001fc2:	edd3 7a00 	vldr	s15, [r3]
 8001fc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fca:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80020e8 <main+0x220>
 8001fce:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd6:	d502      	bpl.n	8001fde <main+0x116>
		  Steering_fan(100);
 8001fd8:	2064      	movs	r0, #100	; 0x64
 8001fda:	f7ff ff45 	bl	8001e68 <Steering_fan>
	  }



	  if(diff_temp>-0.15){
 8001fde:	4b51      	ldr	r3, [pc, #324]	; (8002124 <main+0x25c>)
 8001fe0:	edd3 7a00 	vldr	s15, [r3]
 8001fe4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fe8:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 80020e8 <main+0x220>
 8001fec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff4:	dd02      	ble.n	8001ffc <main+0x134>
	  	  		  Steering_fan(0);
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f7ff ff36 	bl	8001e68 <Steering_fan>
	  	  	  }


	  control_signal = 2000 +arm_pid_f32(&myp_PID, diff_temp);
 8001ffc:	4b49      	ldr	r3, [pc, #292]	; (8002124 <main+0x25c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f107 0220 	add.w	r2, r7, #32
 8002004:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002006:	64bb      	str	r3, [r7, #72]	; 0x48
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800200a:	ed93 7a00 	vldr	s14, [r3]
 800200e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002012:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002018:	edd3 6a01 	vldr	s13, [r3, #4]
 800201c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800201e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002022:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002026:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800202a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800202c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002032:	edd3 7a04 	vldr	s15, [r3, #16]
 8002036:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800203a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800203e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002040:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002048:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

    /* Update state */
    S->state[1] = S->state[0];
 800204c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002052:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002058:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800205a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800205c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800205e:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8002060:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002064:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002128 <main+0x260>
 8002068:	ee77 7a87 	vadd.f32	s15, s15, s14
 800206c:	4b2f      	ldr	r3, [pc, #188]	; (800212c <main+0x264>)
 800206e:	edc3 7a00 	vstr	s15, [r3]





	  lin_con_sig = LINEAR_TRANSFORM(control_signal,0,5000,0,60);
 8002072:	4b2e      	ldr	r3, [pc, #184]	; (800212c <main+0x264>)
 8002074:	edd3 7a00 	vldr	s15, [r3]
 8002078:	ed9f 2a2d 	vldr	s4, [pc, #180]	; 8002130 <main+0x268>
 800207c:	eddf 1a2d 	vldr	s3, [pc, #180]	; 8002134 <main+0x26c>
 8002080:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8002138 <main+0x270>
 8002084:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8002134 <main+0x26c>
 8002088:	eeb0 0a67 	vmov.f32	s0, s15
 800208c:	f7ff fe54 	bl	8001d38 <LINEAR_TRANSFORM>
 8002090:	eef0 7a40 	vmov.f32	s15, s0
 8002094:	4b29      	ldr	r3, [pc, #164]	; (800213c <main+0x274>)
 8002096:	edc3 7a00 	vstr	s15, [r3]


		  Steering__temp(lin_con_sig);
 800209a:	4b28      	ldr	r3, [pc, #160]	; (800213c <main+0x274>)
 800209c:	edd3 7a00 	vldr	s15, [r3]
 80020a0:	eeb0 0a67 	vmov.f32	s0, s15
 80020a4:	f7ff fea2 	bl	8001dec <Steering__temp>



	  sprintf (buffer1,"Act temp = %4.02f", (float)temp);
 80020a8:	4b18      	ldr	r3, [pc, #96]	; (800210c <main+0x244>)
 80020aa:	edd3 7a00 	vldr	s15, [r3]
 80020ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020b2:	ec53 2b17 	vmov	r2, r3, d7
 80020b6:	4922      	ldr	r1, [pc, #136]	; (8002140 <main+0x278>)
 80020b8:	4822      	ldr	r0, [pc, #136]	; (8002144 <main+0x27c>)
 80020ba:	f006 ff51 	bl	8008f60 <siprintf>
	  i++;
 80020be:	4b22      	ldr	r3, [pc, #136]	; (8002148 <main+0x280>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	3301      	adds	r3, #1
 80020c4:	4a20      	ldr	r2, [pc, #128]	; (8002148 <main+0x280>)
 80020c6:	6013      	str	r3, [r2, #0]
	  if (i >2){
 80020c8:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <main+0x280>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	dd02      	ble.n	80020d6 <main+0x20e>
		  i =0;
 80020d0:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <main+0x280>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
	  }

	  Lcd_send_string(buffer1);
 80020d6:	481b      	ldr	r0, [pc, #108]	; (8002144 <main+0x27c>)
 80020d8:	f7fe fd80 	bl	8000bdc <Lcd_send_string>
	  HAL_Delay(400);
 80020dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80020e0:	f000 fe7e 	bl	8002de0 <HAL_Delay>
  {
 80020e4:	e728      	b.n	8001f38 <main+0x70>
 80020e6:	bf00      	nop
 80020e8:	33333333 	.word	0x33333333
 80020ec:	bfc33333 	.word	0xbfc33333
 80020f0:	43480000 	.word	0x43480000
 80020f4:	14461206 	.word	0x14461206
 80020f8:	2000074c 	.word	0x2000074c
 80020fc:	20000274 	.word	0x20000274
 8002100:	20000010 	.word	0x20000010
 8002104:	2000025c 	.word	0x2000025c
 8002108:	200002c0 	.word	0x200002c0
 800210c:	20000748 	.word	0x20000748
 8002110:	0800d218 	.word	0x0800d218
 8002114:	20000270 	.word	0x20000270
 8002118:	2000004c 	.word	0x2000004c
 800211c:	0800d228 	.word	0x0800d228
 8002120:	2000079c 	.word	0x2000079c
 8002124:	20000258 	.word	0x20000258
 8002128:	44fa0000 	.word	0x44fa0000
 800212c:	20000250 	.word	0x20000250
 8002130:	42700000 	.word	0x42700000
 8002134:	00000000 	.word	0x00000000
 8002138:	459c4000 	.word	0x459c4000
 800213c:	20000254 	.word	0x20000254
 8002140:	0800d23c 	.word	0x0800d23c
 8002144:	20000814 	.word	0x20000814
 8002148:	2000024c 	.word	0x2000024c

0800214c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b0b8      	sub	sp, #224	; 0xe0
 8002150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002152:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002156:	2234      	movs	r2, #52	; 0x34
 8002158:	2100      	movs	r1, #0
 800215a:	4618      	mov	r0, r3
 800215c:	f006 f8aa 	bl	80082b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002160:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002170:	f107 0308 	add.w	r3, r7, #8
 8002174:	2290      	movs	r2, #144	; 0x90
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f006 f89b 	bl	80082b4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800217e:	f001 fb05 	bl	800378c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	4b3c      	ldr	r3, [pc, #240]	; (8002274 <SystemClock_Config+0x128>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	4a3b      	ldr	r2, [pc, #236]	; (8002274 <SystemClock_Config+0x128>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218c:	6413      	str	r3, [r2, #64]	; 0x40
 800218e:	4b39      	ldr	r3, [pc, #228]	; (8002274 <SystemClock_Config+0x128>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800219a:	4b37      	ldr	r3, [pc, #220]	; (8002278 <SystemClock_Config+0x12c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80021a2:	4a35      	ldr	r2, [pc, #212]	; (8002278 <SystemClock_Config+0x12c>)
 80021a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	4b33      	ldr	r3, [pc, #204]	; (8002278 <SystemClock_Config+0x12c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021b6:	2301      	movs	r3, #1
 80021b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80021bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80021c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c4:	2302      	movs	r3, #2
 80021c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80021d2:	2304      	movs	r3, #4
 80021d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80021d8:	2360      	movs	r3, #96	; 0x60
 80021da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021de:	2302      	movs	r3, #2
 80021e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021e4:	2304      	movs	r3, #4
 80021e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80021ea:	2302      	movs	r3, #2
 80021ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80021f4:	4618      	mov	r0, r3
 80021f6:	f001 fb29 	bl	800384c <HAL_RCC_OscConfig>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002200:	f000 fada 	bl	80027b8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002204:	f001 fad2 	bl	80037ac <HAL_PWREx_EnableOverDrive>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800220e:	f000 fad3 	bl	80027b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002212:	230f      	movs	r3, #15
 8002214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002218:	2302      	movs	r3, #2
 800221a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800221e:	2300      	movs	r3, #0
 8002220:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002228:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800222c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002230:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002234:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002238:	2103      	movs	r1, #3
 800223a:	4618      	mov	r0, r3
 800223c:	f001 fdb4 	bl	8003da8 <HAL_RCC_ClockConfig>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8002246:	f000 fab7 	bl	80027b8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <SystemClock_Config+0x130>)
 800224c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800224e:	2300      	movs	r3, #0
 8002250:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002258:	f107 0308 	add.w	r3, r7, #8
 800225c:	4618      	mov	r0, r3
 800225e:	f001 ffa5 	bl	80041ac <HAL_RCCEx_PeriphCLKConfig>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <SystemClock_Config+0x120>
  {
    Error_Handler();
 8002268:	f000 faa6 	bl	80027b8 <Error_Handler>
  }
}
 800226c:	bf00      	nop
 800226e:	37e0      	adds	r7, #224	; 0xe0
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40023800 	.word	0x40023800
 8002278:	40007000 	.word	0x40007000
 800227c:	00200100 	.word	0x00200100

08002280 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002284:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <MX_SPI4_Init+0x74>)
 8002286:	4a1c      	ldr	r2, [pc, #112]	; (80022f8 <MX_SPI4_Init+0x78>)
 8002288:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800228a:	4b1a      	ldr	r3, [pc, #104]	; (80022f4 <MX_SPI4_Init+0x74>)
 800228c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002290:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002292:	4b18      	ldr	r3, [pc, #96]	; (80022f4 <MX_SPI4_Init+0x74>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002298:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <MX_SPI4_Init+0x74>)
 800229a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800229e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80022a0:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <MX_SPI4_Init+0x74>)
 80022a2:	2202      	movs	r2, #2
 80022a4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80022a6:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <MX_SPI4_Init+0x74>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <MX_SPI4_Init+0x74>)
 80022ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022b2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80022b4:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <MX_SPI4_Init+0x74>)
 80022b6:	2210      	movs	r2, #16
 80022b8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022ba:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <MX_SPI4_Init+0x74>)
 80022bc:	2200      	movs	r2, #0
 80022be:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <MX_SPI4_Init+0x74>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <MX_SPI4_Init+0x74>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <MX_SPI4_Init+0x74>)
 80022ce:	2207      	movs	r2, #7
 80022d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <MX_SPI4_Init+0x74>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <MX_SPI4_Init+0x74>)
 80022da:	2200      	movs	r2, #0
 80022dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80022de:	4805      	ldr	r0, [pc, #20]	; (80022f4 <MX_SPI4_Init+0x74>)
 80022e0:	f002 fb8c 	bl	80049fc <HAL_SPI_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80022ea:	f000 fa65 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200007b0 	.word	0x200007b0
 80022f8:	40013400 	.word	0x40013400

080022fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002302:	f107 0310 	add.w	r3, r7, #16
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	605a      	str	r2, [r3, #4]
 800230c:	609a      	str	r2, [r3, #8]
 800230e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800231a:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <MX_TIM3_Init+0x94>)
 800231c:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <MX_TIM3_Init+0x98>)
 800231e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 8002320:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <MX_TIM3_Init+0x94>)
 8002322:	225f      	movs	r2, #95	; 0x5f
 8002324:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002326:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <MX_TIM3_Init+0x94>)
 8002328:	2200      	movs	r2, #0
 800232a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65534;
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <MX_TIM3_Init+0x94>)
 800232e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002332:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002334:	4b16      	ldr	r3, [pc, #88]	; (8002390 <MX_TIM3_Init+0x94>)
 8002336:	2200      	movs	r2, #0
 8002338:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <MX_TIM3_Init+0x94>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002340:	4813      	ldr	r0, [pc, #76]	; (8002390 <MX_TIM3_Init+0x94>)
 8002342:	f003 f90f 	bl	8005564 <HAL_TIM_Base_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800234c:	f000 fa34 	bl	80027b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002354:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002356:	f107 0310 	add.w	r3, r7, #16
 800235a:	4619      	mov	r1, r3
 800235c:	480c      	ldr	r0, [pc, #48]	; (8002390 <MX_TIM3_Init+0x94>)
 800235e:	f003 fc39 	bl	8005bd4 <HAL_TIM_ConfigClockSource>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002368:	f000 fa26 	bl	80027b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800236c:	2300      	movs	r3, #0
 800236e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	4619      	mov	r1, r3
 8002378:	4805      	ldr	r0, [pc, #20]	; (8002390 <MX_TIM3_Init+0x94>)
 800237a:	f004 f8b3 	bl	80064e4 <HAL_TIMEx_MasterConfigSynchronization>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002384:	f000 fa18 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002388:	bf00      	nop
 800238a:	3720      	adds	r7, #32
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	2000074c 	.word	0x2000074c
 8002394:	40000400 	.word	0x40000400

08002398 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08e      	sub	sp, #56	; 0x38
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800239e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ac:	f107 031c 	add.w	r3, r7, #28
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023b8:	463b      	mov	r3, r7
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	60da      	str	r2, [r3, #12]
 80023c4:	611a      	str	r2, [r3, #16]
 80023c6:	615a      	str	r2, [r3, #20]
 80023c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023ca:	4b35      	ldr	r3, [pc, #212]	; (80024a0 <MX_TIM4_Init+0x108>)
 80023cc:	4a35      	ldr	r2, [pc, #212]	; (80024a4 <MX_TIM4_Init+0x10c>)
 80023ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 95;
 80023d0:	4b33      	ldr	r3, [pc, #204]	; (80024a0 <MX_TIM4_Init+0x108>)
 80023d2:	225f      	movs	r2, #95	; 0x5f
 80023d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d6:	4b32      	ldr	r3, [pc, #200]	; (80024a0 <MX_TIM4_Init+0x108>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80023dc:	4b30      	ldr	r3, [pc, #192]	; (80024a0 <MX_TIM4_Init+0x108>)
 80023de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e4:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <MX_TIM4_Init+0x108>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ea:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <MX_TIM4_Init+0x108>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80023f0:	482b      	ldr	r0, [pc, #172]	; (80024a0 <MX_TIM4_Init+0x108>)
 80023f2:	f003 f8b7 	bl	8005564 <HAL_TIM_Base_Init>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80023fc:	f000 f9dc 	bl	80027b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002404:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800240a:	4619      	mov	r1, r3
 800240c:	4824      	ldr	r0, [pc, #144]	; (80024a0 <MX_TIM4_Init+0x108>)
 800240e:	f003 fbe1 	bl	8005bd4 <HAL_TIM_ConfigClockSource>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002418:	f000 f9ce 	bl	80027b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800241c:	4820      	ldr	r0, [pc, #128]	; (80024a0 <MX_TIM4_Init+0x108>)
 800241e:	f003 f969 	bl	80056f4 <HAL_TIM_PWM_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002428:	f000 f9c6 	bl	80027b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800242c:	2300      	movs	r3, #0
 800242e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002430:	2300      	movs	r3, #0
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002434:	f107 031c 	add.w	r3, r7, #28
 8002438:	4619      	mov	r1, r3
 800243a:	4819      	ldr	r0, [pc, #100]	; (80024a0 <MX_TIM4_Init+0x108>)
 800243c:	f004 f852 	bl	80064e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002446:	f000 f9b7 	bl	80027b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800244a:	2360      	movs	r3, #96	; 0x60
 800244c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800244e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002452:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002454:	2302      	movs	r3, #2
 8002456:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002458:	2300      	movs	r3, #0
 800245a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800245c:	463b      	mov	r3, r7
 800245e:	2208      	movs	r2, #8
 8002460:	4619      	mov	r1, r3
 8002462:	480f      	ldr	r0, [pc, #60]	; (80024a0 <MX_TIM4_Init+0x108>)
 8002464:	f003 faa2 	bl	80059ac <HAL_TIM_PWM_ConfigChannel>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800246e:	f000 f9a3 	bl	80027b8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800247a:	463b      	mov	r3, r7
 800247c:	220c      	movs	r2, #12
 800247e:	4619      	mov	r1, r3
 8002480:	4807      	ldr	r0, [pc, #28]	; (80024a0 <MX_TIM4_Init+0x108>)
 8002482:	f003 fa93 	bl	80059ac <HAL_TIM_PWM_ConfigChannel>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_TIM4_Init+0xf8>
  {
    Error_Handler();
 800248c:	f000 f994 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002490:	4803      	ldr	r0, [pc, #12]	; (80024a0 <MX_TIM4_Init+0x108>)
 8002492:	f000 fa33 	bl	80028fc <HAL_TIM_MspPostInit>

}
 8002496:	bf00      	nop
 8002498:	3738      	adds	r7, #56	; 0x38
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000274 	.word	0x20000274
 80024a4:	40000800 	.word	0x40000800

080024a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024ac:	4b14      	ldr	r3, [pc, #80]	; (8002500 <MX_USART3_UART_Init+0x58>)
 80024ae:	4a15      	ldr	r2, [pc, #84]	; (8002504 <MX_USART3_UART_Init+0x5c>)
 80024b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <MX_USART3_UART_Init+0x58>)
 80024b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024ba:	4b11      	ldr	r3, [pc, #68]	; (8002500 <MX_USART3_UART_Init+0x58>)
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024c0:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <MX_USART3_UART_Init+0x58>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024c6:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <MX_USART3_UART_Init+0x58>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <MX_USART3_UART_Init+0x58>)
 80024ce:	220c      	movs	r2, #12
 80024d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <MX_USART3_UART_Init+0x58>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <MX_USART3_UART_Init+0x58>)
 80024da:	2200      	movs	r2, #0
 80024dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <MX_USART3_UART_Init+0x58>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <MX_USART3_UART_Init+0x58>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024ea:	4805      	ldr	r0, [pc, #20]	; (8002500 <MX_USART3_UART_Init+0x58>)
 80024ec:	f004 f888 	bl	8006600 <HAL_UART_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80024f6:	f000 f95f 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	200002c0 	.word	0x200002c0
 8002504:	40004800 	.word	0x40004800

08002508 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800250c:	4b14      	ldr	r3, [pc, #80]	; (8002560 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800250e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002512:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002516:	2206      	movs	r2, #6
 8002518:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800251c:	2202      	movs	r2, #2
 800251e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002520:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002522:	2200      	movs	r2, #0
 8002524:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002528:	2202      	movs	r2, #2
 800252a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800252e:	2201      	movs	r2, #1
 8002530:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002532:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002534:	2200      	movs	r2, #0
 8002536:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800253a:	2200      	movs	r2, #0
 800253c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800253e:	4b08      	ldr	r3, [pc, #32]	; (8002560 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002540:	2201      	movs	r2, #1
 8002542:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002546:	2200      	movs	r2, #0
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800254a:	4805      	ldr	r0, [pc, #20]	; (8002560 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800254c:	f000 ffd5 	bl	80034fa <HAL_PCD_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002556:	f000 f92f 	bl	80027b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000344 	.word	0x20000344

08002564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08e      	sub	sp, #56	; 0x38
 8002568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	60da      	str	r2, [r3, #12]
 8002578:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800257a:	4b89      	ldr	r3, [pc, #548]	; (80027a0 <MX_GPIO_Init+0x23c>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	4a88      	ldr	r2, [pc, #544]	; (80027a0 <MX_GPIO_Init+0x23c>)
 8002580:	f043 0310 	orr.w	r3, r3, #16
 8002584:	6313      	str	r3, [r2, #48]	; 0x30
 8002586:	4b86      	ldr	r3, [pc, #536]	; (80027a0 <MX_GPIO_Init+0x23c>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f003 0310 	and.w	r3, r3, #16
 800258e:	623b      	str	r3, [r7, #32]
 8002590:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002592:	4b83      	ldr	r3, [pc, #524]	; (80027a0 <MX_GPIO_Init+0x23c>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	4a82      	ldr	r2, [pc, #520]	; (80027a0 <MX_GPIO_Init+0x23c>)
 8002598:	f043 0304 	orr.w	r3, r3, #4
 800259c:	6313      	str	r3, [r2, #48]	; 0x30
 800259e:	4b80      	ldr	r3, [pc, #512]	; (80027a0 <MX_GPIO_Init+0x23c>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	61fb      	str	r3, [r7, #28]
 80025a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025aa:	4b7d      	ldr	r3, [pc, #500]	; (80027a0 <MX_GPIO_Init+0x23c>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	4a7c      	ldr	r2, [pc, #496]	; (80027a0 <MX_GPIO_Init+0x23c>)
 80025b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025b4:	6313      	str	r3, [r2, #48]	; 0x30
 80025b6:	4b7a      	ldr	r3, [pc, #488]	; (80027a0 <MX_GPIO_Init+0x23c>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c2:	4b77      	ldr	r3, [pc, #476]	; (80027a0 <MX_GPIO_Init+0x23c>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	4a76      	ldr	r2, [pc, #472]	; (80027a0 <MX_GPIO_Init+0x23c>)
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	6313      	str	r3, [r2, #48]	; 0x30
 80025ce:	4b74      	ldr	r3, [pc, #464]	; (80027a0 <MX_GPIO_Init+0x23c>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025da:	4b71      	ldr	r3, [pc, #452]	; (80027a0 <MX_GPIO_Init+0x23c>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a70      	ldr	r2, [pc, #448]	; (80027a0 <MX_GPIO_Init+0x23c>)
 80025e0:	f043 0320 	orr.w	r3, r3, #32
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
 80025e6:	4b6e      	ldr	r3, [pc, #440]	; (80027a0 <MX_GPIO_Init+0x23c>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025f2:	4b6b      	ldr	r3, [pc, #428]	; (80027a0 <MX_GPIO_Init+0x23c>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4a6a      	ldr	r2, [pc, #424]	; (80027a0 <MX_GPIO_Init+0x23c>)
 80025f8:	f043 0308 	orr.w	r3, r3, #8
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b68      	ldr	r3, [pc, #416]	; (80027a0 <MX_GPIO_Init+0x23c>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800260a:	4b65      	ldr	r3, [pc, #404]	; (80027a0 <MX_GPIO_Init+0x23c>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	4a64      	ldr	r2, [pc, #400]	; (80027a0 <MX_GPIO_Init+0x23c>)
 8002610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
 8002616:	4b62      	ldr	r3, [pc, #392]	; (80027a0 <MX_GPIO_Init+0x23c>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002622:	4b5f      	ldr	r3, [pc, #380]	; (80027a0 <MX_GPIO_Init+0x23c>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4a5e      	ldr	r2, [pc, #376]	; (80027a0 <MX_GPIO_Init+0x23c>)
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
 800262e:	4b5c      	ldr	r3, [pc, #368]	; (80027a0 <MX_GPIO_Init+0x23c>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP280_CS2_Pin|BMP280_CS1_Pin|D6_Pin|D5_Pin
 800263a:	2200      	movs	r2, #0
 800263c:	f642 2118 	movw	r1, #10776	; 0x2a18
 8002640:	4858      	ldr	r0, [pc, #352]	; (80027a4 <MX_GPIO_Init+0x240>)
 8002642:	f000 ff41 	bl	80034c8 <HAL_GPIO_WritePin>
                          |EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002646:	2200      	movs	r2, #0
 8002648:	f244 0181 	movw	r1, #16513	; 0x4081
 800264c:	4856      	ldr	r0, [pc, #344]	; (80027a8 <MX_GPIO_Init+0x244>)
 800264e:	f000 ff3b 	bl	80034c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D7_Pin|D4_Pin|RW_Pin, GPIO_PIN_RESET);
 8002652:	2200      	movs	r2, #0
 8002654:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002658:	4854      	ldr	r0, [pc, #336]	; (80027ac <MX_GPIO_Init+0x248>)
 800265a:	f000 ff35 	bl	80034c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|RS_Pin, GPIO_PIN_RESET);
 800265e:	2200      	movs	r2, #0
 8002660:	f244 0140 	movw	r1, #16448	; 0x4040
 8002664:	4852      	ldr	r0, [pc, #328]	; (80027b0 <MX_GPIO_Init+0x24c>)
 8002666:	f000 ff2f 	bl	80034c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BMP280_CS2_Pin BMP280_CS1_Pin D6_Pin D5_Pin
                           EN_Pin */
  GPIO_InitStruct.Pin = BMP280_CS2_Pin|BMP280_CS1_Pin|D6_Pin|D5_Pin
 800266a:	f642 2318 	movw	r3, #10776	; 0x2a18
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
                          |EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002670:	2301      	movs	r3, #1
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002678:	2300      	movs	r3, #0
 800267a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800267c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002680:	4619      	mov	r1, r3
 8002682:	4848      	ldr	r0, [pc, #288]	; (80027a4 <MX_GPIO_Init+0x240>)
 8002684:	f000 fd74 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800268e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002692:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800269c:	4619      	mov	r1, r3
 800269e:	4845      	ldr	r0, [pc, #276]	; (80027b4 <MX_GPIO_Init+0x250>)
 80026a0:	f000 fd66 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 80026a4:	2302      	movs	r3, #2
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b0:	2303      	movs	r3, #3
 80026b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80026b4:	230b      	movs	r3, #11
 80026b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 80026b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026bc:	4619      	mov	r1, r3
 80026be:	483d      	ldr	r0, [pc, #244]	; (80027b4 <MX_GPIO_Init+0x250>)
 80026c0:	f000 fd56 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80026c4:	f244 0381 	movw	r3, #16513	; 0x4081
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ca:	2301      	movs	r3, #1
 80026cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	2300      	movs	r3, #0
 80026d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026da:	4619      	mov	r1, r3
 80026dc:	4832      	ldr	r0, [pc, #200]	; (80027a8 <MX_GPIO_Init+0x244>)
 80026de:	f000 fd47 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin RW_Pin */
  GPIO_InitStruct.Pin = D7_Pin|RW_Pin;
 80026e2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e8:	2301      	movs	r3, #1
 80026ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f0:	2300      	movs	r3, #0
 80026f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f8:	4619      	mov	r1, r3
 80026fa:	482c      	ldr	r0, [pc, #176]	; (80027ac <MX_GPIO_Init+0x248>)
 80026fc:	f000 fd38 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_Pin */
  GPIO_InitStruct.Pin = D4_Pin;
 8002700:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002706:	2301      	movs	r3, #1
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800270e:	2301      	movs	r3, #1
 8002710:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 8002712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002716:	4619      	mov	r1, r3
 8002718:	4824      	ldr	r0, [pc, #144]	; (80027ac <MX_GPIO_Init+0x248>)
 800271a:	f000 fd29 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800271e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	2302      	movs	r3, #2
 8002726:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272c:	2303      	movs	r3, #3
 800272e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002730:	230b      	movs	r3, #11
 8002732:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002738:	4619      	mov	r1, r3
 800273a:	481b      	ldr	r0, [pc, #108]	; (80027a8 <MX_GPIO_Init+0x244>)
 800273c:	f000 fd18 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin RS_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|RS_Pin;
 8002740:	f244 0340 	movw	r3, #16448	; 0x4040
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002746:	2301      	movs	r3, #1
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274e:	2300      	movs	r3, #0
 8002750:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002756:	4619      	mov	r1, r3
 8002758:	4815      	ldr	r0, [pc, #84]	; (80027b0 <MX_GPIO_Init+0x24c>)
 800275a:	f000 fd09 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002762:	2300      	movs	r3, #0
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800276a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800276e:	4619      	mov	r1, r3
 8002770:	480f      	ldr	r0, [pc, #60]	; (80027b0 <MX_GPIO_Init+0x24c>)
 8002772:	f000 fcfd 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002776:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277c:	2302      	movs	r3, #2
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002784:	2303      	movs	r3, #3
 8002786:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002788:	230b      	movs	r3, #11
 800278a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800278c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002790:	4619      	mov	r1, r3
 8002792:	4807      	ldr	r0, [pc, #28]	; (80027b0 <MX_GPIO_Init+0x24c>)
 8002794:	f000 fcec 	bl	8003170 <HAL_GPIO_Init>

}
 8002798:	bf00      	nop
 800279a:	3738      	adds	r7, #56	; 0x38
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40020400 	.word	0x40020400
 80027ac:	40021400 	.word	0x40021400
 80027b0:	40021800 	.word	0x40021800
 80027b4:	40020800 	.word	0x40020800

080027b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027bc:	b672      	cpsid	i
}
 80027be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027c0:	e7fe      	b.n	80027c0 <Error_Handler+0x8>
	...

080027c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80027ca:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <HAL_MspInit+0x44>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	4a0e      	ldr	r2, [pc, #56]	; (8002808 <HAL_MspInit+0x44>)
 80027d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d4:	6413      	str	r3, [r2, #64]	; 0x40
 80027d6:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <HAL_MspInit+0x44>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e2:	4b09      	ldr	r3, [pc, #36]	; (8002808 <HAL_MspInit+0x44>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	4a08      	ldr	r2, [pc, #32]	; (8002808 <HAL_MspInit+0x44>)
 80027e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ec:	6453      	str	r3, [r2, #68]	; 0x44
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_MspInit+0x44>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40023800 	.word	0x40023800

0800280c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08a      	sub	sp, #40	; 0x28
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a17      	ldr	r2, [pc, #92]	; (8002888 <HAL_SPI_MspInit+0x7c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d127      	bne.n	800287e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800282e:	4b17      	ldr	r3, [pc, #92]	; (800288c <HAL_SPI_MspInit+0x80>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	4a16      	ldr	r2, [pc, #88]	; (800288c <HAL_SPI_MspInit+0x80>)
 8002834:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002838:	6453      	str	r3, [r2, #68]	; 0x44
 800283a:	4b14      	ldr	r3, [pc, #80]	; (800288c <HAL_SPI_MspInit+0x80>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_SPI_MspInit+0x80>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	4a10      	ldr	r2, [pc, #64]	; (800288c <HAL_SPI_MspInit+0x80>)
 800284c:	f043 0310 	orr.w	r3, r3, #16
 8002850:	6313      	str	r3, [r2, #48]	; 0x30
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <HAL_SPI_MspInit+0x80>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800285e:	2364      	movs	r3, #100	; 0x64
 8002860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002862:	2302      	movs	r3, #2
 8002864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286a:	2303      	movs	r3, #3
 800286c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800286e:	2305      	movs	r3, #5
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002872:	f107 0314 	add.w	r3, r7, #20
 8002876:	4619      	mov	r1, r3
 8002878:	4805      	ldr	r0, [pc, #20]	; (8002890 <HAL_SPI_MspInit+0x84>)
 800287a:	f000 fc79 	bl	8003170 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800287e:	bf00      	nop
 8002880:	3728      	adds	r7, #40	; 0x28
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40013400 	.word	0x40013400
 800288c:	40023800 	.word	0x40023800
 8002890:	40021000 	.word	0x40021000

08002894 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a13      	ldr	r2, [pc, #76]	; (80028f0 <HAL_TIM_Base_MspInit+0x5c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d10c      	bne.n	80028c0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028a6:	4b13      	ldr	r3, [pc, #76]	; (80028f4 <HAL_TIM_Base_MspInit+0x60>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	4a12      	ldr	r2, [pc, #72]	; (80028f4 <HAL_TIM_Base_MspInit+0x60>)
 80028ac:	f043 0302 	orr.w	r3, r3, #2
 80028b0:	6413      	str	r3, [r2, #64]	; 0x40
 80028b2:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <HAL_TIM_Base_MspInit+0x60>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028be:	e010      	b.n	80028e2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0c      	ldr	r2, [pc, #48]	; (80028f8 <HAL_TIM_Base_MspInit+0x64>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d10b      	bne.n	80028e2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <HAL_TIM_Base_MspInit+0x60>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	4a09      	ldr	r2, [pc, #36]	; (80028f4 <HAL_TIM_Base_MspInit+0x60>)
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	6413      	str	r3, [r2, #64]	; 0x40
 80028d6:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <HAL_TIM_Base_MspInit+0x60>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
}
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40000400 	.word	0x40000400
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40000800 	.word	0x40000800

080028fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002904:	f107 030c 	add.w	r3, r7, #12
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a11      	ldr	r2, [pc, #68]	; (8002960 <HAL_TIM_MspPostInit+0x64>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d11c      	bne.n	8002958 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800291e:	4b11      	ldr	r3, [pc, #68]	; (8002964 <HAL_TIM_MspPostInit+0x68>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4a10      	ldr	r2, [pc, #64]	; (8002964 <HAL_TIM_MspPostInit+0x68>)
 8002924:	f043 0308 	orr.w	r3, r3, #8
 8002928:	6313      	str	r3, [r2, #48]	; 0x30
 800292a:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <HAL_TIM_MspPostInit+0x68>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002936:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800293a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293c:	2302      	movs	r3, #2
 800293e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002948:	2302      	movs	r3, #2
 800294a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800294c:	f107 030c 	add.w	r3, r7, #12
 8002950:	4619      	mov	r1, r3
 8002952:	4805      	ldr	r0, [pc, #20]	; (8002968 <HAL_TIM_MspPostInit+0x6c>)
 8002954:	f000 fc0c 	bl	8003170 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002958:	bf00      	nop
 800295a:	3720      	adds	r7, #32
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40000800 	.word	0x40000800
 8002964:	40023800 	.word	0x40023800
 8002968:	40020c00 	.word	0x40020c00

0800296c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08a      	sub	sp, #40	; 0x28
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a1b      	ldr	r2, [pc, #108]	; (80029f8 <HAL_UART_MspInit+0x8c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d130      	bne.n	80029f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800298e:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <HAL_UART_MspInit+0x90>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	4a1a      	ldr	r2, [pc, #104]	; (80029fc <HAL_UART_MspInit+0x90>)
 8002994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002998:	6413      	str	r3, [r2, #64]	; 0x40
 800299a:	4b18      	ldr	r3, [pc, #96]	; (80029fc <HAL_UART_MspInit+0x90>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_UART_MspInit+0x90>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	4a14      	ldr	r2, [pc, #80]	; (80029fc <HAL_UART_MspInit+0x90>)
 80029ac:	f043 0308 	orr.w	r3, r3, #8
 80029b0:	6313      	str	r3, [r2, #48]	; 0x30
 80029b2:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_UART_MspInit+0x90>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80029be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	2302      	movs	r3, #2
 80029c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029cc:	2303      	movs	r3, #3
 80029ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029d0:	2307      	movs	r3, #7
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	4619      	mov	r1, r3
 80029da:	4809      	ldr	r0, [pc, #36]	; (8002a00 <HAL_UART_MspInit+0x94>)
 80029dc:	f000 fbc8 	bl	8003170 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80029e0:	2200      	movs	r2, #0
 80029e2:	2100      	movs	r1, #0
 80029e4:	2027      	movs	r0, #39	; 0x27
 80029e6:	f000 fafa 	bl	8002fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029ea:	2027      	movs	r0, #39	; 0x27
 80029ec:	f000 fb13 	bl	8003016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029f0:	bf00      	nop
 80029f2:	3728      	adds	r7, #40	; 0x28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40004800 	.word	0x40004800
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40020c00 	.word	0x40020c00

08002a04 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08a      	sub	sp, #40	; 0x28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0c:	f107 0314 	add.w	r3, r7, #20
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a24:	d141      	bne.n	8002aaa <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a26:	4b23      	ldr	r3, [pc, #140]	; (8002ab4 <HAL_PCD_MspInit+0xb0>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	4a22      	ldr	r2, [pc, #136]	; (8002ab4 <HAL_PCD_MspInit+0xb0>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6313      	str	r3, [r2, #48]	; 0x30
 8002a32:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <HAL_PCD_MspInit+0xb0>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002a3e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a44:	2302      	movs	r3, #2
 8002a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a50:	230a      	movs	r3, #10
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a54:	f107 0314 	add.w	r3, r7, #20
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4817      	ldr	r0, [pc, #92]	; (8002ab8 <HAL_PCD_MspInit+0xb4>)
 8002a5c:	f000 fb88 	bl	8003170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002a6e:	f107 0314 	add.w	r3, r7, #20
 8002a72:	4619      	mov	r1, r3
 8002a74:	4810      	ldr	r0, [pc, #64]	; (8002ab8 <HAL_PCD_MspInit+0xb4>)
 8002a76:	f000 fb7b 	bl	8003170 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <HAL_PCD_MspInit+0xb0>)
 8002a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7e:	4a0d      	ldr	r2, [pc, #52]	; (8002ab4 <HAL_PCD_MspInit+0xb0>)
 8002a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a84:	6353      	str	r3, [r2, #52]	; 0x34
 8002a86:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_PCD_MspInit+0xb0>)
 8002a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <HAL_PCD_MspInit+0xb0>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	4a07      	ldr	r2, [pc, #28]	; (8002ab4 <HAL_PCD_MspInit+0xb0>)
 8002a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9e:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_PCD_MspInit+0xb0>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002aaa:	bf00      	nop
 8002aac:	3728      	adds	r7, #40	; 0x28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40020000 	.word	0x40020000

08002abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ac0:	e7fe      	b.n	8002ac0 <NMI_Handler+0x4>

08002ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ac6:	e7fe      	b.n	8002ac6 <HardFault_Handler+0x4>

08002ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002acc:	e7fe      	b.n	8002acc <MemManage_Handler+0x4>

08002ace <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ad2:	e7fe      	b.n	8002ad2 <BusFault_Handler+0x4>

08002ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ad8:	e7fe      	b.n	8002ad8 <UsageFault_Handler+0x4>

08002ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ada:	b480      	push	{r7}
 8002adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b08:	f000 f94a 	bl	8002da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b0c:	bf00      	nop
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b14:	4802      	ldr	r0, [pc, #8]	; (8002b20 <USART3_IRQHandler+0x10>)
 8002b16:	f003 fea3 	bl	8006860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	200002c0 	.word	0x200002c0

08002b24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
	return 1;
 8002b28:	2301      	movs	r3, #1
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <_kill>:

int _kill(int pid, int sig)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b3e:	f005 fb81 	bl	8008244 <__errno>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2216      	movs	r2, #22
 8002b46:	601a      	str	r2, [r3, #0]
	return -1;
 8002b48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <_exit>:

void _exit (int status)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff ffe7 	bl	8002b34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b66:	e7fe      	b.n	8002b66 <_exit+0x12>

08002b68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	e00a      	b.n	8002b90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b7a:	f3af 8000 	nop.w
 8002b7e:	4601      	mov	r1, r0
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	60ba      	str	r2, [r7, #8]
 8002b86:	b2ca      	uxtb	r2, r1
 8002b88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	dbf0      	blt.n	8002b7a <_read+0x12>
	}

return len;
 8002b98:	687b      	ldr	r3, [r7, #4]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b086      	sub	sp, #24
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	e009      	b.n	8002bc8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	60ba      	str	r2, [r7, #8]
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	dbf1      	blt.n	8002bb4 <_write+0x12>
	}
	return len;
 8002bd0:	687b      	ldr	r3, [r7, #4]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <_close>:

int _close(int file)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
	return -1;
 8002be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c02:	605a      	str	r2, [r3, #4]
	return 0;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <_isatty>:

int _isatty(int file)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
	return 1;
 8002c1a:	2301      	movs	r3, #1
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
	return 0;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c4c:	4a14      	ldr	r2, [pc, #80]	; (8002ca0 <_sbrk+0x5c>)
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <_sbrk+0x60>)
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c58:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <_sbrk+0x64>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c60:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <_sbrk+0x64>)
 8002c62:	4a12      	ldr	r2, [pc, #72]	; (8002cac <_sbrk+0x68>)
 8002c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c66:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <_sbrk+0x64>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d207      	bcs.n	8002c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c74:	f005 fae6 	bl	8008244 <__errno>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	220c      	movs	r2, #12
 8002c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c82:	e009      	b.n	8002c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c84:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <_sbrk+0x64>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c8a:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <_sbrk+0x64>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	4a05      	ldr	r2, [pc, #20]	; (8002ca8 <_sbrk+0x64>)
 8002c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c96:	68fb      	ldr	r3, [r7, #12]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20080000 	.word	0x20080000
 8002ca4:	00000400 	.word	0x00000400
 8002ca8:	20000264 	.word	0x20000264
 8002cac:	20000860 	.word	0x20000860

08002cb0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <SystemInit+0x20>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cba:	4a05      	ldr	r2, [pc, #20]	; (8002cd0 <SystemInit+0x20>)
 8002cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cd8:	480d      	ldr	r0, [pc, #52]	; (8002d10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cda:	490e      	ldr	r1, [pc, #56]	; (8002d14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cdc:	4a0e      	ldr	r2, [pc, #56]	; (8002d18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ce0:	e002      	b.n	8002ce8 <LoopCopyDataInit>

08002ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ce6:	3304      	adds	r3, #4

08002ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cec:	d3f9      	bcc.n	8002ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cee:	4a0b      	ldr	r2, [pc, #44]	; (8002d1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cf0:	4c0b      	ldr	r4, [pc, #44]	; (8002d20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cf4:	e001      	b.n	8002cfa <LoopFillZerobss>

08002cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cf8:	3204      	adds	r2, #4

08002cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cfc:	d3fb      	bcc.n	8002cf6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cfe:	f7ff ffd7 	bl	8002cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d02:	f005 faa5 	bl	8008250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d06:	f7ff f8df 	bl	8001ec8 <main>
  bx  lr    
 8002d0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d0c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d14:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8002d18:	0800d74c 	.word	0x0800d74c
  ldr r2, =_sbss
 8002d1c:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8002d20:	2000085c 	.word	0x2000085c

08002d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d24:	e7fe      	b.n	8002d24 <ADC_IRQHandler>

08002d26 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d2a:	2003      	movs	r0, #3
 8002d2c:	f000 f94c 	bl	8002fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d30:	2000      	movs	r0, #0
 8002d32:	f000 f805 	bl	8002d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d36:	f7ff fd45 	bl	80027c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d48:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_InitTick+0x54>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <HAL_InitTick+0x58>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	4619      	mov	r1, r3
 8002d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f967 	bl	8003032 <HAL_SYSTICK_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e00e      	b.n	8002d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b0f      	cmp	r3, #15
 8002d72:	d80a      	bhi.n	8002d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d74:	2200      	movs	r2, #0
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d7c:	f000 f92f 	bl	8002fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d80:	4a06      	ldr	r2, [pc, #24]	; (8002d9c <HAL_InitTick+0x5c>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e000      	b.n	8002d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20000050 	.word	0x20000050
 8002d98:	20000058 	.word	0x20000058
 8002d9c:	20000054 	.word	0x20000054

08002da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_IncTick+0x20>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_IncTick+0x24>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <HAL_IncTick+0x24>)
 8002db2:	6013      	str	r3, [r2, #0]
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	20000058 	.word	0x20000058
 8002dc4:	20000848 	.word	0x20000848

08002dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return uwTick;
 8002dcc:	4b03      	ldr	r3, [pc, #12]	; (8002ddc <HAL_GetTick+0x14>)
 8002dce:	681b      	ldr	r3, [r3, #0]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	20000848 	.word	0x20000848

08002de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002de8:	f7ff ffee 	bl	8002dc8 <HAL_GetTick>
 8002dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002df8:	d005      	beq.n	8002e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <HAL_Delay+0x44>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4413      	add	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e06:	bf00      	nop
 8002e08:	f7ff ffde 	bl	8002dc8 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d8f7      	bhi.n	8002e08 <HAL_Delay+0x28>
  {
  }
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000058 	.word	0x20000058

08002e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <__NVIC_SetPriorityGrouping+0x40>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e44:	4013      	ands	r3, r2
 8002e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <__NVIC_SetPriorityGrouping+0x44>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e56:	4a04      	ldr	r2, [pc, #16]	; (8002e68 <__NVIC_SetPriorityGrouping+0x40>)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	60d3      	str	r3, [r2, #12]
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	e000ed00 	.word	0xe000ed00
 8002e6c:	05fa0000 	.word	0x05fa0000

08002e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e74:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <__NVIC_GetPriorityGrouping+0x18>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	f003 0307 	and.w	r3, r3, #7
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	db0b      	blt.n	8002eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	f003 021f 	and.w	r2, r3, #31
 8002ea4:	4907      	ldr	r1, [pc, #28]	; (8002ec4 <__NVIC_EnableIRQ+0x38>)
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	2001      	movs	r0, #1
 8002eae:	fa00 f202 	lsl.w	r2, r0, r2
 8002eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	e000e100 	.word	0xe000e100

08002ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	6039      	str	r1, [r7, #0]
 8002ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	db0a      	blt.n	8002ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	490c      	ldr	r1, [pc, #48]	; (8002f14 <__NVIC_SetPriority+0x4c>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	0112      	lsls	r2, r2, #4
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	440b      	add	r3, r1
 8002eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef0:	e00a      	b.n	8002f08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	4908      	ldr	r1, [pc, #32]	; (8002f18 <__NVIC_SetPriority+0x50>)
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	3b04      	subs	r3, #4
 8002f00:	0112      	lsls	r2, r2, #4
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	440b      	add	r3, r1
 8002f06:	761a      	strb	r2, [r3, #24]
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	e000e100 	.word	0xe000e100
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b089      	sub	sp, #36	; 0x24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f1c3 0307 	rsb	r3, r3, #7
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	bf28      	it	cs
 8002f3a:	2304      	movcs	r3, #4
 8002f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3304      	adds	r3, #4
 8002f42:	2b06      	cmp	r3, #6
 8002f44:	d902      	bls.n	8002f4c <NVIC_EncodePriority+0x30>
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3b03      	subs	r3, #3
 8002f4a:	e000      	b.n	8002f4e <NVIC_EncodePriority+0x32>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43da      	mvns	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	401a      	ands	r2, r3
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	43d9      	mvns	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f74:	4313      	orrs	r3, r2
         );
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3724      	adds	r7, #36	; 0x24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f94:	d301      	bcc.n	8002f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f96:	2301      	movs	r3, #1
 8002f98:	e00f      	b.n	8002fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <SysTick_Config+0x40>)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fa2:	210f      	movs	r1, #15
 8002fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fa8:	f7ff ff8e 	bl	8002ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <SysTick_Config+0x40>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fb2:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <SysTick_Config+0x40>)
 8002fb4:	2207      	movs	r2, #7
 8002fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	e000e010 	.word	0xe000e010

08002fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff ff29 	bl	8002e28 <__NVIC_SetPriorityGrouping>
}
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ff0:	f7ff ff3e 	bl	8002e70 <__NVIC_GetPriorityGrouping>
 8002ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	6978      	ldr	r0, [r7, #20]
 8002ffc:	f7ff ff8e 	bl	8002f1c <NVIC_EncodePriority>
 8003000:	4602      	mov	r2, r0
 8003002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff5d 	bl	8002ec8 <__NVIC_SetPriority>
}
 800300e:	bf00      	nop
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	4603      	mov	r3, r0
 800301e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff ff31 	bl	8002e8c <__NVIC_EnableIRQ>
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff ffa2 	bl	8002f84 <SysTick_Config>
 8003040:	4603      	mov	r3, r0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003056:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003058:	f7ff feb6 	bl	8002dc8 <HAL_GetTick>
 800305c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d008      	beq.n	800307c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2280      	movs	r2, #128	; 0x80
 800306e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e052      	b.n	8003122 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0216 	bic.w	r2, r2, #22
 800308a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800309a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d103      	bne.n	80030ac <HAL_DMA_Abort+0x62>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0208 	bic.w	r2, r2, #8
 80030ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0201 	bic.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030cc:	e013      	b.n	80030f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ce:	f7ff fe7b 	bl	8002dc8 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b05      	cmp	r3, #5
 80030da:	d90c      	bls.n	80030f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2220      	movs	r2, #32
 80030e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2203      	movs	r2, #3
 80030e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e015      	b.n	8003122 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1e4      	bne.n	80030ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003108:	223f      	movs	r2, #63	; 0x3f
 800310a:	409a      	lsls	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d004      	beq.n	8003148 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2280      	movs	r2, #128	; 0x80
 8003142:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e00c      	b.n	8003162 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2205      	movs	r2, #5
 800314c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0201 	bic.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003170:	b480      	push	{r7}
 8003172:	b089      	sub	sp, #36	; 0x24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003186:	2300      	movs	r3, #0
 8003188:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
 800318e:	e175      	b.n	800347c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003190:	2201      	movs	r2, #1
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	4013      	ands	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	f040 8164 	bne.w	8003476 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d005      	beq.n	80031c6 <HAL_GPIO_Init+0x56>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d130      	bne.n	8003228 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	2203      	movs	r2, #3
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031fc:	2201      	movs	r2, #1
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	091b      	lsrs	r3, r3, #4
 8003212:	f003 0201 	and.w	r2, r3, #1
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	2b03      	cmp	r3, #3
 8003232:	d017      	beq.n	8003264 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	2203      	movs	r2, #3
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d123      	bne.n	80032b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	08da      	lsrs	r2, r3, #3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3208      	adds	r2, #8
 8003278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800327c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	220f      	movs	r2, #15
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	08da      	lsrs	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3208      	adds	r2, #8
 80032b2:	69b9      	ldr	r1, [r7, #24]
 80032b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	2203      	movs	r2, #3
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 0203 	and.w	r2, r3, #3
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80be 	beq.w	8003476 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032fa:	4b66      	ldr	r3, [pc, #408]	; (8003494 <HAL_GPIO_Init+0x324>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	4a65      	ldr	r2, [pc, #404]	; (8003494 <HAL_GPIO_Init+0x324>)
 8003300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003304:	6453      	str	r3, [r2, #68]	; 0x44
 8003306:	4b63      	ldr	r3, [pc, #396]	; (8003494 <HAL_GPIO_Init+0x324>)
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003312:	4a61      	ldr	r2, [pc, #388]	; (8003498 <HAL_GPIO_Init+0x328>)
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	089b      	lsrs	r3, r3, #2
 8003318:	3302      	adds	r3, #2
 800331a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	220f      	movs	r2, #15
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a58      	ldr	r2, [pc, #352]	; (800349c <HAL_GPIO_Init+0x32c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d037      	beq.n	80033ae <HAL_GPIO_Init+0x23e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a57      	ldr	r2, [pc, #348]	; (80034a0 <HAL_GPIO_Init+0x330>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d031      	beq.n	80033aa <HAL_GPIO_Init+0x23a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a56      	ldr	r2, [pc, #344]	; (80034a4 <HAL_GPIO_Init+0x334>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d02b      	beq.n	80033a6 <HAL_GPIO_Init+0x236>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a55      	ldr	r2, [pc, #340]	; (80034a8 <HAL_GPIO_Init+0x338>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d025      	beq.n	80033a2 <HAL_GPIO_Init+0x232>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a54      	ldr	r2, [pc, #336]	; (80034ac <HAL_GPIO_Init+0x33c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d01f      	beq.n	800339e <HAL_GPIO_Init+0x22e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a53      	ldr	r2, [pc, #332]	; (80034b0 <HAL_GPIO_Init+0x340>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d019      	beq.n	800339a <HAL_GPIO_Init+0x22a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a52      	ldr	r2, [pc, #328]	; (80034b4 <HAL_GPIO_Init+0x344>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d013      	beq.n	8003396 <HAL_GPIO_Init+0x226>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a51      	ldr	r2, [pc, #324]	; (80034b8 <HAL_GPIO_Init+0x348>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00d      	beq.n	8003392 <HAL_GPIO_Init+0x222>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a50      	ldr	r2, [pc, #320]	; (80034bc <HAL_GPIO_Init+0x34c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d007      	beq.n	800338e <HAL_GPIO_Init+0x21e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a4f      	ldr	r2, [pc, #316]	; (80034c0 <HAL_GPIO_Init+0x350>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d101      	bne.n	800338a <HAL_GPIO_Init+0x21a>
 8003386:	2309      	movs	r3, #9
 8003388:	e012      	b.n	80033b0 <HAL_GPIO_Init+0x240>
 800338a:	230a      	movs	r3, #10
 800338c:	e010      	b.n	80033b0 <HAL_GPIO_Init+0x240>
 800338e:	2308      	movs	r3, #8
 8003390:	e00e      	b.n	80033b0 <HAL_GPIO_Init+0x240>
 8003392:	2307      	movs	r3, #7
 8003394:	e00c      	b.n	80033b0 <HAL_GPIO_Init+0x240>
 8003396:	2306      	movs	r3, #6
 8003398:	e00a      	b.n	80033b0 <HAL_GPIO_Init+0x240>
 800339a:	2305      	movs	r3, #5
 800339c:	e008      	b.n	80033b0 <HAL_GPIO_Init+0x240>
 800339e:	2304      	movs	r3, #4
 80033a0:	e006      	b.n	80033b0 <HAL_GPIO_Init+0x240>
 80033a2:	2303      	movs	r3, #3
 80033a4:	e004      	b.n	80033b0 <HAL_GPIO_Init+0x240>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e002      	b.n	80033b0 <HAL_GPIO_Init+0x240>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <HAL_GPIO_Init+0x240>
 80033ae:	2300      	movs	r3, #0
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	f002 0203 	and.w	r2, r2, #3
 80033b6:	0092      	lsls	r2, r2, #2
 80033b8:	4093      	lsls	r3, r2
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4313      	orrs	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033c0:	4935      	ldr	r1, [pc, #212]	; (8003498 <HAL_GPIO_Init+0x328>)
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	089b      	lsrs	r3, r3, #2
 80033c6:	3302      	adds	r3, #2
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ce:	4b3d      	ldr	r3, [pc, #244]	; (80034c4 <HAL_GPIO_Init+0x354>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	43db      	mvns	r3, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4013      	ands	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033f2:	4a34      	ldr	r2, [pc, #208]	; (80034c4 <HAL_GPIO_Init+0x354>)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033f8:	4b32      	ldr	r3, [pc, #200]	; (80034c4 <HAL_GPIO_Init+0x354>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800341c:	4a29      	ldr	r2, [pc, #164]	; (80034c4 <HAL_GPIO_Init+0x354>)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003422:	4b28      	ldr	r3, [pc, #160]	; (80034c4 <HAL_GPIO_Init+0x354>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	43db      	mvns	r3, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4013      	ands	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003446:	4a1f      	ldr	r2, [pc, #124]	; (80034c4 <HAL_GPIO_Init+0x354>)
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800344c:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <HAL_GPIO_Init+0x354>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	43db      	mvns	r3, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4013      	ands	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003470:	4a14      	ldr	r2, [pc, #80]	; (80034c4 <HAL_GPIO_Init+0x354>)
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	3301      	adds	r3, #1
 800347a:	61fb      	str	r3, [r7, #28]
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	2b0f      	cmp	r3, #15
 8003480:	f67f ae86 	bls.w	8003190 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003484:	bf00      	nop
 8003486:	bf00      	nop
 8003488:	3724      	adds	r7, #36	; 0x24
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40023800 	.word	0x40023800
 8003498:	40013800 	.word	0x40013800
 800349c:	40020000 	.word	0x40020000
 80034a0:	40020400 	.word	0x40020400
 80034a4:	40020800 	.word	0x40020800
 80034a8:	40020c00 	.word	0x40020c00
 80034ac:	40021000 	.word	0x40021000
 80034b0:	40021400 	.word	0x40021400
 80034b4:	40021800 	.word	0x40021800
 80034b8:	40021c00 	.word	0x40021c00
 80034bc:	40022000 	.word	0x40022000
 80034c0:	40022400 	.word	0x40022400
 80034c4:	40013c00 	.word	0x40013c00

080034c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	807b      	strh	r3, [r7, #2]
 80034d4:	4613      	mov	r3, r2
 80034d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034d8:	787b      	ldrb	r3, [r7, #1]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034de:	887a      	ldrh	r2, [r7, #2]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80034e4:	e003      	b.n	80034ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80034e6:	887b      	ldrh	r3, [r7, #2]
 80034e8:	041a      	lsls	r2, r3, #16
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	619a      	str	r2, [r3, #24]
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034fc:	b08f      	sub	sp, #60	; 0x3c
 80034fe:	af0a      	add	r7, sp, #40	; 0x28
 8003500:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e116      	b.n	800373a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff fa6c 	bl	8002a04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2203      	movs	r2, #3
 8003530:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d102      	bne.n	8003546 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f004 fbc6 	bl	8007cdc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	687e      	ldr	r6, [r7, #4]
 8003558:	466d      	mov	r5, sp
 800355a:	f106 0410 	add.w	r4, r6, #16
 800355e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003566:	e894 0003 	ldmia.w	r4, {r0, r1}
 800356a:	e885 0003 	stmia.w	r5, {r0, r1}
 800356e:	1d33      	adds	r3, r6, #4
 8003570:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003572:	6838      	ldr	r0, [r7, #0]
 8003574:	f004 fb5a 	bl	8007c2c <USB_CoreInit>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2202      	movs	r2, #2
 8003582:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e0d7      	b.n	800373a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2100      	movs	r1, #0
 8003590:	4618      	mov	r0, r3
 8003592:	f004 fbb4 	bl	8007cfe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003596:	2300      	movs	r3, #0
 8003598:	73fb      	strb	r3, [r7, #15]
 800359a:	e04a      	b.n	8003632 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800359c:	7bfa      	ldrb	r2, [r7, #15]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	333d      	adds	r3, #61	; 0x3d
 80035ac:	2201      	movs	r2, #1
 80035ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035b0:	7bfa      	ldrb	r2, [r7, #15]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	333c      	adds	r3, #60	; 0x3c
 80035c0:	7bfa      	ldrb	r2, [r7, #15]
 80035c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035c4:	7bfa      	ldrb	r2, [r7, #15]
 80035c6:	7bfb      	ldrb	r3, [r7, #15]
 80035c8:	b298      	uxth	r0, r3
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	3342      	adds	r3, #66	; 0x42
 80035d8:	4602      	mov	r2, r0
 80035da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035dc:	7bfa      	ldrb	r2, [r7, #15]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	333f      	adds	r3, #63	; 0x3f
 80035ec:	2200      	movs	r2, #0
 80035ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035f0:	7bfa      	ldrb	r2, [r7, #15]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	3344      	adds	r3, #68	; 0x44
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	3348      	adds	r3, #72	; 0x48
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003618:	7bfa      	ldrb	r2, [r7, #15]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	3350      	adds	r3, #80	; 0x50
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	3301      	adds	r3, #1
 8003630:	73fb      	strb	r3, [r7, #15]
 8003632:	7bfa      	ldrb	r2, [r7, #15]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	429a      	cmp	r2, r3
 800363a:	d3af      	bcc.n	800359c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800363c:	2300      	movs	r3, #0
 800363e:	73fb      	strb	r3, [r7, #15]
 8003640:	e044      	b.n	80036cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003642:	7bfa      	ldrb	r2, [r7, #15]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003654:	2200      	movs	r2, #0
 8003656:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003658:	7bfa      	ldrb	r2, [r7, #15]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800366a:	7bfa      	ldrb	r2, [r7, #15]
 800366c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800366e:	7bfa      	ldrb	r2, [r7, #15]
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	1a9b      	subs	r3, r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003684:	7bfa      	ldrb	r2, [r7, #15]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800369a:	7bfa      	ldrb	r2, [r7, #15]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036b0:	7bfa      	ldrb	r2, [r7, #15]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	3301      	adds	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
 80036cc:	7bfa      	ldrb	r2, [r7, #15]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d3b5      	bcc.n	8003642 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	687e      	ldr	r6, [r7, #4]
 80036de:	466d      	mov	r5, sp
 80036e0:	f106 0410 	add.w	r4, r6, #16
 80036e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80036f4:	1d33      	adds	r3, r6, #4
 80036f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036f8:	6838      	ldr	r0, [r7, #0]
 80036fa:	f004 fb4d 	bl	8007d98 <USB_DevInit>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e014      	b.n	800373a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	2b01      	cmp	r3, #1
 8003726:	d102      	bne.n	800372e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f80b 	bl	8003744 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f004 fd07 	bl	8008146 <USB_DevDisconnect>

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003744 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <HAL_PCDEx_ActivateLPM+0x44>)
 8003774:	4313      	orrs	r3, r2
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	10000003 	.word	0x10000003

0800378c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003790:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a04      	ldr	r2, [pc, #16]	; (80037a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379a:	6013      	str	r3, [r2, #0]
}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40007000 	.word	0x40007000

080037ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80037b2:	2300      	movs	r3, #0
 80037b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80037b6:	4b23      	ldr	r3, [pc, #140]	; (8003844 <HAL_PWREx_EnableOverDrive+0x98>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	4a22      	ldr	r2, [pc, #136]	; (8003844 <HAL_PWREx_EnableOverDrive+0x98>)
 80037bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c0:	6413      	str	r3, [r2, #64]	; 0x40
 80037c2:	4b20      	ldr	r3, [pc, #128]	; (8003844 <HAL_PWREx_EnableOverDrive+0x98>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80037ce:	4b1e      	ldr	r3, [pc, #120]	; (8003848 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1d      	ldr	r2, [pc, #116]	; (8003848 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037da:	f7ff faf5 	bl	8002dc8 <HAL_GetTick>
 80037de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037e0:	e009      	b.n	80037f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037e2:	f7ff faf1 	bl	8002dc8 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037f0:	d901      	bls.n	80037f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e022      	b.n	800383c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037f6:	4b14      	ldr	r3, [pc, #80]	; (8003848 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003802:	d1ee      	bne.n	80037e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003804:	4b10      	ldr	r3, [pc, #64]	; (8003848 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a0f      	ldr	r2, [pc, #60]	; (8003848 <HAL_PWREx_EnableOverDrive+0x9c>)
 800380a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800380e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003810:	f7ff fada 	bl	8002dc8 <HAL_GetTick>
 8003814:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003816:	e009      	b.n	800382c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003818:	f7ff fad6 	bl	8002dc8 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003826:	d901      	bls.n	800382c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e007      	b.n	800383c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <HAL_PWREx_EnableOverDrive+0x9c>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003834:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003838:	d1ee      	bne.n	8003818 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40023800 	.word	0x40023800
 8003848:	40007000 	.word	0x40007000

0800384c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003854:	2300      	movs	r3, #0
 8003856:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e29b      	b.n	8003d9a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 8087 	beq.w	800397e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003870:	4b96      	ldr	r3, [pc, #600]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 030c 	and.w	r3, r3, #12
 8003878:	2b04      	cmp	r3, #4
 800387a:	d00c      	beq.n	8003896 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800387c:	4b93      	ldr	r3, [pc, #588]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 030c 	and.w	r3, r3, #12
 8003884:	2b08      	cmp	r3, #8
 8003886:	d112      	bne.n	80038ae <HAL_RCC_OscConfig+0x62>
 8003888:	4b90      	ldr	r3, [pc, #576]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003894:	d10b      	bne.n	80038ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003896:	4b8d      	ldr	r3, [pc, #564]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d06c      	beq.n	800397c <HAL_RCC_OscConfig+0x130>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d168      	bne.n	800397c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e275      	b.n	8003d9a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b6:	d106      	bne.n	80038c6 <HAL_RCC_OscConfig+0x7a>
 80038b8:	4b84      	ldr	r3, [pc, #528]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a83      	ldr	r2, [pc, #524]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 80038be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	e02e      	b.n	8003924 <HAL_RCC_OscConfig+0xd8>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x9c>
 80038ce:	4b7f      	ldr	r3, [pc, #508]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a7e      	ldr	r2, [pc, #504]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 80038d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	4b7c      	ldr	r3, [pc, #496]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a7b      	ldr	r2, [pc, #492]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 80038e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	e01d      	b.n	8003924 <HAL_RCC_OscConfig+0xd8>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038f0:	d10c      	bne.n	800390c <HAL_RCC_OscConfig+0xc0>
 80038f2:	4b76      	ldr	r3, [pc, #472]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a75      	ldr	r2, [pc, #468]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 80038f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	4b73      	ldr	r3, [pc, #460]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a72      	ldr	r2, [pc, #456]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 8003904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	e00b      	b.n	8003924 <HAL_RCC_OscConfig+0xd8>
 800390c:	4b6f      	ldr	r3, [pc, #444]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a6e      	ldr	r2, [pc, #440]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 8003912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4b6c      	ldr	r3, [pc, #432]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a6b      	ldr	r2, [pc, #428]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 800391e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d013      	beq.n	8003954 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7ff fa4c 	bl	8002dc8 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003934:	f7ff fa48 	bl	8002dc8 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b64      	cmp	r3, #100	; 0x64
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e229      	b.n	8003d9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	4b61      	ldr	r3, [pc, #388]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0xe8>
 8003952:	e014      	b.n	800397e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003954:	f7ff fa38 	bl	8002dc8 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800395c:	f7ff fa34 	bl	8002dc8 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b64      	cmp	r3, #100	; 0x64
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e215      	b.n	8003d9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800396e:	4b57      	ldr	r3, [pc, #348]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x110>
 800397a:	e000      	b.n	800397e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800397c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d069      	beq.n	8003a5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800398a:	4b50      	ldr	r3, [pc, #320]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00b      	beq.n	80039ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003996:	4b4d      	ldr	r3, [pc, #308]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d11c      	bne.n	80039dc <HAL_RCC_OscConfig+0x190>
 80039a2:	4b4a      	ldr	r3, [pc, #296]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d116      	bne.n	80039dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ae:	4b47      	ldr	r3, [pc, #284]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <HAL_RCC_OscConfig+0x17a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d001      	beq.n	80039c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e1e9      	b.n	8003d9a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c6:	4b41      	ldr	r3, [pc, #260]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	493d      	ldr	r1, [pc, #244]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039da:	e040      	b.n	8003a5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d023      	beq.n	8003a2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039e4:	4b39      	ldr	r3, [pc, #228]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a38      	ldr	r2, [pc, #224]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7ff f9ea 	bl	8002dc8 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f8:	f7ff f9e6 	bl	8002dc8 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e1c7      	b.n	8003d9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a0a:	4b30      	ldr	r3, [pc, #192]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a16:	4b2d      	ldr	r3, [pc, #180]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4929      	ldr	r1, [pc, #164]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]
 8003a2a:	e018      	b.n	8003a5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a2c:	4b27      	ldr	r3, [pc, #156]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a26      	ldr	r2, [pc, #152]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 8003a32:	f023 0301 	bic.w	r3, r3, #1
 8003a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7ff f9c6 	bl	8002dc8 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a40:	f7ff f9c2 	bl	8002dc8 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e1a3      	b.n	8003d9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a52:	4b1e      	ldr	r3, [pc, #120]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d038      	beq.n	8003adc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d019      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a72:	4b16      	ldr	r3, [pc, #88]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 8003a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a76:	4a15      	ldr	r2, [pc, #84]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7e:	f7ff f9a3 	bl	8002dc8 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a86:	f7ff f99f 	bl	8002dc8 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e180      	b.n	8003d9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a98:	4b0c      	ldr	r3, [pc, #48]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 8003a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0f0      	beq.n	8003a86 <HAL_RCC_OscConfig+0x23a>
 8003aa4:	e01a      	b.n	8003adc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aa6:	4b09      	ldr	r3, [pc, #36]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 8003aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aaa:	4a08      	ldr	r2, [pc, #32]	; (8003acc <HAL_RCC_OscConfig+0x280>)
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab2:	f7ff f989 	bl	8002dc8 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab8:	e00a      	b.n	8003ad0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aba:	f7ff f985 	bl	8002dc8 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d903      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e166      	b.n	8003d9a <HAL_RCC_OscConfig+0x54e>
 8003acc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad0:	4b92      	ldr	r3, [pc, #584]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1ee      	bne.n	8003aba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 80a4 	beq.w	8003c32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aea:	4b8c      	ldr	r3, [pc, #560]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10d      	bne.n	8003b12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af6:	4b89      	ldr	r3, [pc, #548]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	4a88      	ldr	r2, [pc, #544]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b00:	6413      	str	r3, [r2, #64]	; 0x40
 8003b02:	4b86      	ldr	r3, [pc, #536]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	60bb      	str	r3, [r7, #8]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b12:	4b83      	ldr	r3, [pc, #524]	; (8003d20 <HAL_RCC_OscConfig+0x4d4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d118      	bne.n	8003b50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003b1e:	4b80      	ldr	r3, [pc, #512]	; (8003d20 <HAL_RCC_OscConfig+0x4d4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a7f      	ldr	r2, [pc, #508]	; (8003d20 <HAL_RCC_OscConfig+0x4d4>)
 8003b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b2a:	f7ff f94d 	bl	8002dc8 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b32:	f7ff f949 	bl	8002dc8 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b64      	cmp	r3, #100	; 0x64
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e12a      	b.n	8003d9a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b44:	4b76      	ldr	r3, [pc, #472]	; (8003d20 <HAL_RCC_OscConfig+0x4d4>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d106      	bne.n	8003b66 <HAL_RCC_OscConfig+0x31a>
 8003b58:	4b70      	ldr	r3, [pc, #448]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5c:	4a6f      	ldr	r2, [pc, #444]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	6713      	str	r3, [r2, #112]	; 0x70
 8003b64:	e02d      	b.n	8003bc2 <HAL_RCC_OscConfig+0x376>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCC_OscConfig+0x33c>
 8003b6e:	4b6b      	ldr	r3, [pc, #428]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	4a6a      	ldr	r2, [pc, #424]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003b74:	f023 0301 	bic.w	r3, r3, #1
 8003b78:	6713      	str	r3, [r2, #112]	; 0x70
 8003b7a:	4b68      	ldr	r3, [pc, #416]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	4a67      	ldr	r2, [pc, #412]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003b80:	f023 0304 	bic.w	r3, r3, #4
 8003b84:	6713      	str	r3, [r2, #112]	; 0x70
 8003b86:	e01c      	b.n	8003bc2 <HAL_RCC_OscConfig+0x376>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b05      	cmp	r3, #5
 8003b8e:	d10c      	bne.n	8003baa <HAL_RCC_OscConfig+0x35e>
 8003b90:	4b62      	ldr	r3, [pc, #392]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b94:	4a61      	ldr	r2, [pc, #388]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003b96:	f043 0304 	orr.w	r3, r3, #4
 8003b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b9c:	4b5f      	ldr	r3, [pc, #380]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba0:	4a5e      	ldr	r2, [pc, #376]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba8:	e00b      	b.n	8003bc2 <HAL_RCC_OscConfig+0x376>
 8003baa:	4b5c      	ldr	r3, [pc, #368]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bae:	4a5b      	ldr	r2, [pc, #364]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003bb0:	f023 0301 	bic.w	r3, r3, #1
 8003bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb6:	4b59      	ldr	r3, [pc, #356]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bba:	4a58      	ldr	r2, [pc, #352]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003bbc:	f023 0304 	bic.w	r3, r3, #4
 8003bc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d015      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bca:	f7ff f8fd 	bl	8002dc8 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd0:	e00a      	b.n	8003be8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd2:	f7ff f8f9 	bl	8002dc8 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e0d8      	b.n	8003d9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be8:	4b4c      	ldr	r3, [pc, #304]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ee      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x386>
 8003bf4:	e014      	b.n	8003c20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf6:	f7ff f8e7 	bl	8002dc8 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bfc:	e00a      	b.n	8003c14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfe:	f7ff f8e3 	bl	8002dc8 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e0c2      	b.n	8003d9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c14:	4b41      	ldr	r3, [pc, #260]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1ee      	bne.n	8003bfe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c20:	7dfb      	ldrb	r3, [r7, #23]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d105      	bne.n	8003c32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c26:	4b3d      	ldr	r3, [pc, #244]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	4a3c      	ldr	r2, [pc, #240]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 80ae 	beq.w	8003d98 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c3c:	4b37      	ldr	r3, [pc, #220]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 030c 	and.w	r3, r3, #12
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d06d      	beq.n	8003d24 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d14b      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c50:	4b32      	ldr	r3, [pc, #200]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a31      	ldr	r2, [pc, #196]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7ff f8b4 	bl	8002dc8 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c64:	f7ff f8b0 	bl	8002dc8 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e091      	b.n	8003d9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c76:	4b29      	ldr	r3, [pc, #164]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69da      	ldr	r2, [r3, #28]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	019b      	lsls	r3, r3, #6
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	085b      	lsrs	r3, r3, #1
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	041b      	lsls	r3, r3, #16
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	061b      	lsls	r3, r3, #24
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cac:	071b      	lsls	r3, r3, #28
 8003cae:	491b      	ldr	r1, [pc, #108]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cb4:	4b19      	ldr	r3, [pc, #100]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a18      	ldr	r2, [pc, #96]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7ff f882 	bl	8002dc8 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7ff f87e 	bl	8002dc8 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e05f      	b.n	8003d9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cda:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x47c>
 8003ce6:	e057      	b.n	8003d98 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a0b      	ldr	r2, [pc, #44]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003cee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7ff f868 	bl	8002dc8 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfc:	f7ff f864 	bl	8002dc8 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e045      	b.n	8003d9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0e:	4b03      	ldr	r3, [pc, #12]	; (8003d1c <HAL_RCC_OscConfig+0x4d0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x4b0>
 8003d1a:	e03d      	b.n	8003d98 <HAL_RCC_OscConfig+0x54c>
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003d24:	4b1f      	ldr	r3, [pc, #124]	; (8003da4 <HAL_RCC_OscConfig+0x558>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d030      	beq.n	8003d94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d129      	bne.n	8003d94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d122      	bne.n	8003d94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d54:	4013      	ands	r3, r2
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d5a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d119      	bne.n	8003d94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6a:	085b      	lsrs	r3, r3, #1
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d10f      	bne.n	8003d94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d107      	bne.n	8003d94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d001      	beq.n	8003d98 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e000      	b.n	8003d9a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800

08003da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0d0      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc0:	4b6a      	ldr	r3, [pc, #424]	; (8003f6c <HAL_RCC_ClockConfig+0x1c4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 030f 	and.w	r3, r3, #15
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d910      	bls.n	8003df0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dce:	4b67      	ldr	r3, [pc, #412]	; (8003f6c <HAL_RCC_ClockConfig+0x1c4>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f023 020f 	bic.w	r2, r3, #15
 8003dd6:	4965      	ldr	r1, [pc, #404]	; (8003f6c <HAL_RCC_ClockConfig+0x1c4>)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dde:	4b63      	ldr	r3, [pc, #396]	; (8003f6c <HAL_RCC_ClockConfig+0x1c4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0b8      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d020      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e08:	4b59      	ldr	r3, [pc, #356]	; (8003f70 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	4a58      	ldr	r2, [pc, #352]	; (8003f70 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e20:	4b53      	ldr	r3, [pc, #332]	; (8003f70 <HAL_RCC_ClockConfig+0x1c8>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	4a52      	ldr	r2, [pc, #328]	; (8003f70 <HAL_RCC_ClockConfig+0x1c8>)
 8003e26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e2c:	4b50      	ldr	r3, [pc, #320]	; (8003f70 <HAL_RCC_ClockConfig+0x1c8>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	494d      	ldr	r1, [pc, #308]	; (8003f70 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d040      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d107      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e52:	4b47      	ldr	r3, [pc, #284]	; (8003f70 <HAL_RCC_ClockConfig+0x1c8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d115      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e07f      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d107      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6a:	4b41      	ldr	r3, [pc, #260]	; (8003f70 <HAL_RCC_ClockConfig+0x1c8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e073      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7a:	4b3d      	ldr	r3, [pc, #244]	; (8003f70 <HAL_RCC_ClockConfig+0x1c8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e06b      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e8a:	4b39      	ldr	r3, [pc, #228]	; (8003f70 <HAL_RCC_ClockConfig+0x1c8>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f023 0203 	bic.w	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4936      	ldr	r1, [pc, #216]	; (8003f70 <HAL_RCC_ClockConfig+0x1c8>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e9c:	f7fe ff94 	bl	8002dc8 <HAL_GetTick>
 8003ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	e00a      	b.n	8003eba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea4:	f7fe ff90 	bl	8002dc8 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e053      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eba:	4b2d      	ldr	r3, [pc, #180]	; (8003f70 <HAL_RCC_ClockConfig+0x1c8>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 020c 	and.w	r2, r3, #12
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d1eb      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ecc:	4b27      	ldr	r3, [pc, #156]	; (8003f6c <HAL_RCC_ClockConfig+0x1c4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 030f 	and.w	r3, r3, #15
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d210      	bcs.n	8003efc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eda:	4b24      	ldr	r3, [pc, #144]	; (8003f6c <HAL_RCC_ClockConfig+0x1c4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f023 020f 	bic.w	r2, r3, #15
 8003ee2:	4922      	ldr	r1, [pc, #136]	; (8003f6c <HAL_RCC_ClockConfig+0x1c4>)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eea:	4b20      	ldr	r3, [pc, #128]	; (8003f6c <HAL_RCC_ClockConfig+0x1c4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e032      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <HAL_RCC_ClockConfig+0x1c8>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4916      	ldr	r1, [pc, #88]	; (8003f70 <HAL_RCC_ClockConfig+0x1c8>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f26:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <HAL_RCC_ClockConfig+0x1c8>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	490e      	ldr	r1, [pc, #56]	; (8003f70 <HAL_RCC_ClockConfig+0x1c8>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f3a:	f000 f821 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <HAL_RCC_ClockConfig+0x1c8>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	490a      	ldr	r1, [pc, #40]	; (8003f74 <HAL_RCC_ClockConfig+0x1cc>)
 8003f4c:	5ccb      	ldrb	r3, [r1, r3]
 8003f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f52:	4a09      	ldr	r2, [pc, #36]	; (8003f78 <HAL_RCC_ClockConfig+0x1d0>)
 8003f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f56:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <HAL_RCC_ClockConfig+0x1d4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fe fef0 	bl	8002d40 <HAL_InitTick>

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40023c00 	.word	0x40023c00
 8003f70:	40023800 	.word	0x40023800
 8003f74:	0800d25c 	.word	0x0800d25c
 8003f78:	20000050 	.word	0x20000050
 8003f7c:	20000054 	.word	0x20000054

08003f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	607b      	str	r3, [r7, #4]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	2300      	movs	r3, #0
 8003f92:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f98:	4b67      	ldr	r3, [pc, #412]	; (8004138 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 030c 	and.w	r3, r3, #12
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d00d      	beq.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x40>
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	f200 80bd 	bhi.w	8004124 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d003      	beq.n	8003fba <HAL_RCC_GetSysClockFreq+0x3a>
 8003fb2:	e0b7      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fb4:	4b61      	ldr	r3, [pc, #388]	; (800413c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003fb6:	60bb      	str	r3, [r7, #8]
      break;
 8003fb8:	e0b7      	b.n	800412a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fba:	4b61      	ldr	r3, [pc, #388]	; (8004140 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003fbc:	60bb      	str	r3, [r7, #8]
      break;
 8003fbe:	e0b4      	b.n	800412a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fc0:	4b5d      	ldr	r3, [pc, #372]	; (8004138 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fc8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003fca:	4b5b      	ldr	r3, [pc, #364]	; (8004138 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d04d      	beq.n	8004072 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd6:	4b58      	ldr	r3, [pc, #352]	; (8004138 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	099b      	lsrs	r3, r3, #6
 8003fdc:	461a      	mov	r2, r3
 8003fde:	f04f 0300 	mov.w	r3, #0
 8003fe2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003fe6:	f04f 0100 	mov.w	r1, #0
 8003fea:	ea02 0800 	and.w	r8, r2, r0
 8003fee:	ea03 0901 	and.w	r9, r3, r1
 8003ff2:	4640      	mov	r0, r8
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	014b      	lsls	r3, r1, #5
 8004000:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004004:	0142      	lsls	r2, r0, #5
 8004006:	4610      	mov	r0, r2
 8004008:	4619      	mov	r1, r3
 800400a:	ebb0 0008 	subs.w	r0, r0, r8
 800400e:	eb61 0109 	sbc.w	r1, r1, r9
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	f04f 0300 	mov.w	r3, #0
 800401a:	018b      	lsls	r3, r1, #6
 800401c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004020:	0182      	lsls	r2, r0, #6
 8004022:	1a12      	subs	r2, r2, r0
 8004024:	eb63 0301 	sbc.w	r3, r3, r1
 8004028:	f04f 0000 	mov.w	r0, #0
 800402c:	f04f 0100 	mov.w	r1, #0
 8004030:	00d9      	lsls	r1, r3, #3
 8004032:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004036:	00d0      	lsls	r0, r2, #3
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	eb12 0208 	adds.w	r2, r2, r8
 8004040:	eb43 0309 	adc.w	r3, r3, r9
 8004044:	f04f 0000 	mov.w	r0, #0
 8004048:	f04f 0100 	mov.w	r1, #0
 800404c:	0259      	lsls	r1, r3, #9
 800404e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004052:	0250      	lsls	r0, r2, #9
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4610      	mov	r0, r2
 800405a:	4619      	mov	r1, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	461a      	mov	r2, r3
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	f7fc fb00 	bl	8000668 <__aeabi_uldivmod>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4613      	mov	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	e04a      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004072:	4b31      	ldr	r3, [pc, #196]	; (8004138 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	099b      	lsrs	r3, r3, #6
 8004078:	461a      	mov	r2, r3
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004082:	f04f 0100 	mov.w	r1, #0
 8004086:	ea02 0400 	and.w	r4, r2, r0
 800408a:	ea03 0501 	and.w	r5, r3, r1
 800408e:	4620      	mov	r0, r4
 8004090:	4629      	mov	r1, r5
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	014b      	lsls	r3, r1, #5
 800409c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040a0:	0142      	lsls	r2, r0, #5
 80040a2:	4610      	mov	r0, r2
 80040a4:	4619      	mov	r1, r3
 80040a6:	1b00      	subs	r0, r0, r4
 80040a8:	eb61 0105 	sbc.w	r1, r1, r5
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	018b      	lsls	r3, r1, #6
 80040b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040ba:	0182      	lsls	r2, r0, #6
 80040bc:	1a12      	subs	r2, r2, r0
 80040be:	eb63 0301 	sbc.w	r3, r3, r1
 80040c2:	f04f 0000 	mov.w	r0, #0
 80040c6:	f04f 0100 	mov.w	r1, #0
 80040ca:	00d9      	lsls	r1, r3, #3
 80040cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040d0:	00d0      	lsls	r0, r2, #3
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	1912      	adds	r2, r2, r4
 80040d8:	eb45 0303 	adc.w	r3, r5, r3
 80040dc:	f04f 0000 	mov.w	r0, #0
 80040e0:	f04f 0100 	mov.w	r1, #0
 80040e4:	0299      	lsls	r1, r3, #10
 80040e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80040ea:	0290      	lsls	r0, r2, #10
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4610      	mov	r0, r2
 80040f2:	4619      	mov	r1, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	f7fc fab4 	bl	8000668 <__aeabi_uldivmod>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4613      	mov	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	0c1b      	lsrs	r3, r3, #16
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	3301      	adds	r3, #1
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004120:	60bb      	str	r3, [r7, #8]
      break;
 8004122:	e002      	b.n	800412a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004124:	4b05      	ldr	r3, [pc, #20]	; (800413c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004126:	60bb      	str	r3, [r7, #8]
      break;
 8004128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800412a:	68bb      	ldr	r3, [r7, #8]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004136:	bf00      	nop
 8004138:	40023800 	.word	0x40023800
 800413c:	00f42400 	.word	0x00f42400
 8004140:	007a1200 	.word	0x007a1200

08004144 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004148:	4b03      	ldr	r3, [pc, #12]	; (8004158 <HAL_RCC_GetHCLKFreq+0x14>)
 800414a:	681b      	ldr	r3, [r3, #0]
}
 800414c:	4618      	mov	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	20000050 	.word	0x20000050

0800415c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004160:	f7ff fff0 	bl	8004144 <HAL_RCC_GetHCLKFreq>
 8004164:	4602      	mov	r2, r0
 8004166:	4b05      	ldr	r3, [pc, #20]	; (800417c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	0a9b      	lsrs	r3, r3, #10
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	4903      	ldr	r1, [pc, #12]	; (8004180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004172:	5ccb      	ldrb	r3, [r1, r3]
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004178:	4618      	mov	r0, r3
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40023800 	.word	0x40023800
 8004180:	0800d26c 	.word	0x0800d26c

08004184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004188:	f7ff ffdc 	bl	8004144 <HAL_RCC_GetHCLKFreq>
 800418c:	4602      	mov	r2, r0
 800418e:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	0b5b      	lsrs	r3, r3, #13
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	4903      	ldr	r1, [pc, #12]	; (80041a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800419a:	5ccb      	ldrb	r3, [r1, r3]
 800419c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40023800 	.word	0x40023800
 80041a8:	0800d26c 	.word	0x0800d26c

080041ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d012      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041d4:	4b69      	ldr	r3, [pc, #420]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	4a68      	ldr	r2, [pc, #416]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80041de:	6093      	str	r3, [r2, #8]
 80041e0:	4b66      	ldr	r3, [pc, #408]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e8:	4964      	ldr	r1, [pc, #400]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80041f6:	2301      	movs	r3, #1
 80041f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d017      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004206:	4b5d      	ldr	r3, [pc, #372]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800420c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004214:	4959      	ldr	r1, [pc, #356]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004224:	d101      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004226:	2301      	movs	r3, #1
 8004228:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004232:	2301      	movs	r3, #1
 8004234:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d017      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004242:	4b4e      	ldr	r3, [pc, #312]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004248:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	494a      	ldr	r1, [pc, #296]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004252:	4313      	orrs	r3, r2
 8004254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004260:	d101      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004262:	2301      	movs	r3, #1
 8004264:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800426e:	2301      	movs	r3, #1
 8004270:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800427e:	2301      	movs	r3, #1
 8004280:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 808b 	beq.w	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004290:	4b3a      	ldr	r3, [pc, #232]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	4a39      	ldr	r2, [pc, #228]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800429a:	6413      	str	r3, [r2, #64]	; 0x40
 800429c:	4b37      	ldr	r3, [pc, #220]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042a8:	4b35      	ldr	r3, [pc, #212]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a34      	ldr	r2, [pc, #208]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b4:	f7fe fd88 	bl	8002dc8 <HAL_GetTick>
 80042b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042bc:	f7fe fd84 	bl	8002dc8 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b64      	cmp	r3, #100	; 0x64
 80042c8:	d901      	bls.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e38f      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042ce:	4b2c      	ldr	r3, [pc, #176]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f0      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042da:	4b28      	ldr	r3, [pc, #160]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d035      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d02e      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042f8:	4b20      	ldr	r3, [pc, #128]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004300:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004302:	4b1e      	ldr	r3, [pc, #120]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004306:	4a1d      	ldr	r2, [pc, #116]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800430e:	4b1b      	ldr	r3, [pc, #108]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	4a1a      	ldr	r2, [pc, #104]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004318:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800431a:	4a18      	ldr	r2, [pc, #96]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004320:	4b16      	ldr	r3, [pc, #88]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b01      	cmp	r3, #1
 800432a:	d114      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432c:	f7fe fd4c 	bl	8002dc8 <HAL_GetTick>
 8004330:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004332:	e00a      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004334:	f7fe fd48 	bl	8002dc8 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004342:	4293      	cmp	r3, r2
 8004344:	d901      	bls.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e351      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800434a:	4b0c      	ldr	r3, [pc, #48]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0ee      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004362:	d111      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004370:	4b04      	ldr	r3, [pc, #16]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004372:	400b      	ands	r3, r1
 8004374:	4901      	ldr	r1, [pc, #4]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004376:	4313      	orrs	r3, r2
 8004378:	608b      	str	r3, [r1, #8]
 800437a:	e00b      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800437c:	40023800 	.word	0x40023800
 8004380:	40007000 	.word	0x40007000
 8004384:	0ffffcff 	.word	0x0ffffcff
 8004388:	4bb3      	ldr	r3, [pc, #716]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	4ab2      	ldr	r2, [pc, #712]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800438e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004392:	6093      	str	r3, [r2, #8]
 8004394:	4bb0      	ldr	r3, [pc, #704]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004396:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a0:	49ad      	ldr	r1, [pc, #692]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0310 	and.w	r3, r3, #16
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d010      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043b2:	4ba9      	ldr	r3, [pc, #676]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043b8:	4aa7      	ldr	r2, [pc, #668]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80043c2:	4ba5      	ldr	r3, [pc, #660]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	49a2      	ldr	r1, [pc, #648]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043e0:	4b9d      	ldr	r3, [pc, #628]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ee:	499a      	ldr	r1, [pc, #616]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004402:	4b95      	ldr	r3, [pc, #596]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004408:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004410:	4991      	ldr	r1, [pc, #580]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004424:	4b8c      	ldr	r3, [pc, #560]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004432:	4989      	ldr	r1, [pc, #548]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004446:	4b84      	ldr	r3, [pc, #528]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004454:	4980      	ldr	r1, [pc, #512]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004468:	4b7b      	ldr	r3, [pc, #492]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800446a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446e:	f023 0203 	bic.w	r2, r3, #3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004476:	4978      	ldr	r1, [pc, #480]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800448a:	4b73      	ldr	r3, [pc, #460]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800448c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004490:	f023 020c 	bic.w	r2, r3, #12
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004498:	496f      	ldr	r1, [pc, #444]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044ac:	4b6a      	ldr	r3, [pc, #424]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ba:	4967      	ldr	r1, [pc, #412]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044ce:	4b62      	ldr	r3, [pc, #392]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044dc:	495e      	ldr	r1, [pc, #376]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044f0:	4b59      	ldr	r3, [pc, #356]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fe:	4956      	ldr	r1, [pc, #344]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004512:	4b51      	ldr	r3, [pc, #324]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004518:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004520:	494d      	ldr	r1, [pc, #308]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004534:	4b48      	ldr	r3, [pc, #288]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004542:	4945      	ldr	r1, [pc, #276]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004556:	4b40      	ldr	r3, [pc, #256]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004564:	493c      	ldr	r1, [pc, #240]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004578:	4b37      	ldr	r3, [pc, #220]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800457a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004586:	4934      	ldr	r1, [pc, #208]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d011      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800459a:	4b2f      	ldr	r3, [pc, #188]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045a8:	492b      	ldr	r1, [pc, #172]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045b8:	d101      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80045ba:	2301      	movs	r3, #1
 80045bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80045ca:	2301      	movs	r3, #1
 80045cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045da:	4b1f      	ldr	r3, [pc, #124]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e8:	491b      	ldr	r1, [pc, #108]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00b      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045fc:	4b16      	ldr	r3, [pc, #88]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004602:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800460c:	4912      	ldr	r1, [pc, #72]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00b      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004620:	4b0d      	ldr	r3, [pc, #52]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004626:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004630:	4909      	ldr	r1, [pc, #36]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00f      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004644:	4b04      	ldr	r3, [pc, #16]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800464a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004654:	e002      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004656:	bf00      	nop
 8004658:	40023800 	.word	0x40023800
 800465c:	4986      	ldr	r1, [pc, #536]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00b      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004670:	4b81      	ldr	r3, [pc, #516]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004676:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004680:	497d      	ldr	r1, [pc, #500]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d006      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 80d6 	beq.w	8004848 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800469c:	4b76      	ldr	r3, [pc, #472]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a75      	ldr	r2, [pc, #468]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a8:	f7fe fb8e 	bl	8002dc8 <HAL_GetTick>
 80046ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046b0:	f7fe fb8a 	bl	8002dc8 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b64      	cmp	r3, #100	; 0x64
 80046bc:	d901      	bls.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e195      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046c2:	4b6d      	ldr	r3, [pc, #436]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f0      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d021      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d11d      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046e2:	4b65      	ldr	r3, [pc, #404]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e8:	0c1b      	lsrs	r3, r3, #16
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046f0:	4b61      	ldr	r3, [pc, #388]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f6:	0e1b      	lsrs	r3, r3, #24
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	019a      	lsls	r2, r3, #6
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	041b      	lsls	r3, r3, #16
 8004708:	431a      	orrs	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	061b      	lsls	r3, r3, #24
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	071b      	lsls	r3, r3, #28
 8004716:	4958      	ldr	r1, [pc, #352]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d004      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004732:	d00a      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800473c:	2b00      	cmp	r3, #0
 800473e:	d02e      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004748:	d129      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800474a:	4b4b      	ldr	r3, [pc, #300]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800474c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004750:	0c1b      	lsrs	r3, r3, #16
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004758:	4b47      	ldr	r3, [pc, #284]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800475a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800475e:	0f1b      	lsrs	r3, r3, #28
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	019a      	lsls	r2, r3, #6
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	041b      	lsls	r3, r3, #16
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	061b      	lsls	r3, r3, #24
 8004778:	431a      	orrs	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	071b      	lsls	r3, r3, #28
 800477e:	493e      	ldr	r1, [pc, #248]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004786:	4b3c      	ldr	r3, [pc, #240]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800478c:	f023 021f 	bic.w	r2, r3, #31
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	3b01      	subs	r3, #1
 8004796:	4938      	ldr	r1, [pc, #224]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d01d      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047aa:	4b33      	ldr	r3, [pc, #204]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047b0:	0e1b      	lsrs	r3, r3, #24
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047b8:	4b2f      	ldr	r3, [pc, #188]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047be:	0f1b      	lsrs	r3, r3, #28
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	019a      	lsls	r2, r3, #6
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	041b      	lsls	r3, r3, #16
 80047d2:	431a      	orrs	r2, r3
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	061b      	lsls	r3, r3, #24
 80047d8:	431a      	orrs	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	071b      	lsls	r3, r3, #28
 80047de:	4926      	ldr	r1, [pc, #152]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d011      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	019a      	lsls	r2, r3, #6
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	041b      	lsls	r3, r3, #16
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	061b      	lsls	r3, r3, #24
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	071b      	lsls	r3, r3, #28
 800480e:	491a      	ldr	r1, [pc, #104]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004816:	4b18      	ldr	r3, [pc, #96]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a17      	ldr	r2, [pc, #92]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800481c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004820:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004822:	f7fe fad1 	bl	8002dc8 <HAL_GetTick>
 8004826:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004828:	e008      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800482a:	f7fe facd 	bl	8002dc8 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b64      	cmp	r3, #100	; 0x64
 8004836:	d901      	bls.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e0d8      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800483c:	4b0e      	ldr	r3, [pc, #56]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0f0      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	2b01      	cmp	r3, #1
 800484c:	f040 80ce 	bne.w	80049ec <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004850:	4b09      	ldr	r3, [pc, #36]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a08      	ldr	r2, [pc, #32]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800485a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800485c:	f7fe fab4 	bl	8002dc8 <HAL_GetTick>
 8004860:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004862:	e00b      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004864:	f7fe fab0 	bl	8002dc8 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b64      	cmp	r3, #100	; 0x64
 8004870:	d904      	bls.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e0bb      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004876:	bf00      	nop
 8004878:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800487c:	4b5e      	ldr	r3, [pc, #376]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004888:	d0ec      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489a:	2b00      	cmp	r3, #0
 800489c:	d009      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d02e      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d12a      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048b2:	4b51      	ldr	r3, [pc, #324]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b8:	0c1b      	lsrs	r3, r3, #16
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048c0:	4b4d      	ldr	r3, [pc, #308]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c6:	0f1b      	lsrs	r3, r3, #28
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	019a      	lsls	r2, r3, #6
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	041b      	lsls	r3, r3, #16
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	061b      	lsls	r3, r3, #24
 80048e0:	431a      	orrs	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	071b      	lsls	r3, r3, #28
 80048e6:	4944      	ldr	r1, [pc, #272]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048ee:	4b42      	ldr	r3, [pc, #264]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fc:	3b01      	subs	r3, #1
 80048fe:	021b      	lsls	r3, r3, #8
 8004900:	493d      	ldr	r1, [pc, #244]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d022      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004918:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800491c:	d11d      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800491e:	4b36      	ldr	r3, [pc, #216]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004924:	0e1b      	lsrs	r3, r3, #24
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800492c:	4b32      	ldr	r3, [pc, #200]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800492e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004932:	0f1b      	lsrs	r3, r3, #28
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	019a      	lsls	r2, r3, #6
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	041b      	lsls	r3, r3, #16
 8004946:	431a      	orrs	r2, r3
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	061b      	lsls	r3, r3, #24
 800494c:	431a      	orrs	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	071b      	lsls	r3, r3, #28
 8004952:	4929      	ldr	r1, [pc, #164]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d028      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004966:	4b24      	ldr	r3, [pc, #144]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496c:	0e1b      	lsrs	r3, r3, #24
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004974:	4b20      	ldr	r3, [pc, #128]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497a:	0c1b      	lsrs	r3, r3, #16
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	019a      	lsls	r2, r3, #6
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	041b      	lsls	r3, r3, #16
 800498c:	431a      	orrs	r2, r3
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	061b      	lsls	r3, r3, #24
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	071b      	lsls	r3, r3, #28
 800499a:	4917      	ldr	r1, [pc, #92]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80049a2:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	4911      	ldr	r1, [pc, #68]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049b8:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a0e      	ldr	r2, [pc, #56]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c4:	f7fe fa00 	bl	8002dc8 <HAL_GetTick>
 80049c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049cc:	f7fe f9fc 	bl	8002dc8 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b64      	cmp	r3, #100	; 0x64
 80049d8:	d901      	bls.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e007      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049de:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049ea:	d1ef      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3720      	adds	r7, #32
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40023800 	.word	0x40023800

080049fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e09d      	b.n	8004b4a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d108      	bne.n	8004a28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a1e:	d009      	beq.n	8004a34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	61da      	str	r2, [r3, #28]
 8004a26:	e005      	b.n	8004a34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fd fedc 	bl	800280c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a74:	d902      	bls.n	8004a7c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	e002      	b.n	8004a82 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a80:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a8a:	d007      	beq.n	8004a9c <HAL_SPI_Init+0xa0>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a94:	d002      	beq.n	8004a9c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ade:	ea42 0103 	orr.w	r1, r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	0c1b      	lsrs	r3, r3, #16
 8004af8:	f003 0204 	and.w	r2, r3, #4
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b18:	ea42 0103 	orr.w	r1, r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b088      	sub	sp, #32
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	603b      	str	r3, [r7, #0]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_SPI_Transmit+0x22>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e158      	b.n	8004e26 <HAL_SPI_Transmit+0x2d4>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b7c:	f7fe f924 	bl	8002dc8 <HAL_GetTick>
 8004b80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d002      	beq.n	8004b98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b92:	2302      	movs	r3, #2
 8004b94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b96:	e13d      	b.n	8004e14 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <HAL_SPI_Transmit+0x52>
 8004b9e:	88fb      	ldrh	r3, [r7, #6]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d102      	bne.n	8004baa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ba8:	e134      	b.n	8004e14 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2203      	movs	r2, #3
 8004bae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	88fa      	ldrh	r2, [r7, #6]
 8004bc2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	88fa      	ldrh	r2, [r7, #6]
 8004bc8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf4:	d10f      	bne.n	8004c16 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c20:	2b40      	cmp	r3, #64	; 0x40
 8004c22:	d007      	beq.n	8004c34 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c3c:	d94b      	bls.n	8004cd6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <HAL_SPI_Transmit+0xfa>
 8004c46:	8afb      	ldrh	r3, [r7, #22]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d13e      	bne.n	8004cca <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	881a      	ldrh	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	1c9a      	adds	r2, r3, #2
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c70:	e02b      	b.n	8004cca <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d112      	bne.n	8004ca6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	881a      	ldrh	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	1c9a      	adds	r2, r3, #2
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ca4:	e011      	b.n	8004cca <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ca6:	f7fe f88f 	bl	8002dc8 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d803      	bhi.n	8004cbe <HAL_SPI_Transmit+0x16c>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cbc:	d102      	bne.n	8004cc4 <HAL_SPI_Transmit+0x172>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d102      	bne.n	8004cca <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cc8:	e0a4      	b.n	8004e14 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1ce      	bne.n	8004c72 <HAL_SPI_Transmit+0x120>
 8004cd4:	e07c      	b.n	8004dd0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <HAL_SPI_Transmit+0x192>
 8004cde:	8afb      	ldrh	r3, [r7, #22]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d170      	bne.n	8004dc6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d912      	bls.n	8004d14 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	881a      	ldrh	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	1c9a      	adds	r2, r3, #2
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b02      	subs	r3, #2
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d12:	e058      	b.n	8004dc6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	330c      	adds	r3, #12
 8004d1e:	7812      	ldrb	r2, [r2, #0]
 8004d20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d3a:	e044      	b.n	8004dc6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d12b      	bne.n	8004da2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d912      	bls.n	8004d7a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	881a      	ldrh	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	1c9a      	adds	r2, r3, #2
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b02      	subs	r3, #2
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d78:	e025      	b.n	8004dc6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	330c      	adds	r3, #12
 8004d84:	7812      	ldrb	r2, [r2, #0]
 8004d86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004da0:	e011      	b.n	8004dc6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004da2:	f7fe f811 	bl	8002dc8 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d803      	bhi.n	8004dba <HAL_SPI_Transmit+0x268>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004db8:	d102      	bne.n	8004dc0 <HAL_SPI_Transmit+0x26e>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d102      	bne.n	8004dc6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004dc4:	e026      	b.n	8004e14 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1b5      	bne.n	8004d3c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	6839      	ldr	r1, [r7, #0]
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 fb5b 	bl	8005490 <SPI_EndRxTxTransaction>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2220      	movs	r2, #32
 8004de4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10a      	bne.n	8004e04 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dee:	2300      	movs	r3, #0
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	613b      	str	r3, [r7, #16]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	77fb      	strb	r3, [r7, #31]
 8004e10:	e000      	b.n	8004e14 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004e12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e24:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b08a      	sub	sp, #40	; 0x28
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	607a      	str	r2, [r7, #4]
 8004e3a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_SPI_TransmitReceive+0x26>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e1fb      	b.n	800524c <HAL_SPI_TransmitReceive+0x41e>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e5c:	f7fd ffb4 	bl	8002dc8 <HAL_GetTick>
 8004e60:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e68:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004e70:	887b      	ldrh	r3, [r7, #2]
 8004e72:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004e74:	887b      	ldrh	r3, [r7, #2]
 8004e76:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e78:	7efb      	ldrb	r3, [r7, #27]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d00e      	beq.n	8004e9c <HAL_SPI_TransmitReceive+0x6e>
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e84:	d106      	bne.n	8004e94 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d102      	bne.n	8004e94 <HAL_SPI_TransmitReceive+0x66>
 8004e8e:	7efb      	ldrb	r3, [r7, #27]
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d003      	beq.n	8004e9c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004e94:	2302      	movs	r3, #2
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e9a:	e1cd      	b.n	8005238 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <HAL_SPI_TransmitReceive+0x80>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <HAL_SPI_TransmitReceive+0x80>
 8004ea8:	887b      	ldrh	r3, [r7, #2]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d103      	bne.n	8004eb6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004eb4:	e1c0      	b.n	8005238 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d003      	beq.n	8004eca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2205      	movs	r2, #5
 8004ec6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	887a      	ldrh	r2, [r7, #2]
 8004eda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	887a      	ldrh	r2, [r7, #2]
 8004ee2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	887a      	ldrh	r2, [r7, #2]
 8004ef0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	887a      	ldrh	r2, [r7, #2]
 8004ef6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f0c:	d802      	bhi.n	8004f14 <HAL_SPI_TransmitReceive+0xe6>
 8004f0e:	8a3b      	ldrh	r3, [r7, #16]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d908      	bls.n	8004f26 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f22:	605a      	str	r2, [r3, #4]
 8004f24:	e007      	b.n	8004f36 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f34:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f40:	2b40      	cmp	r3, #64	; 0x40
 8004f42:	d007      	beq.n	8004f54 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f5c:	d97c      	bls.n	8005058 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_SPI_TransmitReceive+0x13e>
 8004f66:	8a7b      	ldrh	r3, [r7, #18]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d169      	bne.n	8005040 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	881a      	ldrh	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7c:	1c9a      	adds	r2, r3, #2
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f90:	e056      	b.n	8005040 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d11b      	bne.n	8004fd8 <HAL_SPI_TransmitReceive+0x1aa>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d016      	beq.n	8004fd8 <HAL_SPI_TransmitReceive+0x1aa>
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d113      	bne.n	8004fd8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb4:	881a      	ldrh	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	1c9a      	adds	r2, r3, #2
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d11c      	bne.n	8005020 <HAL_SPI_TransmitReceive+0x1f2>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d016      	beq.n	8005020 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffc:	b292      	uxth	r2, r2
 8004ffe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	1c9a      	adds	r2, r3, #2
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005010:	b29b      	uxth	r3, r3
 8005012:	3b01      	subs	r3, #1
 8005014:	b29a      	uxth	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800501c:	2301      	movs	r3, #1
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005020:	f7fd fed2 	bl	8002dc8 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800502c:	429a      	cmp	r2, r3
 800502e:	d807      	bhi.n	8005040 <HAL_SPI_TransmitReceive+0x212>
 8005030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005036:	d003      	beq.n	8005040 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800503e:	e0fb      	b.n	8005238 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1a3      	bne.n	8004f92 <HAL_SPI_TransmitReceive+0x164>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005050:	b29b      	uxth	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d19d      	bne.n	8004f92 <HAL_SPI_TransmitReceive+0x164>
 8005056:	e0df      	b.n	8005218 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_SPI_TransmitReceive+0x23a>
 8005060:	8a7b      	ldrh	r3, [r7, #18]
 8005062:	2b01      	cmp	r3, #1
 8005064:	f040 80cb 	bne.w	80051fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b01      	cmp	r3, #1
 8005070:	d912      	bls.n	8005098 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005076:	881a      	ldrh	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	1c9a      	adds	r2, r3, #2
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b02      	subs	r3, #2
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005096:	e0b2      	b.n	80051fe <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	330c      	adds	r3, #12
 80050a2:	7812      	ldrb	r2, [r2, #0]
 80050a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050be:	e09e      	b.n	80051fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d134      	bne.n	8005138 <HAL_SPI_TransmitReceive+0x30a>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d02f      	beq.n	8005138 <HAL_SPI_TransmitReceive+0x30a>
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d12c      	bne.n	8005138 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d912      	bls.n	800510e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	881a      	ldrh	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	1c9a      	adds	r2, r3, #2
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005102:	b29b      	uxth	r3, r3
 8005104:	3b02      	subs	r3, #2
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800510c:	e012      	b.n	8005134 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	330c      	adds	r3, #12
 8005118:	7812      	ldrb	r2, [r2, #0]
 800511a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b01      	cmp	r3, #1
 8005144:	d148      	bne.n	80051d8 <HAL_SPI_TransmitReceive+0x3aa>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800514c:	b29b      	uxth	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d042      	beq.n	80051d8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b01      	cmp	r3, #1
 800515c:	d923      	bls.n	80051a6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	b292      	uxth	r2, r2
 800516a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005170:	1c9a      	adds	r2, r3, #2
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b02      	subs	r3, #2
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800518e:	b29b      	uxth	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	d81f      	bhi.n	80051d4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051a2:	605a      	str	r2, [r3, #4]
 80051a4:	e016      	b.n	80051d4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f103 020c 	add.w	r2, r3, #12
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	7812      	ldrb	r2, [r2, #0]
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051d4:	2301      	movs	r3, #1
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051d8:	f7fd fdf6 	bl	8002dc8 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d803      	bhi.n	80051f0 <HAL_SPI_TransmitReceive+0x3c2>
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051ee:	d102      	bne.n	80051f6 <HAL_SPI_TransmitReceive+0x3c8>
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d103      	bne.n	80051fe <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80051fc:	e01c      	b.n	8005238 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	f47f af5b 	bne.w	80050c0 <HAL_SPI_TransmitReceive+0x292>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	f47f af54 	bne.w	80050c0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 f937 	bl	8005490 <SPI_EndRxTxTransaction>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d006      	beq.n	8005236 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2220      	movs	r2, #32
 8005232:	661a      	str	r2, [r3, #96]	; 0x60
 8005234:	e000      	b.n	8005238 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005236:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005248:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800524c:	4618      	mov	r0, r3
 800524e:	3728      	adds	r7, #40	; 0x28
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	603b      	str	r3, [r7, #0]
 8005260:	4613      	mov	r3, r2
 8005262:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005264:	f7fd fdb0 	bl	8002dc8 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526c:	1a9b      	subs	r3, r3, r2
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	4413      	add	r3, r2
 8005272:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005274:	f7fd fda8 	bl	8002dc8 <HAL_GetTick>
 8005278:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800527a:	4b39      	ldr	r3, [pc, #228]	; (8005360 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	015b      	lsls	r3, r3, #5
 8005280:	0d1b      	lsrs	r3, r3, #20
 8005282:	69fa      	ldr	r2, [r7, #28]
 8005284:	fb02 f303 	mul.w	r3, r2, r3
 8005288:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800528a:	e054      	b.n	8005336 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005292:	d050      	beq.n	8005336 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005294:	f7fd fd98 	bl	8002dc8 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d902      	bls.n	80052aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d13d      	bne.n	8005326 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052c2:	d111      	bne.n	80052e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052cc:	d004      	beq.n	80052d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d6:	d107      	bne.n	80052e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052f0:	d10f      	bne.n	8005312 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005310:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e017      	b.n	8005356 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	3b01      	subs	r3, #1
 8005334:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4013      	ands	r3, r2
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	429a      	cmp	r2, r3
 8005344:	bf0c      	ite	eq
 8005346:	2301      	moveq	r3, #1
 8005348:	2300      	movne	r3, #0
 800534a:	b2db      	uxtb	r3, r3
 800534c:	461a      	mov	r2, r3
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	429a      	cmp	r2, r3
 8005352:	d19b      	bne.n	800528c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3720      	adds	r7, #32
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000050 	.word	0x20000050

08005364 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08a      	sub	sp, #40	; 0x28
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005372:	2300      	movs	r3, #0
 8005374:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005376:	f7fd fd27 	bl	8002dc8 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	1a9b      	subs	r3, r3, r2
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	4413      	add	r3, r2
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005386:	f7fd fd1f 	bl	8002dc8 <HAL_GetTick>
 800538a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	330c      	adds	r3, #12
 8005392:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005394:	4b3d      	ldr	r3, [pc, #244]	; (800548c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	4613      	mov	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	00da      	lsls	r2, r3, #3
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	0d1b      	lsrs	r3, r3, #20
 80053a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a6:	fb02 f303 	mul.w	r3, r2, r3
 80053aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80053ac:	e060      	b.n	8005470 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80053b4:	d107      	bne.n	80053c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d104      	bne.n	80053c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80053c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053cc:	d050      	beq.n	8005470 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053ce:	f7fd fcfb 	bl	8002dc8 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053da:	429a      	cmp	r2, r3
 80053dc:	d902      	bls.n	80053e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d13d      	bne.n	8005460 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053fc:	d111      	bne.n	8005422 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005406:	d004      	beq.n	8005412 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005410:	d107      	bne.n	8005422 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005420:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800542a:	d10f      	bne.n	800544c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800544a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e010      	b.n	8005482 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	3b01      	subs	r3, #1
 800546e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	4013      	ands	r3, r2
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	429a      	cmp	r2, r3
 800547e:	d196      	bne.n	80053ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3728      	adds	r7, #40	; 0x28
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20000050 	.word	0x20000050

08005490 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f7ff ff5b 	bl	8005364 <SPI_WaitFifoStateUntilTimeout>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d007      	beq.n	80054c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b8:	f043 0220 	orr.w	r2, r3, #32
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e046      	b.n	8005552 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054c4:	4b25      	ldr	r3, [pc, #148]	; (800555c <SPI_EndRxTxTransaction+0xcc>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a25      	ldr	r2, [pc, #148]	; (8005560 <SPI_EndRxTxTransaction+0xd0>)
 80054ca:	fba2 2303 	umull	r2, r3, r2, r3
 80054ce:	0d5b      	lsrs	r3, r3, #21
 80054d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054d4:	fb02 f303 	mul.w	r3, r2, r3
 80054d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054e2:	d112      	bne.n	800550a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2200      	movs	r2, #0
 80054ec:	2180      	movs	r1, #128	; 0x80
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f7ff feb0 	bl	8005254 <SPI_WaitFlagStateUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d016      	beq.n	8005528 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054fe:	f043 0220 	orr.w	r2, r3, #32
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e023      	b.n	8005552 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00a      	beq.n	8005526 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	3b01      	subs	r3, #1
 8005514:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005520:	2b80      	cmp	r3, #128	; 0x80
 8005522:	d0f2      	beq.n	800550a <SPI_EndRxTxTransaction+0x7a>
 8005524:	e000      	b.n	8005528 <SPI_EndRxTxTransaction+0x98>
        break;
 8005526:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2200      	movs	r2, #0
 8005530:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f7ff ff15 	bl	8005364 <SPI_WaitFifoStateUntilTimeout>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d007      	beq.n	8005550 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005544:	f043 0220 	orr.w	r2, r3, #32
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e000      	b.n	8005552 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000050 	.word	0x20000050
 8005560:	165e9f81 	.word	0x165e9f81

08005564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e049      	b.n	800560a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fd f982 	bl	8002894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3304      	adds	r3, #4
 80055a0:	4619      	mov	r1, r3
 80055a2:	4610      	mov	r0, r2
 80055a4:	f000 fbe0 	bl	8005d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b01      	cmp	r3, #1
 8005626:	d001      	beq.n	800562c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e04c      	b.n	80056c6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a26      	ldr	r2, [pc, #152]	; (80056d4 <HAL_TIM_Base_Start+0xc0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d022      	beq.n	8005684 <HAL_TIM_Base_Start+0x70>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005646:	d01d      	beq.n	8005684 <HAL_TIM_Base_Start+0x70>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a22      	ldr	r2, [pc, #136]	; (80056d8 <HAL_TIM_Base_Start+0xc4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d018      	beq.n	8005684 <HAL_TIM_Base_Start+0x70>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a21      	ldr	r2, [pc, #132]	; (80056dc <HAL_TIM_Base_Start+0xc8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d013      	beq.n	8005684 <HAL_TIM_Base_Start+0x70>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a1f      	ldr	r2, [pc, #124]	; (80056e0 <HAL_TIM_Base_Start+0xcc>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d00e      	beq.n	8005684 <HAL_TIM_Base_Start+0x70>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a1e      	ldr	r2, [pc, #120]	; (80056e4 <HAL_TIM_Base_Start+0xd0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d009      	beq.n	8005684 <HAL_TIM_Base_Start+0x70>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a1c      	ldr	r2, [pc, #112]	; (80056e8 <HAL_TIM_Base_Start+0xd4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d004      	beq.n	8005684 <HAL_TIM_Base_Start+0x70>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a1b      	ldr	r2, [pc, #108]	; (80056ec <HAL_TIM_Base_Start+0xd8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d115      	bne.n	80056b0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	4b19      	ldr	r3, [pc, #100]	; (80056f0 <HAL_TIM_Base_Start+0xdc>)
 800568c:	4013      	ands	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2b06      	cmp	r3, #6
 8005694:	d015      	beq.n	80056c2 <HAL_TIM_Base_Start+0xae>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800569c:	d011      	beq.n	80056c2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 0201 	orr.w	r2, r2, #1
 80056ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ae:	e008      	b.n	80056c2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0201 	orr.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	e000      	b.n	80056c4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40010000 	.word	0x40010000
 80056d8:	40000400 	.word	0x40000400
 80056dc:	40000800 	.word	0x40000800
 80056e0:	40000c00 	.word	0x40000c00
 80056e4:	40010400 	.word	0x40010400
 80056e8:	40014000 	.word	0x40014000
 80056ec:	40001800 	.word	0x40001800
 80056f0:	00010007 	.word	0x00010007

080056f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e049      	b.n	800579a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f841 	bl	80057a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f000 fb18 	bl	8005d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
	...

080057b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d109      	bne.n	80057dc <HAL_TIM_PWM_Start+0x24>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	bf14      	ite	ne
 80057d4:	2301      	movne	r3, #1
 80057d6:	2300      	moveq	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	e03c      	b.n	8005856 <HAL_TIM_PWM_Start+0x9e>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d109      	bne.n	80057f6 <HAL_TIM_PWM_Start+0x3e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	bf14      	ite	ne
 80057ee:	2301      	movne	r3, #1
 80057f0:	2300      	moveq	r3, #0
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	e02f      	b.n	8005856 <HAL_TIM_PWM_Start+0x9e>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d109      	bne.n	8005810 <HAL_TIM_PWM_Start+0x58>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b01      	cmp	r3, #1
 8005806:	bf14      	ite	ne
 8005808:	2301      	movne	r3, #1
 800580a:	2300      	moveq	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	e022      	b.n	8005856 <HAL_TIM_PWM_Start+0x9e>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2b0c      	cmp	r3, #12
 8005814:	d109      	bne.n	800582a <HAL_TIM_PWM_Start+0x72>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b01      	cmp	r3, #1
 8005820:	bf14      	ite	ne
 8005822:	2301      	movne	r3, #1
 8005824:	2300      	moveq	r3, #0
 8005826:	b2db      	uxtb	r3, r3
 8005828:	e015      	b.n	8005856 <HAL_TIM_PWM_Start+0x9e>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b10      	cmp	r3, #16
 800582e:	d109      	bne.n	8005844 <HAL_TIM_PWM_Start+0x8c>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b01      	cmp	r3, #1
 800583a:	bf14      	ite	ne
 800583c:	2301      	movne	r3, #1
 800583e:	2300      	moveq	r3, #0
 8005840:	b2db      	uxtb	r3, r3
 8005842:	e008      	b.n	8005856 <HAL_TIM_PWM_Start+0x9e>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b01      	cmp	r3, #1
 800584e:	bf14      	ite	ne
 8005850:	2301      	movne	r3, #1
 8005852:	2300      	moveq	r3, #0
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e092      	b.n	8005984 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d104      	bne.n	800586e <HAL_TIM_PWM_Start+0xb6>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800586c:	e023      	b.n	80058b6 <HAL_TIM_PWM_Start+0xfe>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b04      	cmp	r3, #4
 8005872:	d104      	bne.n	800587e <HAL_TIM_PWM_Start+0xc6>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800587c:	e01b      	b.n	80058b6 <HAL_TIM_PWM_Start+0xfe>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b08      	cmp	r3, #8
 8005882:	d104      	bne.n	800588e <HAL_TIM_PWM_Start+0xd6>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800588c:	e013      	b.n	80058b6 <HAL_TIM_PWM_Start+0xfe>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b0c      	cmp	r3, #12
 8005892:	d104      	bne.n	800589e <HAL_TIM_PWM_Start+0xe6>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800589c:	e00b      	b.n	80058b6 <HAL_TIM_PWM_Start+0xfe>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d104      	bne.n	80058ae <HAL_TIM_PWM_Start+0xf6>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058ac:	e003      	b.n	80058b6 <HAL_TIM_PWM_Start+0xfe>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2202      	movs	r2, #2
 80058b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2201      	movs	r2, #1
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fdea 	bl	8006498 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a30      	ldr	r2, [pc, #192]	; (800598c <HAL_TIM_PWM_Start+0x1d4>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d004      	beq.n	80058d8 <HAL_TIM_PWM_Start+0x120>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a2f      	ldr	r2, [pc, #188]	; (8005990 <HAL_TIM_PWM_Start+0x1d8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d101      	bne.n	80058dc <HAL_TIM_PWM_Start+0x124>
 80058d8:	2301      	movs	r3, #1
 80058da:	e000      	b.n	80058de <HAL_TIM_PWM_Start+0x126>
 80058dc:	2300      	movs	r3, #0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d007      	beq.n	80058f2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a25      	ldr	r2, [pc, #148]	; (800598c <HAL_TIM_PWM_Start+0x1d4>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d022      	beq.n	8005942 <HAL_TIM_PWM_Start+0x18a>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005904:	d01d      	beq.n	8005942 <HAL_TIM_PWM_Start+0x18a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a22      	ldr	r2, [pc, #136]	; (8005994 <HAL_TIM_PWM_Start+0x1dc>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d018      	beq.n	8005942 <HAL_TIM_PWM_Start+0x18a>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a20      	ldr	r2, [pc, #128]	; (8005998 <HAL_TIM_PWM_Start+0x1e0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d013      	beq.n	8005942 <HAL_TIM_PWM_Start+0x18a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a1f      	ldr	r2, [pc, #124]	; (800599c <HAL_TIM_PWM_Start+0x1e4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00e      	beq.n	8005942 <HAL_TIM_PWM_Start+0x18a>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a19      	ldr	r2, [pc, #100]	; (8005990 <HAL_TIM_PWM_Start+0x1d8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d009      	beq.n	8005942 <HAL_TIM_PWM_Start+0x18a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a1b      	ldr	r2, [pc, #108]	; (80059a0 <HAL_TIM_PWM_Start+0x1e8>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d004      	beq.n	8005942 <HAL_TIM_PWM_Start+0x18a>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a19      	ldr	r2, [pc, #100]	; (80059a4 <HAL_TIM_PWM_Start+0x1ec>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d115      	bne.n	800596e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	4b17      	ldr	r3, [pc, #92]	; (80059a8 <HAL_TIM_PWM_Start+0x1f0>)
 800594a:	4013      	ands	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b06      	cmp	r3, #6
 8005952:	d015      	beq.n	8005980 <HAL_TIM_PWM_Start+0x1c8>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800595a:	d011      	beq.n	8005980 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0201 	orr.w	r2, r2, #1
 800596a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596c:	e008      	b.n	8005980 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 0201 	orr.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	e000      	b.n	8005982 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005980:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	40010000 	.word	0x40010000
 8005990:	40010400 	.word	0x40010400
 8005994:	40000400 	.word	0x40000400
 8005998:	40000800 	.word	0x40000800
 800599c:	40000c00 	.word	0x40000c00
 80059a0:	40014000 	.word	0x40014000
 80059a4:	40001800 	.word	0x40001800
 80059a8:	00010007 	.word	0x00010007

080059ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e0ff      	b.n	8005bca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b14      	cmp	r3, #20
 80059d6:	f200 80f0 	bhi.w	8005bba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80059da:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e0:	08005a35 	.word	0x08005a35
 80059e4:	08005bbb 	.word	0x08005bbb
 80059e8:	08005bbb 	.word	0x08005bbb
 80059ec:	08005bbb 	.word	0x08005bbb
 80059f0:	08005a75 	.word	0x08005a75
 80059f4:	08005bbb 	.word	0x08005bbb
 80059f8:	08005bbb 	.word	0x08005bbb
 80059fc:	08005bbb 	.word	0x08005bbb
 8005a00:	08005ab7 	.word	0x08005ab7
 8005a04:	08005bbb 	.word	0x08005bbb
 8005a08:	08005bbb 	.word	0x08005bbb
 8005a0c:	08005bbb 	.word	0x08005bbb
 8005a10:	08005af7 	.word	0x08005af7
 8005a14:	08005bbb 	.word	0x08005bbb
 8005a18:	08005bbb 	.word	0x08005bbb
 8005a1c:	08005bbb 	.word	0x08005bbb
 8005a20:	08005b39 	.word	0x08005b39
 8005a24:	08005bbb 	.word	0x08005bbb
 8005a28:	08005bbb 	.word	0x08005bbb
 8005a2c:	08005bbb 	.word	0x08005bbb
 8005a30:	08005b79 	.word	0x08005b79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68b9      	ldr	r1, [r7, #8]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fa34 	bl	8005ea8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699a      	ldr	r2, [r3, #24]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0208 	orr.w	r2, r2, #8
 8005a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699a      	ldr	r2, [r3, #24]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0204 	bic.w	r2, r2, #4
 8005a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6999      	ldr	r1, [r3, #24]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	691a      	ldr	r2, [r3, #16]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	619a      	str	r2, [r3, #24]
      break;
 8005a72:	e0a5      	b.n	8005bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fa86 	bl	8005f8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699a      	ldr	r2, [r3, #24]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699a      	ldr	r2, [r3, #24]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6999      	ldr	r1, [r3, #24]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	021a      	lsls	r2, r3, #8
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	619a      	str	r2, [r3, #24]
      break;
 8005ab4:	e084      	b.n	8005bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68b9      	ldr	r1, [r7, #8]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 fadd 	bl	800607c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69da      	ldr	r2, [r3, #28]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0208 	orr.w	r2, r2, #8
 8005ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	69da      	ldr	r2, [r3, #28]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0204 	bic.w	r2, r2, #4
 8005ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	69d9      	ldr	r1, [r3, #28]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	61da      	str	r2, [r3, #28]
      break;
 8005af4:	e064      	b.n	8005bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 fb33 	bl	8006168 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69da      	ldr	r2, [r3, #28]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69da      	ldr	r2, [r3, #28]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69d9      	ldr	r1, [r3, #28]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	021a      	lsls	r2, r3, #8
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	61da      	str	r2, [r3, #28]
      break;
 8005b36:	e043      	b.n	8005bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fb6a 	bl	8006218 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0208 	orr.w	r2, r2, #8
 8005b52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0204 	bic.w	r2, r2, #4
 8005b62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	691a      	ldr	r2, [r3, #16]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b76:	e023      	b.n	8005bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68b9      	ldr	r1, [r7, #8]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fb9c 	bl	80062bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	021a      	lsls	r2, r3, #8
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bb8:	e002      	b.n	8005bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8005bbe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop

08005bd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_TIM_ConfigClockSource+0x1c>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e0b4      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x186>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	4b56      	ldr	r3, [pc, #344]	; (8005d64 <HAL_TIM_ConfigClockSource+0x190>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c28:	d03e      	beq.n	8005ca8 <HAL_TIM_ConfigClockSource+0xd4>
 8005c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c2e:	f200 8087 	bhi.w	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c36:	f000 8086 	beq.w	8005d46 <HAL_TIM_ConfigClockSource+0x172>
 8005c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3e:	d87f      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c40:	2b70      	cmp	r3, #112	; 0x70
 8005c42:	d01a      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0xa6>
 8005c44:	2b70      	cmp	r3, #112	; 0x70
 8005c46:	d87b      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c48:	2b60      	cmp	r3, #96	; 0x60
 8005c4a:	d050      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x11a>
 8005c4c:	2b60      	cmp	r3, #96	; 0x60
 8005c4e:	d877      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c50:	2b50      	cmp	r3, #80	; 0x50
 8005c52:	d03c      	beq.n	8005cce <HAL_TIM_ConfigClockSource+0xfa>
 8005c54:	2b50      	cmp	r3, #80	; 0x50
 8005c56:	d873      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c58:	2b40      	cmp	r3, #64	; 0x40
 8005c5a:	d058      	beq.n	8005d0e <HAL_TIM_ConfigClockSource+0x13a>
 8005c5c:	2b40      	cmp	r3, #64	; 0x40
 8005c5e:	d86f      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c60:	2b30      	cmp	r3, #48	; 0x30
 8005c62:	d064      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x15a>
 8005c64:	2b30      	cmp	r3, #48	; 0x30
 8005c66:	d86b      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	d060      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x15a>
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	d867      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d05c      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x15a>
 8005c74:	2b10      	cmp	r3, #16
 8005c76:	d05a      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x15a>
 8005c78:	e062      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6899      	ldr	r1, [r3, #8]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f000 fbe5 	bl	8006458 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	609a      	str	r2, [r3, #8]
      break;
 8005ca6:	e04f      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6818      	ldr	r0, [r3, #0]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	6899      	ldr	r1, [r3, #8]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f000 fbce 	bl	8006458 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cca:	609a      	str	r2, [r3, #8]
      break;
 8005ccc:	e03c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	6859      	ldr	r1, [r3, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f000 fb42 	bl	8006364 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2150      	movs	r1, #80	; 0x50
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 fb9b 	bl	8006422 <TIM_ITRx_SetConfig>
      break;
 8005cec:	e02c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	6859      	ldr	r1, [r3, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f000 fb61 	bl	80063c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2160      	movs	r1, #96	; 0x60
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 fb8b 	bl	8006422 <TIM_ITRx_SetConfig>
      break;
 8005d0c:	e01c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6818      	ldr	r0, [r3, #0]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	6859      	ldr	r1, [r3, #4]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f000 fb22 	bl	8006364 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2140      	movs	r1, #64	; 0x40
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fb7b 	bl	8006422 <TIM_ITRx_SetConfig>
      break;
 8005d2c:	e00c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4619      	mov	r1, r3
 8005d38:	4610      	mov	r0, r2
 8005d3a:	f000 fb72 	bl	8006422 <TIM_ITRx_SetConfig>
      break;
 8005d3e:	e003      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	73fb      	strb	r3, [r7, #15]
      break;
 8005d44:	e000      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	fffeff88 	.word	0xfffeff88

08005d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a40      	ldr	r2, [pc, #256]	; (8005e7c <TIM_Base_SetConfig+0x114>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d013      	beq.n	8005da8 <TIM_Base_SetConfig+0x40>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d86:	d00f      	beq.n	8005da8 <TIM_Base_SetConfig+0x40>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a3d      	ldr	r2, [pc, #244]	; (8005e80 <TIM_Base_SetConfig+0x118>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d00b      	beq.n	8005da8 <TIM_Base_SetConfig+0x40>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a3c      	ldr	r2, [pc, #240]	; (8005e84 <TIM_Base_SetConfig+0x11c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d007      	beq.n	8005da8 <TIM_Base_SetConfig+0x40>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a3b      	ldr	r2, [pc, #236]	; (8005e88 <TIM_Base_SetConfig+0x120>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d003      	beq.n	8005da8 <TIM_Base_SetConfig+0x40>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a3a      	ldr	r2, [pc, #232]	; (8005e8c <TIM_Base_SetConfig+0x124>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d108      	bne.n	8005dba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a2f      	ldr	r2, [pc, #188]	; (8005e7c <TIM_Base_SetConfig+0x114>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d02b      	beq.n	8005e1a <TIM_Base_SetConfig+0xb2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc8:	d027      	beq.n	8005e1a <TIM_Base_SetConfig+0xb2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a2c      	ldr	r2, [pc, #176]	; (8005e80 <TIM_Base_SetConfig+0x118>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d023      	beq.n	8005e1a <TIM_Base_SetConfig+0xb2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a2b      	ldr	r2, [pc, #172]	; (8005e84 <TIM_Base_SetConfig+0x11c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d01f      	beq.n	8005e1a <TIM_Base_SetConfig+0xb2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a2a      	ldr	r2, [pc, #168]	; (8005e88 <TIM_Base_SetConfig+0x120>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d01b      	beq.n	8005e1a <TIM_Base_SetConfig+0xb2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a29      	ldr	r2, [pc, #164]	; (8005e8c <TIM_Base_SetConfig+0x124>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d017      	beq.n	8005e1a <TIM_Base_SetConfig+0xb2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a28      	ldr	r2, [pc, #160]	; (8005e90 <TIM_Base_SetConfig+0x128>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d013      	beq.n	8005e1a <TIM_Base_SetConfig+0xb2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a27      	ldr	r2, [pc, #156]	; (8005e94 <TIM_Base_SetConfig+0x12c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00f      	beq.n	8005e1a <TIM_Base_SetConfig+0xb2>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a26      	ldr	r2, [pc, #152]	; (8005e98 <TIM_Base_SetConfig+0x130>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00b      	beq.n	8005e1a <TIM_Base_SetConfig+0xb2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a25      	ldr	r2, [pc, #148]	; (8005e9c <TIM_Base_SetConfig+0x134>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d007      	beq.n	8005e1a <TIM_Base_SetConfig+0xb2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a24      	ldr	r2, [pc, #144]	; (8005ea0 <TIM_Base_SetConfig+0x138>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d003      	beq.n	8005e1a <TIM_Base_SetConfig+0xb2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a23      	ldr	r2, [pc, #140]	; (8005ea4 <TIM_Base_SetConfig+0x13c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d108      	bne.n	8005e2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a0a      	ldr	r2, [pc, #40]	; (8005e7c <TIM_Base_SetConfig+0x114>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d003      	beq.n	8005e60 <TIM_Base_SetConfig+0xf8>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a0c      	ldr	r2, [pc, #48]	; (8005e8c <TIM_Base_SetConfig+0x124>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d103      	bne.n	8005e68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	615a      	str	r2, [r3, #20]
}
 8005e6e:	bf00      	nop
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40010000 	.word	0x40010000
 8005e80:	40000400 	.word	0x40000400
 8005e84:	40000800 	.word	0x40000800
 8005e88:	40000c00 	.word	0x40000c00
 8005e8c:	40010400 	.word	0x40010400
 8005e90:	40014000 	.word	0x40014000
 8005e94:	40014400 	.word	0x40014400
 8005e98:	40014800 	.word	0x40014800
 8005e9c:	40001800 	.word	0x40001800
 8005ea0:	40001c00 	.word	0x40001c00
 8005ea4:	40002000 	.word	0x40002000

08005ea8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	f023 0201 	bic.w	r2, r3, #1
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4b2b      	ldr	r3, [pc, #172]	; (8005f80 <TIM_OC1_SetConfig+0xd8>)
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 0303 	bic.w	r3, r3, #3
 8005ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f023 0302 	bic.w	r3, r3, #2
 8005ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a21      	ldr	r2, [pc, #132]	; (8005f84 <TIM_OC1_SetConfig+0xdc>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d003      	beq.n	8005f0c <TIM_OC1_SetConfig+0x64>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a20      	ldr	r2, [pc, #128]	; (8005f88 <TIM_OC1_SetConfig+0xe0>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d10c      	bne.n	8005f26 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f023 0308 	bic.w	r3, r3, #8
 8005f12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f023 0304 	bic.w	r3, r3, #4
 8005f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a16      	ldr	r2, [pc, #88]	; (8005f84 <TIM_OC1_SetConfig+0xdc>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d003      	beq.n	8005f36 <TIM_OC1_SetConfig+0x8e>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a15      	ldr	r2, [pc, #84]	; (8005f88 <TIM_OC1_SetConfig+0xe0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d111      	bne.n	8005f5a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	621a      	str	r2, [r3, #32]
}
 8005f74:	bf00      	nop
 8005f76:	371c      	adds	r7, #28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	fffeff8f 	.word	0xfffeff8f
 8005f84:	40010000 	.word	0x40010000
 8005f88:	40010400 	.word	0x40010400

08005f8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	f023 0210 	bic.w	r2, r3, #16
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4b2e      	ldr	r3, [pc, #184]	; (8006070 <TIM_OC2_SetConfig+0xe4>)
 8005fb8:	4013      	ands	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	021b      	lsls	r3, r3, #8
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f023 0320 	bic.w	r3, r3, #32
 8005fd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	011b      	lsls	r3, r3, #4
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a23      	ldr	r2, [pc, #140]	; (8006074 <TIM_OC2_SetConfig+0xe8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d003      	beq.n	8005ff4 <TIM_OC2_SetConfig+0x68>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a22      	ldr	r2, [pc, #136]	; (8006078 <TIM_OC2_SetConfig+0xec>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d10d      	bne.n	8006010 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800600e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a18      	ldr	r2, [pc, #96]	; (8006074 <TIM_OC2_SetConfig+0xe8>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d003      	beq.n	8006020 <TIM_OC2_SetConfig+0x94>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a17      	ldr	r2, [pc, #92]	; (8006078 <TIM_OC2_SetConfig+0xec>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d113      	bne.n	8006048 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006026:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800602e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4313      	orrs	r3, r2
 800603a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	4313      	orrs	r3, r2
 8006046:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	621a      	str	r2, [r3, #32]
}
 8006062:	bf00      	nop
 8006064:	371c      	adds	r7, #28
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	feff8fff 	.word	0xfeff8fff
 8006074:	40010000 	.word	0x40010000
 8006078:	40010400 	.word	0x40010400

0800607c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800607c:	b480      	push	{r7}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4b2d      	ldr	r3, [pc, #180]	; (800615c <TIM_OC3_SetConfig+0xe0>)
 80060a8:	4013      	ands	r3, r2
 80060aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f023 0303 	bic.w	r3, r3, #3
 80060b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	021b      	lsls	r3, r3, #8
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a22      	ldr	r2, [pc, #136]	; (8006160 <TIM_OC3_SetConfig+0xe4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d003      	beq.n	80060e2 <TIM_OC3_SetConfig+0x66>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a21      	ldr	r2, [pc, #132]	; (8006164 <TIM_OC3_SetConfig+0xe8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d10d      	bne.n	80060fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	021b      	lsls	r3, r3, #8
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a17      	ldr	r2, [pc, #92]	; (8006160 <TIM_OC3_SetConfig+0xe4>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d003      	beq.n	800610e <TIM_OC3_SetConfig+0x92>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a16      	ldr	r2, [pc, #88]	; (8006164 <TIM_OC3_SetConfig+0xe8>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d113      	bne.n	8006136 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800611c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	011b      	lsls	r3, r3, #4
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	4313      	orrs	r3, r2
 8006134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	621a      	str	r2, [r3, #32]
}
 8006150:	bf00      	nop
 8006152:	371c      	adds	r7, #28
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	fffeff8f 	.word	0xfffeff8f
 8006160:	40010000 	.word	0x40010000
 8006164:	40010400 	.word	0x40010400

08006168 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4b1e      	ldr	r3, [pc, #120]	; (800620c <TIM_OC4_SetConfig+0xa4>)
 8006194:	4013      	ands	r3, r2
 8006196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800619e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	021b      	lsls	r3, r3, #8
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	031b      	lsls	r3, r3, #12
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	4313      	orrs	r3, r2
 80061be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a13      	ldr	r2, [pc, #76]	; (8006210 <TIM_OC4_SetConfig+0xa8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d003      	beq.n	80061d0 <TIM_OC4_SetConfig+0x68>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a12      	ldr	r2, [pc, #72]	; (8006214 <TIM_OC4_SetConfig+0xac>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d109      	bne.n	80061e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	019b      	lsls	r3, r3, #6
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	621a      	str	r2, [r3, #32]
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	feff8fff 	.word	0xfeff8fff
 8006210:	40010000 	.word	0x40010000
 8006214:	40010400 	.word	0x40010400

08006218 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4b1b      	ldr	r3, [pc, #108]	; (80062b0 <TIM_OC5_SetConfig+0x98>)
 8006244:	4013      	ands	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006258:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	041b      	lsls	r3, r3, #16
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	4313      	orrs	r3, r2
 8006264:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a12      	ldr	r2, [pc, #72]	; (80062b4 <TIM_OC5_SetConfig+0x9c>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d003      	beq.n	8006276 <TIM_OC5_SetConfig+0x5e>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a11      	ldr	r2, [pc, #68]	; (80062b8 <TIM_OC5_SetConfig+0xa0>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d109      	bne.n	800628a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800627c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	4313      	orrs	r3, r2
 8006288:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	621a      	str	r2, [r3, #32]
}
 80062a4:	bf00      	nop
 80062a6:	371c      	adds	r7, #28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	fffeff8f 	.word	0xfffeff8f
 80062b4:	40010000 	.word	0x40010000
 80062b8:	40010400 	.word	0x40010400

080062bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	4b1c      	ldr	r3, [pc, #112]	; (8006358 <TIM_OC6_SetConfig+0x9c>)
 80062e8:	4013      	ands	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	021b      	lsls	r3, r3, #8
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	051b      	lsls	r3, r3, #20
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	4313      	orrs	r3, r2
 800630a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a13      	ldr	r2, [pc, #76]	; (800635c <TIM_OC6_SetConfig+0xa0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d003      	beq.n	800631c <TIM_OC6_SetConfig+0x60>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a12      	ldr	r2, [pc, #72]	; (8006360 <TIM_OC6_SetConfig+0xa4>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d109      	bne.n	8006330 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006322:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	029b      	lsls	r3, r3, #10
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	4313      	orrs	r3, r2
 800632e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	621a      	str	r2, [r3, #32]
}
 800634a:	bf00      	nop
 800634c:	371c      	adds	r7, #28
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	feff8fff 	.word	0xfeff8fff
 800635c:	40010000 	.word	0x40010000
 8006360:	40010400 	.word	0x40010400

08006364 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006364:	b480      	push	{r7}
 8006366:	b087      	sub	sp, #28
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	f023 0201 	bic.w	r2, r3, #1
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800638e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f023 030a 	bic.w	r3, r3, #10
 80063a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	621a      	str	r2, [r3, #32]
}
 80063b6:	bf00      	nop
 80063b8:	371c      	adds	r7, #28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b087      	sub	sp, #28
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	60f8      	str	r0, [r7, #12]
 80063ca:	60b9      	str	r1, [r7, #8]
 80063cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	f023 0210 	bic.w	r2, r3, #16
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	031b      	lsls	r3, r3, #12
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	621a      	str	r2, [r3, #32]
}
 8006416:	bf00      	nop
 8006418:	371c      	adds	r7, #28
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006422:	b480      	push	{r7}
 8006424:	b085      	sub	sp, #20
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006438:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	4313      	orrs	r3, r2
 8006440:	f043 0307 	orr.w	r3, r3, #7
 8006444:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	609a      	str	r2, [r3, #8]
}
 800644c:	bf00      	nop
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
 8006464:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006472:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	021a      	lsls	r2, r3, #8
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	431a      	orrs	r2, r3
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	4313      	orrs	r3, r2
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	4313      	orrs	r3, r2
 8006484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	609a      	str	r2, [r3, #8]
}
 800648c:	bf00      	nop
 800648e:	371c      	adds	r7, #28
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f003 031f 	and.w	r3, r3, #31
 80064aa:	2201      	movs	r2, #1
 80064ac:	fa02 f303 	lsl.w	r3, r2, r3
 80064b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6a1a      	ldr	r2, [r3, #32]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	43db      	mvns	r3, r3
 80064ba:	401a      	ands	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6a1a      	ldr	r2, [r3, #32]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	f003 031f 	and.w	r3, r3, #31
 80064ca:	6879      	ldr	r1, [r7, #4]
 80064cc:	fa01 f303 	lsl.w	r3, r1, r3
 80064d0:	431a      	orrs	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	621a      	str	r2, [r3, #32]
}
 80064d6:	bf00      	nop
 80064d8:	371c      	adds	r7, #28
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
	...

080064e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d101      	bne.n	80064fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064f8:	2302      	movs	r3, #2
 80064fa:	e06d      	b.n	80065d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2202      	movs	r2, #2
 8006508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a30      	ldr	r2, [pc, #192]	; (80065e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d004      	beq.n	8006530 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a2f      	ldr	r2, [pc, #188]	; (80065e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d108      	bne.n	8006542 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006536:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	4313      	orrs	r3, r2
 8006540:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006548:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	4313      	orrs	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a20      	ldr	r2, [pc, #128]	; (80065e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d022      	beq.n	80065ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656e:	d01d      	beq.n	80065ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a1d      	ldr	r2, [pc, #116]	; (80065ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d018      	beq.n	80065ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a1c      	ldr	r2, [pc, #112]	; (80065f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d013      	beq.n	80065ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a1a      	ldr	r2, [pc, #104]	; (80065f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00e      	beq.n	80065ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a15      	ldr	r2, [pc, #84]	; (80065e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d009      	beq.n	80065ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a16      	ldr	r2, [pc, #88]	; (80065f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d004      	beq.n	80065ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a15      	ldr	r2, [pc, #84]	; (80065fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d10c      	bne.n	80065c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	40010000 	.word	0x40010000
 80065e8:	40010400 	.word	0x40010400
 80065ec:	40000400 	.word	0x40000400
 80065f0:	40000800 	.word	0x40000800
 80065f4:	40000c00 	.word	0x40000c00
 80065f8:	40014000 	.word	0x40014000
 80065fc:	40001800 	.word	0x40001800

08006600 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e040      	b.n	8006694 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006616:	2b00      	cmp	r3, #0
 8006618:	d106      	bne.n	8006628 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7fc f9a2 	bl	800296c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2224      	movs	r2, #36	; 0x24
 800662c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0201 	bic.w	r2, r2, #1
 800663c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fc18 	bl	8006e74 <UART_SetConfig>
 8006644:	4603      	mov	r3, r0
 8006646:	2b01      	cmp	r3, #1
 8006648:	d101      	bne.n	800664e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e022      	b.n	8006694 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	2b00      	cmp	r3, #0
 8006654:	d002      	beq.n	800665c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fe6e 	bl	8007338 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800666a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800667a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0201 	orr.w	r2, r2, #1
 800668a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fef5 	bl	800747c <UART_CheckIdleState>
 8006692:	4603      	mov	r3, r0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b08a      	sub	sp, #40	; 0x28
 80066a0:	af02      	add	r7, sp, #8
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	603b      	str	r3, [r7, #0]
 80066a8:	4613      	mov	r3, r2
 80066aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	f040 8081 	bne.w	80067b8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d002      	beq.n	80066c2 <HAL_UART_Transmit+0x26>
 80066bc:	88fb      	ldrh	r3, [r7, #6]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e079      	b.n	80067ba <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d101      	bne.n	80066d4 <HAL_UART_Transmit+0x38>
 80066d0:	2302      	movs	r3, #2
 80066d2:	e072      	b.n	80067ba <HAL_UART_Transmit+0x11e>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2221      	movs	r2, #33	; 0x21
 80066e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066ea:	f7fc fb6d 	bl	8002dc8 <HAL_GetTick>
 80066ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	88fa      	ldrh	r2, [r7, #6]
 80066f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	88fa      	ldrh	r2, [r7, #6]
 80066fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006708:	d108      	bne.n	800671c <HAL_UART_Transmit+0x80>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d104      	bne.n	800671c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006712:	2300      	movs	r3, #0
 8006714:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	61bb      	str	r3, [r7, #24]
 800671a:	e003      	b.n	8006724 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006720:	2300      	movs	r3, #0
 8006722:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800672c:	e02c      	b.n	8006788 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2200      	movs	r2, #0
 8006736:	2180      	movs	r1, #128	; 0x80
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 fee8 	bl	800750e <UART_WaitOnFlagUntilTimeout>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e038      	b.n	80067ba <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10b      	bne.n	8006766 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800675c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	3302      	adds	r3, #2
 8006762:	61bb      	str	r3, [r7, #24]
 8006764:	e007      	b.n	8006776 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	781a      	ldrb	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	3301      	adds	r3, #1
 8006774:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800677c:	b29b      	uxth	r3, r3
 800677e:	3b01      	subs	r3, #1
 8006780:	b29a      	uxth	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800678e:	b29b      	uxth	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1cc      	bne.n	800672e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	2200      	movs	r2, #0
 800679c:	2140      	movs	r1, #64	; 0x40
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 feb5 	bl	800750e <UART_WaitOnFlagUntilTimeout>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e005      	b.n	80067ba <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2220      	movs	r2, #32
 80067b2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80067b4:	2300      	movs	r3, #0
 80067b6:	e000      	b.n	80067ba <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80067b8:	2302      	movs	r3, #2
  }
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3720      	adds	r7, #32
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b08a      	sub	sp, #40	; 0x28
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	60f8      	str	r0, [r7, #12]
 80067ca:	60b9      	str	r1, [r7, #8]
 80067cc:	4613      	mov	r3, r2
 80067ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067d4:	2b20      	cmp	r3, #32
 80067d6:	d13d      	bne.n	8006854 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d002      	beq.n	80067e4 <HAL_UART_Receive_IT+0x22>
 80067de:	88fb      	ldrh	r3, [r7, #6]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e036      	b.n	8006856 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d101      	bne.n	80067f6 <HAL_UART_Receive_IT+0x34>
 80067f2:	2302      	movs	r3, #2
 80067f4:	e02f      	b.n	8006856 <HAL_UART_Receive_IT+0x94>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d018      	beq.n	8006844 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	e853 3f00 	ldrex	r3, [r3]
 800681e:	613b      	str	r3, [r7, #16]
   return(result);
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006826:	627b      	str	r3, [r7, #36]	; 0x24
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	461a      	mov	r2, r3
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	623b      	str	r3, [r7, #32]
 8006832:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006834:	69f9      	ldr	r1, [r7, #28]
 8006836:	6a3a      	ldr	r2, [r7, #32]
 8006838:	e841 2300 	strex	r3, r2, [r1]
 800683c:	61bb      	str	r3, [r7, #24]
   return(result);
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1e6      	bne.n	8006812 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006844:	88fb      	ldrh	r3, [r7, #6]
 8006846:	461a      	mov	r2, r3
 8006848:	68b9      	ldr	r1, [r7, #8]
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 ff24 	bl	8007698 <UART_Start_Receive_IT>
 8006850:	4603      	mov	r3, r0
 8006852:	e000      	b.n	8006856 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006854:	2302      	movs	r3, #2
  }
}
 8006856:	4618      	mov	r0, r3
 8006858:	3728      	adds	r7, #40	; 0x28
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
	...

08006860 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b0ba      	sub	sp, #232	; 0xe8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006886:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800688a:	f640 030f 	movw	r3, #2063	; 0x80f
 800688e:	4013      	ands	r3, r2
 8006890:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006894:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006898:	2b00      	cmp	r3, #0
 800689a:	d115      	bne.n	80068c8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800689c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068a0:	f003 0320 	and.w	r3, r3, #32
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00f      	beq.n	80068c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80068a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ac:	f003 0320 	and.w	r3, r3, #32
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d009      	beq.n	80068c8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 82a4 	beq.w	8006e06 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	4798      	blx	r3
      }
      return;
 80068c6:	e29e      	b.n	8006e06 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80068c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 8117 	beq.w	8006b00 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80068d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d106      	bne.n	80068ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80068de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80068e2:	4b85      	ldr	r3, [pc, #532]	; (8006af8 <HAL_UART_IRQHandler+0x298>)
 80068e4:	4013      	ands	r3, r2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 810a 	beq.w	8006b00 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d011      	beq.n	800691c <HAL_UART_IRQHandler+0xbc>
 80068f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00b      	beq.n	800691c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2201      	movs	r2, #1
 800690a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006912:	f043 0201 	orr.w	r2, r3, #1
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800691c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d011      	beq.n	800694c <HAL_UART_IRQHandler+0xec>
 8006928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00b      	beq.n	800694c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2202      	movs	r2, #2
 800693a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006942:	f043 0204 	orr.w	r2, r3, #4
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800694c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b00      	cmp	r3, #0
 8006956:	d011      	beq.n	800697c <HAL_UART_IRQHandler+0x11c>
 8006958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00b      	beq.n	800697c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2204      	movs	r2, #4
 800696a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006972:	f043 0202 	orr.w	r2, r3, #2
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800697c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006980:	f003 0308 	and.w	r3, r3, #8
 8006984:	2b00      	cmp	r3, #0
 8006986:	d017      	beq.n	80069b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800698c:	f003 0320 	and.w	r3, r3, #32
 8006990:	2b00      	cmp	r3, #0
 8006992:	d105      	bne.n	80069a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006998:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00b      	beq.n	80069b8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2208      	movs	r2, #8
 80069a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069ae:	f043 0208 	orr.w	r2, r3, #8
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80069b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d012      	beq.n	80069ea <HAL_UART_IRQHandler+0x18a>
 80069c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00c      	beq.n	80069ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069e0:	f043 0220 	orr.w	r2, r3, #32
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 820a 	beq.w	8006e0a <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80069f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069fa:	f003 0320 	and.w	r3, r3, #32
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00d      	beq.n	8006a1e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a06:	f003 0320 	and.w	r3, r3, #32
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d007      	beq.n	8006a1e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a32:	2b40      	cmp	r3, #64	; 0x40
 8006a34:	d005      	beq.n	8006a42 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d04f      	beq.n	8006ae2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fef2 	bl	800782c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a52:	2b40      	cmp	r3, #64	; 0x40
 8006a54:	d141      	bne.n	8006ada <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3308      	adds	r3, #8
 8006a5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a64:	e853 3f00 	ldrex	r3, [r3]
 8006a68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3308      	adds	r3, #8
 8006a7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1d9      	bne.n	8006a56 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d013      	beq.n	8006ad2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aae:	4a13      	ldr	r2, [pc, #76]	; (8006afc <HAL_UART_IRQHandler+0x29c>)
 8006ab0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fc fb37 	bl	800312a <HAL_DMA_Abort_IT>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d017      	beq.n	8006af2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006acc:	4610      	mov	r0, r2
 8006ace:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad0:	e00f      	b.n	8006af2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f9ae 	bl	8006e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad8:	e00b      	b.n	8006af2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f9aa 	bl	8006e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae0:	e007      	b.n	8006af2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f9a6 	bl	8006e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006af0:	e18b      	b.n	8006e0a <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af2:	bf00      	nop
    return;
 8006af4:	e189      	b.n	8006e0a <HAL_UART_IRQHandler+0x5aa>
 8006af6:	bf00      	nop
 8006af8:	04000120 	.word	0x04000120
 8006afc:	080078f3 	.word	0x080078f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	f040 8144 	bne.w	8006d92 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b0e:	f003 0310 	and.w	r3, r3, #16
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 813d 	beq.w	8006d92 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b1c:	f003 0310 	and.w	r3, r3, #16
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 8136 	beq.w	8006d92 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2210      	movs	r2, #16
 8006b2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b38:	2b40      	cmp	r3, #64	; 0x40
 8006b3a:	f040 80b2 	bne.w	8006ca2 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 815d 	beq.w	8006e0e <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	f080 8155 	bcs.w	8006e0e <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b78:	f000 8085 	beq.w	8006c86 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ba6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006baa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006bb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006bb6:	e841 2300 	strex	r3, r2, [r1]
 8006bba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1da      	bne.n	8006b7c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3308      	adds	r3, #8
 8006bcc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bd0:	e853 3f00 	ldrex	r3, [r3]
 8006bd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006bd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bd8:	f023 0301 	bic.w	r3, r3, #1
 8006bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3308      	adds	r3, #8
 8006be6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006bea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006bee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006bf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006bf6:	e841 2300 	strex	r3, r2, [r1]
 8006bfa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006bfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1e1      	bne.n	8006bc6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3308      	adds	r3, #8
 8006c08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3308      	adds	r3, #8
 8006c22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c2e:	e841 2300 	strex	r3, r2, [r1]
 8006c32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1e3      	bne.n	8006c02 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c4e:	e853 3f00 	ldrex	r3, [r3]
 8006c52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c56:	f023 0310 	bic.w	r3, r3, #16
 8006c5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	461a      	mov	r2, r3
 8006c64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c68:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c6a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c70:	e841 2300 	strex	r3, r2, [r1]
 8006c74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1e4      	bne.n	8006c46 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fc f9e2 	bl	800304a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f8d4 	bl	8006e48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ca0:	e0b5      	b.n	8006e0e <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 80a7 	beq.w	8006e12 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006cc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 80a2 	beq.w	8006e12 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd6:	e853 3f00 	ldrex	r3, [r3]
 8006cda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ce2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cf0:	647b      	str	r3, [r7, #68]	; 0x44
 8006cf2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cf8:	e841 2300 	strex	r3, r2, [r1]
 8006cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1e4      	bne.n	8006cce <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3308      	adds	r3, #8
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	e853 3f00 	ldrex	r3, [r3]
 8006d12:	623b      	str	r3, [r7, #32]
   return(result);
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	f023 0301 	bic.w	r3, r3, #1
 8006d1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3308      	adds	r3, #8
 8006d24:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d28:	633a      	str	r2, [r7, #48]	; 0x30
 8006d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d30:	e841 2300 	strex	r3, r2, [r1]
 8006d34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e3      	bne.n	8006d04 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	e853 3f00 	ldrex	r3, [r3]
 8006d5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f023 0310 	bic.w	r3, r3, #16
 8006d62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006d70:	61fb      	str	r3, [r7, #28]
 8006d72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d74:	69b9      	ldr	r1, [r7, #24]
 8006d76:	69fa      	ldr	r2, [r7, #28]
 8006d78:	e841 2300 	strex	r3, r2, [r1]
 8006d7c:	617b      	str	r3, [r7, #20]
   return(result);
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1e4      	bne.n	8006d4e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f85c 	bl	8006e48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d90:	e03f      	b.n	8006e12 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00e      	beq.n	8006dbc <HAL_UART_IRQHandler+0x55c>
 8006d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d008      	beq.n	8006dbc <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006db2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f853 	bl	8006e60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006dba:	e02d      	b.n	8006e18 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00e      	beq.n	8006de6 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d008      	beq.n	8006de6 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d01c      	beq.n	8006e16 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	4798      	blx	r3
    }
    return;
 8006de4:	e017      	b.n	8006e16 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d012      	beq.n	8006e18 <HAL_UART_IRQHandler+0x5b8>
 8006df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00c      	beq.n	8006e18 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fd8d 	bl	800791e <UART_EndTransmit_IT>
    return;
 8006e04:	e008      	b.n	8006e18 <HAL_UART_IRQHandler+0x5b8>
      return;
 8006e06:	bf00      	nop
 8006e08:	e006      	b.n	8006e18 <HAL_UART_IRQHandler+0x5b8>
    return;
 8006e0a:	bf00      	nop
 8006e0c:	e004      	b.n	8006e18 <HAL_UART_IRQHandler+0x5b8>
      return;
 8006e0e:	bf00      	nop
 8006e10:	e002      	b.n	8006e18 <HAL_UART_IRQHandler+0x5b8>
      return;
 8006e12:	bf00      	nop
 8006e14:	e000      	b.n	8006e18 <HAL_UART_IRQHandler+0x5b8>
    return;
 8006e16:	bf00      	nop
  }

}
 8006e18:	37e8      	adds	r7, #232	; 0xe8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop

08006e20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	460b      	mov	r3, r1
 8006e52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b088      	sub	sp, #32
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	4ba7      	ldr	r3, [pc, #668]	; (800713c <UART_SetConfig+0x2c8>)
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	6812      	ldr	r2, [r2, #0]
 8006ea6:	6979      	ldr	r1, [r7, #20]
 8006ea8:	430b      	orrs	r3, r1
 8006eaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68da      	ldr	r2, [r3, #12]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a95      	ldr	r2, [pc, #596]	; (8007140 <UART_SetConfig+0x2cc>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d120      	bne.n	8006f32 <UART_SetConfig+0xbe>
 8006ef0:	4b94      	ldr	r3, [pc, #592]	; (8007144 <UART_SetConfig+0x2d0>)
 8006ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef6:	f003 0303 	and.w	r3, r3, #3
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	d816      	bhi.n	8006f2c <UART_SetConfig+0xb8>
 8006efe:	a201      	add	r2, pc, #4	; (adr r2, 8006f04 <UART_SetConfig+0x90>)
 8006f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f04:	08006f15 	.word	0x08006f15
 8006f08:	08006f21 	.word	0x08006f21
 8006f0c:	08006f1b 	.word	0x08006f1b
 8006f10:	08006f27 	.word	0x08006f27
 8006f14:	2301      	movs	r3, #1
 8006f16:	77fb      	strb	r3, [r7, #31]
 8006f18:	e14f      	b.n	80071ba <UART_SetConfig+0x346>
 8006f1a:	2302      	movs	r3, #2
 8006f1c:	77fb      	strb	r3, [r7, #31]
 8006f1e:	e14c      	b.n	80071ba <UART_SetConfig+0x346>
 8006f20:	2304      	movs	r3, #4
 8006f22:	77fb      	strb	r3, [r7, #31]
 8006f24:	e149      	b.n	80071ba <UART_SetConfig+0x346>
 8006f26:	2308      	movs	r3, #8
 8006f28:	77fb      	strb	r3, [r7, #31]
 8006f2a:	e146      	b.n	80071ba <UART_SetConfig+0x346>
 8006f2c:	2310      	movs	r3, #16
 8006f2e:	77fb      	strb	r3, [r7, #31]
 8006f30:	e143      	b.n	80071ba <UART_SetConfig+0x346>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a84      	ldr	r2, [pc, #528]	; (8007148 <UART_SetConfig+0x2d4>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d132      	bne.n	8006fa2 <UART_SetConfig+0x12e>
 8006f3c:	4b81      	ldr	r3, [pc, #516]	; (8007144 <UART_SetConfig+0x2d0>)
 8006f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f42:	f003 030c 	and.w	r3, r3, #12
 8006f46:	2b0c      	cmp	r3, #12
 8006f48:	d828      	bhi.n	8006f9c <UART_SetConfig+0x128>
 8006f4a:	a201      	add	r2, pc, #4	; (adr r2, 8006f50 <UART_SetConfig+0xdc>)
 8006f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f50:	08006f85 	.word	0x08006f85
 8006f54:	08006f9d 	.word	0x08006f9d
 8006f58:	08006f9d 	.word	0x08006f9d
 8006f5c:	08006f9d 	.word	0x08006f9d
 8006f60:	08006f91 	.word	0x08006f91
 8006f64:	08006f9d 	.word	0x08006f9d
 8006f68:	08006f9d 	.word	0x08006f9d
 8006f6c:	08006f9d 	.word	0x08006f9d
 8006f70:	08006f8b 	.word	0x08006f8b
 8006f74:	08006f9d 	.word	0x08006f9d
 8006f78:	08006f9d 	.word	0x08006f9d
 8006f7c:	08006f9d 	.word	0x08006f9d
 8006f80:	08006f97 	.word	0x08006f97
 8006f84:	2300      	movs	r3, #0
 8006f86:	77fb      	strb	r3, [r7, #31]
 8006f88:	e117      	b.n	80071ba <UART_SetConfig+0x346>
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	77fb      	strb	r3, [r7, #31]
 8006f8e:	e114      	b.n	80071ba <UART_SetConfig+0x346>
 8006f90:	2304      	movs	r3, #4
 8006f92:	77fb      	strb	r3, [r7, #31]
 8006f94:	e111      	b.n	80071ba <UART_SetConfig+0x346>
 8006f96:	2308      	movs	r3, #8
 8006f98:	77fb      	strb	r3, [r7, #31]
 8006f9a:	e10e      	b.n	80071ba <UART_SetConfig+0x346>
 8006f9c:	2310      	movs	r3, #16
 8006f9e:	77fb      	strb	r3, [r7, #31]
 8006fa0:	e10b      	b.n	80071ba <UART_SetConfig+0x346>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a69      	ldr	r2, [pc, #420]	; (800714c <UART_SetConfig+0x2d8>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d120      	bne.n	8006fee <UART_SetConfig+0x17a>
 8006fac:	4b65      	ldr	r3, [pc, #404]	; (8007144 <UART_SetConfig+0x2d0>)
 8006fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006fb6:	2b30      	cmp	r3, #48	; 0x30
 8006fb8:	d013      	beq.n	8006fe2 <UART_SetConfig+0x16e>
 8006fba:	2b30      	cmp	r3, #48	; 0x30
 8006fbc:	d814      	bhi.n	8006fe8 <UART_SetConfig+0x174>
 8006fbe:	2b20      	cmp	r3, #32
 8006fc0:	d009      	beq.n	8006fd6 <UART_SetConfig+0x162>
 8006fc2:	2b20      	cmp	r3, #32
 8006fc4:	d810      	bhi.n	8006fe8 <UART_SetConfig+0x174>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d002      	beq.n	8006fd0 <UART_SetConfig+0x15c>
 8006fca:	2b10      	cmp	r3, #16
 8006fcc:	d006      	beq.n	8006fdc <UART_SetConfig+0x168>
 8006fce:	e00b      	b.n	8006fe8 <UART_SetConfig+0x174>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	77fb      	strb	r3, [r7, #31]
 8006fd4:	e0f1      	b.n	80071ba <UART_SetConfig+0x346>
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	77fb      	strb	r3, [r7, #31]
 8006fda:	e0ee      	b.n	80071ba <UART_SetConfig+0x346>
 8006fdc:	2304      	movs	r3, #4
 8006fde:	77fb      	strb	r3, [r7, #31]
 8006fe0:	e0eb      	b.n	80071ba <UART_SetConfig+0x346>
 8006fe2:	2308      	movs	r3, #8
 8006fe4:	77fb      	strb	r3, [r7, #31]
 8006fe6:	e0e8      	b.n	80071ba <UART_SetConfig+0x346>
 8006fe8:	2310      	movs	r3, #16
 8006fea:	77fb      	strb	r3, [r7, #31]
 8006fec:	e0e5      	b.n	80071ba <UART_SetConfig+0x346>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a57      	ldr	r2, [pc, #348]	; (8007150 <UART_SetConfig+0x2dc>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d120      	bne.n	800703a <UART_SetConfig+0x1c6>
 8006ff8:	4b52      	ldr	r3, [pc, #328]	; (8007144 <UART_SetConfig+0x2d0>)
 8006ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007002:	2bc0      	cmp	r3, #192	; 0xc0
 8007004:	d013      	beq.n	800702e <UART_SetConfig+0x1ba>
 8007006:	2bc0      	cmp	r3, #192	; 0xc0
 8007008:	d814      	bhi.n	8007034 <UART_SetConfig+0x1c0>
 800700a:	2b80      	cmp	r3, #128	; 0x80
 800700c:	d009      	beq.n	8007022 <UART_SetConfig+0x1ae>
 800700e:	2b80      	cmp	r3, #128	; 0x80
 8007010:	d810      	bhi.n	8007034 <UART_SetConfig+0x1c0>
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <UART_SetConfig+0x1a8>
 8007016:	2b40      	cmp	r3, #64	; 0x40
 8007018:	d006      	beq.n	8007028 <UART_SetConfig+0x1b4>
 800701a:	e00b      	b.n	8007034 <UART_SetConfig+0x1c0>
 800701c:	2300      	movs	r3, #0
 800701e:	77fb      	strb	r3, [r7, #31]
 8007020:	e0cb      	b.n	80071ba <UART_SetConfig+0x346>
 8007022:	2302      	movs	r3, #2
 8007024:	77fb      	strb	r3, [r7, #31]
 8007026:	e0c8      	b.n	80071ba <UART_SetConfig+0x346>
 8007028:	2304      	movs	r3, #4
 800702a:	77fb      	strb	r3, [r7, #31]
 800702c:	e0c5      	b.n	80071ba <UART_SetConfig+0x346>
 800702e:	2308      	movs	r3, #8
 8007030:	77fb      	strb	r3, [r7, #31]
 8007032:	e0c2      	b.n	80071ba <UART_SetConfig+0x346>
 8007034:	2310      	movs	r3, #16
 8007036:	77fb      	strb	r3, [r7, #31]
 8007038:	e0bf      	b.n	80071ba <UART_SetConfig+0x346>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a45      	ldr	r2, [pc, #276]	; (8007154 <UART_SetConfig+0x2e0>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d125      	bne.n	8007090 <UART_SetConfig+0x21c>
 8007044:	4b3f      	ldr	r3, [pc, #252]	; (8007144 <UART_SetConfig+0x2d0>)
 8007046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800704a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800704e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007052:	d017      	beq.n	8007084 <UART_SetConfig+0x210>
 8007054:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007058:	d817      	bhi.n	800708a <UART_SetConfig+0x216>
 800705a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800705e:	d00b      	beq.n	8007078 <UART_SetConfig+0x204>
 8007060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007064:	d811      	bhi.n	800708a <UART_SetConfig+0x216>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <UART_SetConfig+0x1fe>
 800706a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800706e:	d006      	beq.n	800707e <UART_SetConfig+0x20a>
 8007070:	e00b      	b.n	800708a <UART_SetConfig+0x216>
 8007072:	2300      	movs	r3, #0
 8007074:	77fb      	strb	r3, [r7, #31]
 8007076:	e0a0      	b.n	80071ba <UART_SetConfig+0x346>
 8007078:	2302      	movs	r3, #2
 800707a:	77fb      	strb	r3, [r7, #31]
 800707c:	e09d      	b.n	80071ba <UART_SetConfig+0x346>
 800707e:	2304      	movs	r3, #4
 8007080:	77fb      	strb	r3, [r7, #31]
 8007082:	e09a      	b.n	80071ba <UART_SetConfig+0x346>
 8007084:	2308      	movs	r3, #8
 8007086:	77fb      	strb	r3, [r7, #31]
 8007088:	e097      	b.n	80071ba <UART_SetConfig+0x346>
 800708a:	2310      	movs	r3, #16
 800708c:	77fb      	strb	r3, [r7, #31]
 800708e:	e094      	b.n	80071ba <UART_SetConfig+0x346>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a30      	ldr	r2, [pc, #192]	; (8007158 <UART_SetConfig+0x2e4>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d125      	bne.n	80070e6 <UART_SetConfig+0x272>
 800709a:	4b2a      	ldr	r3, [pc, #168]	; (8007144 <UART_SetConfig+0x2d0>)
 800709c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80070a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070a8:	d017      	beq.n	80070da <UART_SetConfig+0x266>
 80070aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070ae:	d817      	bhi.n	80070e0 <UART_SetConfig+0x26c>
 80070b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070b4:	d00b      	beq.n	80070ce <UART_SetConfig+0x25a>
 80070b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070ba:	d811      	bhi.n	80070e0 <UART_SetConfig+0x26c>
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d003      	beq.n	80070c8 <UART_SetConfig+0x254>
 80070c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070c4:	d006      	beq.n	80070d4 <UART_SetConfig+0x260>
 80070c6:	e00b      	b.n	80070e0 <UART_SetConfig+0x26c>
 80070c8:	2301      	movs	r3, #1
 80070ca:	77fb      	strb	r3, [r7, #31]
 80070cc:	e075      	b.n	80071ba <UART_SetConfig+0x346>
 80070ce:	2302      	movs	r3, #2
 80070d0:	77fb      	strb	r3, [r7, #31]
 80070d2:	e072      	b.n	80071ba <UART_SetConfig+0x346>
 80070d4:	2304      	movs	r3, #4
 80070d6:	77fb      	strb	r3, [r7, #31]
 80070d8:	e06f      	b.n	80071ba <UART_SetConfig+0x346>
 80070da:	2308      	movs	r3, #8
 80070dc:	77fb      	strb	r3, [r7, #31]
 80070de:	e06c      	b.n	80071ba <UART_SetConfig+0x346>
 80070e0:	2310      	movs	r3, #16
 80070e2:	77fb      	strb	r3, [r7, #31]
 80070e4:	e069      	b.n	80071ba <UART_SetConfig+0x346>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a1c      	ldr	r2, [pc, #112]	; (800715c <UART_SetConfig+0x2e8>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d137      	bne.n	8007160 <UART_SetConfig+0x2ec>
 80070f0:	4b14      	ldr	r3, [pc, #80]	; (8007144 <UART_SetConfig+0x2d0>)
 80070f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80070fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070fe:	d017      	beq.n	8007130 <UART_SetConfig+0x2bc>
 8007100:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007104:	d817      	bhi.n	8007136 <UART_SetConfig+0x2c2>
 8007106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800710a:	d00b      	beq.n	8007124 <UART_SetConfig+0x2b0>
 800710c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007110:	d811      	bhi.n	8007136 <UART_SetConfig+0x2c2>
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <UART_SetConfig+0x2aa>
 8007116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800711a:	d006      	beq.n	800712a <UART_SetConfig+0x2b6>
 800711c:	e00b      	b.n	8007136 <UART_SetConfig+0x2c2>
 800711e:	2300      	movs	r3, #0
 8007120:	77fb      	strb	r3, [r7, #31]
 8007122:	e04a      	b.n	80071ba <UART_SetConfig+0x346>
 8007124:	2302      	movs	r3, #2
 8007126:	77fb      	strb	r3, [r7, #31]
 8007128:	e047      	b.n	80071ba <UART_SetConfig+0x346>
 800712a:	2304      	movs	r3, #4
 800712c:	77fb      	strb	r3, [r7, #31]
 800712e:	e044      	b.n	80071ba <UART_SetConfig+0x346>
 8007130:	2308      	movs	r3, #8
 8007132:	77fb      	strb	r3, [r7, #31]
 8007134:	e041      	b.n	80071ba <UART_SetConfig+0x346>
 8007136:	2310      	movs	r3, #16
 8007138:	77fb      	strb	r3, [r7, #31]
 800713a:	e03e      	b.n	80071ba <UART_SetConfig+0x346>
 800713c:	efff69f3 	.word	0xefff69f3
 8007140:	40011000 	.word	0x40011000
 8007144:	40023800 	.word	0x40023800
 8007148:	40004400 	.word	0x40004400
 800714c:	40004800 	.word	0x40004800
 8007150:	40004c00 	.word	0x40004c00
 8007154:	40005000 	.word	0x40005000
 8007158:	40011400 	.word	0x40011400
 800715c:	40007800 	.word	0x40007800
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a71      	ldr	r2, [pc, #452]	; (800732c <UART_SetConfig+0x4b8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d125      	bne.n	80071b6 <UART_SetConfig+0x342>
 800716a:	4b71      	ldr	r3, [pc, #452]	; (8007330 <UART_SetConfig+0x4bc>)
 800716c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007170:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007174:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007178:	d017      	beq.n	80071aa <UART_SetConfig+0x336>
 800717a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800717e:	d817      	bhi.n	80071b0 <UART_SetConfig+0x33c>
 8007180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007184:	d00b      	beq.n	800719e <UART_SetConfig+0x32a>
 8007186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800718a:	d811      	bhi.n	80071b0 <UART_SetConfig+0x33c>
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <UART_SetConfig+0x324>
 8007190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007194:	d006      	beq.n	80071a4 <UART_SetConfig+0x330>
 8007196:	e00b      	b.n	80071b0 <UART_SetConfig+0x33c>
 8007198:	2300      	movs	r3, #0
 800719a:	77fb      	strb	r3, [r7, #31]
 800719c:	e00d      	b.n	80071ba <UART_SetConfig+0x346>
 800719e:	2302      	movs	r3, #2
 80071a0:	77fb      	strb	r3, [r7, #31]
 80071a2:	e00a      	b.n	80071ba <UART_SetConfig+0x346>
 80071a4:	2304      	movs	r3, #4
 80071a6:	77fb      	strb	r3, [r7, #31]
 80071a8:	e007      	b.n	80071ba <UART_SetConfig+0x346>
 80071aa:	2308      	movs	r3, #8
 80071ac:	77fb      	strb	r3, [r7, #31]
 80071ae:	e004      	b.n	80071ba <UART_SetConfig+0x346>
 80071b0:	2310      	movs	r3, #16
 80071b2:	77fb      	strb	r3, [r7, #31]
 80071b4:	e001      	b.n	80071ba <UART_SetConfig+0x346>
 80071b6:	2310      	movs	r3, #16
 80071b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071c2:	d15a      	bne.n	800727a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80071c4:	7ffb      	ldrb	r3, [r7, #31]
 80071c6:	2b08      	cmp	r3, #8
 80071c8:	d827      	bhi.n	800721a <UART_SetConfig+0x3a6>
 80071ca:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <UART_SetConfig+0x35c>)
 80071cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d0:	080071f5 	.word	0x080071f5
 80071d4:	080071fd 	.word	0x080071fd
 80071d8:	08007205 	.word	0x08007205
 80071dc:	0800721b 	.word	0x0800721b
 80071e0:	0800720b 	.word	0x0800720b
 80071e4:	0800721b 	.word	0x0800721b
 80071e8:	0800721b 	.word	0x0800721b
 80071ec:	0800721b 	.word	0x0800721b
 80071f0:	08007213 	.word	0x08007213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071f4:	f7fc ffb2 	bl	800415c <HAL_RCC_GetPCLK1Freq>
 80071f8:	61b8      	str	r0, [r7, #24]
        break;
 80071fa:	e013      	b.n	8007224 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071fc:	f7fc ffc2 	bl	8004184 <HAL_RCC_GetPCLK2Freq>
 8007200:	61b8      	str	r0, [r7, #24]
        break;
 8007202:	e00f      	b.n	8007224 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007204:	4b4b      	ldr	r3, [pc, #300]	; (8007334 <UART_SetConfig+0x4c0>)
 8007206:	61bb      	str	r3, [r7, #24]
        break;
 8007208:	e00c      	b.n	8007224 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800720a:	f7fc feb9 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 800720e:	61b8      	str	r0, [r7, #24]
        break;
 8007210:	e008      	b.n	8007224 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007216:	61bb      	str	r3, [r7, #24]
        break;
 8007218:	e004      	b.n	8007224 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800721a:	2300      	movs	r3, #0
 800721c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	77bb      	strb	r3, [r7, #30]
        break;
 8007222:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d074      	beq.n	8007314 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	005a      	lsls	r2, r3, #1
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	085b      	lsrs	r3, r3, #1
 8007234:	441a      	add	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	fbb2 f3f3 	udiv	r3, r2, r3
 800723e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	2b0f      	cmp	r3, #15
 8007244:	d916      	bls.n	8007274 <UART_SetConfig+0x400>
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800724c:	d212      	bcs.n	8007274 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	b29b      	uxth	r3, r3
 8007252:	f023 030f 	bic.w	r3, r3, #15
 8007256:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	085b      	lsrs	r3, r3, #1
 800725c:	b29b      	uxth	r3, r3
 800725e:	f003 0307 	and.w	r3, r3, #7
 8007262:	b29a      	uxth	r2, r3
 8007264:	89fb      	ldrh	r3, [r7, #14]
 8007266:	4313      	orrs	r3, r2
 8007268:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	89fa      	ldrh	r2, [r7, #14]
 8007270:	60da      	str	r2, [r3, #12]
 8007272:	e04f      	b.n	8007314 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	77bb      	strb	r3, [r7, #30]
 8007278:	e04c      	b.n	8007314 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800727a:	7ffb      	ldrb	r3, [r7, #31]
 800727c:	2b08      	cmp	r3, #8
 800727e:	d828      	bhi.n	80072d2 <UART_SetConfig+0x45e>
 8007280:	a201      	add	r2, pc, #4	; (adr r2, 8007288 <UART_SetConfig+0x414>)
 8007282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007286:	bf00      	nop
 8007288:	080072ad 	.word	0x080072ad
 800728c:	080072b5 	.word	0x080072b5
 8007290:	080072bd 	.word	0x080072bd
 8007294:	080072d3 	.word	0x080072d3
 8007298:	080072c3 	.word	0x080072c3
 800729c:	080072d3 	.word	0x080072d3
 80072a0:	080072d3 	.word	0x080072d3
 80072a4:	080072d3 	.word	0x080072d3
 80072a8:	080072cb 	.word	0x080072cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072ac:	f7fc ff56 	bl	800415c <HAL_RCC_GetPCLK1Freq>
 80072b0:	61b8      	str	r0, [r7, #24]
        break;
 80072b2:	e013      	b.n	80072dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072b4:	f7fc ff66 	bl	8004184 <HAL_RCC_GetPCLK2Freq>
 80072b8:	61b8      	str	r0, [r7, #24]
        break;
 80072ba:	e00f      	b.n	80072dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072bc:	4b1d      	ldr	r3, [pc, #116]	; (8007334 <UART_SetConfig+0x4c0>)
 80072be:	61bb      	str	r3, [r7, #24]
        break;
 80072c0:	e00c      	b.n	80072dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072c2:	f7fc fe5d 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 80072c6:	61b8      	str	r0, [r7, #24]
        break;
 80072c8:	e008      	b.n	80072dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ce:	61bb      	str	r3, [r7, #24]
        break;
 80072d0:	e004      	b.n	80072dc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	77bb      	strb	r3, [r7, #30]
        break;
 80072da:	bf00      	nop
    }

    if (pclk != 0U)
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d018      	beq.n	8007314 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	085a      	lsrs	r2, r3, #1
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	441a      	add	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	2b0f      	cmp	r3, #15
 80072fa:	d909      	bls.n	8007310 <UART_SetConfig+0x49c>
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007302:	d205      	bcs.n	8007310 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	b29a      	uxth	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	60da      	str	r2, [r3, #12]
 800730e:	e001      	b.n	8007314 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007320:	7fbb      	ldrb	r3, [r7, #30]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3720      	adds	r7, #32
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	40007c00 	.word	0x40007c00
 8007330:	40023800 	.word	0x40023800
 8007334:	00f42400 	.word	0x00f42400

08007338 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00a      	beq.n	8007362 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007366:	f003 0302 	and.w	r3, r3, #2
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00a      	beq.n	8007384 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	430a      	orrs	r2, r1
 8007382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00a      	beq.n	80073a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073aa:	f003 0308 	and.w	r3, r3, #8
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	f003 0310 	and.w	r3, r3, #16
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00a      	beq.n	80073ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	f003 0320 	and.w	r3, r3, #32
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	430a      	orrs	r2, r1
 800740a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01a      	beq.n	800744e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007436:	d10a      	bne.n	800744e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	430a      	orrs	r2, r1
 800744c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	430a      	orrs	r2, r1
 800746e:	605a      	str	r2, [r3, #4]
  }
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af02      	add	r7, sp, #8
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800748c:	f7fb fc9c 	bl	8002dc8 <HAL_GetTick>
 8007490:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0308 	and.w	r3, r3, #8
 800749c:	2b08      	cmp	r3, #8
 800749e:	d10e      	bne.n	80074be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f82d 	bl	800750e <UART_WaitOnFlagUntilTimeout>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e023      	b.n	8007506 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0304 	and.w	r3, r3, #4
 80074c8:	2b04      	cmp	r3, #4
 80074ca:	d10e      	bne.n	80074ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f817 	bl	800750e <UART_WaitOnFlagUntilTimeout>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e00d      	b.n	8007506 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2220      	movs	r2, #32
 80074ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2220      	movs	r2, #32
 80074f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b09c      	sub	sp, #112	; 0x70
 8007512:	af00      	add	r7, sp, #0
 8007514:	60f8      	str	r0, [r7, #12]
 8007516:	60b9      	str	r1, [r7, #8]
 8007518:	603b      	str	r3, [r7, #0]
 800751a:	4613      	mov	r3, r2
 800751c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800751e:	e0a5      	b.n	800766c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007526:	f000 80a1 	beq.w	800766c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800752a:	f7fb fc4d 	bl	8002dc8 <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007536:	429a      	cmp	r2, r3
 8007538:	d302      	bcc.n	8007540 <UART_WaitOnFlagUntilTimeout+0x32>
 800753a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800753c:	2b00      	cmp	r3, #0
 800753e:	d13e      	bne.n	80075be <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800754e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007550:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007554:	667b      	str	r3, [r7, #100]	; 0x64
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800755e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007560:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007562:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007564:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007566:	e841 2300 	strex	r3, r2, [r1]
 800756a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800756c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1e6      	bne.n	8007540 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3308      	adds	r3, #8
 8007578:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007584:	f023 0301 	bic.w	r3, r3, #1
 8007588:	663b      	str	r3, [r7, #96]	; 0x60
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3308      	adds	r3, #8
 8007590:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007592:	64ba      	str	r2, [r7, #72]	; 0x48
 8007594:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007596:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007598:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800759a:	e841 2300 	strex	r3, r2, [r1]
 800759e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80075a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1e5      	bne.n	8007572 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2220      	movs	r2, #32
 80075aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2220      	movs	r2, #32
 80075b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e067      	b.n	800768e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0304 	and.w	r3, r3, #4
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d04f      	beq.n	800766c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075da:	d147      	bne.n	800766c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ee:	e853 3f00 	ldrex	r3, [r3]
 80075f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	461a      	mov	r2, r3
 8007602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007604:	637b      	str	r3, [r7, #52]	; 0x34
 8007606:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007608:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800760a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800760c:	e841 2300 	strex	r3, r2, [r1]
 8007610:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1e6      	bne.n	80075e6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3308      	adds	r3, #8
 800761e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	e853 3f00 	ldrex	r3, [r3]
 8007626:	613b      	str	r3, [r7, #16]
   return(result);
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	f023 0301 	bic.w	r3, r3, #1
 800762e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3308      	adds	r3, #8
 8007636:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007638:	623a      	str	r2, [r7, #32]
 800763a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763c:	69f9      	ldr	r1, [r7, #28]
 800763e:	6a3a      	ldr	r2, [r7, #32]
 8007640:	e841 2300 	strex	r3, r2, [r1]
 8007644:	61bb      	str	r3, [r7, #24]
   return(result);
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1e5      	bne.n	8007618 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2220      	movs	r2, #32
 8007650:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2220      	movs	r2, #32
 8007656:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2220      	movs	r2, #32
 800765c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e010      	b.n	800768e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	69da      	ldr	r2, [r3, #28]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	4013      	ands	r3, r2
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	429a      	cmp	r2, r3
 800767a:	bf0c      	ite	eq
 800767c:	2301      	moveq	r3, #1
 800767e:	2300      	movne	r3, #0
 8007680:	b2db      	uxtb	r3, r3
 8007682:	461a      	mov	r2, r3
 8007684:	79fb      	ldrb	r3, [r7, #7]
 8007686:	429a      	cmp	r2, r3
 8007688:	f43f af4a 	beq.w	8007520 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3770      	adds	r7, #112	; 0x70
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
	...

08007698 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007698:	b480      	push	{r7}
 800769a:	b097      	sub	sp, #92	; 0x5c
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	4613      	mov	r3, r2
 80076a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	88fa      	ldrh	r2, [r7, #6]
 80076b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	88fa      	ldrh	r2, [r7, #6]
 80076b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ca:	d10e      	bne.n	80076ea <UART_Start_Receive_IT+0x52>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d105      	bne.n	80076e0 <UART_Start_Receive_IT+0x48>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80076da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076de:	e02d      	b.n	800773c <UART_Start_Receive_IT+0xa4>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	22ff      	movs	r2, #255	; 0xff
 80076e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076e8:	e028      	b.n	800773c <UART_Start_Receive_IT+0xa4>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10d      	bne.n	800770e <UART_Start_Receive_IT+0x76>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d104      	bne.n	8007704 <UART_Start_Receive_IT+0x6c>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	22ff      	movs	r2, #255	; 0xff
 80076fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007702:	e01b      	b.n	800773c <UART_Start_Receive_IT+0xa4>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	227f      	movs	r2, #127	; 0x7f
 8007708:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800770c:	e016      	b.n	800773c <UART_Start_Receive_IT+0xa4>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007716:	d10d      	bne.n	8007734 <UART_Start_Receive_IT+0x9c>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d104      	bne.n	800772a <UART_Start_Receive_IT+0x92>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	227f      	movs	r2, #127	; 0x7f
 8007724:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007728:	e008      	b.n	800773c <UART_Start_Receive_IT+0xa4>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	223f      	movs	r2, #63	; 0x3f
 800772e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007732:	e003      	b.n	800773c <UART_Start_Receive_IT+0xa4>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2222      	movs	r2, #34	; 0x22
 8007748:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	3308      	adds	r3, #8
 8007750:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007754:	e853 3f00 	ldrex	r3, [r3]
 8007758:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800775a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775c:	f043 0301 	orr.w	r3, r3, #1
 8007760:	657b      	str	r3, [r7, #84]	; 0x54
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3308      	adds	r3, #8
 8007768:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800776a:	64ba      	str	r2, [r7, #72]	; 0x48
 800776c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007770:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007772:	e841 2300 	strex	r3, r2, [r1]
 8007776:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1e5      	bne.n	800774a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007786:	d107      	bne.n	8007798 <UART_Start_Receive_IT+0x100>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d103      	bne.n	8007798 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4a24      	ldr	r2, [pc, #144]	; (8007824 <UART_Start_Receive_IT+0x18c>)
 8007794:	665a      	str	r2, [r3, #100]	; 0x64
 8007796:	e002      	b.n	800779e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4a23      	ldr	r2, [pc, #140]	; (8007828 <UART_Start_Receive_IT+0x190>)
 800779c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d019      	beq.n	80077e2 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80077c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	461a      	mov	r2, r3
 80077ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077cc:	637b      	str	r3, [r7, #52]	; 0x34
 80077ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077d4:	e841 2300 	strex	r3, r2, [r1]
 80077d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e6      	bne.n	80077ae <UART_Start_Receive_IT+0x116>
 80077e0:	e018      	b.n	8007814 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	e853 3f00 	ldrex	r3, [r3]
 80077ee:	613b      	str	r3, [r7, #16]
   return(result);
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	f043 0320 	orr.w	r3, r3, #32
 80077f6:	653b      	str	r3, [r7, #80]	; 0x50
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	461a      	mov	r2, r3
 80077fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007800:	623b      	str	r3, [r7, #32]
 8007802:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007804:	69f9      	ldr	r1, [r7, #28]
 8007806:	6a3a      	ldr	r2, [r7, #32]
 8007808:	e841 2300 	strex	r3, r2, [r1]
 800780c:	61bb      	str	r3, [r7, #24]
   return(result);
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1e6      	bne.n	80077e2 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	375c      	adds	r7, #92	; 0x5c
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	08007acf 	.word	0x08007acf
 8007828:	08007973 	.word	0x08007973

0800782c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800782c:	b480      	push	{r7}
 800782e:	b095      	sub	sp, #84	; 0x54
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783c:	e853 3f00 	ldrex	r3, [r3]
 8007840:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007848:	64fb      	str	r3, [r7, #76]	; 0x4c
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007852:	643b      	str	r3, [r7, #64]	; 0x40
 8007854:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007856:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007858:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800785a:	e841 2300 	strex	r3, r2, [r1]
 800785e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1e6      	bne.n	8007834 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3308      	adds	r3, #8
 800786c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	61fb      	str	r3, [r7, #28]
   return(result);
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	f023 0301 	bic.w	r3, r3, #1
 800787c:	64bb      	str	r3, [r7, #72]	; 0x48
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3308      	adds	r3, #8
 8007884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007886:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007888:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800788c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800788e:	e841 2300 	strex	r3, r2, [r1]
 8007892:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e5      	bne.n	8007866 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d118      	bne.n	80078d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	e853 3f00 	ldrex	r3, [r3]
 80078ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	f023 0310 	bic.w	r3, r3, #16
 80078b6:	647b      	str	r3, [r7, #68]	; 0x44
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	461a      	mov	r2, r3
 80078be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078c0:	61bb      	str	r3, [r7, #24]
 80078c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c4:	6979      	ldr	r1, [r7, #20]
 80078c6:	69ba      	ldr	r2, [r7, #24]
 80078c8:	e841 2300 	strex	r3, r2, [r1]
 80078cc:	613b      	str	r3, [r7, #16]
   return(result);
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e6      	bne.n	80078a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2220      	movs	r2, #32
 80078d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80078e6:	bf00      	nop
 80078e8:	3754      	adds	r7, #84	; 0x54
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b084      	sub	sp, #16
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f7ff fa8f 	bl	8006e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007916:	bf00      	nop
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b088      	sub	sp, #32
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	e853 3f00 	ldrex	r3, [r3]
 8007932:	60bb      	str	r3, [r7, #8]
   return(result);
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800793a:	61fb      	str	r3, [r7, #28]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	461a      	mov	r2, r3
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	61bb      	str	r3, [r7, #24]
 8007946:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007948:	6979      	ldr	r1, [r7, #20]
 800794a:	69ba      	ldr	r2, [r7, #24]
 800794c:	e841 2300 	strex	r3, r2, [r1]
 8007950:	613b      	str	r3, [r7, #16]
   return(result);
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1e6      	bne.n	8007926 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2220      	movs	r2, #32
 800795c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7ff fa5b 	bl	8006e20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800796a:	bf00      	nop
 800796c:	3720      	adds	r7, #32
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b096      	sub	sp, #88	; 0x58
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007980:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007988:	2b22      	cmp	r3, #34	; 0x22
 800798a:	f040 8094 	bne.w	8007ab6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007994:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007998:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800799c:	b2d9      	uxtb	r1, r3
 800799e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80079a2:	b2da      	uxtb	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a8:	400a      	ands	r2, r1
 80079aa:	b2d2      	uxtb	r2, r2
 80079ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b2:	1c5a      	adds	r2, r3, #1
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079be:	b29b      	uxth	r3, r3
 80079c0:	3b01      	subs	r3, #1
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d177      	bne.n	8007ac6 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079de:	e853 3f00 	ldrex	r3, [r3]
 80079e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079ea:	653b      	str	r3, [r7, #80]	; 0x50
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	461a      	mov	r2, r3
 80079f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079f4:	647b      	str	r3, [r7, #68]	; 0x44
 80079f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079fc:	e841 2300 	strex	r3, r2, [r1]
 8007a00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e6      	bne.n	80079d6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3308      	adds	r3, #8
 8007a0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	e853 3f00 	ldrex	r3, [r3]
 8007a16:	623b      	str	r3, [r7, #32]
   return(result);
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	f023 0301 	bic.w	r3, r3, #1
 8007a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	3308      	adds	r3, #8
 8007a26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a28:	633a      	str	r2, [r7, #48]	; 0x30
 8007a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a30:	e841 2300 	strex	r3, r2, [r1]
 8007a34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1e5      	bne.n	8007a08 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2220      	movs	r2, #32
 8007a40:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d12e      	bne.n	8007aae <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	e853 3f00 	ldrex	r3, [r3]
 8007a62:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f023 0310 	bic.w	r3, r3, #16
 8007a6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	461a      	mov	r2, r3
 8007a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a74:	61fb      	str	r3, [r7, #28]
 8007a76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a78:	69b9      	ldr	r1, [r7, #24]
 8007a7a:	69fa      	ldr	r2, [r7, #28]
 8007a7c:	e841 2300 	strex	r3, r2, [r1]
 8007a80:	617b      	str	r3, [r7, #20]
   return(result);
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1e6      	bne.n	8007a56 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	69db      	ldr	r3, [r3, #28]
 8007a8e:	f003 0310 	and.w	r3, r3, #16
 8007a92:	2b10      	cmp	r3, #16
 8007a94:	d103      	bne.n	8007a9e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2210      	movs	r2, #16
 8007a9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7ff f9ce 	bl	8006e48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007aac:	e00b      	b.n	8007ac6 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7fa f9f0 	bl	8001e94 <HAL_UART_RxCpltCallback>
}
 8007ab4:	e007      	b.n	8007ac6 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	699a      	ldr	r2, [r3, #24]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f042 0208 	orr.w	r2, r2, #8
 8007ac4:	619a      	str	r2, [r3, #24]
}
 8007ac6:	bf00      	nop
 8007ac8:	3758      	adds	r7, #88	; 0x58
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b096      	sub	sp, #88	; 0x58
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007adc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ae4:	2b22      	cmp	r3, #34	; 0x22
 8007ae6:	f040 8094 	bne.w	8007c12 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007afa:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007afe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007b02:	4013      	ands	r3, r2
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b08:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0e:	1c9a      	adds	r2, r3, #2
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d177      	bne.n	8007c22 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3a:	e853 3f00 	ldrex	r3, [r3]
 8007b3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b50:	643b      	str	r3, [r7, #64]	; 0x40
 8007b52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b58:	e841 2300 	strex	r3, r2, [r1]
 8007b5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1e6      	bne.n	8007b32 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	3308      	adds	r3, #8
 8007b6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	e853 3f00 	ldrex	r3, [r3]
 8007b72:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	f023 0301 	bic.w	r3, r3, #1
 8007b7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3308      	adds	r3, #8
 8007b82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b8c:	e841 2300 	strex	r3, r2, [r1]
 8007b90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1e5      	bne.n	8007b64 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d12e      	bne.n	8007c0a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	e853 3f00 	ldrex	r3, [r3]
 8007bbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	f023 0310 	bic.w	r3, r3, #16
 8007bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	461a      	mov	r2, r3
 8007bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bd0:	61bb      	str	r3, [r7, #24]
 8007bd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd4:	6979      	ldr	r1, [r7, #20]
 8007bd6:	69ba      	ldr	r2, [r7, #24]
 8007bd8:	e841 2300 	strex	r3, r2, [r1]
 8007bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1e6      	bne.n	8007bb2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	f003 0310 	and.w	r3, r3, #16
 8007bee:	2b10      	cmp	r3, #16
 8007bf0:	d103      	bne.n	8007bfa <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2210      	movs	r2, #16
 8007bf8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c00:	4619      	mov	r1, r3
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7ff f920 	bl	8006e48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c08:	e00b      	b.n	8007c22 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7fa f942 	bl	8001e94 <HAL_UART_RxCpltCallback>
}
 8007c10:	e007      	b.n	8007c22 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	699a      	ldr	r2, [r3, #24]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f042 0208 	orr.w	r2, r2, #8
 8007c20:	619a      	str	r2, [r3, #24]
}
 8007c22:	bf00      	nop
 8007c24:	3758      	adds	r7, #88	; 0x58
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
	...

08007c2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c2c:	b084      	sub	sp, #16
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	f107 001c 	add.w	r0, r7, #28
 8007c3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d120      	bne.n	8007c86 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68da      	ldr	r2, [r3, #12]
 8007c54:	4b20      	ldr	r3, [pc, #128]	; (8007cd8 <USB_CoreInit+0xac>)
 8007c56:	4013      	ands	r3, r2
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d105      	bne.n	8007c7a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fa92 	bl	80081a4 <USB_CoreReset>
 8007c80:	4603      	mov	r3, r0
 8007c82:	73fb      	strb	r3, [r7, #15]
 8007c84:	e010      	b.n	8007ca8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fa86 	bl	80081a4 <USB_CoreReset>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d10b      	bne.n	8007cc6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f043 0206 	orr.w	r2, r3, #6
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f043 0220 	orr.w	r2, r3, #32
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cd2:	b004      	add	sp, #16
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	ffbdffbf 	.word	0xffbdffbf

08007cdc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f023 0201 	bic.w	r2, r3, #1
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b084      	sub	sp, #16
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	460b      	mov	r3, r1
 8007d08:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d1a:	78fb      	ldrb	r3, [r7, #3]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d115      	bne.n	8007d4c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d2c:	2001      	movs	r0, #1
 8007d2e:	f7fb f857 	bl	8002de0 <HAL_Delay>
      ms++;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	3301      	adds	r3, #1
 8007d36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fa25 	bl	8008188 <USB_GetMode>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d01e      	beq.n	8007d82 <USB_SetCurrentMode+0x84>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2b31      	cmp	r3, #49	; 0x31
 8007d48:	d9f0      	bls.n	8007d2c <USB_SetCurrentMode+0x2e>
 8007d4a:	e01a      	b.n	8007d82 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d4c:	78fb      	ldrb	r3, [r7, #3]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d115      	bne.n	8007d7e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d5e:	2001      	movs	r0, #1
 8007d60:	f7fb f83e 	bl	8002de0 <HAL_Delay>
      ms++;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	3301      	adds	r3, #1
 8007d68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fa0c 	bl	8008188 <USB_GetMode>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d005      	beq.n	8007d82 <USB_SetCurrentMode+0x84>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2b31      	cmp	r3, #49	; 0x31
 8007d7a:	d9f0      	bls.n	8007d5e <USB_SetCurrentMode+0x60>
 8007d7c:	e001      	b.n	8007d82 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e005      	b.n	8007d8e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2b32      	cmp	r3, #50	; 0x32
 8007d86:	d101      	bne.n	8007d8c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e000      	b.n	8007d8e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
	...

08007d98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d98:	b084      	sub	sp, #16
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b086      	sub	sp, #24
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007da6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007db2:	2300      	movs	r3, #0
 8007db4:	613b      	str	r3, [r7, #16]
 8007db6:	e009      	b.n	8007dcc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	3340      	adds	r3, #64	; 0x40
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	613b      	str	r3, [r7, #16]
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	2b0e      	cmp	r3, #14
 8007dd0:	d9f2      	bls.n	8007db8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d11c      	bne.n	8007e12 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007de6:	f043 0302 	orr.w	r3, r3, #2
 8007dea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	601a      	str	r2, [r3, #0]
 8007e10:	e005      	b.n	8007e1e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e24:	461a      	mov	r2, r3
 8007e26:	2300      	movs	r3, #0
 8007e28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e30:	4619      	mov	r1, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e38:	461a      	mov	r2, r3
 8007e3a:	680b      	ldr	r3, [r1, #0]
 8007e3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d10c      	bne.n	8007e5e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d104      	bne.n	8007e54 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f961 	bl	8008114 <USB_SetDevSpeed>
 8007e52:	e008      	b.n	8007e66 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e54:	2101      	movs	r1, #1
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f95c 	bl	8008114 <USB_SetDevSpeed>
 8007e5c:	e003      	b.n	8007e66 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e5e:	2103      	movs	r1, #3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f957 	bl	8008114 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e66:	2110      	movs	r1, #16
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f8f3 	bl	8008054 <USB_FlushTxFifo>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d001      	beq.n	8007e78 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f91d 	bl	80080b8 <USB_FlushRxFifo>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d001      	beq.n	8007e88 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e8e:	461a      	mov	r2, r3
 8007e90:	2300      	movs	r3, #0
 8007e92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007eac:	2300      	movs	r3, #0
 8007eae:	613b      	str	r3, [r7, #16]
 8007eb0:	e043      	b.n	8007f3a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	015a      	lsls	r2, r3, #5
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ec8:	d118      	bne.n	8007efc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10a      	bne.n	8007ee6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	015a      	lsls	r2, r3, #5
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007edc:	461a      	mov	r2, r3
 8007ede:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ee2:	6013      	str	r3, [r2, #0]
 8007ee4:	e013      	b.n	8007f0e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	015a      	lsls	r2, r3, #5
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	4413      	add	r3, r2
 8007eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ef8:	6013      	str	r3, [r2, #0]
 8007efa:	e008      	b.n	8007f0e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	015a      	lsls	r2, r3, #5
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4413      	add	r3, r2
 8007f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f08:	461a      	mov	r2, r3
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	015a      	lsls	r2, r3, #5
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	4413      	add	r3, r2
 8007f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	3301      	adds	r3, #1
 8007f38:	613b      	str	r3, [r7, #16]
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d3b7      	bcc.n	8007eb2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f42:	2300      	movs	r3, #0
 8007f44:	613b      	str	r3, [r7, #16]
 8007f46:	e043      	b.n	8007fd0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f5e:	d118      	bne.n	8007f92 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10a      	bne.n	8007f7c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	015a      	lsls	r2, r3, #5
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f72:	461a      	mov	r2, r3
 8007f74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f78:	6013      	str	r3, [r2, #0]
 8007f7a:	e013      	b.n	8007fa4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f88:	461a      	mov	r2, r3
 8007f8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	e008      	b.n	8007fa4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	015a      	lsls	r2, r3, #5
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007fc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	613b      	str	r3, [r7, #16]
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d3b7      	bcc.n	8007f48 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fe6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007ff8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d105      	bne.n	800800c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	f043 0210 	orr.w	r2, r3, #16
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	699a      	ldr	r2, [r3, #24]
 8008010:	4b0e      	ldr	r3, [pc, #56]	; (800804c <USB_DevInit+0x2b4>)
 8008012:	4313      	orrs	r3, r2
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800801a:	2b00      	cmp	r3, #0
 800801c:	d005      	beq.n	800802a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	f043 0208 	orr.w	r2, r3, #8
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800802a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800802c:	2b01      	cmp	r3, #1
 800802e:	d105      	bne.n	800803c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	699a      	ldr	r2, [r3, #24]
 8008034:	4b06      	ldr	r3, [pc, #24]	; (8008050 <USB_DevInit+0x2b8>)
 8008036:	4313      	orrs	r3, r2
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800803c:	7dfb      	ldrb	r3, [r7, #23]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3718      	adds	r7, #24
 8008042:	46bd      	mov	sp, r7
 8008044:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008048:	b004      	add	sp, #16
 800804a:	4770      	bx	lr
 800804c:	803c3800 	.word	0x803c3800
 8008050:	40000004 	.word	0x40000004

08008054 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800805e:	2300      	movs	r3, #0
 8008060:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3301      	adds	r3, #1
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	4a12      	ldr	r2, [pc, #72]	; (80080b4 <USB_FlushTxFifo+0x60>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d901      	bls.n	8008072 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e01a      	b.n	80080a8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	2b00      	cmp	r3, #0
 8008078:	daf3      	bge.n	8008062 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	019b      	lsls	r3, r3, #6
 8008082:	f043 0220 	orr.w	r2, r3, #32
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	3301      	adds	r3, #1
 800808e:	60fb      	str	r3, [r7, #12]
 8008090:	4a08      	ldr	r2, [pc, #32]	; (80080b4 <USB_FlushTxFifo+0x60>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d901      	bls.n	800809a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e006      	b.n	80080a8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	f003 0320 	and.w	r3, r3, #32
 80080a2:	2b20      	cmp	r3, #32
 80080a4:	d0f1      	beq.n	800808a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr
 80080b4:	00030d40 	.word	0x00030d40

080080b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	3301      	adds	r3, #1
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	4a11      	ldr	r2, [pc, #68]	; (8008110 <USB_FlushRxFifo+0x58>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d901      	bls.n	80080d4 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e017      	b.n	8008104 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	daf3      	bge.n	80080c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80080dc:	2300      	movs	r3, #0
 80080de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2210      	movs	r2, #16
 80080e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	3301      	adds	r3, #1
 80080ea:	60fb      	str	r3, [r7, #12]
 80080ec:	4a08      	ldr	r2, [pc, #32]	; (8008110 <USB_FlushRxFifo+0x58>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d901      	bls.n	80080f6 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e006      	b.n	8008104 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	f003 0310 	and.w	r3, r3, #16
 80080fe:	2b10      	cmp	r3, #16
 8008100:	d0f1      	beq.n	80080e6 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	00030d40 	.word	0x00030d40

08008114 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	78fb      	ldrb	r3, [r7, #3]
 800812e:	68f9      	ldr	r1, [r7, #12]
 8008130:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008134:	4313      	orrs	r3, r2
 8008136:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008146:	b480      	push	{r7}
 8008148:	b085      	sub	sp, #20
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008160:	f023 0303 	bic.w	r3, r3, #3
 8008164:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008174:	f043 0302 	orr.w	r3, r3, #2
 8008178:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3714      	adds	r7, #20
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	695b      	ldr	r3, [r3, #20]
 8008194:	f003 0301 	and.w	r3, r3, #1
}
 8008198:	4618      	mov	r0, r3
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	3301      	adds	r3, #1
 80081b4:	60fb      	str	r3, [r7, #12]
 80081b6:	4a13      	ldr	r2, [pc, #76]	; (8008204 <USB_CoreReset+0x60>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d901      	bls.n	80081c0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e01a      	b.n	80081f6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	daf3      	bge.n	80081b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80081c8:	2300      	movs	r3, #0
 80081ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	f043 0201 	orr.w	r2, r3, #1
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	3301      	adds	r3, #1
 80081dc:	60fb      	str	r3, [r7, #12]
 80081de:	4a09      	ldr	r2, [pc, #36]	; (8008204 <USB_CoreReset+0x60>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d901      	bls.n	80081e8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e006      	b.n	80081f6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d0f1      	beq.n	80081d8 <USB_CoreReset+0x34>

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	00030d40 	.word	0x00030d40

08008208 <arm_pid_init_f32>:
 8008208:	ed90 7a08 	vldr	s14, [r0, #32]
 800820c:	edd0 7a06 	vldr	s15, [r0, #24]
 8008210:	ed90 6a07 	vldr	s12, [r0, #28]
 8008214:	eef1 6a67 	vneg.f32	s13, s15
 8008218:	ed80 7a02 	vstr	s14, [r0, #8]
 800821c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008220:	ee37 6a07 	vadd.f32	s12, s14, s14
 8008224:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008228:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800822c:	edc0 7a00 	vstr	s15, [r0]
 8008230:	ed80 7a01 	vstr	s14, [r0, #4]
 8008234:	b901      	cbnz	r1, 8008238 <arm_pid_init_f32+0x30>
 8008236:	4770      	bx	lr
 8008238:	2300      	movs	r3, #0
 800823a:	60c3      	str	r3, [r0, #12]
 800823c:	6103      	str	r3, [r0, #16]
 800823e:	6143      	str	r3, [r0, #20]
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop

08008244 <__errno>:
 8008244:	4b01      	ldr	r3, [pc, #4]	; (800824c <__errno+0x8>)
 8008246:	6818      	ldr	r0, [r3, #0]
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	2000005c 	.word	0x2000005c

08008250 <__libc_init_array>:
 8008250:	b570      	push	{r4, r5, r6, lr}
 8008252:	4d0d      	ldr	r5, [pc, #52]	; (8008288 <__libc_init_array+0x38>)
 8008254:	4c0d      	ldr	r4, [pc, #52]	; (800828c <__libc_init_array+0x3c>)
 8008256:	1b64      	subs	r4, r4, r5
 8008258:	10a4      	asrs	r4, r4, #2
 800825a:	2600      	movs	r6, #0
 800825c:	42a6      	cmp	r6, r4
 800825e:	d109      	bne.n	8008274 <__libc_init_array+0x24>
 8008260:	4d0b      	ldr	r5, [pc, #44]	; (8008290 <__libc_init_array+0x40>)
 8008262:	4c0c      	ldr	r4, [pc, #48]	; (8008294 <__libc_init_array+0x44>)
 8008264:	f004 ffb0 	bl	800d1c8 <_init>
 8008268:	1b64      	subs	r4, r4, r5
 800826a:	10a4      	asrs	r4, r4, #2
 800826c:	2600      	movs	r6, #0
 800826e:	42a6      	cmp	r6, r4
 8008270:	d105      	bne.n	800827e <__libc_init_array+0x2e>
 8008272:	bd70      	pop	{r4, r5, r6, pc}
 8008274:	f855 3b04 	ldr.w	r3, [r5], #4
 8008278:	4798      	blx	r3
 800827a:	3601      	adds	r6, #1
 800827c:	e7ee      	b.n	800825c <__libc_init_array+0xc>
 800827e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008282:	4798      	blx	r3
 8008284:	3601      	adds	r6, #1
 8008286:	e7f2      	b.n	800826e <__libc_init_array+0x1e>
 8008288:	0800d744 	.word	0x0800d744
 800828c:	0800d744 	.word	0x0800d744
 8008290:	0800d744 	.word	0x0800d744
 8008294:	0800d748 	.word	0x0800d748

08008298 <memcpy>:
 8008298:	440a      	add	r2, r1
 800829a:	4291      	cmp	r1, r2
 800829c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80082a0:	d100      	bne.n	80082a4 <memcpy+0xc>
 80082a2:	4770      	bx	lr
 80082a4:	b510      	push	{r4, lr}
 80082a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ae:	4291      	cmp	r1, r2
 80082b0:	d1f9      	bne.n	80082a6 <memcpy+0xe>
 80082b2:	bd10      	pop	{r4, pc}

080082b4 <memset>:
 80082b4:	4402      	add	r2, r0
 80082b6:	4603      	mov	r3, r0
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d100      	bne.n	80082be <memset+0xa>
 80082bc:	4770      	bx	lr
 80082be:	f803 1b01 	strb.w	r1, [r3], #1
 80082c2:	e7f9      	b.n	80082b8 <memset+0x4>

080082c4 <__cvt>:
 80082c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082c6:	ed2d 8b02 	vpush	{d8}
 80082ca:	eeb0 8b40 	vmov.f64	d8, d0
 80082ce:	b085      	sub	sp, #20
 80082d0:	4617      	mov	r7, r2
 80082d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80082d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80082d6:	ee18 2a90 	vmov	r2, s17
 80082da:	f025 0520 	bic.w	r5, r5, #32
 80082de:	2a00      	cmp	r2, #0
 80082e0:	bfb6      	itet	lt
 80082e2:	222d      	movlt	r2, #45	; 0x2d
 80082e4:	2200      	movge	r2, #0
 80082e6:	eeb1 8b40 	vneglt.f64	d8, d0
 80082ea:	2d46      	cmp	r5, #70	; 0x46
 80082ec:	460c      	mov	r4, r1
 80082ee:	701a      	strb	r2, [r3, #0]
 80082f0:	d004      	beq.n	80082fc <__cvt+0x38>
 80082f2:	2d45      	cmp	r5, #69	; 0x45
 80082f4:	d100      	bne.n	80082f8 <__cvt+0x34>
 80082f6:	3401      	adds	r4, #1
 80082f8:	2102      	movs	r1, #2
 80082fa:	e000      	b.n	80082fe <__cvt+0x3a>
 80082fc:	2103      	movs	r1, #3
 80082fe:	ab03      	add	r3, sp, #12
 8008300:	9301      	str	r3, [sp, #4]
 8008302:	ab02      	add	r3, sp, #8
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	4622      	mov	r2, r4
 8008308:	4633      	mov	r3, r6
 800830a:	eeb0 0b48 	vmov.f64	d0, d8
 800830e:	f001 fde3 	bl	8009ed8 <_dtoa_r>
 8008312:	2d47      	cmp	r5, #71	; 0x47
 8008314:	d109      	bne.n	800832a <__cvt+0x66>
 8008316:	07fb      	lsls	r3, r7, #31
 8008318:	d407      	bmi.n	800832a <__cvt+0x66>
 800831a:	9b03      	ldr	r3, [sp, #12]
 800831c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800831e:	1a1b      	subs	r3, r3, r0
 8008320:	6013      	str	r3, [r2, #0]
 8008322:	b005      	add	sp, #20
 8008324:	ecbd 8b02 	vpop	{d8}
 8008328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800832a:	2d46      	cmp	r5, #70	; 0x46
 800832c:	eb00 0204 	add.w	r2, r0, r4
 8008330:	d10c      	bne.n	800834c <__cvt+0x88>
 8008332:	7803      	ldrb	r3, [r0, #0]
 8008334:	2b30      	cmp	r3, #48	; 0x30
 8008336:	d107      	bne.n	8008348 <__cvt+0x84>
 8008338:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800833c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008340:	bf1c      	itt	ne
 8008342:	f1c4 0401 	rsbne	r4, r4, #1
 8008346:	6034      	strne	r4, [r6, #0]
 8008348:	6833      	ldr	r3, [r6, #0]
 800834a:	441a      	add	r2, r3
 800834c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008354:	bf08      	it	eq
 8008356:	9203      	streq	r2, [sp, #12]
 8008358:	2130      	movs	r1, #48	; 0x30
 800835a:	9b03      	ldr	r3, [sp, #12]
 800835c:	4293      	cmp	r3, r2
 800835e:	d2dc      	bcs.n	800831a <__cvt+0x56>
 8008360:	1c5c      	adds	r4, r3, #1
 8008362:	9403      	str	r4, [sp, #12]
 8008364:	7019      	strb	r1, [r3, #0]
 8008366:	e7f8      	b.n	800835a <__cvt+0x96>

08008368 <__exponent>:
 8008368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800836a:	4603      	mov	r3, r0
 800836c:	2900      	cmp	r1, #0
 800836e:	bfb8      	it	lt
 8008370:	4249      	neglt	r1, r1
 8008372:	f803 2b02 	strb.w	r2, [r3], #2
 8008376:	bfb4      	ite	lt
 8008378:	222d      	movlt	r2, #45	; 0x2d
 800837a:	222b      	movge	r2, #43	; 0x2b
 800837c:	2909      	cmp	r1, #9
 800837e:	7042      	strb	r2, [r0, #1]
 8008380:	dd2a      	ble.n	80083d8 <__exponent+0x70>
 8008382:	f10d 0407 	add.w	r4, sp, #7
 8008386:	46a4      	mov	ip, r4
 8008388:	270a      	movs	r7, #10
 800838a:	46a6      	mov	lr, r4
 800838c:	460a      	mov	r2, r1
 800838e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008392:	fb07 1516 	mls	r5, r7, r6, r1
 8008396:	3530      	adds	r5, #48	; 0x30
 8008398:	2a63      	cmp	r2, #99	; 0x63
 800839a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800839e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80083a2:	4631      	mov	r1, r6
 80083a4:	dcf1      	bgt.n	800838a <__exponent+0x22>
 80083a6:	3130      	adds	r1, #48	; 0x30
 80083a8:	f1ae 0502 	sub.w	r5, lr, #2
 80083ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80083b0:	1c44      	adds	r4, r0, #1
 80083b2:	4629      	mov	r1, r5
 80083b4:	4561      	cmp	r1, ip
 80083b6:	d30a      	bcc.n	80083ce <__exponent+0x66>
 80083b8:	f10d 0209 	add.w	r2, sp, #9
 80083bc:	eba2 020e 	sub.w	r2, r2, lr
 80083c0:	4565      	cmp	r5, ip
 80083c2:	bf88      	it	hi
 80083c4:	2200      	movhi	r2, #0
 80083c6:	4413      	add	r3, r2
 80083c8:	1a18      	subs	r0, r3, r0
 80083ca:	b003      	add	sp, #12
 80083cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80083d6:	e7ed      	b.n	80083b4 <__exponent+0x4c>
 80083d8:	2330      	movs	r3, #48	; 0x30
 80083da:	3130      	adds	r1, #48	; 0x30
 80083dc:	7083      	strb	r3, [r0, #2]
 80083de:	70c1      	strb	r1, [r0, #3]
 80083e0:	1d03      	adds	r3, r0, #4
 80083e2:	e7f1      	b.n	80083c8 <__exponent+0x60>
 80083e4:	0000      	movs	r0, r0
	...

080083e8 <_printf_float>:
 80083e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ec:	b08b      	sub	sp, #44	; 0x2c
 80083ee:	460c      	mov	r4, r1
 80083f0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80083f4:	4616      	mov	r6, r2
 80083f6:	461f      	mov	r7, r3
 80083f8:	4605      	mov	r5, r0
 80083fa:	f002 fe5f 	bl	800b0bc <_localeconv_r>
 80083fe:	f8d0 b000 	ldr.w	fp, [r0]
 8008402:	4658      	mov	r0, fp
 8008404:	f7f7 ff1c 	bl	8000240 <strlen>
 8008408:	2300      	movs	r3, #0
 800840a:	9308      	str	r3, [sp, #32]
 800840c:	f8d8 3000 	ldr.w	r3, [r8]
 8008410:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008414:	6822      	ldr	r2, [r4, #0]
 8008416:	3307      	adds	r3, #7
 8008418:	f023 0307 	bic.w	r3, r3, #7
 800841c:	f103 0108 	add.w	r1, r3, #8
 8008420:	f8c8 1000 	str.w	r1, [r8]
 8008424:	4682      	mov	sl, r0
 8008426:	e9d3 0100 	ldrd	r0, r1, [r3]
 800842a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800842e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008690 <_printf_float+0x2a8>
 8008432:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008436:	eeb0 6bc0 	vabs.f64	d6, d0
 800843a:	eeb4 6b47 	vcmp.f64	d6, d7
 800843e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008442:	dd24      	ble.n	800848e <_printf_float+0xa6>
 8008444:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800844c:	d502      	bpl.n	8008454 <_printf_float+0x6c>
 800844e:	232d      	movs	r3, #45	; 0x2d
 8008450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008454:	4b90      	ldr	r3, [pc, #576]	; (8008698 <_printf_float+0x2b0>)
 8008456:	4891      	ldr	r0, [pc, #580]	; (800869c <_printf_float+0x2b4>)
 8008458:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800845c:	bf94      	ite	ls
 800845e:	4698      	movls	r8, r3
 8008460:	4680      	movhi	r8, r0
 8008462:	2303      	movs	r3, #3
 8008464:	6123      	str	r3, [r4, #16]
 8008466:	f022 0204 	bic.w	r2, r2, #4
 800846a:	2300      	movs	r3, #0
 800846c:	6022      	str	r2, [r4, #0]
 800846e:	9304      	str	r3, [sp, #16]
 8008470:	9700      	str	r7, [sp, #0]
 8008472:	4633      	mov	r3, r6
 8008474:	aa09      	add	r2, sp, #36	; 0x24
 8008476:	4621      	mov	r1, r4
 8008478:	4628      	mov	r0, r5
 800847a:	f000 f9d3 	bl	8008824 <_printf_common>
 800847e:	3001      	adds	r0, #1
 8008480:	f040 808a 	bne.w	8008598 <_printf_float+0x1b0>
 8008484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008488:	b00b      	add	sp, #44	; 0x2c
 800848a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848e:	eeb4 0b40 	vcmp.f64	d0, d0
 8008492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008496:	d709      	bvc.n	80084ac <_printf_float+0xc4>
 8008498:	ee10 3a90 	vmov	r3, s1
 800849c:	2b00      	cmp	r3, #0
 800849e:	bfbc      	itt	lt
 80084a0:	232d      	movlt	r3, #45	; 0x2d
 80084a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80084a6:	487e      	ldr	r0, [pc, #504]	; (80086a0 <_printf_float+0x2b8>)
 80084a8:	4b7e      	ldr	r3, [pc, #504]	; (80086a4 <_printf_float+0x2bc>)
 80084aa:	e7d5      	b.n	8008458 <_printf_float+0x70>
 80084ac:	6863      	ldr	r3, [r4, #4]
 80084ae:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80084b2:	9104      	str	r1, [sp, #16]
 80084b4:	1c59      	adds	r1, r3, #1
 80084b6:	d13c      	bne.n	8008532 <_printf_float+0x14a>
 80084b8:	2306      	movs	r3, #6
 80084ba:	6063      	str	r3, [r4, #4]
 80084bc:	2300      	movs	r3, #0
 80084be:	9303      	str	r3, [sp, #12]
 80084c0:	ab08      	add	r3, sp, #32
 80084c2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80084c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084ca:	ab07      	add	r3, sp, #28
 80084cc:	6861      	ldr	r1, [r4, #4]
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	6022      	str	r2, [r4, #0]
 80084d2:	f10d 031b 	add.w	r3, sp, #27
 80084d6:	4628      	mov	r0, r5
 80084d8:	f7ff fef4 	bl	80082c4 <__cvt>
 80084dc:	9b04      	ldr	r3, [sp, #16]
 80084de:	9907      	ldr	r1, [sp, #28]
 80084e0:	2b47      	cmp	r3, #71	; 0x47
 80084e2:	4680      	mov	r8, r0
 80084e4:	d108      	bne.n	80084f8 <_printf_float+0x110>
 80084e6:	1cc8      	adds	r0, r1, #3
 80084e8:	db02      	blt.n	80084f0 <_printf_float+0x108>
 80084ea:	6863      	ldr	r3, [r4, #4]
 80084ec:	4299      	cmp	r1, r3
 80084ee:	dd41      	ble.n	8008574 <_printf_float+0x18c>
 80084f0:	f1a9 0902 	sub.w	r9, r9, #2
 80084f4:	fa5f f989 	uxtb.w	r9, r9
 80084f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80084fc:	d820      	bhi.n	8008540 <_printf_float+0x158>
 80084fe:	3901      	subs	r1, #1
 8008500:	464a      	mov	r2, r9
 8008502:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008506:	9107      	str	r1, [sp, #28]
 8008508:	f7ff ff2e 	bl	8008368 <__exponent>
 800850c:	9a08      	ldr	r2, [sp, #32]
 800850e:	9004      	str	r0, [sp, #16]
 8008510:	1813      	adds	r3, r2, r0
 8008512:	2a01      	cmp	r2, #1
 8008514:	6123      	str	r3, [r4, #16]
 8008516:	dc02      	bgt.n	800851e <_printf_float+0x136>
 8008518:	6822      	ldr	r2, [r4, #0]
 800851a:	07d2      	lsls	r2, r2, #31
 800851c:	d501      	bpl.n	8008522 <_printf_float+0x13a>
 800851e:	3301      	adds	r3, #1
 8008520:	6123      	str	r3, [r4, #16]
 8008522:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d0a2      	beq.n	8008470 <_printf_float+0x88>
 800852a:	232d      	movs	r3, #45	; 0x2d
 800852c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008530:	e79e      	b.n	8008470 <_printf_float+0x88>
 8008532:	9904      	ldr	r1, [sp, #16]
 8008534:	2947      	cmp	r1, #71	; 0x47
 8008536:	d1c1      	bne.n	80084bc <_printf_float+0xd4>
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1bf      	bne.n	80084bc <_printf_float+0xd4>
 800853c:	2301      	movs	r3, #1
 800853e:	e7bc      	b.n	80084ba <_printf_float+0xd2>
 8008540:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008544:	d118      	bne.n	8008578 <_printf_float+0x190>
 8008546:	2900      	cmp	r1, #0
 8008548:	6863      	ldr	r3, [r4, #4]
 800854a:	dd0b      	ble.n	8008564 <_printf_float+0x17c>
 800854c:	6121      	str	r1, [r4, #16]
 800854e:	b913      	cbnz	r3, 8008556 <_printf_float+0x16e>
 8008550:	6822      	ldr	r2, [r4, #0]
 8008552:	07d0      	lsls	r0, r2, #31
 8008554:	d502      	bpl.n	800855c <_printf_float+0x174>
 8008556:	3301      	adds	r3, #1
 8008558:	440b      	add	r3, r1
 800855a:	6123      	str	r3, [r4, #16]
 800855c:	2300      	movs	r3, #0
 800855e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008560:	9304      	str	r3, [sp, #16]
 8008562:	e7de      	b.n	8008522 <_printf_float+0x13a>
 8008564:	b913      	cbnz	r3, 800856c <_printf_float+0x184>
 8008566:	6822      	ldr	r2, [r4, #0]
 8008568:	07d2      	lsls	r2, r2, #31
 800856a:	d501      	bpl.n	8008570 <_printf_float+0x188>
 800856c:	3302      	adds	r3, #2
 800856e:	e7f4      	b.n	800855a <_printf_float+0x172>
 8008570:	2301      	movs	r3, #1
 8008572:	e7f2      	b.n	800855a <_printf_float+0x172>
 8008574:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008578:	9b08      	ldr	r3, [sp, #32]
 800857a:	4299      	cmp	r1, r3
 800857c:	db05      	blt.n	800858a <_printf_float+0x1a2>
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	6121      	str	r1, [r4, #16]
 8008582:	07d8      	lsls	r0, r3, #31
 8008584:	d5ea      	bpl.n	800855c <_printf_float+0x174>
 8008586:	1c4b      	adds	r3, r1, #1
 8008588:	e7e7      	b.n	800855a <_printf_float+0x172>
 800858a:	2900      	cmp	r1, #0
 800858c:	bfd4      	ite	le
 800858e:	f1c1 0202 	rsble	r2, r1, #2
 8008592:	2201      	movgt	r2, #1
 8008594:	4413      	add	r3, r2
 8008596:	e7e0      	b.n	800855a <_printf_float+0x172>
 8008598:	6823      	ldr	r3, [r4, #0]
 800859a:	055a      	lsls	r2, r3, #21
 800859c:	d407      	bmi.n	80085ae <_printf_float+0x1c6>
 800859e:	6923      	ldr	r3, [r4, #16]
 80085a0:	4642      	mov	r2, r8
 80085a2:	4631      	mov	r1, r6
 80085a4:	4628      	mov	r0, r5
 80085a6:	47b8      	blx	r7
 80085a8:	3001      	adds	r0, #1
 80085aa:	d12a      	bne.n	8008602 <_printf_float+0x21a>
 80085ac:	e76a      	b.n	8008484 <_printf_float+0x9c>
 80085ae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80085b2:	f240 80e2 	bls.w	800877a <_printf_float+0x392>
 80085b6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80085ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80085be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085c2:	d133      	bne.n	800862c <_printf_float+0x244>
 80085c4:	4a38      	ldr	r2, [pc, #224]	; (80086a8 <_printf_float+0x2c0>)
 80085c6:	2301      	movs	r3, #1
 80085c8:	4631      	mov	r1, r6
 80085ca:	4628      	mov	r0, r5
 80085cc:	47b8      	blx	r7
 80085ce:	3001      	adds	r0, #1
 80085d0:	f43f af58 	beq.w	8008484 <_printf_float+0x9c>
 80085d4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80085d8:	429a      	cmp	r2, r3
 80085da:	db02      	blt.n	80085e2 <_printf_float+0x1fa>
 80085dc:	6823      	ldr	r3, [r4, #0]
 80085de:	07d8      	lsls	r0, r3, #31
 80085e0:	d50f      	bpl.n	8008602 <_printf_float+0x21a>
 80085e2:	4653      	mov	r3, sl
 80085e4:	465a      	mov	r2, fp
 80085e6:	4631      	mov	r1, r6
 80085e8:	4628      	mov	r0, r5
 80085ea:	47b8      	blx	r7
 80085ec:	3001      	adds	r0, #1
 80085ee:	f43f af49 	beq.w	8008484 <_printf_float+0x9c>
 80085f2:	f04f 0800 	mov.w	r8, #0
 80085f6:	f104 091a 	add.w	r9, r4, #26
 80085fa:	9b08      	ldr	r3, [sp, #32]
 80085fc:	3b01      	subs	r3, #1
 80085fe:	4543      	cmp	r3, r8
 8008600:	dc09      	bgt.n	8008616 <_printf_float+0x22e>
 8008602:	6823      	ldr	r3, [r4, #0]
 8008604:	079b      	lsls	r3, r3, #30
 8008606:	f100 8108 	bmi.w	800881a <_printf_float+0x432>
 800860a:	68e0      	ldr	r0, [r4, #12]
 800860c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800860e:	4298      	cmp	r0, r3
 8008610:	bfb8      	it	lt
 8008612:	4618      	movlt	r0, r3
 8008614:	e738      	b.n	8008488 <_printf_float+0xa0>
 8008616:	2301      	movs	r3, #1
 8008618:	464a      	mov	r2, r9
 800861a:	4631      	mov	r1, r6
 800861c:	4628      	mov	r0, r5
 800861e:	47b8      	blx	r7
 8008620:	3001      	adds	r0, #1
 8008622:	f43f af2f 	beq.w	8008484 <_printf_float+0x9c>
 8008626:	f108 0801 	add.w	r8, r8, #1
 800862a:	e7e6      	b.n	80085fa <_printf_float+0x212>
 800862c:	9b07      	ldr	r3, [sp, #28]
 800862e:	2b00      	cmp	r3, #0
 8008630:	dc3c      	bgt.n	80086ac <_printf_float+0x2c4>
 8008632:	4a1d      	ldr	r2, [pc, #116]	; (80086a8 <_printf_float+0x2c0>)
 8008634:	2301      	movs	r3, #1
 8008636:	4631      	mov	r1, r6
 8008638:	4628      	mov	r0, r5
 800863a:	47b8      	blx	r7
 800863c:	3001      	adds	r0, #1
 800863e:	f43f af21 	beq.w	8008484 <_printf_float+0x9c>
 8008642:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008646:	4313      	orrs	r3, r2
 8008648:	d102      	bne.n	8008650 <_printf_float+0x268>
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	07d9      	lsls	r1, r3, #31
 800864e:	d5d8      	bpl.n	8008602 <_printf_float+0x21a>
 8008650:	4653      	mov	r3, sl
 8008652:	465a      	mov	r2, fp
 8008654:	4631      	mov	r1, r6
 8008656:	4628      	mov	r0, r5
 8008658:	47b8      	blx	r7
 800865a:	3001      	adds	r0, #1
 800865c:	f43f af12 	beq.w	8008484 <_printf_float+0x9c>
 8008660:	f04f 0900 	mov.w	r9, #0
 8008664:	f104 0a1a 	add.w	sl, r4, #26
 8008668:	9b07      	ldr	r3, [sp, #28]
 800866a:	425b      	negs	r3, r3
 800866c:	454b      	cmp	r3, r9
 800866e:	dc01      	bgt.n	8008674 <_printf_float+0x28c>
 8008670:	9b08      	ldr	r3, [sp, #32]
 8008672:	e795      	b.n	80085a0 <_printf_float+0x1b8>
 8008674:	2301      	movs	r3, #1
 8008676:	4652      	mov	r2, sl
 8008678:	4631      	mov	r1, r6
 800867a:	4628      	mov	r0, r5
 800867c:	47b8      	blx	r7
 800867e:	3001      	adds	r0, #1
 8008680:	f43f af00 	beq.w	8008484 <_printf_float+0x9c>
 8008684:	f109 0901 	add.w	r9, r9, #1
 8008688:	e7ee      	b.n	8008668 <_printf_float+0x280>
 800868a:	bf00      	nop
 800868c:	f3af 8000 	nop.w
 8008690:	ffffffff 	.word	0xffffffff
 8008694:	7fefffff 	.word	0x7fefffff
 8008698:	0800d278 	.word	0x0800d278
 800869c:	0800d27c 	.word	0x0800d27c
 80086a0:	0800d284 	.word	0x0800d284
 80086a4:	0800d280 	.word	0x0800d280
 80086a8:	0800d689 	.word	0x0800d689
 80086ac:	9a08      	ldr	r2, [sp, #32]
 80086ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086b0:	429a      	cmp	r2, r3
 80086b2:	bfa8      	it	ge
 80086b4:	461a      	movge	r2, r3
 80086b6:	2a00      	cmp	r2, #0
 80086b8:	4691      	mov	r9, r2
 80086ba:	dc38      	bgt.n	800872e <_printf_float+0x346>
 80086bc:	2300      	movs	r3, #0
 80086be:	9305      	str	r3, [sp, #20]
 80086c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086c4:	f104 021a 	add.w	r2, r4, #26
 80086c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086ca:	9905      	ldr	r1, [sp, #20]
 80086cc:	9304      	str	r3, [sp, #16]
 80086ce:	eba3 0309 	sub.w	r3, r3, r9
 80086d2:	428b      	cmp	r3, r1
 80086d4:	dc33      	bgt.n	800873e <_printf_float+0x356>
 80086d6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80086da:	429a      	cmp	r2, r3
 80086dc:	db3c      	blt.n	8008758 <_printf_float+0x370>
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	07da      	lsls	r2, r3, #31
 80086e2:	d439      	bmi.n	8008758 <_printf_float+0x370>
 80086e4:	9a08      	ldr	r2, [sp, #32]
 80086e6:	9b04      	ldr	r3, [sp, #16]
 80086e8:	9907      	ldr	r1, [sp, #28]
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	eba2 0901 	sub.w	r9, r2, r1
 80086f0:	4599      	cmp	r9, r3
 80086f2:	bfa8      	it	ge
 80086f4:	4699      	movge	r9, r3
 80086f6:	f1b9 0f00 	cmp.w	r9, #0
 80086fa:	dc35      	bgt.n	8008768 <_printf_float+0x380>
 80086fc:	f04f 0800 	mov.w	r8, #0
 8008700:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008704:	f104 0a1a 	add.w	sl, r4, #26
 8008708:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800870c:	1a9b      	subs	r3, r3, r2
 800870e:	eba3 0309 	sub.w	r3, r3, r9
 8008712:	4543      	cmp	r3, r8
 8008714:	f77f af75 	ble.w	8008602 <_printf_float+0x21a>
 8008718:	2301      	movs	r3, #1
 800871a:	4652      	mov	r2, sl
 800871c:	4631      	mov	r1, r6
 800871e:	4628      	mov	r0, r5
 8008720:	47b8      	blx	r7
 8008722:	3001      	adds	r0, #1
 8008724:	f43f aeae 	beq.w	8008484 <_printf_float+0x9c>
 8008728:	f108 0801 	add.w	r8, r8, #1
 800872c:	e7ec      	b.n	8008708 <_printf_float+0x320>
 800872e:	4613      	mov	r3, r2
 8008730:	4631      	mov	r1, r6
 8008732:	4642      	mov	r2, r8
 8008734:	4628      	mov	r0, r5
 8008736:	47b8      	blx	r7
 8008738:	3001      	adds	r0, #1
 800873a:	d1bf      	bne.n	80086bc <_printf_float+0x2d4>
 800873c:	e6a2      	b.n	8008484 <_printf_float+0x9c>
 800873e:	2301      	movs	r3, #1
 8008740:	4631      	mov	r1, r6
 8008742:	4628      	mov	r0, r5
 8008744:	9204      	str	r2, [sp, #16]
 8008746:	47b8      	blx	r7
 8008748:	3001      	adds	r0, #1
 800874a:	f43f ae9b 	beq.w	8008484 <_printf_float+0x9c>
 800874e:	9b05      	ldr	r3, [sp, #20]
 8008750:	9a04      	ldr	r2, [sp, #16]
 8008752:	3301      	adds	r3, #1
 8008754:	9305      	str	r3, [sp, #20]
 8008756:	e7b7      	b.n	80086c8 <_printf_float+0x2e0>
 8008758:	4653      	mov	r3, sl
 800875a:	465a      	mov	r2, fp
 800875c:	4631      	mov	r1, r6
 800875e:	4628      	mov	r0, r5
 8008760:	47b8      	blx	r7
 8008762:	3001      	adds	r0, #1
 8008764:	d1be      	bne.n	80086e4 <_printf_float+0x2fc>
 8008766:	e68d      	b.n	8008484 <_printf_float+0x9c>
 8008768:	9a04      	ldr	r2, [sp, #16]
 800876a:	464b      	mov	r3, r9
 800876c:	4442      	add	r2, r8
 800876e:	4631      	mov	r1, r6
 8008770:	4628      	mov	r0, r5
 8008772:	47b8      	blx	r7
 8008774:	3001      	adds	r0, #1
 8008776:	d1c1      	bne.n	80086fc <_printf_float+0x314>
 8008778:	e684      	b.n	8008484 <_printf_float+0x9c>
 800877a:	9a08      	ldr	r2, [sp, #32]
 800877c:	2a01      	cmp	r2, #1
 800877e:	dc01      	bgt.n	8008784 <_printf_float+0x39c>
 8008780:	07db      	lsls	r3, r3, #31
 8008782:	d537      	bpl.n	80087f4 <_printf_float+0x40c>
 8008784:	2301      	movs	r3, #1
 8008786:	4642      	mov	r2, r8
 8008788:	4631      	mov	r1, r6
 800878a:	4628      	mov	r0, r5
 800878c:	47b8      	blx	r7
 800878e:	3001      	adds	r0, #1
 8008790:	f43f ae78 	beq.w	8008484 <_printf_float+0x9c>
 8008794:	4653      	mov	r3, sl
 8008796:	465a      	mov	r2, fp
 8008798:	4631      	mov	r1, r6
 800879a:	4628      	mov	r0, r5
 800879c:	47b8      	blx	r7
 800879e:	3001      	adds	r0, #1
 80087a0:	f43f ae70 	beq.w	8008484 <_printf_float+0x9c>
 80087a4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80087a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80087ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087b0:	d01b      	beq.n	80087ea <_printf_float+0x402>
 80087b2:	9b08      	ldr	r3, [sp, #32]
 80087b4:	f108 0201 	add.w	r2, r8, #1
 80087b8:	3b01      	subs	r3, #1
 80087ba:	4631      	mov	r1, r6
 80087bc:	4628      	mov	r0, r5
 80087be:	47b8      	blx	r7
 80087c0:	3001      	adds	r0, #1
 80087c2:	d10e      	bne.n	80087e2 <_printf_float+0x3fa>
 80087c4:	e65e      	b.n	8008484 <_printf_float+0x9c>
 80087c6:	2301      	movs	r3, #1
 80087c8:	464a      	mov	r2, r9
 80087ca:	4631      	mov	r1, r6
 80087cc:	4628      	mov	r0, r5
 80087ce:	47b8      	blx	r7
 80087d0:	3001      	adds	r0, #1
 80087d2:	f43f ae57 	beq.w	8008484 <_printf_float+0x9c>
 80087d6:	f108 0801 	add.w	r8, r8, #1
 80087da:	9b08      	ldr	r3, [sp, #32]
 80087dc:	3b01      	subs	r3, #1
 80087de:	4543      	cmp	r3, r8
 80087e0:	dcf1      	bgt.n	80087c6 <_printf_float+0x3de>
 80087e2:	9b04      	ldr	r3, [sp, #16]
 80087e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80087e8:	e6db      	b.n	80085a2 <_printf_float+0x1ba>
 80087ea:	f04f 0800 	mov.w	r8, #0
 80087ee:	f104 091a 	add.w	r9, r4, #26
 80087f2:	e7f2      	b.n	80087da <_printf_float+0x3f2>
 80087f4:	2301      	movs	r3, #1
 80087f6:	4642      	mov	r2, r8
 80087f8:	e7df      	b.n	80087ba <_printf_float+0x3d2>
 80087fa:	2301      	movs	r3, #1
 80087fc:	464a      	mov	r2, r9
 80087fe:	4631      	mov	r1, r6
 8008800:	4628      	mov	r0, r5
 8008802:	47b8      	blx	r7
 8008804:	3001      	adds	r0, #1
 8008806:	f43f ae3d 	beq.w	8008484 <_printf_float+0x9c>
 800880a:	f108 0801 	add.w	r8, r8, #1
 800880e:	68e3      	ldr	r3, [r4, #12]
 8008810:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008812:	1a5b      	subs	r3, r3, r1
 8008814:	4543      	cmp	r3, r8
 8008816:	dcf0      	bgt.n	80087fa <_printf_float+0x412>
 8008818:	e6f7      	b.n	800860a <_printf_float+0x222>
 800881a:	f04f 0800 	mov.w	r8, #0
 800881e:	f104 0919 	add.w	r9, r4, #25
 8008822:	e7f4      	b.n	800880e <_printf_float+0x426>

08008824 <_printf_common>:
 8008824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008828:	4616      	mov	r6, r2
 800882a:	4699      	mov	r9, r3
 800882c:	688a      	ldr	r2, [r1, #8]
 800882e:	690b      	ldr	r3, [r1, #16]
 8008830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008834:	4293      	cmp	r3, r2
 8008836:	bfb8      	it	lt
 8008838:	4613      	movlt	r3, r2
 800883a:	6033      	str	r3, [r6, #0]
 800883c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008840:	4607      	mov	r7, r0
 8008842:	460c      	mov	r4, r1
 8008844:	b10a      	cbz	r2, 800884a <_printf_common+0x26>
 8008846:	3301      	adds	r3, #1
 8008848:	6033      	str	r3, [r6, #0]
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	0699      	lsls	r1, r3, #26
 800884e:	bf42      	ittt	mi
 8008850:	6833      	ldrmi	r3, [r6, #0]
 8008852:	3302      	addmi	r3, #2
 8008854:	6033      	strmi	r3, [r6, #0]
 8008856:	6825      	ldr	r5, [r4, #0]
 8008858:	f015 0506 	ands.w	r5, r5, #6
 800885c:	d106      	bne.n	800886c <_printf_common+0x48>
 800885e:	f104 0a19 	add.w	sl, r4, #25
 8008862:	68e3      	ldr	r3, [r4, #12]
 8008864:	6832      	ldr	r2, [r6, #0]
 8008866:	1a9b      	subs	r3, r3, r2
 8008868:	42ab      	cmp	r3, r5
 800886a:	dc26      	bgt.n	80088ba <_printf_common+0x96>
 800886c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008870:	1e13      	subs	r3, r2, #0
 8008872:	6822      	ldr	r2, [r4, #0]
 8008874:	bf18      	it	ne
 8008876:	2301      	movne	r3, #1
 8008878:	0692      	lsls	r2, r2, #26
 800887a:	d42b      	bmi.n	80088d4 <_printf_common+0xb0>
 800887c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008880:	4649      	mov	r1, r9
 8008882:	4638      	mov	r0, r7
 8008884:	47c0      	blx	r8
 8008886:	3001      	adds	r0, #1
 8008888:	d01e      	beq.n	80088c8 <_printf_common+0xa4>
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	68e5      	ldr	r5, [r4, #12]
 800888e:	6832      	ldr	r2, [r6, #0]
 8008890:	f003 0306 	and.w	r3, r3, #6
 8008894:	2b04      	cmp	r3, #4
 8008896:	bf08      	it	eq
 8008898:	1aad      	subeq	r5, r5, r2
 800889a:	68a3      	ldr	r3, [r4, #8]
 800889c:	6922      	ldr	r2, [r4, #16]
 800889e:	bf0c      	ite	eq
 80088a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088a4:	2500      	movne	r5, #0
 80088a6:	4293      	cmp	r3, r2
 80088a8:	bfc4      	itt	gt
 80088aa:	1a9b      	subgt	r3, r3, r2
 80088ac:	18ed      	addgt	r5, r5, r3
 80088ae:	2600      	movs	r6, #0
 80088b0:	341a      	adds	r4, #26
 80088b2:	42b5      	cmp	r5, r6
 80088b4:	d11a      	bne.n	80088ec <_printf_common+0xc8>
 80088b6:	2000      	movs	r0, #0
 80088b8:	e008      	b.n	80088cc <_printf_common+0xa8>
 80088ba:	2301      	movs	r3, #1
 80088bc:	4652      	mov	r2, sl
 80088be:	4649      	mov	r1, r9
 80088c0:	4638      	mov	r0, r7
 80088c2:	47c0      	blx	r8
 80088c4:	3001      	adds	r0, #1
 80088c6:	d103      	bne.n	80088d0 <_printf_common+0xac>
 80088c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d0:	3501      	adds	r5, #1
 80088d2:	e7c6      	b.n	8008862 <_printf_common+0x3e>
 80088d4:	18e1      	adds	r1, r4, r3
 80088d6:	1c5a      	adds	r2, r3, #1
 80088d8:	2030      	movs	r0, #48	; 0x30
 80088da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088de:	4422      	add	r2, r4
 80088e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088e8:	3302      	adds	r3, #2
 80088ea:	e7c7      	b.n	800887c <_printf_common+0x58>
 80088ec:	2301      	movs	r3, #1
 80088ee:	4622      	mov	r2, r4
 80088f0:	4649      	mov	r1, r9
 80088f2:	4638      	mov	r0, r7
 80088f4:	47c0      	blx	r8
 80088f6:	3001      	adds	r0, #1
 80088f8:	d0e6      	beq.n	80088c8 <_printf_common+0xa4>
 80088fa:	3601      	adds	r6, #1
 80088fc:	e7d9      	b.n	80088b2 <_printf_common+0x8e>
	...

08008900 <_printf_i>:
 8008900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008904:	460c      	mov	r4, r1
 8008906:	4691      	mov	r9, r2
 8008908:	7e27      	ldrb	r7, [r4, #24]
 800890a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800890c:	2f78      	cmp	r7, #120	; 0x78
 800890e:	4680      	mov	r8, r0
 8008910:	469a      	mov	sl, r3
 8008912:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008916:	d807      	bhi.n	8008928 <_printf_i+0x28>
 8008918:	2f62      	cmp	r7, #98	; 0x62
 800891a:	d80a      	bhi.n	8008932 <_printf_i+0x32>
 800891c:	2f00      	cmp	r7, #0
 800891e:	f000 80d8 	beq.w	8008ad2 <_printf_i+0x1d2>
 8008922:	2f58      	cmp	r7, #88	; 0x58
 8008924:	f000 80a3 	beq.w	8008a6e <_printf_i+0x16e>
 8008928:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800892c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008930:	e03a      	b.n	80089a8 <_printf_i+0xa8>
 8008932:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008936:	2b15      	cmp	r3, #21
 8008938:	d8f6      	bhi.n	8008928 <_printf_i+0x28>
 800893a:	a001      	add	r0, pc, #4	; (adr r0, 8008940 <_printf_i+0x40>)
 800893c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008940:	08008999 	.word	0x08008999
 8008944:	080089ad 	.word	0x080089ad
 8008948:	08008929 	.word	0x08008929
 800894c:	08008929 	.word	0x08008929
 8008950:	08008929 	.word	0x08008929
 8008954:	08008929 	.word	0x08008929
 8008958:	080089ad 	.word	0x080089ad
 800895c:	08008929 	.word	0x08008929
 8008960:	08008929 	.word	0x08008929
 8008964:	08008929 	.word	0x08008929
 8008968:	08008929 	.word	0x08008929
 800896c:	08008ab9 	.word	0x08008ab9
 8008970:	080089dd 	.word	0x080089dd
 8008974:	08008a9b 	.word	0x08008a9b
 8008978:	08008929 	.word	0x08008929
 800897c:	08008929 	.word	0x08008929
 8008980:	08008adb 	.word	0x08008adb
 8008984:	08008929 	.word	0x08008929
 8008988:	080089dd 	.word	0x080089dd
 800898c:	08008929 	.word	0x08008929
 8008990:	08008929 	.word	0x08008929
 8008994:	08008aa3 	.word	0x08008aa3
 8008998:	680b      	ldr	r3, [r1, #0]
 800899a:	1d1a      	adds	r2, r3, #4
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	600a      	str	r2, [r1, #0]
 80089a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80089a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089a8:	2301      	movs	r3, #1
 80089aa:	e0a3      	b.n	8008af4 <_printf_i+0x1f4>
 80089ac:	6825      	ldr	r5, [r4, #0]
 80089ae:	6808      	ldr	r0, [r1, #0]
 80089b0:	062e      	lsls	r6, r5, #24
 80089b2:	f100 0304 	add.w	r3, r0, #4
 80089b6:	d50a      	bpl.n	80089ce <_printf_i+0xce>
 80089b8:	6805      	ldr	r5, [r0, #0]
 80089ba:	600b      	str	r3, [r1, #0]
 80089bc:	2d00      	cmp	r5, #0
 80089be:	da03      	bge.n	80089c8 <_printf_i+0xc8>
 80089c0:	232d      	movs	r3, #45	; 0x2d
 80089c2:	426d      	negs	r5, r5
 80089c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089c8:	485e      	ldr	r0, [pc, #376]	; (8008b44 <_printf_i+0x244>)
 80089ca:	230a      	movs	r3, #10
 80089cc:	e019      	b.n	8008a02 <_printf_i+0x102>
 80089ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80089d2:	6805      	ldr	r5, [r0, #0]
 80089d4:	600b      	str	r3, [r1, #0]
 80089d6:	bf18      	it	ne
 80089d8:	b22d      	sxthne	r5, r5
 80089da:	e7ef      	b.n	80089bc <_printf_i+0xbc>
 80089dc:	680b      	ldr	r3, [r1, #0]
 80089de:	6825      	ldr	r5, [r4, #0]
 80089e0:	1d18      	adds	r0, r3, #4
 80089e2:	6008      	str	r0, [r1, #0]
 80089e4:	0628      	lsls	r0, r5, #24
 80089e6:	d501      	bpl.n	80089ec <_printf_i+0xec>
 80089e8:	681d      	ldr	r5, [r3, #0]
 80089ea:	e002      	b.n	80089f2 <_printf_i+0xf2>
 80089ec:	0669      	lsls	r1, r5, #25
 80089ee:	d5fb      	bpl.n	80089e8 <_printf_i+0xe8>
 80089f0:	881d      	ldrh	r5, [r3, #0]
 80089f2:	4854      	ldr	r0, [pc, #336]	; (8008b44 <_printf_i+0x244>)
 80089f4:	2f6f      	cmp	r7, #111	; 0x6f
 80089f6:	bf0c      	ite	eq
 80089f8:	2308      	moveq	r3, #8
 80089fa:	230a      	movne	r3, #10
 80089fc:	2100      	movs	r1, #0
 80089fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a02:	6866      	ldr	r6, [r4, #4]
 8008a04:	60a6      	str	r6, [r4, #8]
 8008a06:	2e00      	cmp	r6, #0
 8008a08:	bfa2      	ittt	ge
 8008a0a:	6821      	ldrge	r1, [r4, #0]
 8008a0c:	f021 0104 	bicge.w	r1, r1, #4
 8008a10:	6021      	strge	r1, [r4, #0]
 8008a12:	b90d      	cbnz	r5, 8008a18 <_printf_i+0x118>
 8008a14:	2e00      	cmp	r6, #0
 8008a16:	d04d      	beq.n	8008ab4 <_printf_i+0x1b4>
 8008a18:	4616      	mov	r6, r2
 8008a1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a1e:	fb03 5711 	mls	r7, r3, r1, r5
 8008a22:	5dc7      	ldrb	r7, [r0, r7]
 8008a24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a28:	462f      	mov	r7, r5
 8008a2a:	42bb      	cmp	r3, r7
 8008a2c:	460d      	mov	r5, r1
 8008a2e:	d9f4      	bls.n	8008a1a <_printf_i+0x11a>
 8008a30:	2b08      	cmp	r3, #8
 8008a32:	d10b      	bne.n	8008a4c <_printf_i+0x14c>
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	07df      	lsls	r7, r3, #31
 8008a38:	d508      	bpl.n	8008a4c <_printf_i+0x14c>
 8008a3a:	6923      	ldr	r3, [r4, #16]
 8008a3c:	6861      	ldr	r1, [r4, #4]
 8008a3e:	4299      	cmp	r1, r3
 8008a40:	bfde      	ittt	le
 8008a42:	2330      	movle	r3, #48	; 0x30
 8008a44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a48:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008a4c:	1b92      	subs	r2, r2, r6
 8008a4e:	6122      	str	r2, [r4, #16]
 8008a50:	f8cd a000 	str.w	sl, [sp]
 8008a54:	464b      	mov	r3, r9
 8008a56:	aa03      	add	r2, sp, #12
 8008a58:	4621      	mov	r1, r4
 8008a5a:	4640      	mov	r0, r8
 8008a5c:	f7ff fee2 	bl	8008824 <_printf_common>
 8008a60:	3001      	adds	r0, #1
 8008a62:	d14c      	bne.n	8008afe <_printf_i+0x1fe>
 8008a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a68:	b004      	add	sp, #16
 8008a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a6e:	4835      	ldr	r0, [pc, #212]	; (8008b44 <_printf_i+0x244>)
 8008a70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a74:	6823      	ldr	r3, [r4, #0]
 8008a76:	680e      	ldr	r6, [r1, #0]
 8008a78:	061f      	lsls	r7, r3, #24
 8008a7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8008a7e:	600e      	str	r6, [r1, #0]
 8008a80:	d514      	bpl.n	8008aac <_printf_i+0x1ac>
 8008a82:	07d9      	lsls	r1, r3, #31
 8008a84:	bf44      	itt	mi
 8008a86:	f043 0320 	orrmi.w	r3, r3, #32
 8008a8a:	6023      	strmi	r3, [r4, #0]
 8008a8c:	b91d      	cbnz	r5, 8008a96 <_printf_i+0x196>
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	f023 0320 	bic.w	r3, r3, #32
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	2310      	movs	r3, #16
 8008a98:	e7b0      	b.n	80089fc <_printf_i+0xfc>
 8008a9a:	6823      	ldr	r3, [r4, #0]
 8008a9c:	f043 0320 	orr.w	r3, r3, #32
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	2378      	movs	r3, #120	; 0x78
 8008aa4:	4828      	ldr	r0, [pc, #160]	; (8008b48 <_printf_i+0x248>)
 8008aa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008aaa:	e7e3      	b.n	8008a74 <_printf_i+0x174>
 8008aac:	065e      	lsls	r6, r3, #25
 8008aae:	bf48      	it	mi
 8008ab0:	b2ad      	uxthmi	r5, r5
 8008ab2:	e7e6      	b.n	8008a82 <_printf_i+0x182>
 8008ab4:	4616      	mov	r6, r2
 8008ab6:	e7bb      	b.n	8008a30 <_printf_i+0x130>
 8008ab8:	680b      	ldr	r3, [r1, #0]
 8008aba:	6826      	ldr	r6, [r4, #0]
 8008abc:	6960      	ldr	r0, [r4, #20]
 8008abe:	1d1d      	adds	r5, r3, #4
 8008ac0:	600d      	str	r5, [r1, #0]
 8008ac2:	0635      	lsls	r5, r6, #24
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	d501      	bpl.n	8008acc <_printf_i+0x1cc>
 8008ac8:	6018      	str	r0, [r3, #0]
 8008aca:	e002      	b.n	8008ad2 <_printf_i+0x1d2>
 8008acc:	0671      	lsls	r1, r6, #25
 8008ace:	d5fb      	bpl.n	8008ac8 <_printf_i+0x1c8>
 8008ad0:	8018      	strh	r0, [r3, #0]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	6123      	str	r3, [r4, #16]
 8008ad6:	4616      	mov	r6, r2
 8008ad8:	e7ba      	b.n	8008a50 <_printf_i+0x150>
 8008ada:	680b      	ldr	r3, [r1, #0]
 8008adc:	1d1a      	adds	r2, r3, #4
 8008ade:	600a      	str	r2, [r1, #0]
 8008ae0:	681e      	ldr	r6, [r3, #0]
 8008ae2:	6862      	ldr	r2, [r4, #4]
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	f7f7 fbb2 	bl	8000250 <memchr>
 8008aec:	b108      	cbz	r0, 8008af2 <_printf_i+0x1f2>
 8008aee:	1b80      	subs	r0, r0, r6
 8008af0:	6060      	str	r0, [r4, #4]
 8008af2:	6863      	ldr	r3, [r4, #4]
 8008af4:	6123      	str	r3, [r4, #16]
 8008af6:	2300      	movs	r3, #0
 8008af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008afc:	e7a8      	b.n	8008a50 <_printf_i+0x150>
 8008afe:	6923      	ldr	r3, [r4, #16]
 8008b00:	4632      	mov	r2, r6
 8008b02:	4649      	mov	r1, r9
 8008b04:	4640      	mov	r0, r8
 8008b06:	47d0      	blx	sl
 8008b08:	3001      	adds	r0, #1
 8008b0a:	d0ab      	beq.n	8008a64 <_printf_i+0x164>
 8008b0c:	6823      	ldr	r3, [r4, #0]
 8008b0e:	079b      	lsls	r3, r3, #30
 8008b10:	d413      	bmi.n	8008b3a <_printf_i+0x23a>
 8008b12:	68e0      	ldr	r0, [r4, #12]
 8008b14:	9b03      	ldr	r3, [sp, #12]
 8008b16:	4298      	cmp	r0, r3
 8008b18:	bfb8      	it	lt
 8008b1a:	4618      	movlt	r0, r3
 8008b1c:	e7a4      	b.n	8008a68 <_printf_i+0x168>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	4632      	mov	r2, r6
 8008b22:	4649      	mov	r1, r9
 8008b24:	4640      	mov	r0, r8
 8008b26:	47d0      	blx	sl
 8008b28:	3001      	adds	r0, #1
 8008b2a:	d09b      	beq.n	8008a64 <_printf_i+0x164>
 8008b2c:	3501      	adds	r5, #1
 8008b2e:	68e3      	ldr	r3, [r4, #12]
 8008b30:	9903      	ldr	r1, [sp, #12]
 8008b32:	1a5b      	subs	r3, r3, r1
 8008b34:	42ab      	cmp	r3, r5
 8008b36:	dcf2      	bgt.n	8008b1e <_printf_i+0x21e>
 8008b38:	e7eb      	b.n	8008b12 <_printf_i+0x212>
 8008b3a:	2500      	movs	r5, #0
 8008b3c:	f104 0619 	add.w	r6, r4, #25
 8008b40:	e7f5      	b.n	8008b2e <_printf_i+0x22e>
 8008b42:	bf00      	nop
 8008b44:	0800d288 	.word	0x0800d288
 8008b48:	0800d299 	.word	0x0800d299

08008b4c <_scanf_float>:
 8008b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b50:	b087      	sub	sp, #28
 8008b52:	4617      	mov	r7, r2
 8008b54:	9303      	str	r3, [sp, #12]
 8008b56:	688b      	ldr	r3, [r1, #8]
 8008b58:	1e5a      	subs	r2, r3, #1
 8008b5a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008b5e:	bf83      	ittte	hi
 8008b60:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008b64:	195b      	addhi	r3, r3, r5
 8008b66:	9302      	strhi	r3, [sp, #8]
 8008b68:	2300      	movls	r3, #0
 8008b6a:	bf86      	itte	hi
 8008b6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008b70:	608b      	strhi	r3, [r1, #8]
 8008b72:	9302      	strls	r3, [sp, #8]
 8008b74:	680b      	ldr	r3, [r1, #0]
 8008b76:	468b      	mov	fp, r1
 8008b78:	2500      	movs	r5, #0
 8008b7a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008b7e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008b82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008b86:	4680      	mov	r8, r0
 8008b88:	460c      	mov	r4, r1
 8008b8a:	465e      	mov	r6, fp
 8008b8c:	46aa      	mov	sl, r5
 8008b8e:	46a9      	mov	r9, r5
 8008b90:	9501      	str	r5, [sp, #4]
 8008b92:	68a2      	ldr	r2, [r4, #8]
 8008b94:	b152      	cbz	r2, 8008bac <_scanf_float+0x60>
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	2b4e      	cmp	r3, #78	; 0x4e
 8008b9c:	d864      	bhi.n	8008c68 <_scanf_float+0x11c>
 8008b9e:	2b40      	cmp	r3, #64	; 0x40
 8008ba0:	d83c      	bhi.n	8008c1c <_scanf_float+0xd0>
 8008ba2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008ba6:	b2c8      	uxtb	r0, r1
 8008ba8:	280e      	cmp	r0, #14
 8008baa:	d93a      	bls.n	8008c22 <_scanf_float+0xd6>
 8008bac:	f1b9 0f00 	cmp.w	r9, #0
 8008bb0:	d003      	beq.n	8008bba <_scanf_float+0x6e>
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bb8:	6023      	str	r3, [r4, #0]
 8008bba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008bbe:	f1ba 0f01 	cmp.w	sl, #1
 8008bc2:	f200 8113 	bhi.w	8008dec <_scanf_float+0x2a0>
 8008bc6:	455e      	cmp	r6, fp
 8008bc8:	f200 8105 	bhi.w	8008dd6 <_scanf_float+0x28a>
 8008bcc:	2501      	movs	r5, #1
 8008bce:	4628      	mov	r0, r5
 8008bd0:	b007      	add	sp, #28
 8008bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008bda:	2a0d      	cmp	r2, #13
 8008bdc:	d8e6      	bhi.n	8008bac <_scanf_float+0x60>
 8008bde:	a101      	add	r1, pc, #4	; (adr r1, 8008be4 <_scanf_float+0x98>)
 8008be0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008be4:	08008d23 	.word	0x08008d23
 8008be8:	08008bad 	.word	0x08008bad
 8008bec:	08008bad 	.word	0x08008bad
 8008bf0:	08008bad 	.word	0x08008bad
 8008bf4:	08008d83 	.word	0x08008d83
 8008bf8:	08008d5b 	.word	0x08008d5b
 8008bfc:	08008bad 	.word	0x08008bad
 8008c00:	08008bad 	.word	0x08008bad
 8008c04:	08008d31 	.word	0x08008d31
 8008c08:	08008bad 	.word	0x08008bad
 8008c0c:	08008bad 	.word	0x08008bad
 8008c10:	08008bad 	.word	0x08008bad
 8008c14:	08008bad 	.word	0x08008bad
 8008c18:	08008ce9 	.word	0x08008ce9
 8008c1c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008c20:	e7db      	b.n	8008bda <_scanf_float+0x8e>
 8008c22:	290e      	cmp	r1, #14
 8008c24:	d8c2      	bhi.n	8008bac <_scanf_float+0x60>
 8008c26:	a001      	add	r0, pc, #4	; (adr r0, 8008c2c <_scanf_float+0xe0>)
 8008c28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008c2c:	08008cdb 	.word	0x08008cdb
 8008c30:	08008bad 	.word	0x08008bad
 8008c34:	08008cdb 	.word	0x08008cdb
 8008c38:	08008d6f 	.word	0x08008d6f
 8008c3c:	08008bad 	.word	0x08008bad
 8008c40:	08008c89 	.word	0x08008c89
 8008c44:	08008cc5 	.word	0x08008cc5
 8008c48:	08008cc5 	.word	0x08008cc5
 8008c4c:	08008cc5 	.word	0x08008cc5
 8008c50:	08008cc5 	.word	0x08008cc5
 8008c54:	08008cc5 	.word	0x08008cc5
 8008c58:	08008cc5 	.word	0x08008cc5
 8008c5c:	08008cc5 	.word	0x08008cc5
 8008c60:	08008cc5 	.word	0x08008cc5
 8008c64:	08008cc5 	.word	0x08008cc5
 8008c68:	2b6e      	cmp	r3, #110	; 0x6e
 8008c6a:	d809      	bhi.n	8008c80 <_scanf_float+0x134>
 8008c6c:	2b60      	cmp	r3, #96	; 0x60
 8008c6e:	d8b2      	bhi.n	8008bd6 <_scanf_float+0x8a>
 8008c70:	2b54      	cmp	r3, #84	; 0x54
 8008c72:	d077      	beq.n	8008d64 <_scanf_float+0x218>
 8008c74:	2b59      	cmp	r3, #89	; 0x59
 8008c76:	d199      	bne.n	8008bac <_scanf_float+0x60>
 8008c78:	2d07      	cmp	r5, #7
 8008c7a:	d197      	bne.n	8008bac <_scanf_float+0x60>
 8008c7c:	2508      	movs	r5, #8
 8008c7e:	e029      	b.n	8008cd4 <_scanf_float+0x188>
 8008c80:	2b74      	cmp	r3, #116	; 0x74
 8008c82:	d06f      	beq.n	8008d64 <_scanf_float+0x218>
 8008c84:	2b79      	cmp	r3, #121	; 0x79
 8008c86:	e7f6      	b.n	8008c76 <_scanf_float+0x12a>
 8008c88:	6821      	ldr	r1, [r4, #0]
 8008c8a:	05c8      	lsls	r0, r1, #23
 8008c8c:	d51a      	bpl.n	8008cc4 <_scanf_float+0x178>
 8008c8e:	9b02      	ldr	r3, [sp, #8]
 8008c90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008c94:	6021      	str	r1, [r4, #0]
 8008c96:	f109 0901 	add.w	r9, r9, #1
 8008c9a:	b11b      	cbz	r3, 8008ca4 <_scanf_float+0x158>
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	3201      	adds	r2, #1
 8008ca0:	9302      	str	r3, [sp, #8]
 8008ca2:	60a2      	str	r2, [r4, #8]
 8008ca4:	68a3      	ldr	r3, [r4, #8]
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	60a3      	str	r3, [r4, #8]
 8008caa:	6923      	ldr	r3, [r4, #16]
 8008cac:	3301      	adds	r3, #1
 8008cae:	6123      	str	r3, [r4, #16]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	607b      	str	r3, [r7, #4]
 8008cb8:	f340 8084 	ble.w	8008dc4 <_scanf_float+0x278>
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	603b      	str	r3, [r7, #0]
 8008cc2:	e766      	b.n	8008b92 <_scanf_float+0x46>
 8008cc4:	eb1a 0f05 	cmn.w	sl, r5
 8008cc8:	f47f af70 	bne.w	8008bac <_scanf_float+0x60>
 8008ccc:	6822      	ldr	r2, [r4, #0]
 8008cce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008cd2:	6022      	str	r2, [r4, #0]
 8008cd4:	f806 3b01 	strb.w	r3, [r6], #1
 8008cd8:	e7e4      	b.n	8008ca4 <_scanf_float+0x158>
 8008cda:	6822      	ldr	r2, [r4, #0]
 8008cdc:	0610      	lsls	r0, r2, #24
 8008cde:	f57f af65 	bpl.w	8008bac <_scanf_float+0x60>
 8008ce2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ce6:	e7f4      	b.n	8008cd2 <_scanf_float+0x186>
 8008ce8:	f1ba 0f00 	cmp.w	sl, #0
 8008cec:	d10e      	bne.n	8008d0c <_scanf_float+0x1c0>
 8008cee:	f1b9 0f00 	cmp.w	r9, #0
 8008cf2:	d10e      	bne.n	8008d12 <_scanf_float+0x1c6>
 8008cf4:	6822      	ldr	r2, [r4, #0]
 8008cf6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008cfa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008cfe:	d108      	bne.n	8008d12 <_scanf_float+0x1c6>
 8008d00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008d04:	6022      	str	r2, [r4, #0]
 8008d06:	f04f 0a01 	mov.w	sl, #1
 8008d0a:	e7e3      	b.n	8008cd4 <_scanf_float+0x188>
 8008d0c:	f1ba 0f02 	cmp.w	sl, #2
 8008d10:	d055      	beq.n	8008dbe <_scanf_float+0x272>
 8008d12:	2d01      	cmp	r5, #1
 8008d14:	d002      	beq.n	8008d1c <_scanf_float+0x1d0>
 8008d16:	2d04      	cmp	r5, #4
 8008d18:	f47f af48 	bne.w	8008bac <_scanf_float+0x60>
 8008d1c:	3501      	adds	r5, #1
 8008d1e:	b2ed      	uxtb	r5, r5
 8008d20:	e7d8      	b.n	8008cd4 <_scanf_float+0x188>
 8008d22:	f1ba 0f01 	cmp.w	sl, #1
 8008d26:	f47f af41 	bne.w	8008bac <_scanf_float+0x60>
 8008d2a:	f04f 0a02 	mov.w	sl, #2
 8008d2e:	e7d1      	b.n	8008cd4 <_scanf_float+0x188>
 8008d30:	b97d      	cbnz	r5, 8008d52 <_scanf_float+0x206>
 8008d32:	f1b9 0f00 	cmp.w	r9, #0
 8008d36:	f47f af3c 	bne.w	8008bb2 <_scanf_float+0x66>
 8008d3a:	6822      	ldr	r2, [r4, #0]
 8008d3c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008d40:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008d44:	f47f af39 	bne.w	8008bba <_scanf_float+0x6e>
 8008d48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008d4c:	6022      	str	r2, [r4, #0]
 8008d4e:	2501      	movs	r5, #1
 8008d50:	e7c0      	b.n	8008cd4 <_scanf_float+0x188>
 8008d52:	2d03      	cmp	r5, #3
 8008d54:	d0e2      	beq.n	8008d1c <_scanf_float+0x1d0>
 8008d56:	2d05      	cmp	r5, #5
 8008d58:	e7de      	b.n	8008d18 <_scanf_float+0x1cc>
 8008d5a:	2d02      	cmp	r5, #2
 8008d5c:	f47f af26 	bne.w	8008bac <_scanf_float+0x60>
 8008d60:	2503      	movs	r5, #3
 8008d62:	e7b7      	b.n	8008cd4 <_scanf_float+0x188>
 8008d64:	2d06      	cmp	r5, #6
 8008d66:	f47f af21 	bne.w	8008bac <_scanf_float+0x60>
 8008d6a:	2507      	movs	r5, #7
 8008d6c:	e7b2      	b.n	8008cd4 <_scanf_float+0x188>
 8008d6e:	6822      	ldr	r2, [r4, #0]
 8008d70:	0591      	lsls	r1, r2, #22
 8008d72:	f57f af1b 	bpl.w	8008bac <_scanf_float+0x60>
 8008d76:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008d7a:	6022      	str	r2, [r4, #0]
 8008d7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d80:	e7a8      	b.n	8008cd4 <_scanf_float+0x188>
 8008d82:	6822      	ldr	r2, [r4, #0]
 8008d84:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008d88:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008d8c:	d006      	beq.n	8008d9c <_scanf_float+0x250>
 8008d8e:	0550      	lsls	r0, r2, #21
 8008d90:	f57f af0c 	bpl.w	8008bac <_scanf_float+0x60>
 8008d94:	f1b9 0f00 	cmp.w	r9, #0
 8008d98:	f43f af0f 	beq.w	8008bba <_scanf_float+0x6e>
 8008d9c:	0591      	lsls	r1, r2, #22
 8008d9e:	bf58      	it	pl
 8008da0:	9901      	ldrpl	r1, [sp, #4]
 8008da2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008da6:	bf58      	it	pl
 8008da8:	eba9 0101 	subpl.w	r1, r9, r1
 8008dac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008db0:	bf58      	it	pl
 8008db2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008db6:	6022      	str	r2, [r4, #0]
 8008db8:	f04f 0900 	mov.w	r9, #0
 8008dbc:	e78a      	b.n	8008cd4 <_scanf_float+0x188>
 8008dbe:	f04f 0a03 	mov.w	sl, #3
 8008dc2:	e787      	b.n	8008cd4 <_scanf_float+0x188>
 8008dc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008dc8:	4639      	mov	r1, r7
 8008dca:	4640      	mov	r0, r8
 8008dcc:	4798      	blx	r3
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	f43f aedf 	beq.w	8008b92 <_scanf_float+0x46>
 8008dd4:	e6ea      	b.n	8008bac <_scanf_float+0x60>
 8008dd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008dda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008dde:	463a      	mov	r2, r7
 8008de0:	4640      	mov	r0, r8
 8008de2:	4798      	blx	r3
 8008de4:	6923      	ldr	r3, [r4, #16]
 8008de6:	3b01      	subs	r3, #1
 8008de8:	6123      	str	r3, [r4, #16]
 8008dea:	e6ec      	b.n	8008bc6 <_scanf_float+0x7a>
 8008dec:	1e6b      	subs	r3, r5, #1
 8008dee:	2b06      	cmp	r3, #6
 8008df0:	d825      	bhi.n	8008e3e <_scanf_float+0x2f2>
 8008df2:	2d02      	cmp	r5, #2
 8008df4:	d836      	bhi.n	8008e64 <_scanf_float+0x318>
 8008df6:	455e      	cmp	r6, fp
 8008df8:	f67f aee8 	bls.w	8008bcc <_scanf_float+0x80>
 8008dfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e04:	463a      	mov	r2, r7
 8008e06:	4640      	mov	r0, r8
 8008e08:	4798      	blx	r3
 8008e0a:	6923      	ldr	r3, [r4, #16]
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	6123      	str	r3, [r4, #16]
 8008e10:	e7f1      	b.n	8008df6 <_scanf_float+0x2aa>
 8008e12:	9802      	ldr	r0, [sp, #8]
 8008e14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e18:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008e1c:	9002      	str	r0, [sp, #8]
 8008e1e:	463a      	mov	r2, r7
 8008e20:	4640      	mov	r0, r8
 8008e22:	4798      	blx	r3
 8008e24:	6923      	ldr	r3, [r4, #16]
 8008e26:	3b01      	subs	r3, #1
 8008e28:	6123      	str	r3, [r4, #16]
 8008e2a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008e2e:	fa5f fa8a 	uxtb.w	sl, sl
 8008e32:	f1ba 0f02 	cmp.w	sl, #2
 8008e36:	d1ec      	bne.n	8008e12 <_scanf_float+0x2c6>
 8008e38:	3d03      	subs	r5, #3
 8008e3a:	b2ed      	uxtb	r5, r5
 8008e3c:	1b76      	subs	r6, r6, r5
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	05da      	lsls	r2, r3, #23
 8008e42:	d52f      	bpl.n	8008ea4 <_scanf_float+0x358>
 8008e44:	055b      	lsls	r3, r3, #21
 8008e46:	d510      	bpl.n	8008e6a <_scanf_float+0x31e>
 8008e48:	455e      	cmp	r6, fp
 8008e4a:	f67f aebf 	bls.w	8008bcc <_scanf_float+0x80>
 8008e4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e56:	463a      	mov	r2, r7
 8008e58:	4640      	mov	r0, r8
 8008e5a:	4798      	blx	r3
 8008e5c:	6923      	ldr	r3, [r4, #16]
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	6123      	str	r3, [r4, #16]
 8008e62:	e7f1      	b.n	8008e48 <_scanf_float+0x2fc>
 8008e64:	46aa      	mov	sl, r5
 8008e66:	9602      	str	r6, [sp, #8]
 8008e68:	e7df      	b.n	8008e2a <_scanf_float+0x2de>
 8008e6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008e6e:	6923      	ldr	r3, [r4, #16]
 8008e70:	2965      	cmp	r1, #101	; 0x65
 8008e72:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008e76:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8008e7a:	6123      	str	r3, [r4, #16]
 8008e7c:	d00c      	beq.n	8008e98 <_scanf_float+0x34c>
 8008e7e:	2945      	cmp	r1, #69	; 0x45
 8008e80:	d00a      	beq.n	8008e98 <_scanf_float+0x34c>
 8008e82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e86:	463a      	mov	r2, r7
 8008e88:	4640      	mov	r0, r8
 8008e8a:	4798      	blx	r3
 8008e8c:	6923      	ldr	r3, [r4, #16]
 8008e8e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008e92:	3b01      	subs	r3, #1
 8008e94:	1eb5      	subs	r5, r6, #2
 8008e96:	6123      	str	r3, [r4, #16]
 8008e98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e9c:	463a      	mov	r2, r7
 8008e9e:	4640      	mov	r0, r8
 8008ea0:	4798      	blx	r3
 8008ea2:	462e      	mov	r6, r5
 8008ea4:	6825      	ldr	r5, [r4, #0]
 8008ea6:	f015 0510 	ands.w	r5, r5, #16
 8008eaa:	d14d      	bne.n	8008f48 <_scanf_float+0x3fc>
 8008eac:	7035      	strb	r5, [r6, #0]
 8008eae:	6823      	ldr	r3, [r4, #0]
 8008eb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eb8:	d11a      	bne.n	8008ef0 <_scanf_float+0x3a4>
 8008eba:	9b01      	ldr	r3, [sp, #4]
 8008ebc:	454b      	cmp	r3, r9
 8008ebe:	eba3 0209 	sub.w	r2, r3, r9
 8008ec2:	d122      	bne.n	8008f0a <_scanf_float+0x3be>
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	4659      	mov	r1, fp
 8008ec8:	4640      	mov	r0, r8
 8008eca:	f000 fecb 	bl	8009c64 <_strtod_r>
 8008ece:	9b03      	ldr	r3, [sp, #12]
 8008ed0:	6821      	ldr	r1, [r4, #0]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f011 0f02 	tst.w	r1, #2
 8008ed8:	f103 0204 	add.w	r2, r3, #4
 8008edc:	d020      	beq.n	8008f20 <_scanf_float+0x3d4>
 8008ede:	9903      	ldr	r1, [sp, #12]
 8008ee0:	600a      	str	r2, [r1, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	ed83 0b00 	vstr	d0, [r3]
 8008ee8:	68e3      	ldr	r3, [r4, #12]
 8008eea:	3301      	adds	r3, #1
 8008eec:	60e3      	str	r3, [r4, #12]
 8008eee:	e66e      	b.n	8008bce <_scanf_float+0x82>
 8008ef0:	9b04      	ldr	r3, [sp, #16]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d0e6      	beq.n	8008ec4 <_scanf_float+0x378>
 8008ef6:	9905      	ldr	r1, [sp, #20]
 8008ef8:	230a      	movs	r3, #10
 8008efa:	462a      	mov	r2, r5
 8008efc:	3101      	adds	r1, #1
 8008efe:	4640      	mov	r0, r8
 8008f00:	f000 ff3a 	bl	8009d78 <_strtol_r>
 8008f04:	9b04      	ldr	r3, [sp, #16]
 8008f06:	9e05      	ldr	r6, [sp, #20]
 8008f08:	1ac2      	subs	r2, r0, r3
 8008f0a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008f0e:	429e      	cmp	r6, r3
 8008f10:	bf28      	it	cs
 8008f12:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008f16:	490d      	ldr	r1, [pc, #52]	; (8008f4c <_scanf_float+0x400>)
 8008f18:	4630      	mov	r0, r6
 8008f1a:	f000 f821 	bl	8008f60 <siprintf>
 8008f1e:	e7d1      	b.n	8008ec4 <_scanf_float+0x378>
 8008f20:	f011 0f04 	tst.w	r1, #4
 8008f24:	9903      	ldr	r1, [sp, #12]
 8008f26:	600a      	str	r2, [r1, #0]
 8008f28:	d1db      	bne.n	8008ee2 <_scanf_float+0x396>
 8008f2a:	eeb4 0b40 	vcmp.f64	d0, d0
 8008f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f32:	681e      	ldr	r6, [r3, #0]
 8008f34:	d705      	bvc.n	8008f42 <_scanf_float+0x3f6>
 8008f36:	4806      	ldr	r0, [pc, #24]	; (8008f50 <_scanf_float+0x404>)
 8008f38:	f000 f80c 	bl	8008f54 <nanf>
 8008f3c:	ed86 0a00 	vstr	s0, [r6]
 8008f40:	e7d2      	b.n	8008ee8 <_scanf_float+0x39c>
 8008f42:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008f46:	e7f9      	b.n	8008f3c <_scanf_float+0x3f0>
 8008f48:	2500      	movs	r5, #0
 8008f4a:	e640      	b.n	8008bce <_scanf_float+0x82>
 8008f4c:	0800d2aa 	.word	0x0800d2aa
 8008f50:	0800d6db 	.word	0x0800d6db

08008f54 <nanf>:
 8008f54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008f5c <nanf+0x8>
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	7fc00000 	.word	0x7fc00000

08008f60 <siprintf>:
 8008f60:	b40e      	push	{r1, r2, r3}
 8008f62:	b500      	push	{lr}
 8008f64:	b09c      	sub	sp, #112	; 0x70
 8008f66:	ab1d      	add	r3, sp, #116	; 0x74
 8008f68:	9002      	str	r0, [sp, #8]
 8008f6a:	9006      	str	r0, [sp, #24]
 8008f6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f70:	4809      	ldr	r0, [pc, #36]	; (8008f98 <siprintf+0x38>)
 8008f72:	9107      	str	r1, [sp, #28]
 8008f74:	9104      	str	r1, [sp, #16]
 8008f76:	4909      	ldr	r1, [pc, #36]	; (8008f9c <siprintf+0x3c>)
 8008f78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f7c:	9105      	str	r1, [sp, #20]
 8008f7e:	6800      	ldr	r0, [r0, #0]
 8008f80:	9301      	str	r3, [sp, #4]
 8008f82:	a902      	add	r1, sp, #8
 8008f84:	f002 fe9c 	bl	800bcc0 <_svfiprintf_r>
 8008f88:	9b02      	ldr	r3, [sp, #8]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	701a      	strb	r2, [r3, #0]
 8008f8e:	b01c      	add	sp, #112	; 0x70
 8008f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f94:	b003      	add	sp, #12
 8008f96:	4770      	bx	lr
 8008f98:	2000005c 	.word	0x2000005c
 8008f9c:	ffff0208 	.word	0xffff0208

08008fa0 <siscanf>:
 8008fa0:	b40e      	push	{r1, r2, r3}
 8008fa2:	b510      	push	{r4, lr}
 8008fa4:	b09f      	sub	sp, #124	; 0x7c
 8008fa6:	ac21      	add	r4, sp, #132	; 0x84
 8008fa8:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008fac:	f854 2b04 	ldr.w	r2, [r4], #4
 8008fb0:	9201      	str	r2, [sp, #4]
 8008fb2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008fb6:	9004      	str	r0, [sp, #16]
 8008fb8:	9008      	str	r0, [sp, #32]
 8008fba:	f7f7 f941 	bl	8000240 <strlen>
 8008fbe:	4b0c      	ldr	r3, [pc, #48]	; (8008ff0 <siscanf+0x50>)
 8008fc0:	9005      	str	r0, [sp, #20]
 8008fc2:	9009      	str	r0, [sp, #36]	; 0x24
 8008fc4:	930d      	str	r3, [sp, #52]	; 0x34
 8008fc6:	480b      	ldr	r0, [pc, #44]	; (8008ff4 <siscanf+0x54>)
 8008fc8:	9a01      	ldr	r2, [sp, #4]
 8008fca:	6800      	ldr	r0, [r0, #0]
 8008fcc:	9403      	str	r4, [sp, #12]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	9311      	str	r3, [sp, #68]	; 0x44
 8008fd2:	9316      	str	r3, [sp, #88]	; 0x58
 8008fd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008fd8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008fdc:	a904      	add	r1, sp, #16
 8008fde:	4623      	mov	r3, r4
 8008fe0:	f002 ffc8 	bl	800bf74 <__ssvfiscanf_r>
 8008fe4:	b01f      	add	sp, #124	; 0x7c
 8008fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fea:	b003      	add	sp, #12
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	0800901b 	.word	0x0800901b
 8008ff4:	2000005c 	.word	0x2000005c

08008ff8 <__sread>:
 8008ff8:	b510      	push	{r4, lr}
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009000:	f003 fa7c 	bl	800c4fc <_read_r>
 8009004:	2800      	cmp	r0, #0
 8009006:	bfab      	itete	ge
 8009008:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800900a:	89a3      	ldrhlt	r3, [r4, #12]
 800900c:	181b      	addge	r3, r3, r0
 800900e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009012:	bfac      	ite	ge
 8009014:	6563      	strge	r3, [r4, #84]	; 0x54
 8009016:	81a3      	strhlt	r3, [r4, #12]
 8009018:	bd10      	pop	{r4, pc}

0800901a <__seofread>:
 800901a:	2000      	movs	r0, #0
 800901c:	4770      	bx	lr

0800901e <__swrite>:
 800901e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009022:	461f      	mov	r7, r3
 8009024:	898b      	ldrh	r3, [r1, #12]
 8009026:	05db      	lsls	r3, r3, #23
 8009028:	4605      	mov	r5, r0
 800902a:	460c      	mov	r4, r1
 800902c:	4616      	mov	r6, r2
 800902e:	d505      	bpl.n	800903c <__swrite+0x1e>
 8009030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009034:	2302      	movs	r3, #2
 8009036:	2200      	movs	r2, #0
 8009038:	f002 f844 	bl	800b0c4 <_lseek_r>
 800903c:	89a3      	ldrh	r3, [r4, #12]
 800903e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009042:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009046:	81a3      	strh	r3, [r4, #12]
 8009048:	4632      	mov	r2, r6
 800904a:	463b      	mov	r3, r7
 800904c:	4628      	mov	r0, r5
 800904e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009052:	f000 be93 	b.w	8009d7c <_write_r>

08009056 <__sseek>:
 8009056:	b510      	push	{r4, lr}
 8009058:	460c      	mov	r4, r1
 800905a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800905e:	f002 f831 	bl	800b0c4 <_lseek_r>
 8009062:	1c43      	adds	r3, r0, #1
 8009064:	89a3      	ldrh	r3, [r4, #12]
 8009066:	bf15      	itete	ne
 8009068:	6560      	strne	r0, [r4, #84]	; 0x54
 800906a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800906e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009072:	81a3      	strheq	r3, [r4, #12]
 8009074:	bf18      	it	ne
 8009076:	81a3      	strhne	r3, [r4, #12]
 8009078:	bd10      	pop	{r4, pc}

0800907a <__sclose>:
 800907a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800907e:	f000 be8f 	b.w	8009da0 <_close_r>

08009082 <sulp>:
 8009082:	b570      	push	{r4, r5, r6, lr}
 8009084:	4604      	mov	r4, r0
 8009086:	460d      	mov	r5, r1
 8009088:	4616      	mov	r6, r2
 800908a:	ec45 4b10 	vmov	d0, r4, r5
 800908e:	f002 fbb1 	bl	800b7f4 <__ulp>
 8009092:	b17e      	cbz	r6, 80090b4 <sulp+0x32>
 8009094:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009098:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800909c:	2b00      	cmp	r3, #0
 800909e:	dd09      	ble.n	80090b4 <sulp+0x32>
 80090a0:	051b      	lsls	r3, r3, #20
 80090a2:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80090a6:	2000      	movs	r0, #0
 80090a8:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80090ac:	ec41 0b17 	vmov	d7, r0, r1
 80090b0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80090b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080090b8 <_strtod_l>:
 80090b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090bc:	ed2d 8b0c 	vpush	{d8-d13}
 80090c0:	b09d      	sub	sp, #116	; 0x74
 80090c2:	461f      	mov	r7, r3
 80090c4:	2300      	movs	r3, #0
 80090c6:	9318      	str	r3, [sp, #96]	; 0x60
 80090c8:	4ba6      	ldr	r3, [pc, #664]	; (8009364 <_strtod_l+0x2ac>)
 80090ca:	9213      	str	r2, [sp, #76]	; 0x4c
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	9308      	str	r3, [sp, #32]
 80090d0:	4604      	mov	r4, r0
 80090d2:	4618      	mov	r0, r3
 80090d4:	468a      	mov	sl, r1
 80090d6:	f7f7 f8b3 	bl	8000240 <strlen>
 80090da:	f04f 0800 	mov.w	r8, #0
 80090de:	4605      	mov	r5, r0
 80090e0:	f04f 0900 	mov.w	r9, #0
 80090e4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80090e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090ea:	781a      	ldrb	r2, [r3, #0]
 80090ec:	2a2b      	cmp	r2, #43	; 0x2b
 80090ee:	d04d      	beq.n	800918c <_strtod_l+0xd4>
 80090f0:	d83a      	bhi.n	8009168 <_strtod_l+0xb0>
 80090f2:	2a0d      	cmp	r2, #13
 80090f4:	d833      	bhi.n	800915e <_strtod_l+0xa6>
 80090f6:	2a08      	cmp	r2, #8
 80090f8:	d833      	bhi.n	8009162 <_strtod_l+0xaa>
 80090fa:	2a00      	cmp	r2, #0
 80090fc:	d03d      	beq.n	800917a <_strtod_l+0xc2>
 80090fe:	2300      	movs	r3, #0
 8009100:	930b      	str	r3, [sp, #44]	; 0x2c
 8009102:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009104:	7833      	ldrb	r3, [r6, #0]
 8009106:	2b30      	cmp	r3, #48	; 0x30
 8009108:	f040 80b6 	bne.w	8009278 <_strtod_l+0x1c0>
 800910c:	7873      	ldrb	r3, [r6, #1]
 800910e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009112:	2b58      	cmp	r3, #88	; 0x58
 8009114:	d16d      	bne.n	80091f2 <_strtod_l+0x13a>
 8009116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009118:	9301      	str	r3, [sp, #4]
 800911a:	ab18      	add	r3, sp, #96	; 0x60
 800911c:	9702      	str	r7, [sp, #8]
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	4a91      	ldr	r2, [pc, #580]	; (8009368 <_strtod_l+0x2b0>)
 8009122:	ab19      	add	r3, sp, #100	; 0x64
 8009124:	a917      	add	r1, sp, #92	; 0x5c
 8009126:	4620      	mov	r0, r4
 8009128:	f001 fcc0 	bl	800aaac <__gethex>
 800912c:	f010 0507 	ands.w	r5, r0, #7
 8009130:	4607      	mov	r7, r0
 8009132:	d005      	beq.n	8009140 <_strtod_l+0x88>
 8009134:	2d06      	cmp	r5, #6
 8009136:	d12b      	bne.n	8009190 <_strtod_l+0xd8>
 8009138:	3601      	adds	r6, #1
 800913a:	2300      	movs	r3, #0
 800913c:	9617      	str	r6, [sp, #92]	; 0x5c
 800913e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009140:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009142:	2b00      	cmp	r3, #0
 8009144:	f040 856e 	bne.w	8009c24 <_strtod_l+0xb6c>
 8009148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800914a:	b1e3      	cbz	r3, 8009186 <_strtod_l+0xce>
 800914c:	ec49 8b17 	vmov	d7, r8, r9
 8009150:	eeb1 0b47 	vneg.f64	d0, d7
 8009154:	b01d      	add	sp, #116	; 0x74
 8009156:	ecbd 8b0c 	vpop	{d8-d13}
 800915a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800915e:	2a20      	cmp	r2, #32
 8009160:	d1cd      	bne.n	80090fe <_strtod_l+0x46>
 8009162:	3301      	adds	r3, #1
 8009164:	9317      	str	r3, [sp, #92]	; 0x5c
 8009166:	e7bf      	b.n	80090e8 <_strtod_l+0x30>
 8009168:	2a2d      	cmp	r2, #45	; 0x2d
 800916a:	d1c8      	bne.n	80090fe <_strtod_l+0x46>
 800916c:	2201      	movs	r2, #1
 800916e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009170:	1c5a      	adds	r2, r3, #1
 8009172:	9217      	str	r2, [sp, #92]	; 0x5c
 8009174:	785b      	ldrb	r3, [r3, #1]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1c3      	bne.n	8009102 <_strtod_l+0x4a>
 800917a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800917c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8009180:	2b00      	cmp	r3, #0
 8009182:	f040 854d 	bne.w	8009c20 <_strtod_l+0xb68>
 8009186:	ec49 8b10 	vmov	d0, r8, r9
 800918a:	e7e3      	b.n	8009154 <_strtod_l+0x9c>
 800918c:	2200      	movs	r2, #0
 800918e:	e7ee      	b.n	800916e <_strtod_l+0xb6>
 8009190:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009192:	b13a      	cbz	r2, 80091a4 <_strtod_l+0xec>
 8009194:	2135      	movs	r1, #53	; 0x35
 8009196:	a81a      	add	r0, sp, #104	; 0x68
 8009198:	f002 fc38 	bl	800ba0c <__copybits>
 800919c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800919e:	4620      	mov	r0, r4
 80091a0:	f001 fffc 	bl	800b19c <_Bfree>
 80091a4:	3d01      	subs	r5, #1
 80091a6:	2d05      	cmp	r5, #5
 80091a8:	d807      	bhi.n	80091ba <_strtod_l+0x102>
 80091aa:	e8df f005 	tbb	[pc, r5]
 80091ae:	0b0e      	.short	0x0b0e
 80091b0:	030e1d18 	.word	0x030e1d18
 80091b4:	f04f 0900 	mov.w	r9, #0
 80091b8:	46c8      	mov	r8, r9
 80091ba:	073b      	lsls	r3, r7, #28
 80091bc:	d5c0      	bpl.n	8009140 <_strtod_l+0x88>
 80091be:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80091c2:	e7bd      	b.n	8009140 <_strtod_l+0x88>
 80091c4:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 80091c8:	e7f7      	b.n	80091ba <_strtod_l+0x102>
 80091ca:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 80091ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80091d0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80091d4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80091d8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80091dc:	e7ed      	b.n	80091ba <_strtod_l+0x102>
 80091de:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800936c <_strtod_l+0x2b4>
 80091e2:	f04f 0800 	mov.w	r8, #0
 80091e6:	e7e8      	b.n	80091ba <_strtod_l+0x102>
 80091e8:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80091ec:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80091f0:	e7e3      	b.n	80091ba <_strtod_l+0x102>
 80091f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091f4:	1c5a      	adds	r2, r3, #1
 80091f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80091f8:	785b      	ldrb	r3, [r3, #1]
 80091fa:	2b30      	cmp	r3, #48	; 0x30
 80091fc:	d0f9      	beq.n	80091f2 <_strtod_l+0x13a>
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d09e      	beq.n	8009140 <_strtod_l+0x88>
 8009202:	2301      	movs	r3, #1
 8009204:	9306      	str	r3, [sp, #24]
 8009206:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009208:	930c      	str	r3, [sp, #48]	; 0x30
 800920a:	2300      	movs	r3, #0
 800920c:	9304      	str	r3, [sp, #16]
 800920e:	930a      	str	r3, [sp, #40]	; 0x28
 8009210:	461e      	mov	r6, r3
 8009212:	220a      	movs	r2, #10
 8009214:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009216:	f890 b000 	ldrb.w	fp, [r0]
 800921a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 800921e:	b2d9      	uxtb	r1, r3
 8009220:	2909      	cmp	r1, #9
 8009222:	d92b      	bls.n	800927c <_strtod_l+0x1c4>
 8009224:	9908      	ldr	r1, [sp, #32]
 8009226:	462a      	mov	r2, r5
 8009228:	f003 f9cc 	bl	800c5c4 <strncmp>
 800922c:	2800      	cmp	r0, #0
 800922e:	d035      	beq.n	800929c <_strtod_l+0x1e4>
 8009230:	2000      	movs	r0, #0
 8009232:	465a      	mov	r2, fp
 8009234:	4633      	mov	r3, r6
 8009236:	4683      	mov	fp, r0
 8009238:	4601      	mov	r1, r0
 800923a:	2a65      	cmp	r2, #101	; 0x65
 800923c:	d001      	beq.n	8009242 <_strtod_l+0x18a>
 800923e:	2a45      	cmp	r2, #69	; 0x45
 8009240:	d118      	bne.n	8009274 <_strtod_l+0x1bc>
 8009242:	b91b      	cbnz	r3, 800924c <_strtod_l+0x194>
 8009244:	9b06      	ldr	r3, [sp, #24]
 8009246:	4303      	orrs	r3, r0
 8009248:	d097      	beq.n	800917a <_strtod_l+0xc2>
 800924a:	2300      	movs	r3, #0
 800924c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8009250:	f10a 0201 	add.w	r2, sl, #1
 8009254:	9217      	str	r2, [sp, #92]	; 0x5c
 8009256:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800925a:	2a2b      	cmp	r2, #43	; 0x2b
 800925c:	d077      	beq.n	800934e <_strtod_l+0x296>
 800925e:	2a2d      	cmp	r2, #45	; 0x2d
 8009260:	d07d      	beq.n	800935e <_strtod_l+0x2a6>
 8009262:	f04f 0e00 	mov.w	lr, #0
 8009266:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800926a:	2d09      	cmp	r5, #9
 800926c:	f240 8084 	bls.w	8009378 <_strtod_l+0x2c0>
 8009270:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8009274:	2500      	movs	r5, #0
 8009276:	e09f      	b.n	80093b8 <_strtod_l+0x300>
 8009278:	2300      	movs	r3, #0
 800927a:	e7c3      	b.n	8009204 <_strtod_l+0x14c>
 800927c:	2e08      	cmp	r6, #8
 800927e:	bfd5      	itete	le
 8009280:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8009282:	9904      	ldrgt	r1, [sp, #16]
 8009284:	fb02 3301 	mlale	r3, r2, r1, r3
 8009288:	fb02 3301 	mlagt	r3, r2, r1, r3
 800928c:	f100 0001 	add.w	r0, r0, #1
 8009290:	bfd4      	ite	le
 8009292:	930a      	strle	r3, [sp, #40]	; 0x28
 8009294:	9304      	strgt	r3, [sp, #16]
 8009296:	3601      	adds	r6, #1
 8009298:	9017      	str	r0, [sp, #92]	; 0x5c
 800929a:	e7bb      	b.n	8009214 <_strtod_l+0x15c>
 800929c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800929e:	195a      	adds	r2, r3, r5
 80092a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80092a2:	5d5a      	ldrb	r2, [r3, r5]
 80092a4:	b3ae      	cbz	r6, 8009312 <_strtod_l+0x25a>
 80092a6:	4683      	mov	fp, r0
 80092a8:	4633      	mov	r3, r6
 80092aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80092ae:	2909      	cmp	r1, #9
 80092b0:	d912      	bls.n	80092d8 <_strtod_l+0x220>
 80092b2:	2101      	movs	r1, #1
 80092b4:	e7c1      	b.n	800923a <_strtod_l+0x182>
 80092b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092b8:	1c5a      	adds	r2, r3, #1
 80092ba:	9217      	str	r2, [sp, #92]	; 0x5c
 80092bc:	785a      	ldrb	r2, [r3, #1]
 80092be:	3001      	adds	r0, #1
 80092c0:	2a30      	cmp	r2, #48	; 0x30
 80092c2:	d0f8      	beq.n	80092b6 <_strtod_l+0x1fe>
 80092c4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80092c8:	2b08      	cmp	r3, #8
 80092ca:	f200 84b0 	bhi.w	8009c2e <_strtod_l+0xb76>
 80092ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092d0:	930c      	str	r3, [sp, #48]	; 0x30
 80092d2:	4683      	mov	fp, r0
 80092d4:	2000      	movs	r0, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	3a30      	subs	r2, #48	; 0x30
 80092da:	f100 0101 	add.w	r1, r0, #1
 80092de:	d012      	beq.n	8009306 <_strtod_l+0x24e>
 80092e0:	448b      	add	fp, r1
 80092e2:	eb00 0c03 	add.w	ip, r0, r3
 80092e6:	4619      	mov	r1, r3
 80092e8:	250a      	movs	r5, #10
 80092ea:	4561      	cmp	r1, ip
 80092ec:	d113      	bne.n	8009316 <_strtod_l+0x25e>
 80092ee:	1819      	adds	r1, r3, r0
 80092f0:	2908      	cmp	r1, #8
 80092f2:	f103 0301 	add.w	r3, r3, #1
 80092f6:	4403      	add	r3, r0
 80092f8:	dc1d      	bgt.n	8009336 <_strtod_l+0x27e>
 80092fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80092fc:	210a      	movs	r1, #10
 80092fe:	fb01 2200 	mla	r2, r1, r0, r2
 8009302:	920a      	str	r2, [sp, #40]	; 0x28
 8009304:	2100      	movs	r1, #0
 8009306:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009308:	1c50      	adds	r0, r2, #1
 800930a:	9017      	str	r0, [sp, #92]	; 0x5c
 800930c:	7852      	ldrb	r2, [r2, #1]
 800930e:	4608      	mov	r0, r1
 8009310:	e7cb      	b.n	80092aa <_strtod_l+0x1f2>
 8009312:	4630      	mov	r0, r6
 8009314:	e7d4      	b.n	80092c0 <_strtod_l+0x208>
 8009316:	2908      	cmp	r1, #8
 8009318:	dc04      	bgt.n	8009324 <_strtod_l+0x26c>
 800931a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800931c:	436f      	muls	r7, r5
 800931e:	970a      	str	r7, [sp, #40]	; 0x28
 8009320:	3101      	adds	r1, #1
 8009322:	e7e2      	b.n	80092ea <_strtod_l+0x232>
 8009324:	f101 0e01 	add.w	lr, r1, #1
 8009328:	f1be 0f10 	cmp.w	lr, #16
 800932c:	bfde      	ittt	le
 800932e:	9f04      	ldrle	r7, [sp, #16]
 8009330:	436f      	mulle	r7, r5
 8009332:	9704      	strle	r7, [sp, #16]
 8009334:	e7f4      	b.n	8009320 <_strtod_l+0x268>
 8009336:	2b10      	cmp	r3, #16
 8009338:	bfdf      	itttt	le
 800933a:	9804      	ldrle	r0, [sp, #16]
 800933c:	210a      	movle	r1, #10
 800933e:	fb01 2200 	mlale	r2, r1, r0, r2
 8009342:	9204      	strle	r2, [sp, #16]
 8009344:	e7de      	b.n	8009304 <_strtod_l+0x24c>
 8009346:	f04f 0b00 	mov.w	fp, #0
 800934a:	2101      	movs	r1, #1
 800934c:	e77a      	b.n	8009244 <_strtod_l+0x18c>
 800934e:	f04f 0e00 	mov.w	lr, #0
 8009352:	f10a 0202 	add.w	r2, sl, #2
 8009356:	9217      	str	r2, [sp, #92]	; 0x5c
 8009358:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800935c:	e783      	b.n	8009266 <_strtod_l+0x1ae>
 800935e:	f04f 0e01 	mov.w	lr, #1
 8009362:	e7f6      	b.n	8009352 <_strtod_l+0x29a>
 8009364:	0800d500 	.word	0x0800d500
 8009368:	0800d2b0 	.word	0x0800d2b0
 800936c:	7ff00000 	.word	0x7ff00000
 8009370:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009372:	1c55      	adds	r5, r2, #1
 8009374:	9517      	str	r5, [sp, #92]	; 0x5c
 8009376:	7852      	ldrb	r2, [r2, #1]
 8009378:	2a30      	cmp	r2, #48	; 0x30
 800937a:	d0f9      	beq.n	8009370 <_strtod_l+0x2b8>
 800937c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8009380:	2d08      	cmp	r5, #8
 8009382:	f63f af77 	bhi.w	8009274 <_strtod_l+0x1bc>
 8009386:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800938a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800938c:	9208      	str	r2, [sp, #32]
 800938e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009390:	1c55      	adds	r5, r2, #1
 8009392:	9517      	str	r5, [sp, #92]	; 0x5c
 8009394:	7852      	ldrb	r2, [r2, #1]
 8009396:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800939a:	2f09      	cmp	r7, #9
 800939c:	d937      	bls.n	800940e <_strtod_l+0x356>
 800939e:	9f08      	ldr	r7, [sp, #32]
 80093a0:	1bed      	subs	r5, r5, r7
 80093a2:	2d08      	cmp	r5, #8
 80093a4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80093a8:	dc02      	bgt.n	80093b0 <_strtod_l+0x2f8>
 80093aa:	4565      	cmp	r5, ip
 80093ac:	bfa8      	it	ge
 80093ae:	4665      	movge	r5, ip
 80093b0:	f1be 0f00 	cmp.w	lr, #0
 80093b4:	d000      	beq.n	80093b8 <_strtod_l+0x300>
 80093b6:	426d      	negs	r5, r5
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d14f      	bne.n	800945c <_strtod_l+0x3a4>
 80093bc:	9b06      	ldr	r3, [sp, #24]
 80093be:	4303      	orrs	r3, r0
 80093c0:	f47f aebe 	bne.w	8009140 <_strtod_l+0x88>
 80093c4:	2900      	cmp	r1, #0
 80093c6:	f47f aed8 	bne.w	800917a <_strtod_l+0xc2>
 80093ca:	2a69      	cmp	r2, #105	; 0x69
 80093cc:	d027      	beq.n	800941e <_strtod_l+0x366>
 80093ce:	dc24      	bgt.n	800941a <_strtod_l+0x362>
 80093d0:	2a49      	cmp	r2, #73	; 0x49
 80093d2:	d024      	beq.n	800941e <_strtod_l+0x366>
 80093d4:	2a4e      	cmp	r2, #78	; 0x4e
 80093d6:	f47f aed0 	bne.w	800917a <_strtod_l+0xc2>
 80093da:	499b      	ldr	r1, [pc, #620]	; (8009648 <_strtod_l+0x590>)
 80093dc:	a817      	add	r0, sp, #92	; 0x5c
 80093de:	f001 fdbd 	bl	800af5c <__match>
 80093e2:	2800      	cmp	r0, #0
 80093e4:	f43f aec9 	beq.w	800917a <_strtod_l+0xc2>
 80093e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	2b28      	cmp	r3, #40	; 0x28
 80093ee:	d12d      	bne.n	800944c <_strtod_l+0x394>
 80093f0:	4996      	ldr	r1, [pc, #600]	; (800964c <_strtod_l+0x594>)
 80093f2:	aa1a      	add	r2, sp, #104	; 0x68
 80093f4:	a817      	add	r0, sp, #92	; 0x5c
 80093f6:	f001 fdc5 	bl	800af84 <__hexnan>
 80093fa:	2805      	cmp	r0, #5
 80093fc:	d126      	bne.n	800944c <_strtod_l+0x394>
 80093fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009400:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009404:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009408:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800940c:	e698      	b.n	8009140 <_strtod_l+0x88>
 800940e:	250a      	movs	r5, #10
 8009410:	fb05 250c 	mla	r5, r5, ip, r2
 8009414:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8009418:	e7b9      	b.n	800938e <_strtod_l+0x2d6>
 800941a:	2a6e      	cmp	r2, #110	; 0x6e
 800941c:	e7db      	b.n	80093d6 <_strtod_l+0x31e>
 800941e:	498c      	ldr	r1, [pc, #560]	; (8009650 <_strtod_l+0x598>)
 8009420:	a817      	add	r0, sp, #92	; 0x5c
 8009422:	f001 fd9b 	bl	800af5c <__match>
 8009426:	2800      	cmp	r0, #0
 8009428:	f43f aea7 	beq.w	800917a <_strtod_l+0xc2>
 800942c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800942e:	4989      	ldr	r1, [pc, #548]	; (8009654 <_strtod_l+0x59c>)
 8009430:	3b01      	subs	r3, #1
 8009432:	a817      	add	r0, sp, #92	; 0x5c
 8009434:	9317      	str	r3, [sp, #92]	; 0x5c
 8009436:	f001 fd91 	bl	800af5c <__match>
 800943a:	b910      	cbnz	r0, 8009442 <_strtod_l+0x38a>
 800943c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800943e:	3301      	adds	r3, #1
 8009440:	9317      	str	r3, [sp, #92]	; 0x5c
 8009442:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8009668 <_strtod_l+0x5b0>
 8009446:	f04f 0800 	mov.w	r8, #0
 800944a:	e679      	b.n	8009140 <_strtod_l+0x88>
 800944c:	4882      	ldr	r0, [pc, #520]	; (8009658 <_strtod_l+0x5a0>)
 800944e:	f003 f867 	bl	800c520 <nan>
 8009452:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009456:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800945a:	e671      	b.n	8009140 <_strtod_l+0x88>
 800945c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8009460:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009464:	eba5 020b 	sub.w	r2, r5, fp
 8009468:	2e00      	cmp	r6, #0
 800946a:	bf08      	it	eq
 800946c:	461e      	moveq	r6, r3
 800946e:	2b10      	cmp	r3, #16
 8009470:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009474:	9206      	str	r2, [sp, #24]
 8009476:	461a      	mov	r2, r3
 8009478:	bfa8      	it	ge
 800947a:	2210      	movge	r2, #16
 800947c:	2b09      	cmp	r3, #9
 800947e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8009482:	dd0e      	ble.n	80094a2 <_strtod_l+0x3ea>
 8009484:	4975      	ldr	r1, [pc, #468]	; (800965c <_strtod_l+0x5a4>)
 8009486:	eddd 7a04 	vldr	s15, [sp, #16]
 800948a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800948e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8009492:	ed9d 5b08 	vldr	d5, [sp, #32]
 8009496:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800949a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800949e:	ec59 8b17 	vmov	r8, r9, d7
 80094a2:	2b0f      	cmp	r3, #15
 80094a4:	dc37      	bgt.n	8009516 <_strtod_l+0x45e>
 80094a6:	9906      	ldr	r1, [sp, #24]
 80094a8:	2900      	cmp	r1, #0
 80094aa:	f43f ae49 	beq.w	8009140 <_strtod_l+0x88>
 80094ae:	dd23      	ble.n	80094f8 <_strtod_l+0x440>
 80094b0:	2916      	cmp	r1, #22
 80094b2:	dc0b      	bgt.n	80094cc <_strtod_l+0x414>
 80094b4:	4b69      	ldr	r3, [pc, #420]	; (800965c <_strtod_l+0x5a4>)
 80094b6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80094ba:	ed93 7b00 	vldr	d7, [r3]
 80094be:	ec49 8b16 	vmov	d6, r8, r9
 80094c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80094c6:	ec59 8b17 	vmov	r8, r9, d7
 80094ca:	e639      	b.n	8009140 <_strtod_l+0x88>
 80094cc:	9806      	ldr	r0, [sp, #24]
 80094ce:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80094d2:	4281      	cmp	r1, r0
 80094d4:	db1f      	blt.n	8009516 <_strtod_l+0x45e>
 80094d6:	4a61      	ldr	r2, [pc, #388]	; (800965c <_strtod_l+0x5a4>)
 80094d8:	f1c3 030f 	rsb	r3, r3, #15
 80094dc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80094e0:	ed91 7b00 	vldr	d7, [r1]
 80094e4:	ec49 8b16 	vmov	d6, r8, r9
 80094e8:	1ac3      	subs	r3, r0, r3
 80094ea:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80094ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80094f2:	ed92 6b00 	vldr	d6, [r2]
 80094f6:	e7e4      	b.n	80094c2 <_strtod_l+0x40a>
 80094f8:	9906      	ldr	r1, [sp, #24]
 80094fa:	3116      	adds	r1, #22
 80094fc:	db0b      	blt.n	8009516 <_strtod_l+0x45e>
 80094fe:	4b57      	ldr	r3, [pc, #348]	; (800965c <_strtod_l+0x5a4>)
 8009500:	ebab 0505 	sub.w	r5, fp, r5
 8009504:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009508:	ed95 7b00 	vldr	d7, [r5]
 800950c:	ec49 8b16 	vmov	d6, r8, r9
 8009510:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009514:	e7d7      	b.n	80094c6 <_strtod_l+0x40e>
 8009516:	9906      	ldr	r1, [sp, #24]
 8009518:	1a9a      	subs	r2, r3, r2
 800951a:	440a      	add	r2, r1
 800951c:	2a00      	cmp	r2, #0
 800951e:	dd74      	ble.n	800960a <_strtod_l+0x552>
 8009520:	f012 000f 	ands.w	r0, r2, #15
 8009524:	d00a      	beq.n	800953c <_strtod_l+0x484>
 8009526:	494d      	ldr	r1, [pc, #308]	; (800965c <_strtod_l+0x5a4>)
 8009528:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800952c:	ed91 7b00 	vldr	d7, [r1]
 8009530:	ec49 8b16 	vmov	d6, r8, r9
 8009534:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009538:	ec59 8b17 	vmov	r8, r9, d7
 800953c:	f032 020f 	bics.w	r2, r2, #15
 8009540:	d04f      	beq.n	80095e2 <_strtod_l+0x52a>
 8009542:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8009546:	dd22      	ble.n	800958e <_strtod_l+0x4d6>
 8009548:	2500      	movs	r5, #0
 800954a:	462e      	mov	r6, r5
 800954c:	950a      	str	r5, [sp, #40]	; 0x28
 800954e:	462f      	mov	r7, r5
 8009550:	2322      	movs	r3, #34	; 0x22
 8009552:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8009668 <_strtod_l+0x5b0>
 8009556:	6023      	str	r3, [r4, #0]
 8009558:	f04f 0800 	mov.w	r8, #0
 800955c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800955e:	2b00      	cmp	r3, #0
 8009560:	f43f adee 	beq.w	8009140 <_strtod_l+0x88>
 8009564:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009566:	4620      	mov	r0, r4
 8009568:	f001 fe18 	bl	800b19c <_Bfree>
 800956c:	4639      	mov	r1, r7
 800956e:	4620      	mov	r0, r4
 8009570:	f001 fe14 	bl	800b19c <_Bfree>
 8009574:	4631      	mov	r1, r6
 8009576:	4620      	mov	r0, r4
 8009578:	f001 fe10 	bl	800b19c <_Bfree>
 800957c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800957e:	4620      	mov	r0, r4
 8009580:	f001 fe0c 	bl	800b19c <_Bfree>
 8009584:	4629      	mov	r1, r5
 8009586:	4620      	mov	r0, r4
 8009588:	f001 fe08 	bl	800b19c <_Bfree>
 800958c:	e5d8      	b.n	8009140 <_strtod_l+0x88>
 800958e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8009592:	2000      	movs	r0, #0
 8009594:	4f32      	ldr	r7, [pc, #200]	; (8009660 <_strtod_l+0x5a8>)
 8009596:	1112      	asrs	r2, r2, #4
 8009598:	4601      	mov	r1, r0
 800959a:	2a01      	cmp	r2, #1
 800959c:	dc24      	bgt.n	80095e8 <_strtod_l+0x530>
 800959e:	b108      	cbz	r0, 80095a4 <_strtod_l+0x4ec>
 80095a0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80095a4:	4a2e      	ldr	r2, [pc, #184]	; (8009660 <_strtod_l+0x5a8>)
 80095a6:	482f      	ldr	r0, [pc, #188]	; (8009664 <_strtod_l+0x5ac>)
 80095a8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80095ac:	ed91 7b00 	vldr	d7, [r1]
 80095b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80095b4:	ec49 8b16 	vmov	d6, r8, r9
 80095b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80095bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80095c0:	9905      	ldr	r1, [sp, #20]
 80095c2:	4a29      	ldr	r2, [pc, #164]	; (8009668 <_strtod_l+0x5b0>)
 80095c4:	400a      	ands	r2, r1
 80095c6:	4282      	cmp	r2, r0
 80095c8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80095cc:	d8bc      	bhi.n	8009548 <_strtod_l+0x490>
 80095ce:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80095d2:	4282      	cmp	r2, r0
 80095d4:	bf86      	itte	hi
 80095d6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800966c <_strtod_l+0x5b4>
 80095da:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80095de:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80095e2:	2200      	movs	r2, #0
 80095e4:	9204      	str	r2, [sp, #16]
 80095e6:	e07f      	b.n	80096e8 <_strtod_l+0x630>
 80095e8:	f012 0f01 	tst.w	r2, #1
 80095ec:	d00a      	beq.n	8009604 <_strtod_l+0x54c>
 80095ee:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 80095f2:	ed90 7b00 	vldr	d7, [r0]
 80095f6:	ed9d 6b04 	vldr	d6, [sp, #16]
 80095fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80095fe:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009602:	2001      	movs	r0, #1
 8009604:	3101      	adds	r1, #1
 8009606:	1052      	asrs	r2, r2, #1
 8009608:	e7c7      	b.n	800959a <_strtod_l+0x4e2>
 800960a:	d0ea      	beq.n	80095e2 <_strtod_l+0x52a>
 800960c:	4252      	negs	r2, r2
 800960e:	f012 000f 	ands.w	r0, r2, #15
 8009612:	d00a      	beq.n	800962a <_strtod_l+0x572>
 8009614:	4911      	ldr	r1, [pc, #68]	; (800965c <_strtod_l+0x5a4>)
 8009616:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800961a:	ed91 7b00 	vldr	d7, [r1]
 800961e:	ec49 8b16 	vmov	d6, r8, r9
 8009622:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009626:	ec59 8b17 	vmov	r8, r9, d7
 800962a:	1112      	asrs	r2, r2, #4
 800962c:	d0d9      	beq.n	80095e2 <_strtod_l+0x52a>
 800962e:	2a1f      	cmp	r2, #31
 8009630:	dd1e      	ble.n	8009670 <_strtod_l+0x5b8>
 8009632:	2500      	movs	r5, #0
 8009634:	462e      	mov	r6, r5
 8009636:	950a      	str	r5, [sp, #40]	; 0x28
 8009638:	462f      	mov	r7, r5
 800963a:	2322      	movs	r3, #34	; 0x22
 800963c:	f04f 0800 	mov.w	r8, #0
 8009640:	f04f 0900 	mov.w	r9, #0
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	e789      	b.n	800955c <_strtod_l+0x4a4>
 8009648:	0800d285 	.word	0x0800d285
 800964c:	0800d2c4 	.word	0x0800d2c4
 8009650:	0800d27d 	.word	0x0800d27d
 8009654:	0800d404 	.word	0x0800d404
 8009658:	0800d6db 	.word	0x0800d6db
 800965c:	0800d5a0 	.word	0x0800d5a0
 8009660:	0800d578 	.word	0x0800d578
 8009664:	7ca00000 	.word	0x7ca00000
 8009668:	7ff00000 	.word	0x7ff00000
 800966c:	7fefffff 	.word	0x7fefffff
 8009670:	f012 0110 	ands.w	r1, r2, #16
 8009674:	bf18      	it	ne
 8009676:	216a      	movne	r1, #106	; 0x6a
 8009678:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800967c:	9104      	str	r1, [sp, #16]
 800967e:	49c0      	ldr	r1, [pc, #768]	; (8009980 <_strtod_l+0x8c8>)
 8009680:	2000      	movs	r0, #0
 8009682:	07d7      	lsls	r7, r2, #31
 8009684:	d508      	bpl.n	8009698 <_strtod_l+0x5e0>
 8009686:	ed9d 6b08 	vldr	d6, [sp, #32]
 800968a:	ed91 7b00 	vldr	d7, [r1]
 800968e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009692:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009696:	2001      	movs	r0, #1
 8009698:	1052      	asrs	r2, r2, #1
 800969a:	f101 0108 	add.w	r1, r1, #8
 800969e:	d1f0      	bne.n	8009682 <_strtod_l+0x5ca>
 80096a0:	b108      	cbz	r0, 80096a6 <_strtod_l+0x5ee>
 80096a2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80096a6:	9a04      	ldr	r2, [sp, #16]
 80096a8:	b1ba      	cbz	r2, 80096da <_strtod_l+0x622>
 80096aa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80096ae:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80096b2:	2a00      	cmp	r2, #0
 80096b4:	4649      	mov	r1, r9
 80096b6:	dd10      	ble.n	80096da <_strtod_l+0x622>
 80096b8:	2a1f      	cmp	r2, #31
 80096ba:	f340 8132 	ble.w	8009922 <_strtod_l+0x86a>
 80096be:	2a34      	cmp	r2, #52	; 0x34
 80096c0:	bfde      	ittt	le
 80096c2:	3a20      	suble	r2, #32
 80096c4:	f04f 30ff 	movle.w	r0, #4294967295	; 0xffffffff
 80096c8:	fa00 f202 	lslle.w	r2, r0, r2
 80096cc:	f04f 0800 	mov.w	r8, #0
 80096d0:	bfcc      	ite	gt
 80096d2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80096d6:	ea02 0901 	andle.w	r9, r2, r1
 80096da:	ec49 8b17 	vmov	d7, r8, r9
 80096de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80096e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096e6:	d0a4      	beq.n	8009632 <_strtod_l+0x57a>
 80096e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096ea:	9200      	str	r2, [sp, #0]
 80096ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80096ee:	4632      	mov	r2, r6
 80096f0:	4620      	mov	r0, r4
 80096f2:	f001 fdbf 	bl	800b274 <__s2b>
 80096f6:	900a      	str	r0, [sp, #40]	; 0x28
 80096f8:	2800      	cmp	r0, #0
 80096fa:	f43f af25 	beq.w	8009548 <_strtod_l+0x490>
 80096fe:	9b06      	ldr	r3, [sp, #24]
 8009700:	ebab 0505 	sub.w	r5, fp, r5
 8009704:	2b00      	cmp	r3, #0
 8009706:	bfb4      	ite	lt
 8009708:	462b      	movlt	r3, r5
 800970a:	2300      	movge	r3, #0
 800970c:	930c      	str	r3, [sp, #48]	; 0x30
 800970e:	9b06      	ldr	r3, [sp, #24]
 8009710:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8009968 <_strtod_l+0x8b0>
 8009714:	ed9f ab96 	vldr	d10, [pc, #600]	; 8009970 <_strtod_l+0x8b8>
 8009718:	ed9f bb97 	vldr	d11, [pc, #604]	; 8009978 <_strtod_l+0x8c0>
 800971c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009720:	2500      	movs	r5, #0
 8009722:	9312      	str	r3, [sp, #72]	; 0x48
 8009724:	462e      	mov	r6, r5
 8009726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009728:	4620      	mov	r0, r4
 800972a:	6859      	ldr	r1, [r3, #4]
 800972c:	f001 fcf6 	bl	800b11c <_Balloc>
 8009730:	4607      	mov	r7, r0
 8009732:	2800      	cmp	r0, #0
 8009734:	f43f af0c 	beq.w	8009550 <_strtod_l+0x498>
 8009738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800973a:	691a      	ldr	r2, [r3, #16]
 800973c:	3202      	adds	r2, #2
 800973e:	f103 010c 	add.w	r1, r3, #12
 8009742:	0092      	lsls	r2, r2, #2
 8009744:	300c      	adds	r0, #12
 8009746:	f7fe fda7 	bl	8008298 <memcpy>
 800974a:	ec49 8b10 	vmov	d0, r8, r9
 800974e:	aa1a      	add	r2, sp, #104	; 0x68
 8009750:	a919      	add	r1, sp, #100	; 0x64
 8009752:	4620      	mov	r0, r4
 8009754:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8009758:	f002 f8c8 	bl	800b8ec <__d2b>
 800975c:	9018      	str	r0, [sp, #96]	; 0x60
 800975e:	2800      	cmp	r0, #0
 8009760:	f43f aef6 	beq.w	8009550 <_strtod_l+0x498>
 8009764:	2101      	movs	r1, #1
 8009766:	4620      	mov	r0, r4
 8009768:	f001 fe1e 	bl	800b3a8 <__i2b>
 800976c:	4606      	mov	r6, r0
 800976e:	2800      	cmp	r0, #0
 8009770:	f43f aeee 	beq.w	8009550 <_strtod_l+0x498>
 8009774:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009776:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009778:	2b00      	cmp	r3, #0
 800977a:	bfab      	itete	ge
 800977c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800977e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009780:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8009784:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8009788:	bfac      	ite	ge
 800978a:	eb03 0b02 	addge.w	fp, r3, r2
 800978e:	eba2 0a03 	sublt.w	sl, r2, r3
 8009792:	9a04      	ldr	r2, [sp, #16]
 8009794:	1a9b      	subs	r3, r3, r2
 8009796:	440b      	add	r3, r1
 8009798:	4a7a      	ldr	r2, [pc, #488]	; (8009984 <_strtod_l+0x8cc>)
 800979a:	3b01      	subs	r3, #1
 800979c:	4293      	cmp	r3, r2
 800979e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80097a2:	f280 80d1 	bge.w	8009948 <_strtod_l+0x890>
 80097a6:	1ad2      	subs	r2, r2, r3
 80097a8:	2a1f      	cmp	r2, #31
 80097aa:	eba1 0102 	sub.w	r1, r1, r2
 80097ae:	f04f 0001 	mov.w	r0, #1
 80097b2:	f300 80bd 	bgt.w	8009930 <_strtod_l+0x878>
 80097b6:	fa00 f302 	lsl.w	r3, r0, r2
 80097ba:	930e      	str	r3, [sp, #56]	; 0x38
 80097bc:	2300      	movs	r3, #0
 80097be:	930d      	str	r3, [sp, #52]	; 0x34
 80097c0:	eb0b 0301 	add.w	r3, fp, r1
 80097c4:	9a04      	ldr	r2, [sp, #16]
 80097c6:	459b      	cmp	fp, r3
 80097c8:	448a      	add	sl, r1
 80097ca:	4492      	add	sl, r2
 80097cc:	465a      	mov	r2, fp
 80097ce:	bfa8      	it	ge
 80097d0:	461a      	movge	r2, r3
 80097d2:	4552      	cmp	r2, sl
 80097d4:	bfa8      	it	ge
 80097d6:	4652      	movge	r2, sl
 80097d8:	2a00      	cmp	r2, #0
 80097da:	bfc2      	ittt	gt
 80097dc:	1a9b      	subgt	r3, r3, r2
 80097de:	ebaa 0a02 	subgt.w	sl, sl, r2
 80097e2:	ebab 0b02 	subgt.w	fp, fp, r2
 80097e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097e8:	2a00      	cmp	r2, #0
 80097ea:	dd18      	ble.n	800981e <_strtod_l+0x766>
 80097ec:	4631      	mov	r1, r6
 80097ee:	4620      	mov	r0, r4
 80097f0:	9315      	str	r3, [sp, #84]	; 0x54
 80097f2:	f001 fe95 	bl	800b520 <__pow5mult>
 80097f6:	4606      	mov	r6, r0
 80097f8:	2800      	cmp	r0, #0
 80097fa:	f43f aea9 	beq.w	8009550 <_strtod_l+0x498>
 80097fe:	4601      	mov	r1, r0
 8009800:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009802:	4620      	mov	r0, r4
 8009804:	f001 fde6 	bl	800b3d4 <__multiply>
 8009808:	9014      	str	r0, [sp, #80]	; 0x50
 800980a:	2800      	cmp	r0, #0
 800980c:	f43f aea0 	beq.w	8009550 <_strtod_l+0x498>
 8009810:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009812:	4620      	mov	r0, r4
 8009814:	f001 fcc2 	bl	800b19c <_Bfree>
 8009818:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800981a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800981c:	9218      	str	r2, [sp, #96]	; 0x60
 800981e:	2b00      	cmp	r3, #0
 8009820:	f300 8097 	bgt.w	8009952 <_strtod_l+0x89a>
 8009824:	9b06      	ldr	r3, [sp, #24]
 8009826:	2b00      	cmp	r3, #0
 8009828:	dd08      	ble.n	800983c <_strtod_l+0x784>
 800982a:	4639      	mov	r1, r7
 800982c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800982e:	4620      	mov	r0, r4
 8009830:	f001 fe76 	bl	800b520 <__pow5mult>
 8009834:	4607      	mov	r7, r0
 8009836:	2800      	cmp	r0, #0
 8009838:	f43f ae8a 	beq.w	8009550 <_strtod_l+0x498>
 800983c:	f1ba 0f00 	cmp.w	sl, #0
 8009840:	dd08      	ble.n	8009854 <_strtod_l+0x79c>
 8009842:	4639      	mov	r1, r7
 8009844:	4652      	mov	r2, sl
 8009846:	4620      	mov	r0, r4
 8009848:	f001 fec4 	bl	800b5d4 <__lshift>
 800984c:	4607      	mov	r7, r0
 800984e:	2800      	cmp	r0, #0
 8009850:	f43f ae7e 	beq.w	8009550 <_strtod_l+0x498>
 8009854:	f1bb 0f00 	cmp.w	fp, #0
 8009858:	dd08      	ble.n	800986c <_strtod_l+0x7b4>
 800985a:	4631      	mov	r1, r6
 800985c:	465a      	mov	r2, fp
 800985e:	4620      	mov	r0, r4
 8009860:	f001 feb8 	bl	800b5d4 <__lshift>
 8009864:	4606      	mov	r6, r0
 8009866:	2800      	cmp	r0, #0
 8009868:	f43f ae72 	beq.w	8009550 <_strtod_l+0x498>
 800986c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800986e:	463a      	mov	r2, r7
 8009870:	4620      	mov	r0, r4
 8009872:	f001 ff37 	bl	800b6e4 <__mdiff>
 8009876:	4605      	mov	r5, r0
 8009878:	2800      	cmp	r0, #0
 800987a:	f43f ae69 	beq.w	8009550 <_strtod_l+0x498>
 800987e:	2300      	movs	r3, #0
 8009880:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8009884:	60c3      	str	r3, [r0, #12]
 8009886:	4631      	mov	r1, r6
 8009888:	f001 ff10 	bl	800b6ac <__mcmp>
 800988c:	2800      	cmp	r0, #0
 800988e:	da7f      	bge.n	8009990 <_strtod_l+0x8d8>
 8009890:	ea5a 0308 	orrs.w	r3, sl, r8
 8009894:	f040 80a5 	bne.w	80099e2 <_strtod_l+0x92a>
 8009898:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800989c:	2b00      	cmp	r3, #0
 800989e:	f040 80a0 	bne.w	80099e2 <_strtod_l+0x92a>
 80098a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80098a6:	0d1b      	lsrs	r3, r3, #20
 80098a8:	051b      	lsls	r3, r3, #20
 80098aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80098ae:	f240 8098 	bls.w	80099e2 <_strtod_l+0x92a>
 80098b2:	696b      	ldr	r3, [r5, #20]
 80098b4:	b91b      	cbnz	r3, 80098be <_strtod_l+0x806>
 80098b6:	692b      	ldr	r3, [r5, #16]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	f340 8092 	ble.w	80099e2 <_strtod_l+0x92a>
 80098be:	4629      	mov	r1, r5
 80098c0:	2201      	movs	r2, #1
 80098c2:	4620      	mov	r0, r4
 80098c4:	f001 fe86 	bl	800b5d4 <__lshift>
 80098c8:	4631      	mov	r1, r6
 80098ca:	4605      	mov	r5, r0
 80098cc:	f001 feee 	bl	800b6ac <__mcmp>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	f340 8086 	ble.w	80099e2 <_strtod_l+0x92a>
 80098d6:	9904      	ldr	r1, [sp, #16]
 80098d8:	4a2b      	ldr	r2, [pc, #172]	; (8009988 <_strtod_l+0x8d0>)
 80098da:	464b      	mov	r3, r9
 80098dc:	2900      	cmp	r1, #0
 80098de:	f000 80a1 	beq.w	8009a24 <_strtod_l+0x96c>
 80098e2:	ea02 0109 	and.w	r1, r2, r9
 80098e6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80098ea:	f300 809b 	bgt.w	8009a24 <_strtod_l+0x96c>
 80098ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80098f2:	f77f aea2 	ble.w	800963a <_strtod_l+0x582>
 80098f6:	4a25      	ldr	r2, [pc, #148]	; (800998c <_strtod_l+0x8d4>)
 80098f8:	2300      	movs	r3, #0
 80098fa:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80098fe:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8009902:	ec49 8b17 	vmov	d7, r8, r9
 8009906:	ee27 7b06 	vmul.f64	d7, d7, d6
 800990a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800990e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8009912:	4313      	orrs	r3, r2
 8009914:	bf08      	it	eq
 8009916:	2322      	moveq	r3, #34	; 0x22
 8009918:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800991c:	bf08      	it	eq
 800991e:	6023      	streq	r3, [r4, #0]
 8009920:	e620      	b.n	8009564 <_strtod_l+0x4ac>
 8009922:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009926:	fa01 f202 	lsl.w	r2, r1, r2
 800992a:	ea02 0808 	and.w	r8, r2, r8
 800992e:	e6d4      	b.n	80096da <_strtod_l+0x622>
 8009930:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009934:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009938:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800993c:	33e2      	adds	r3, #226	; 0xe2
 800993e:	fa00 f303 	lsl.w	r3, r0, r3
 8009942:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8009946:	e73b      	b.n	80097c0 <_strtod_l+0x708>
 8009948:	2000      	movs	r0, #0
 800994a:	2301      	movs	r3, #1
 800994c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8009950:	e736      	b.n	80097c0 <_strtod_l+0x708>
 8009952:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009954:	461a      	mov	r2, r3
 8009956:	4620      	mov	r0, r4
 8009958:	f001 fe3c 	bl	800b5d4 <__lshift>
 800995c:	9018      	str	r0, [sp, #96]	; 0x60
 800995e:	2800      	cmp	r0, #0
 8009960:	f47f af60 	bne.w	8009824 <_strtod_l+0x76c>
 8009964:	e5f4      	b.n	8009550 <_strtod_l+0x498>
 8009966:	bf00      	nop
 8009968:	94a03595 	.word	0x94a03595
 800996c:	3fcfffff 	.word	0x3fcfffff
 8009970:	94a03595 	.word	0x94a03595
 8009974:	3fdfffff 	.word	0x3fdfffff
 8009978:	35afe535 	.word	0x35afe535
 800997c:	3fe00000 	.word	0x3fe00000
 8009980:	0800d2d8 	.word	0x0800d2d8
 8009984:	fffffc02 	.word	0xfffffc02
 8009988:	7ff00000 	.word	0x7ff00000
 800998c:	39500000 	.word	0x39500000
 8009990:	46cb      	mov	fp, r9
 8009992:	d165      	bne.n	8009a60 <_strtod_l+0x9a8>
 8009994:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009998:	f1ba 0f00 	cmp.w	sl, #0
 800999c:	d02a      	beq.n	80099f4 <_strtod_l+0x93c>
 800999e:	4aaa      	ldr	r2, [pc, #680]	; (8009c48 <_strtod_l+0xb90>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d12b      	bne.n	80099fc <_strtod_l+0x944>
 80099a4:	9b04      	ldr	r3, [sp, #16]
 80099a6:	4641      	mov	r1, r8
 80099a8:	b1fb      	cbz	r3, 80099ea <_strtod_l+0x932>
 80099aa:	4aa8      	ldr	r2, [pc, #672]	; (8009c4c <_strtod_l+0xb94>)
 80099ac:	ea09 0202 	and.w	r2, r9, r2
 80099b0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80099b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099b8:	d81a      	bhi.n	80099f0 <_strtod_l+0x938>
 80099ba:	0d12      	lsrs	r2, r2, #20
 80099bc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80099c0:	fa00 f303 	lsl.w	r3, r0, r3
 80099c4:	4299      	cmp	r1, r3
 80099c6:	d119      	bne.n	80099fc <_strtod_l+0x944>
 80099c8:	4ba1      	ldr	r3, [pc, #644]	; (8009c50 <_strtod_l+0xb98>)
 80099ca:	459b      	cmp	fp, r3
 80099cc:	d102      	bne.n	80099d4 <_strtod_l+0x91c>
 80099ce:	3101      	adds	r1, #1
 80099d0:	f43f adbe 	beq.w	8009550 <_strtod_l+0x498>
 80099d4:	4b9d      	ldr	r3, [pc, #628]	; (8009c4c <_strtod_l+0xb94>)
 80099d6:	ea0b 0303 	and.w	r3, fp, r3
 80099da:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80099de:	f04f 0800 	mov.w	r8, #0
 80099e2:	9b04      	ldr	r3, [sp, #16]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d186      	bne.n	80098f6 <_strtod_l+0x83e>
 80099e8:	e5bc      	b.n	8009564 <_strtod_l+0x4ac>
 80099ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099ee:	e7e9      	b.n	80099c4 <_strtod_l+0x90c>
 80099f0:	4603      	mov	r3, r0
 80099f2:	e7e7      	b.n	80099c4 <_strtod_l+0x90c>
 80099f4:	ea53 0308 	orrs.w	r3, r3, r8
 80099f8:	f43f af6d 	beq.w	80098d6 <_strtod_l+0x81e>
 80099fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099fe:	b1db      	cbz	r3, 8009a38 <_strtod_l+0x980>
 8009a00:	ea13 0f0b 	tst.w	r3, fp
 8009a04:	d0ed      	beq.n	80099e2 <_strtod_l+0x92a>
 8009a06:	9a04      	ldr	r2, [sp, #16]
 8009a08:	4640      	mov	r0, r8
 8009a0a:	4649      	mov	r1, r9
 8009a0c:	f1ba 0f00 	cmp.w	sl, #0
 8009a10:	d016      	beq.n	8009a40 <_strtod_l+0x988>
 8009a12:	f7ff fb36 	bl	8009082 <sulp>
 8009a16:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009a1a:	ee37 7b00 	vadd.f64	d7, d7, d0
 8009a1e:	ec59 8b17 	vmov	r8, r9, d7
 8009a22:	e7de      	b.n	80099e2 <_strtod_l+0x92a>
 8009a24:	4013      	ands	r3, r2
 8009a26:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009a2a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009a2e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009a32:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009a36:	e7d4      	b.n	80099e2 <_strtod_l+0x92a>
 8009a38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a3a:	ea13 0f08 	tst.w	r3, r8
 8009a3e:	e7e1      	b.n	8009a04 <_strtod_l+0x94c>
 8009a40:	f7ff fb1f 	bl	8009082 <sulp>
 8009a44:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009a48:	ee37 7b40 	vsub.f64	d7, d7, d0
 8009a4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a58:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8009a5c:	d1c1      	bne.n	80099e2 <_strtod_l+0x92a>
 8009a5e:	e5ec      	b.n	800963a <_strtod_l+0x582>
 8009a60:	4631      	mov	r1, r6
 8009a62:	4628      	mov	r0, r5
 8009a64:	f001 ff9e 	bl	800b9a4 <__ratio>
 8009a68:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8009a6c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a74:	d867      	bhi.n	8009b46 <_strtod_l+0xa8e>
 8009a76:	f1ba 0f00 	cmp.w	sl, #0
 8009a7a:	d044      	beq.n	8009b06 <_strtod_l+0xa4e>
 8009a7c:	4b75      	ldr	r3, [pc, #468]	; (8009c54 <_strtod_l+0xb9c>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8009a84:	4971      	ldr	r1, [pc, #452]	; (8009c4c <_strtod_l+0xb94>)
 8009a86:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8009c60 <_strtod_l+0xba8>
 8009a8a:	ea0b 0001 	and.w	r0, fp, r1
 8009a8e:	4560      	cmp	r0, ip
 8009a90:	900d      	str	r0, [sp, #52]	; 0x34
 8009a92:	f040 808b 	bne.w	8009bac <_strtod_l+0xaf4>
 8009a96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009a9a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009a9e:	ec49 8b10 	vmov	d0, r8, r9
 8009aa2:	ec43 2b1c 	vmov	d12, r2, r3
 8009aa6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009aaa:	f001 fea3 	bl	800b7f4 <__ulp>
 8009aae:	ec49 8b1d 	vmov	d13, r8, r9
 8009ab2:	eeac db00 	vfma.f64	d13, d12, d0
 8009ab6:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8009aba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009abc:	4963      	ldr	r1, [pc, #396]	; (8009c4c <_strtod_l+0xb94>)
 8009abe:	4a66      	ldr	r2, [pc, #408]	; (8009c58 <_strtod_l+0xba0>)
 8009ac0:	4019      	ands	r1, r3
 8009ac2:	4291      	cmp	r1, r2
 8009ac4:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8009ac8:	d947      	bls.n	8009b5a <_strtod_l+0xaa2>
 8009aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009acc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d103      	bne.n	8009adc <_strtod_l+0xa24>
 8009ad4:	9b08      	ldr	r3, [sp, #32]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	f43f ad3a 	beq.w	8009550 <_strtod_l+0x498>
 8009adc:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8009c50 <_strtod_l+0xb98>
 8009ae0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009ae4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f001 fb58 	bl	800b19c <_Bfree>
 8009aec:	4639      	mov	r1, r7
 8009aee:	4620      	mov	r0, r4
 8009af0:	f001 fb54 	bl	800b19c <_Bfree>
 8009af4:	4631      	mov	r1, r6
 8009af6:	4620      	mov	r0, r4
 8009af8:	f001 fb50 	bl	800b19c <_Bfree>
 8009afc:	4629      	mov	r1, r5
 8009afe:	4620      	mov	r0, r4
 8009b00:	f001 fb4c 	bl	800b19c <_Bfree>
 8009b04:	e60f      	b.n	8009726 <_strtod_l+0x66e>
 8009b06:	f1b8 0f00 	cmp.w	r8, #0
 8009b0a:	d112      	bne.n	8009b32 <_strtod_l+0xa7a>
 8009b0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b10:	b9b3      	cbnz	r3, 8009b40 <_strtod_l+0xa88>
 8009b12:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009b16:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b1e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8009b22:	d401      	bmi.n	8009b28 <_strtod_l+0xa70>
 8009b24:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009b28:	eeb1 7b48 	vneg.f64	d7, d8
 8009b2c:	ec53 2b17 	vmov	r2, r3, d7
 8009b30:	e7a8      	b.n	8009a84 <_strtod_l+0x9cc>
 8009b32:	f1b8 0f01 	cmp.w	r8, #1
 8009b36:	d103      	bne.n	8009b40 <_strtod_l+0xa88>
 8009b38:	f1b9 0f00 	cmp.w	r9, #0
 8009b3c:	f43f ad7d 	beq.w	800963a <_strtod_l+0x582>
 8009b40:	4b46      	ldr	r3, [pc, #280]	; (8009c5c <_strtod_l+0xba4>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	e79c      	b.n	8009a80 <_strtod_l+0x9c8>
 8009b46:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8009b4a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009b4e:	f1ba 0f00 	cmp.w	sl, #0
 8009b52:	d0e9      	beq.n	8009b28 <_strtod_l+0xa70>
 8009b54:	ec53 2b18 	vmov	r2, r3, d8
 8009b58:	e794      	b.n	8009a84 <_strtod_l+0x9cc>
 8009b5a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009b5e:	9b04      	ldr	r3, [sp, #16]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1bf      	bne.n	8009ae4 <_strtod_l+0xa2c>
 8009b64:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b6a:	0d1b      	lsrs	r3, r3, #20
 8009b6c:	051b      	lsls	r3, r3, #20
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d1b8      	bne.n	8009ae4 <_strtod_l+0xa2c>
 8009b72:	ec51 0b18 	vmov	r0, r1, d8
 8009b76:	f7f6 fd8f 	bl	8000698 <__aeabi_d2lz>
 8009b7a:	f7f6 fd47 	bl	800060c <__aeabi_l2d>
 8009b7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b82:	ec41 0b17 	vmov	d7, r0, r1
 8009b86:	ea43 0308 	orr.w	r3, r3, r8
 8009b8a:	ea53 030a 	orrs.w	r3, r3, sl
 8009b8e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8009b92:	d03e      	beq.n	8009c12 <_strtod_l+0xb5a>
 8009b94:	eeb4 8bca 	vcmpe.f64	d8, d10
 8009b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b9c:	f53f ace2 	bmi.w	8009564 <_strtod_l+0x4ac>
 8009ba0:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8009ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba8:	dd9c      	ble.n	8009ae4 <_strtod_l+0xa2c>
 8009baa:	e4db      	b.n	8009564 <_strtod_l+0x4ac>
 8009bac:	9904      	ldr	r1, [sp, #16]
 8009bae:	b301      	cbz	r1, 8009bf2 <_strtod_l+0xb3a>
 8009bb0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009bb2:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009bb6:	d81c      	bhi.n	8009bf2 <_strtod_l+0xb3a>
 8009bb8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8009c40 <_strtod_l+0xb88>
 8009bbc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bc4:	d811      	bhi.n	8009bea <_strtod_l+0xb32>
 8009bc6:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8009bca:	ee18 3a10 	vmov	r3, s16
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	bf38      	it	cc
 8009bd2:	2301      	movcc	r3, #1
 8009bd4:	ee08 3a10 	vmov	s16, r3
 8009bd8:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8009bdc:	f1ba 0f00 	cmp.w	sl, #0
 8009be0:	d114      	bne.n	8009c0c <_strtod_l+0xb54>
 8009be2:	eeb1 7b48 	vneg.f64	d7, d8
 8009be6:	ec53 2b17 	vmov	r2, r3, d7
 8009bea:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009bec:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8009bf0:	1a0b      	subs	r3, r1, r0
 8009bf2:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009bf6:	ec43 2b1c 	vmov	d12, r2, r3
 8009bfa:	f001 fdfb 	bl	800b7f4 <__ulp>
 8009bfe:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009c02:	eeac 7b00 	vfma.f64	d7, d12, d0
 8009c06:	ec59 8b17 	vmov	r8, r9, d7
 8009c0a:	e7a8      	b.n	8009b5e <_strtod_l+0xaa6>
 8009c0c:	ec53 2b18 	vmov	r2, r3, d8
 8009c10:	e7eb      	b.n	8009bea <_strtod_l+0xb32>
 8009c12:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8009c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c1a:	f57f af63 	bpl.w	8009ae4 <_strtod_l+0xa2c>
 8009c1e:	e4a1      	b.n	8009564 <_strtod_l+0x4ac>
 8009c20:	2300      	movs	r3, #0
 8009c22:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009c26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c28:	6013      	str	r3, [r2, #0]
 8009c2a:	f7ff ba8d 	b.w	8009148 <_strtod_l+0x90>
 8009c2e:	2a65      	cmp	r2, #101	; 0x65
 8009c30:	f43f ab89 	beq.w	8009346 <_strtod_l+0x28e>
 8009c34:	2a45      	cmp	r2, #69	; 0x45
 8009c36:	f43f ab86 	beq.w	8009346 <_strtod_l+0x28e>
 8009c3a:	2101      	movs	r1, #1
 8009c3c:	f7ff bbbe 	b.w	80093bc <_strtod_l+0x304>
 8009c40:	ffc00000 	.word	0xffc00000
 8009c44:	41dfffff 	.word	0x41dfffff
 8009c48:	000fffff 	.word	0x000fffff
 8009c4c:	7ff00000 	.word	0x7ff00000
 8009c50:	7fefffff 	.word	0x7fefffff
 8009c54:	3ff00000 	.word	0x3ff00000
 8009c58:	7c9fffff 	.word	0x7c9fffff
 8009c5c:	bff00000 	.word	0xbff00000
 8009c60:	7fe00000 	.word	0x7fe00000

08009c64 <_strtod_r>:
 8009c64:	4b01      	ldr	r3, [pc, #4]	; (8009c6c <_strtod_r+0x8>)
 8009c66:	f7ff ba27 	b.w	80090b8 <_strtod_l>
 8009c6a:	bf00      	nop
 8009c6c:	200000c4 	.word	0x200000c4

08009c70 <_strtol_l.isra.0>:
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c76:	d001      	beq.n	8009c7c <_strtol_l.isra.0+0xc>
 8009c78:	2b24      	cmp	r3, #36	; 0x24
 8009c7a:	d906      	bls.n	8009c8a <_strtol_l.isra.0+0x1a>
 8009c7c:	f7fe fae2 	bl	8008244 <__errno>
 8009c80:	2316      	movs	r3, #22
 8009c82:	6003      	str	r3, [r0, #0]
 8009c84:	2000      	movs	r0, #0
 8009c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c8a:	4f3a      	ldr	r7, [pc, #232]	; (8009d74 <_strtol_l.isra.0+0x104>)
 8009c8c:	468e      	mov	lr, r1
 8009c8e:	4676      	mov	r6, lr
 8009c90:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009c94:	5de5      	ldrb	r5, [r4, r7]
 8009c96:	f015 0508 	ands.w	r5, r5, #8
 8009c9a:	d1f8      	bne.n	8009c8e <_strtol_l.isra.0+0x1e>
 8009c9c:	2c2d      	cmp	r4, #45	; 0x2d
 8009c9e:	d134      	bne.n	8009d0a <_strtol_l.isra.0+0x9a>
 8009ca0:	f89e 4000 	ldrb.w	r4, [lr]
 8009ca4:	f04f 0801 	mov.w	r8, #1
 8009ca8:	f106 0e02 	add.w	lr, r6, #2
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d05c      	beq.n	8009d6a <_strtol_l.isra.0+0xfa>
 8009cb0:	2b10      	cmp	r3, #16
 8009cb2:	d10c      	bne.n	8009cce <_strtol_l.isra.0+0x5e>
 8009cb4:	2c30      	cmp	r4, #48	; 0x30
 8009cb6:	d10a      	bne.n	8009cce <_strtol_l.isra.0+0x5e>
 8009cb8:	f89e 4000 	ldrb.w	r4, [lr]
 8009cbc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009cc0:	2c58      	cmp	r4, #88	; 0x58
 8009cc2:	d14d      	bne.n	8009d60 <_strtol_l.isra.0+0xf0>
 8009cc4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009cc8:	2310      	movs	r3, #16
 8009cca:	f10e 0e02 	add.w	lr, lr, #2
 8009cce:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009cd2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8009cd6:	2600      	movs	r6, #0
 8009cd8:	fbbc f9f3 	udiv	r9, ip, r3
 8009cdc:	4635      	mov	r5, r6
 8009cde:	fb03 ca19 	mls	sl, r3, r9, ip
 8009ce2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009ce6:	2f09      	cmp	r7, #9
 8009ce8:	d818      	bhi.n	8009d1c <_strtol_l.isra.0+0xac>
 8009cea:	463c      	mov	r4, r7
 8009cec:	42a3      	cmp	r3, r4
 8009cee:	dd24      	ble.n	8009d3a <_strtol_l.isra.0+0xca>
 8009cf0:	2e00      	cmp	r6, #0
 8009cf2:	db1f      	blt.n	8009d34 <_strtol_l.isra.0+0xc4>
 8009cf4:	45a9      	cmp	r9, r5
 8009cf6:	d31d      	bcc.n	8009d34 <_strtol_l.isra.0+0xc4>
 8009cf8:	d101      	bne.n	8009cfe <_strtol_l.isra.0+0x8e>
 8009cfa:	45a2      	cmp	sl, r4
 8009cfc:	db1a      	blt.n	8009d34 <_strtol_l.isra.0+0xc4>
 8009cfe:	fb05 4503 	mla	r5, r5, r3, r4
 8009d02:	2601      	movs	r6, #1
 8009d04:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009d08:	e7eb      	b.n	8009ce2 <_strtol_l.isra.0+0x72>
 8009d0a:	2c2b      	cmp	r4, #43	; 0x2b
 8009d0c:	bf08      	it	eq
 8009d0e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009d12:	46a8      	mov	r8, r5
 8009d14:	bf08      	it	eq
 8009d16:	f106 0e02 	addeq.w	lr, r6, #2
 8009d1a:	e7c7      	b.n	8009cac <_strtol_l.isra.0+0x3c>
 8009d1c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009d20:	2f19      	cmp	r7, #25
 8009d22:	d801      	bhi.n	8009d28 <_strtol_l.isra.0+0xb8>
 8009d24:	3c37      	subs	r4, #55	; 0x37
 8009d26:	e7e1      	b.n	8009cec <_strtol_l.isra.0+0x7c>
 8009d28:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009d2c:	2f19      	cmp	r7, #25
 8009d2e:	d804      	bhi.n	8009d3a <_strtol_l.isra.0+0xca>
 8009d30:	3c57      	subs	r4, #87	; 0x57
 8009d32:	e7db      	b.n	8009cec <_strtol_l.isra.0+0x7c>
 8009d34:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8009d38:	e7e4      	b.n	8009d04 <_strtol_l.isra.0+0x94>
 8009d3a:	2e00      	cmp	r6, #0
 8009d3c:	da05      	bge.n	8009d4a <_strtol_l.isra.0+0xda>
 8009d3e:	2322      	movs	r3, #34	; 0x22
 8009d40:	6003      	str	r3, [r0, #0]
 8009d42:	4665      	mov	r5, ip
 8009d44:	b942      	cbnz	r2, 8009d58 <_strtol_l.isra.0+0xe8>
 8009d46:	4628      	mov	r0, r5
 8009d48:	e79d      	b.n	8009c86 <_strtol_l.isra.0+0x16>
 8009d4a:	f1b8 0f00 	cmp.w	r8, #0
 8009d4e:	d000      	beq.n	8009d52 <_strtol_l.isra.0+0xe2>
 8009d50:	426d      	negs	r5, r5
 8009d52:	2a00      	cmp	r2, #0
 8009d54:	d0f7      	beq.n	8009d46 <_strtol_l.isra.0+0xd6>
 8009d56:	b10e      	cbz	r6, 8009d5c <_strtol_l.isra.0+0xec>
 8009d58:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8009d5c:	6011      	str	r1, [r2, #0]
 8009d5e:	e7f2      	b.n	8009d46 <_strtol_l.isra.0+0xd6>
 8009d60:	2430      	movs	r4, #48	; 0x30
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d1b3      	bne.n	8009cce <_strtol_l.isra.0+0x5e>
 8009d66:	2308      	movs	r3, #8
 8009d68:	e7b1      	b.n	8009cce <_strtol_l.isra.0+0x5e>
 8009d6a:	2c30      	cmp	r4, #48	; 0x30
 8009d6c:	d0a4      	beq.n	8009cb8 <_strtol_l.isra.0+0x48>
 8009d6e:	230a      	movs	r3, #10
 8009d70:	e7ad      	b.n	8009cce <_strtol_l.isra.0+0x5e>
 8009d72:	bf00      	nop
 8009d74:	0800d301 	.word	0x0800d301

08009d78 <_strtol_r>:
 8009d78:	f7ff bf7a 	b.w	8009c70 <_strtol_l.isra.0>

08009d7c <_write_r>:
 8009d7c:	b538      	push	{r3, r4, r5, lr}
 8009d7e:	4d07      	ldr	r5, [pc, #28]	; (8009d9c <_write_r+0x20>)
 8009d80:	4604      	mov	r4, r0
 8009d82:	4608      	mov	r0, r1
 8009d84:	4611      	mov	r1, r2
 8009d86:	2200      	movs	r2, #0
 8009d88:	602a      	str	r2, [r5, #0]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	f7f8 ff09 	bl	8002ba2 <_write>
 8009d90:	1c43      	adds	r3, r0, #1
 8009d92:	d102      	bne.n	8009d9a <_write_r+0x1e>
 8009d94:	682b      	ldr	r3, [r5, #0]
 8009d96:	b103      	cbz	r3, 8009d9a <_write_r+0x1e>
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	bd38      	pop	{r3, r4, r5, pc}
 8009d9c:	2000084c 	.word	0x2000084c

08009da0 <_close_r>:
 8009da0:	b538      	push	{r3, r4, r5, lr}
 8009da2:	4d06      	ldr	r5, [pc, #24]	; (8009dbc <_close_r+0x1c>)
 8009da4:	2300      	movs	r3, #0
 8009da6:	4604      	mov	r4, r0
 8009da8:	4608      	mov	r0, r1
 8009daa:	602b      	str	r3, [r5, #0]
 8009dac:	f7f8 ff15 	bl	8002bda <_close>
 8009db0:	1c43      	adds	r3, r0, #1
 8009db2:	d102      	bne.n	8009dba <_close_r+0x1a>
 8009db4:	682b      	ldr	r3, [r5, #0]
 8009db6:	b103      	cbz	r3, 8009dba <_close_r+0x1a>
 8009db8:	6023      	str	r3, [r4, #0]
 8009dba:	bd38      	pop	{r3, r4, r5, pc}
 8009dbc:	2000084c 	.word	0x2000084c

08009dc0 <quorem>:
 8009dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc4:	6903      	ldr	r3, [r0, #16]
 8009dc6:	690c      	ldr	r4, [r1, #16]
 8009dc8:	42a3      	cmp	r3, r4
 8009dca:	4607      	mov	r7, r0
 8009dcc:	f2c0 8081 	blt.w	8009ed2 <quorem+0x112>
 8009dd0:	3c01      	subs	r4, #1
 8009dd2:	f101 0814 	add.w	r8, r1, #20
 8009dd6:	f100 0514 	add.w	r5, r0, #20
 8009dda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dde:	9301      	str	r3, [sp, #4]
 8009de0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009de4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009de8:	3301      	adds	r3, #1
 8009dea:	429a      	cmp	r2, r3
 8009dec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009df0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009df4:	fbb2 f6f3 	udiv	r6, r2, r3
 8009df8:	d331      	bcc.n	8009e5e <quorem+0x9e>
 8009dfa:	f04f 0e00 	mov.w	lr, #0
 8009dfe:	4640      	mov	r0, r8
 8009e00:	46ac      	mov	ip, r5
 8009e02:	46f2      	mov	sl, lr
 8009e04:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e08:	b293      	uxth	r3, r2
 8009e0a:	fb06 e303 	mla	r3, r6, r3, lr
 8009e0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	ebaa 0303 	sub.w	r3, sl, r3
 8009e18:	0c12      	lsrs	r2, r2, #16
 8009e1a:	f8dc a000 	ldr.w	sl, [ip]
 8009e1e:	fb06 e202 	mla	r2, r6, r2, lr
 8009e22:	fa13 f38a 	uxtah	r3, r3, sl
 8009e26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e2a:	fa1f fa82 	uxth.w	sl, r2
 8009e2e:	f8dc 2000 	ldr.w	r2, [ip]
 8009e32:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009e36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e40:	4581      	cmp	r9, r0
 8009e42:	f84c 3b04 	str.w	r3, [ip], #4
 8009e46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e4a:	d2db      	bcs.n	8009e04 <quorem+0x44>
 8009e4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e50:	b92b      	cbnz	r3, 8009e5e <quorem+0x9e>
 8009e52:	9b01      	ldr	r3, [sp, #4]
 8009e54:	3b04      	subs	r3, #4
 8009e56:	429d      	cmp	r5, r3
 8009e58:	461a      	mov	r2, r3
 8009e5a:	d32e      	bcc.n	8009eba <quorem+0xfa>
 8009e5c:	613c      	str	r4, [r7, #16]
 8009e5e:	4638      	mov	r0, r7
 8009e60:	f001 fc24 	bl	800b6ac <__mcmp>
 8009e64:	2800      	cmp	r0, #0
 8009e66:	db24      	blt.n	8009eb2 <quorem+0xf2>
 8009e68:	3601      	adds	r6, #1
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	f04f 0c00 	mov.w	ip, #0
 8009e70:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e74:	f8d0 e000 	ldr.w	lr, [r0]
 8009e78:	b293      	uxth	r3, r2
 8009e7a:	ebac 0303 	sub.w	r3, ip, r3
 8009e7e:	0c12      	lsrs	r2, r2, #16
 8009e80:	fa13 f38e 	uxtah	r3, r3, lr
 8009e84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009e88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e92:	45c1      	cmp	r9, r8
 8009e94:	f840 3b04 	str.w	r3, [r0], #4
 8009e98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009e9c:	d2e8      	bcs.n	8009e70 <quorem+0xb0>
 8009e9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ea2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ea6:	b922      	cbnz	r2, 8009eb2 <quorem+0xf2>
 8009ea8:	3b04      	subs	r3, #4
 8009eaa:	429d      	cmp	r5, r3
 8009eac:	461a      	mov	r2, r3
 8009eae:	d30a      	bcc.n	8009ec6 <quorem+0x106>
 8009eb0:	613c      	str	r4, [r7, #16]
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	b003      	add	sp, #12
 8009eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eba:	6812      	ldr	r2, [r2, #0]
 8009ebc:	3b04      	subs	r3, #4
 8009ebe:	2a00      	cmp	r2, #0
 8009ec0:	d1cc      	bne.n	8009e5c <quorem+0x9c>
 8009ec2:	3c01      	subs	r4, #1
 8009ec4:	e7c7      	b.n	8009e56 <quorem+0x96>
 8009ec6:	6812      	ldr	r2, [r2, #0]
 8009ec8:	3b04      	subs	r3, #4
 8009eca:	2a00      	cmp	r2, #0
 8009ecc:	d1f0      	bne.n	8009eb0 <quorem+0xf0>
 8009ece:	3c01      	subs	r4, #1
 8009ed0:	e7eb      	b.n	8009eaa <quorem+0xea>
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	e7ee      	b.n	8009eb4 <quorem+0xf4>
	...

08009ed8 <_dtoa_r>:
 8009ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009edc:	ec59 8b10 	vmov	r8, r9, d0
 8009ee0:	b095      	sub	sp, #84	; 0x54
 8009ee2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009ee4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8009ee6:	9107      	str	r1, [sp, #28]
 8009ee8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009eec:	4606      	mov	r6, r0
 8009eee:	9209      	str	r2, [sp, #36]	; 0x24
 8009ef0:	9310      	str	r3, [sp, #64]	; 0x40
 8009ef2:	b975      	cbnz	r5, 8009f12 <_dtoa_r+0x3a>
 8009ef4:	2010      	movs	r0, #16
 8009ef6:	f001 f8f7 	bl	800b0e8 <malloc>
 8009efa:	4602      	mov	r2, r0
 8009efc:	6270      	str	r0, [r6, #36]	; 0x24
 8009efe:	b920      	cbnz	r0, 8009f0a <_dtoa_r+0x32>
 8009f00:	4bab      	ldr	r3, [pc, #684]	; (800a1b0 <_dtoa_r+0x2d8>)
 8009f02:	21ea      	movs	r1, #234	; 0xea
 8009f04:	48ab      	ldr	r0, [pc, #684]	; (800a1b4 <_dtoa_r+0x2dc>)
 8009f06:	f002 fc35 	bl	800c774 <__assert_func>
 8009f0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f0e:	6005      	str	r5, [r0, #0]
 8009f10:	60c5      	str	r5, [r0, #12]
 8009f12:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009f14:	6819      	ldr	r1, [r3, #0]
 8009f16:	b151      	cbz	r1, 8009f2e <_dtoa_r+0x56>
 8009f18:	685a      	ldr	r2, [r3, #4]
 8009f1a:	604a      	str	r2, [r1, #4]
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	4093      	lsls	r3, r2
 8009f20:	608b      	str	r3, [r1, #8]
 8009f22:	4630      	mov	r0, r6
 8009f24:	f001 f93a 	bl	800b19c <_Bfree>
 8009f28:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	601a      	str	r2, [r3, #0]
 8009f2e:	f1b9 0300 	subs.w	r3, r9, #0
 8009f32:	bfbb      	ittet	lt
 8009f34:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009f38:	9303      	strlt	r3, [sp, #12]
 8009f3a:	2300      	movge	r3, #0
 8009f3c:	2201      	movlt	r2, #1
 8009f3e:	bfac      	ite	ge
 8009f40:	6023      	strge	r3, [r4, #0]
 8009f42:	6022      	strlt	r2, [r4, #0]
 8009f44:	4b9c      	ldr	r3, [pc, #624]	; (800a1b8 <_dtoa_r+0x2e0>)
 8009f46:	9c03      	ldr	r4, [sp, #12]
 8009f48:	43a3      	bics	r3, r4
 8009f4a:	d11a      	bne.n	8009f82 <_dtoa_r+0xaa>
 8009f4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f4e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f52:	6013      	str	r3, [r2, #0]
 8009f54:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009f58:	ea53 0308 	orrs.w	r3, r3, r8
 8009f5c:	f000 8512 	beq.w	800a984 <_dtoa_r+0xaac>
 8009f60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009f62:	b953      	cbnz	r3, 8009f7a <_dtoa_r+0xa2>
 8009f64:	4b95      	ldr	r3, [pc, #596]	; (800a1bc <_dtoa_r+0x2e4>)
 8009f66:	e01f      	b.n	8009fa8 <_dtoa_r+0xd0>
 8009f68:	4b95      	ldr	r3, [pc, #596]	; (800a1c0 <_dtoa_r+0x2e8>)
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	3308      	adds	r3, #8
 8009f6e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009f70:	6013      	str	r3, [r2, #0]
 8009f72:	9800      	ldr	r0, [sp, #0]
 8009f74:	b015      	add	sp, #84	; 0x54
 8009f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7a:	4b90      	ldr	r3, [pc, #576]	; (800a1bc <_dtoa_r+0x2e4>)
 8009f7c:	9300      	str	r3, [sp, #0]
 8009f7e:	3303      	adds	r3, #3
 8009f80:	e7f5      	b.n	8009f6e <_dtoa_r+0x96>
 8009f82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f86:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f8e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009f92:	d10b      	bne.n	8009fac <_dtoa_r+0xd4>
 8009f94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f96:	2301      	movs	r3, #1
 8009f98:	6013      	str	r3, [r2, #0]
 8009f9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f000 84ee 	beq.w	800a97e <_dtoa_r+0xaa6>
 8009fa2:	4888      	ldr	r0, [pc, #544]	; (800a1c4 <_dtoa_r+0x2ec>)
 8009fa4:	6018      	str	r0, [r3, #0]
 8009fa6:	1e43      	subs	r3, r0, #1
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	e7e2      	b.n	8009f72 <_dtoa_r+0x9a>
 8009fac:	a913      	add	r1, sp, #76	; 0x4c
 8009fae:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009fb2:	aa12      	add	r2, sp, #72	; 0x48
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f001 fc99 	bl	800b8ec <__d2b>
 8009fba:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8009fbe:	4605      	mov	r5, r0
 8009fc0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009fc2:	2900      	cmp	r1, #0
 8009fc4:	d047      	beq.n	800a056 <_dtoa_r+0x17e>
 8009fc6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009fc8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009fcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009fd0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009fd4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009fd8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009fdc:	2400      	movs	r4, #0
 8009fde:	ec43 2b16 	vmov	d6, r2, r3
 8009fe2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009fe6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800a198 <_dtoa_r+0x2c0>
 8009fea:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009fee:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800a1a0 <_dtoa_r+0x2c8>
 8009ff2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009ff6:	eeb0 7b46 	vmov.f64	d7, d6
 8009ffa:	ee06 1a90 	vmov	s13, r1
 8009ffe:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800a002:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800a1a8 <_dtoa_r+0x2d0>
 800a006:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a00a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a00e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a016:	ee16 ba90 	vmov	fp, s13
 800a01a:	9411      	str	r4, [sp, #68]	; 0x44
 800a01c:	d508      	bpl.n	800a030 <_dtoa_r+0x158>
 800a01e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a022:	eeb4 6b47 	vcmp.f64	d6, d7
 800a026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a02a:	bf18      	it	ne
 800a02c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800a030:	f1bb 0f16 	cmp.w	fp, #22
 800a034:	d832      	bhi.n	800a09c <_dtoa_r+0x1c4>
 800a036:	4b64      	ldr	r3, [pc, #400]	; (800a1c8 <_dtoa_r+0x2f0>)
 800a038:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a03c:	ed93 7b00 	vldr	d7, [r3]
 800a040:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800a044:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a04c:	d501      	bpl.n	800a052 <_dtoa_r+0x17a>
 800a04e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a052:	2300      	movs	r3, #0
 800a054:	e023      	b.n	800a09e <_dtoa_r+0x1c6>
 800a056:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a058:	4401      	add	r1, r0
 800a05a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a05e:	2b20      	cmp	r3, #32
 800a060:	bfc3      	ittte	gt
 800a062:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a066:	fa04 f303 	lslgt.w	r3, r4, r3
 800a06a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a06e:	f1c3 0320 	rsble	r3, r3, #32
 800a072:	bfc6      	itte	gt
 800a074:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a078:	ea43 0308 	orrgt.w	r3, r3, r8
 800a07c:	fa08 f303 	lslle.w	r3, r8, r3
 800a080:	ee07 3a90 	vmov	s15, r3
 800a084:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a088:	3901      	subs	r1, #1
 800a08a:	ed8d 7b00 	vstr	d7, [sp]
 800a08e:	9c01      	ldr	r4, [sp, #4]
 800a090:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a094:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a098:	2401      	movs	r4, #1
 800a09a:	e7a0      	b.n	8009fde <_dtoa_r+0x106>
 800a09c:	2301      	movs	r3, #1
 800a09e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0a0:	1a43      	subs	r3, r0, r1
 800a0a2:	1e5a      	subs	r2, r3, #1
 800a0a4:	bf45      	ittet	mi
 800a0a6:	f1c3 0301 	rsbmi	r3, r3, #1
 800a0aa:	9305      	strmi	r3, [sp, #20]
 800a0ac:	2300      	movpl	r3, #0
 800a0ae:	2300      	movmi	r3, #0
 800a0b0:	9206      	str	r2, [sp, #24]
 800a0b2:	bf54      	ite	pl
 800a0b4:	9305      	strpl	r3, [sp, #20]
 800a0b6:	9306      	strmi	r3, [sp, #24]
 800a0b8:	f1bb 0f00 	cmp.w	fp, #0
 800a0bc:	db18      	blt.n	800a0f0 <_dtoa_r+0x218>
 800a0be:	9b06      	ldr	r3, [sp, #24]
 800a0c0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800a0c4:	445b      	add	r3, fp
 800a0c6:	9306      	str	r3, [sp, #24]
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	9a07      	ldr	r2, [sp, #28]
 800a0cc:	2a09      	cmp	r2, #9
 800a0ce:	d849      	bhi.n	800a164 <_dtoa_r+0x28c>
 800a0d0:	2a05      	cmp	r2, #5
 800a0d2:	bfc4      	itt	gt
 800a0d4:	3a04      	subgt	r2, #4
 800a0d6:	9207      	strgt	r2, [sp, #28]
 800a0d8:	9a07      	ldr	r2, [sp, #28]
 800a0da:	f1a2 0202 	sub.w	r2, r2, #2
 800a0de:	bfcc      	ite	gt
 800a0e0:	2400      	movgt	r4, #0
 800a0e2:	2401      	movle	r4, #1
 800a0e4:	2a03      	cmp	r2, #3
 800a0e6:	d848      	bhi.n	800a17a <_dtoa_r+0x2a2>
 800a0e8:	e8df f002 	tbb	[pc, r2]
 800a0ec:	3a2c2e0b 	.word	0x3a2c2e0b
 800a0f0:	9b05      	ldr	r3, [sp, #20]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	eba3 030b 	sub.w	r3, r3, fp
 800a0f8:	9305      	str	r3, [sp, #20]
 800a0fa:	920e      	str	r2, [sp, #56]	; 0x38
 800a0fc:	f1cb 0300 	rsb	r3, fp, #0
 800a100:	e7e3      	b.n	800a0ca <_dtoa_r+0x1f2>
 800a102:	2200      	movs	r2, #0
 800a104:	9208      	str	r2, [sp, #32]
 800a106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a108:	2a00      	cmp	r2, #0
 800a10a:	dc39      	bgt.n	800a180 <_dtoa_r+0x2a8>
 800a10c:	f04f 0a01 	mov.w	sl, #1
 800a110:	46d1      	mov	r9, sl
 800a112:	4652      	mov	r2, sl
 800a114:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a118:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a11a:	2100      	movs	r1, #0
 800a11c:	6079      	str	r1, [r7, #4]
 800a11e:	2004      	movs	r0, #4
 800a120:	f100 0c14 	add.w	ip, r0, #20
 800a124:	4594      	cmp	ip, r2
 800a126:	6879      	ldr	r1, [r7, #4]
 800a128:	d92f      	bls.n	800a18a <_dtoa_r+0x2b2>
 800a12a:	4630      	mov	r0, r6
 800a12c:	930c      	str	r3, [sp, #48]	; 0x30
 800a12e:	f000 fff5 	bl	800b11c <_Balloc>
 800a132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a134:	9000      	str	r0, [sp, #0]
 800a136:	4602      	mov	r2, r0
 800a138:	2800      	cmp	r0, #0
 800a13a:	d149      	bne.n	800a1d0 <_dtoa_r+0x2f8>
 800a13c:	4b23      	ldr	r3, [pc, #140]	; (800a1cc <_dtoa_r+0x2f4>)
 800a13e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a142:	e6df      	b.n	8009f04 <_dtoa_r+0x2c>
 800a144:	2201      	movs	r2, #1
 800a146:	e7dd      	b.n	800a104 <_dtoa_r+0x22c>
 800a148:	2200      	movs	r2, #0
 800a14a:	9208      	str	r2, [sp, #32]
 800a14c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a14e:	eb0b 0a02 	add.w	sl, fp, r2
 800a152:	f10a 0901 	add.w	r9, sl, #1
 800a156:	464a      	mov	r2, r9
 800a158:	2a01      	cmp	r2, #1
 800a15a:	bfb8      	it	lt
 800a15c:	2201      	movlt	r2, #1
 800a15e:	e7db      	b.n	800a118 <_dtoa_r+0x240>
 800a160:	2201      	movs	r2, #1
 800a162:	e7f2      	b.n	800a14a <_dtoa_r+0x272>
 800a164:	2401      	movs	r4, #1
 800a166:	2200      	movs	r2, #0
 800a168:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a16c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a170:	2100      	movs	r1, #0
 800a172:	46d1      	mov	r9, sl
 800a174:	2212      	movs	r2, #18
 800a176:	9109      	str	r1, [sp, #36]	; 0x24
 800a178:	e7ce      	b.n	800a118 <_dtoa_r+0x240>
 800a17a:	2201      	movs	r2, #1
 800a17c:	9208      	str	r2, [sp, #32]
 800a17e:	e7f5      	b.n	800a16c <_dtoa_r+0x294>
 800a180:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800a184:	46d1      	mov	r9, sl
 800a186:	4652      	mov	r2, sl
 800a188:	e7c6      	b.n	800a118 <_dtoa_r+0x240>
 800a18a:	3101      	adds	r1, #1
 800a18c:	6079      	str	r1, [r7, #4]
 800a18e:	0040      	lsls	r0, r0, #1
 800a190:	e7c6      	b.n	800a120 <_dtoa_r+0x248>
 800a192:	bf00      	nop
 800a194:	f3af 8000 	nop.w
 800a198:	636f4361 	.word	0x636f4361
 800a19c:	3fd287a7 	.word	0x3fd287a7
 800a1a0:	8b60c8b3 	.word	0x8b60c8b3
 800a1a4:	3fc68a28 	.word	0x3fc68a28
 800a1a8:	509f79fb 	.word	0x509f79fb
 800a1ac:	3fd34413 	.word	0x3fd34413
 800a1b0:	0800d40e 	.word	0x0800d40e
 800a1b4:	0800d425 	.word	0x0800d425
 800a1b8:	7ff00000 	.word	0x7ff00000
 800a1bc:	0800d40a 	.word	0x0800d40a
 800a1c0:	0800d401 	.word	0x0800d401
 800a1c4:	0800d68a 	.word	0x0800d68a
 800a1c8:	0800d5a0 	.word	0x0800d5a0
 800a1cc:	0800d484 	.word	0x0800d484
 800a1d0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a1d2:	9900      	ldr	r1, [sp, #0]
 800a1d4:	6011      	str	r1, [r2, #0]
 800a1d6:	f1b9 0f0e 	cmp.w	r9, #14
 800a1da:	d872      	bhi.n	800a2c2 <_dtoa_r+0x3ea>
 800a1dc:	2c00      	cmp	r4, #0
 800a1de:	d070      	beq.n	800a2c2 <_dtoa_r+0x3ea>
 800a1e0:	f1bb 0f00 	cmp.w	fp, #0
 800a1e4:	f340 80a6 	ble.w	800a334 <_dtoa_r+0x45c>
 800a1e8:	49ca      	ldr	r1, [pc, #808]	; (800a514 <_dtoa_r+0x63c>)
 800a1ea:	f00b 020f 	and.w	r2, fp, #15
 800a1ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a1f2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a1f6:	ed92 7b00 	vldr	d7, [r2]
 800a1fa:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a1fe:	f000 808d 	beq.w	800a31c <_dtoa_r+0x444>
 800a202:	4ac5      	ldr	r2, [pc, #788]	; (800a518 <_dtoa_r+0x640>)
 800a204:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800a208:	ed92 6b08 	vldr	d6, [r2, #32]
 800a20c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800a210:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a214:	f001 010f 	and.w	r1, r1, #15
 800a218:	2203      	movs	r2, #3
 800a21a:	48bf      	ldr	r0, [pc, #764]	; (800a518 <_dtoa_r+0x640>)
 800a21c:	2900      	cmp	r1, #0
 800a21e:	d17f      	bne.n	800a320 <_dtoa_r+0x448>
 800a220:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a224:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a228:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a22c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a22e:	2900      	cmp	r1, #0
 800a230:	f000 80b2 	beq.w	800a398 <_dtoa_r+0x4c0>
 800a234:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a238:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a23c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a244:	f140 80a8 	bpl.w	800a398 <_dtoa_r+0x4c0>
 800a248:	f1b9 0f00 	cmp.w	r9, #0
 800a24c:	f000 80a4 	beq.w	800a398 <_dtoa_r+0x4c0>
 800a250:	f1ba 0f00 	cmp.w	sl, #0
 800a254:	dd31      	ble.n	800a2ba <_dtoa_r+0x3e2>
 800a256:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a25a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a25e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a262:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800a266:	3201      	adds	r2, #1
 800a268:	4650      	mov	r0, sl
 800a26a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a26e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a272:	ee07 2a90 	vmov	s15, r2
 800a276:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a27a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a27e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800a282:	9c03      	ldr	r4, [sp, #12]
 800a284:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a288:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a28c:	2800      	cmp	r0, #0
 800a28e:	f040 8086 	bne.w	800a39e <_dtoa_r+0x4c6>
 800a292:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a296:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a29a:	ec42 1b17 	vmov	d7, r1, r2
 800a29e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2a6:	f300 8272 	bgt.w	800a78e <_dtoa_r+0x8b6>
 800a2aa:	eeb1 7b47 	vneg.f64	d7, d7
 800a2ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2b6:	f100 8267 	bmi.w	800a788 <_dtoa_r+0x8b0>
 800a2ba:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800a2be:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a2c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a2c4:	2a00      	cmp	r2, #0
 800a2c6:	f2c0 8129 	blt.w	800a51c <_dtoa_r+0x644>
 800a2ca:	f1bb 0f0e 	cmp.w	fp, #14
 800a2ce:	f300 8125 	bgt.w	800a51c <_dtoa_r+0x644>
 800a2d2:	4b90      	ldr	r3, [pc, #576]	; (800a514 <_dtoa_r+0x63c>)
 800a2d4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a2d8:	ed93 6b00 	vldr	d6, [r3]
 800a2dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	f280 80c3 	bge.w	800a46a <_dtoa_r+0x592>
 800a2e4:	f1b9 0f00 	cmp.w	r9, #0
 800a2e8:	f300 80bf 	bgt.w	800a46a <_dtoa_r+0x592>
 800a2ec:	f040 824c 	bne.w	800a788 <_dtoa_r+0x8b0>
 800a2f0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a2f4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a2f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a2fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a304:	464c      	mov	r4, r9
 800a306:	464f      	mov	r7, r9
 800a308:	f280 8222 	bge.w	800a750 <_dtoa_r+0x878>
 800a30c:	f8dd 8000 	ldr.w	r8, [sp]
 800a310:	2331      	movs	r3, #49	; 0x31
 800a312:	f808 3b01 	strb.w	r3, [r8], #1
 800a316:	f10b 0b01 	add.w	fp, fp, #1
 800a31a:	e21e      	b.n	800a75a <_dtoa_r+0x882>
 800a31c:	2202      	movs	r2, #2
 800a31e:	e77c      	b.n	800a21a <_dtoa_r+0x342>
 800a320:	07cc      	lsls	r4, r1, #31
 800a322:	d504      	bpl.n	800a32e <_dtoa_r+0x456>
 800a324:	ed90 6b00 	vldr	d6, [r0]
 800a328:	3201      	adds	r2, #1
 800a32a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a32e:	1049      	asrs	r1, r1, #1
 800a330:	3008      	adds	r0, #8
 800a332:	e773      	b.n	800a21c <_dtoa_r+0x344>
 800a334:	d02e      	beq.n	800a394 <_dtoa_r+0x4bc>
 800a336:	f1cb 0100 	rsb	r1, fp, #0
 800a33a:	4a76      	ldr	r2, [pc, #472]	; (800a514 <_dtoa_r+0x63c>)
 800a33c:	f001 000f 	and.w	r0, r1, #15
 800a340:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a344:	ed92 7b00 	vldr	d7, [r2]
 800a348:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800a34c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a350:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a354:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800a358:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800a35c:	486e      	ldr	r0, [pc, #440]	; (800a518 <_dtoa_r+0x640>)
 800a35e:	1109      	asrs	r1, r1, #4
 800a360:	2400      	movs	r4, #0
 800a362:	2202      	movs	r2, #2
 800a364:	b939      	cbnz	r1, 800a376 <_dtoa_r+0x49e>
 800a366:	2c00      	cmp	r4, #0
 800a368:	f43f af60 	beq.w	800a22c <_dtoa_r+0x354>
 800a36c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a374:	e75a      	b.n	800a22c <_dtoa_r+0x354>
 800a376:	07cf      	lsls	r7, r1, #31
 800a378:	d509      	bpl.n	800a38e <_dtoa_r+0x4b6>
 800a37a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800a37e:	ed90 7b00 	vldr	d7, [r0]
 800a382:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a386:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a38a:	3201      	adds	r2, #1
 800a38c:	2401      	movs	r4, #1
 800a38e:	1049      	asrs	r1, r1, #1
 800a390:	3008      	adds	r0, #8
 800a392:	e7e7      	b.n	800a364 <_dtoa_r+0x48c>
 800a394:	2202      	movs	r2, #2
 800a396:	e749      	b.n	800a22c <_dtoa_r+0x354>
 800a398:	465f      	mov	r7, fp
 800a39a:	4648      	mov	r0, r9
 800a39c:	e765      	b.n	800a26a <_dtoa_r+0x392>
 800a39e:	ec42 1b17 	vmov	d7, r1, r2
 800a3a2:	4a5c      	ldr	r2, [pc, #368]	; (800a514 <_dtoa_r+0x63c>)
 800a3a4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a3a8:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a3ac:	9a00      	ldr	r2, [sp, #0]
 800a3ae:	1814      	adds	r4, r2, r0
 800a3b0:	9a08      	ldr	r2, [sp, #32]
 800a3b2:	b352      	cbz	r2, 800a40a <_dtoa_r+0x532>
 800a3b4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a3b8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a3bc:	f8dd 8000 	ldr.w	r8, [sp]
 800a3c0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a3c4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a3c8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a3cc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a3d0:	ee14 2a90 	vmov	r2, s9
 800a3d4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a3d8:	3230      	adds	r2, #48	; 0x30
 800a3da:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a3de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e6:	f808 2b01 	strb.w	r2, [r8], #1
 800a3ea:	d439      	bmi.n	800a460 <_dtoa_r+0x588>
 800a3ec:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a3f0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3f8:	d472      	bmi.n	800a4e0 <_dtoa_r+0x608>
 800a3fa:	45a0      	cmp	r8, r4
 800a3fc:	f43f af5d 	beq.w	800a2ba <_dtoa_r+0x3e2>
 800a400:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a404:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a408:	e7e0      	b.n	800a3cc <_dtoa_r+0x4f4>
 800a40a:	f8dd 8000 	ldr.w	r8, [sp]
 800a40e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a412:	4621      	mov	r1, r4
 800a414:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a418:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a41c:	ee14 2a90 	vmov	r2, s9
 800a420:	3230      	adds	r2, #48	; 0x30
 800a422:	f808 2b01 	strb.w	r2, [r8], #1
 800a426:	45a0      	cmp	r8, r4
 800a428:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a42c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a430:	d118      	bne.n	800a464 <_dtoa_r+0x58c>
 800a432:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a436:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a43a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a442:	dc4d      	bgt.n	800a4e0 <_dtoa_r+0x608>
 800a444:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a448:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a450:	f57f af33 	bpl.w	800a2ba <_dtoa_r+0x3e2>
 800a454:	4688      	mov	r8, r1
 800a456:	3901      	subs	r1, #1
 800a458:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a45c:	2b30      	cmp	r3, #48	; 0x30
 800a45e:	d0f9      	beq.n	800a454 <_dtoa_r+0x57c>
 800a460:	46bb      	mov	fp, r7
 800a462:	e02a      	b.n	800a4ba <_dtoa_r+0x5e2>
 800a464:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a468:	e7d6      	b.n	800a418 <_dtoa_r+0x540>
 800a46a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a46e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a472:	f8dd 8000 	ldr.w	r8, [sp]
 800a476:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a47a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a47e:	ee15 3a10 	vmov	r3, s10
 800a482:	3330      	adds	r3, #48	; 0x30
 800a484:	f808 3b01 	strb.w	r3, [r8], #1
 800a488:	9b00      	ldr	r3, [sp, #0]
 800a48a:	eba8 0303 	sub.w	r3, r8, r3
 800a48e:	4599      	cmp	r9, r3
 800a490:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a494:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a498:	d133      	bne.n	800a502 <_dtoa_r+0x62a>
 800a49a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a49e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4a6:	dc1a      	bgt.n	800a4de <_dtoa_r+0x606>
 800a4a8:	eeb4 7b46 	vcmp.f64	d7, d6
 800a4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4b0:	d103      	bne.n	800a4ba <_dtoa_r+0x5e2>
 800a4b2:	ee15 3a10 	vmov	r3, s10
 800a4b6:	07d9      	lsls	r1, r3, #31
 800a4b8:	d411      	bmi.n	800a4de <_dtoa_r+0x606>
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	4630      	mov	r0, r6
 800a4be:	f000 fe6d 	bl	800b19c <_Bfree>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a4c6:	f888 3000 	strb.w	r3, [r8]
 800a4ca:	f10b 0301 	add.w	r3, fp, #1
 800a4ce:	6013      	str	r3, [r2, #0]
 800a4d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f43f ad4d 	beq.w	8009f72 <_dtoa_r+0x9a>
 800a4d8:	f8c3 8000 	str.w	r8, [r3]
 800a4dc:	e549      	b.n	8009f72 <_dtoa_r+0x9a>
 800a4de:	465f      	mov	r7, fp
 800a4e0:	4643      	mov	r3, r8
 800a4e2:	4698      	mov	r8, r3
 800a4e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4e8:	2a39      	cmp	r2, #57	; 0x39
 800a4ea:	d106      	bne.n	800a4fa <_dtoa_r+0x622>
 800a4ec:	9a00      	ldr	r2, [sp, #0]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d1f7      	bne.n	800a4e2 <_dtoa_r+0x60a>
 800a4f2:	9900      	ldr	r1, [sp, #0]
 800a4f4:	2230      	movs	r2, #48	; 0x30
 800a4f6:	3701      	adds	r7, #1
 800a4f8:	700a      	strb	r2, [r1, #0]
 800a4fa:	781a      	ldrb	r2, [r3, #0]
 800a4fc:	3201      	adds	r2, #1
 800a4fe:	701a      	strb	r2, [r3, #0]
 800a500:	e7ae      	b.n	800a460 <_dtoa_r+0x588>
 800a502:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a506:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a50e:	d1b2      	bne.n	800a476 <_dtoa_r+0x59e>
 800a510:	e7d3      	b.n	800a4ba <_dtoa_r+0x5e2>
 800a512:	bf00      	nop
 800a514:	0800d5a0 	.word	0x0800d5a0
 800a518:	0800d578 	.word	0x0800d578
 800a51c:	9908      	ldr	r1, [sp, #32]
 800a51e:	2900      	cmp	r1, #0
 800a520:	f000 80d1 	beq.w	800a6c6 <_dtoa_r+0x7ee>
 800a524:	9907      	ldr	r1, [sp, #28]
 800a526:	2901      	cmp	r1, #1
 800a528:	f300 80b4 	bgt.w	800a694 <_dtoa_r+0x7bc>
 800a52c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a52e:	2900      	cmp	r1, #0
 800a530:	f000 80ac 	beq.w	800a68c <_dtoa_r+0x7b4>
 800a534:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a538:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a53c:	461c      	mov	r4, r3
 800a53e:	930a      	str	r3, [sp, #40]	; 0x28
 800a540:	9b05      	ldr	r3, [sp, #20]
 800a542:	4413      	add	r3, r2
 800a544:	9305      	str	r3, [sp, #20]
 800a546:	9b06      	ldr	r3, [sp, #24]
 800a548:	2101      	movs	r1, #1
 800a54a:	4413      	add	r3, r2
 800a54c:	4630      	mov	r0, r6
 800a54e:	9306      	str	r3, [sp, #24]
 800a550:	f000 ff2a 	bl	800b3a8 <__i2b>
 800a554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a556:	4607      	mov	r7, r0
 800a558:	f1b8 0f00 	cmp.w	r8, #0
 800a55c:	dd0d      	ble.n	800a57a <_dtoa_r+0x6a2>
 800a55e:	9a06      	ldr	r2, [sp, #24]
 800a560:	2a00      	cmp	r2, #0
 800a562:	dd0a      	ble.n	800a57a <_dtoa_r+0x6a2>
 800a564:	4542      	cmp	r2, r8
 800a566:	9905      	ldr	r1, [sp, #20]
 800a568:	bfa8      	it	ge
 800a56a:	4642      	movge	r2, r8
 800a56c:	1a89      	subs	r1, r1, r2
 800a56e:	9105      	str	r1, [sp, #20]
 800a570:	9906      	ldr	r1, [sp, #24]
 800a572:	eba8 0802 	sub.w	r8, r8, r2
 800a576:	1a8a      	subs	r2, r1, r2
 800a578:	9206      	str	r2, [sp, #24]
 800a57a:	b303      	cbz	r3, 800a5be <_dtoa_r+0x6e6>
 800a57c:	9a08      	ldr	r2, [sp, #32]
 800a57e:	2a00      	cmp	r2, #0
 800a580:	f000 80a6 	beq.w	800a6d0 <_dtoa_r+0x7f8>
 800a584:	2c00      	cmp	r4, #0
 800a586:	dd13      	ble.n	800a5b0 <_dtoa_r+0x6d8>
 800a588:	4639      	mov	r1, r7
 800a58a:	4622      	mov	r2, r4
 800a58c:	4630      	mov	r0, r6
 800a58e:	930c      	str	r3, [sp, #48]	; 0x30
 800a590:	f000 ffc6 	bl	800b520 <__pow5mult>
 800a594:	462a      	mov	r2, r5
 800a596:	4601      	mov	r1, r0
 800a598:	4607      	mov	r7, r0
 800a59a:	4630      	mov	r0, r6
 800a59c:	f000 ff1a 	bl	800b3d4 <__multiply>
 800a5a0:	4629      	mov	r1, r5
 800a5a2:	900a      	str	r0, [sp, #40]	; 0x28
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	f000 fdf9 	bl	800b19c <_Bfree>
 800a5aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5ae:	4615      	mov	r5, r2
 800a5b0:	1b1a      	subs	r2, r3, r4
 800a5b2:	d004      	beq.n	800a5be <_dtoa_r+0x6e6>
 800a5b4:	4629      	mov	r1, r5
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	f000 ffb2 	bl	800b520 <__pow5mult>
 800a5bc:	4605      	mov	r5, r0
 800a5be:	2101      	movs	r1, #1
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	f000 fef1 	bl	800b3a8 <__i2b>
 800a5c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	f340 8082 	ble.w	800a6d4 <_dtoa_r+0x7fc>
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	4601      	mov	r1, r0
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	f000 ffa3 	bl	800b520 <__pow5mult>
 800a5da:	9b07      	ldr	r3, [sp, #28]
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	4604      	mov	r4, r0
 800a5e0:	dd7b      	ble.n	800a6da <_dtoa_r+0x802>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	930a      	str	r3, [sp, #40]	; 0x28
 800a5e6:	6922      	ldr	r2, [r4, #16]
 800a5e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a5ec:	6910      	ldr	r0, [r2, #16]
 800a5ee:	f000 fe8b 	bl	800b308 <__hi0bits>
 800a5f2:	f1c0 0020 	rsb	r0, r0, #32
 800a5f6:	9b06      	ldr	r3, [sp, #24]
 800a5f8:	4418      	add	r0, r3
 800a5fa:	f010 001f 	ands.w	r0, r0, #31
 800a5fe:	f000 808d 	beq.w	800a71c <_dtoa_r+0x844>
 800a602:	f1c0 0220 	rsb	r2, r0, #32
 800a606:	2a04      	cmp	r2, #4
 800a608:	f340 8086 	ble.w	800a718 <_dtoa_r+0x840>
 800a60c:	f1c0 001c 	rsb	r0, r0, #28
 800a610:	9b05      	ldr	r3, [sp, #20]
 800a612:	4403      	add	r3, r0
 800a614:	9305      	str	r3, [sp, #20]
 800a616:	9b06      	ldr	r3, [sp, #24]
 800a618:	4403      	add	r3, r0
 800a61a:	4480      	add	r8, r0
 800a61c:	9306      	str	r3, [sp, #24]
 800a61e:	9b05      	ldr	r3, [sp, #20]
 800a620:	2b00      	cmp	r3, #0
 800a622:	dd05      	ble.n	800a630 <_dtoa_r+0x758>
 800a624:	4629      	mov	r1, r5
 800a626:	461a      	mov	r2, r3
 800a628:	4630      	mov	r0, r6
 800a62a:	f000 ffd3 	bl	800b5d4 <__lshift>
 800a62e:	4605      	mov	r5, r0
 800a630:	9b06      	ldr	r3, [sp, #24]
 800a632:	2b00      	cmp	r3, #0
 800a634:	dd05      	ble.n	800a642 <_dtoa_r+0x76a>
 800a636:	4621      	mov	r1, r4
 800a638:	461a      	mov	r2, r3
 800a63a:	4630      	mov	r0, r6
 800a63c:	f000 ffca 	bl	800b5d4 <__lshift>
 800a640:	4604      	mov	r4, r0
 800a642:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a644:	2b00      	cmp	r3, #0
 800a646:	d06b      	beq.n	800a720 <_dtoa_r+0x848>
 800a648:	4621      	mov	r1, r4
 800a64a:	4628      	mov	r0, r5
 800a64c:	f001 f82e 	bl	800b6ac <__mcmp>
 800a650:	2800      	cmp	r0, #0
 800a652:	da65      	bge.n	800a720 <_dtoa_r+0x848>
 800a654:	2300      	movs	r3, #0
 800a656:	4629      	mov	r1, r5
 800a658:	220a      	movs	r2, #10
 800a65a:	4630      	mov	r0, r6
 800a65c:	f000 fdc0 	bl	800b1e0 <__multadd>
 800a660:	9b08      	ldr	r3, [sp, #32]
 800a662:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a666:	4605      	mov	r5, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f000 8192 	beq.w	800a992 <_dtoa_r+0xaba>
 800a66e:	4639      	mov	r1, r7
 800a670:	2300      	movs	r3, #0
 800a672:	220a      	movs	r2, #10
 800a674:	4630      	mov	r0, r6
 800a676:	f000 fdb3 	bl	800b1e0 <__multadd>
 800a67a:	f1ba 0f00 	cmp.w	sl, #0
 800a67e:	4607      	mov	r7, r0
 800a680:	f300 808e 	bgt.w	800a7a0 <_dtoa_r+0x8c8>
 800a684:	9b07      	ldr	r3, [sp, #28]
 800a686:	2b02      	cmp	r3, #2
 800a688:	dc51      	bgt.n	800a72e <_dtoa_r+0x856>
 800a68a:	e089      	b.n	800a7a0 <_dtoa_r+0x8c8>
 800a68c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a68e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a692:	e751      	b.n	800a538 <_dtoa_r+0x660>
 800a694:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800a698:	42a3      	cmp	r3, r4
 800a69a:	bfbf      	itttt	lt
 800a69c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a69e:	1ae3      	sublt	r3, r4, r3
 800a6a0:	18d2      	addlt	r2, r2, r3
 800a6a2:	4613      	movlt	r3, r2
 800a6a4:	bfb7      	itett	lt
 800a6a6:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a6a8:	1b1c      	subge	r4, r3, r4
 800a6aa:	4623      	movlt	r3, r4
 800a6ac:	2400      	movlt	r4, #0
 800a6ae:	f1b9 0f00 	cmp.w	r9, #0
 800a6b2:	bfb5      	itete	lt
 800a6b4:	9a05      	ldrlt	r2, [sp, #20]
 800a6b6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800a6ba:	eba2 0809 	sublt.w	r8, r2, r9
 800a6be:	464a      	movge	r2, r9
 800a6c0:	bfb8      	it	lt
 800a6c2:	2200      	movlt	r2, #0
 800a6c4:	e73b      	b.n	800a53e <_dtoa_r+0x666>
 800a6c6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a6ca:	9f08      	ldr	r7, [sp, #32]
 800a6cc:	461c      	mov	r4, r3
 800a6ce:	e743      	b.n	800a558 <_dtoa_r+0x680>
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	e76f      	b.n	800a5b4 <_dtoa_r+0x6dc>
 800a6d4:	9b07      	ldr	r3, [sp, #28]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	dc18      	bgt.n	800a70c <_dtoa_r+0x834>
 800a6da:	9b02      	ldr	r3, [sp, #8]
 800a6dc:	b9b3      	cbnz	r3, 800a70c <_dtoa_r+0x834>
 800a6de:	9b03      	ldr	r3, [sp, #12]
 800a6e0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a6e4:	b9a2      	cbnz	r2, 800a710 <_dtoa_r+0x838>
 800a6e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a6ea:	0d12      	lsrs	r2, r2, #20
 800a6ec:	0512      	lsls	r2, r2, #20
 800a6ee:	b18a      	cbz	r2, 800a714 <_dtoa_r+0x83c>
 800a6f0:	9b05      	ldr	r3, [sp, #20]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	9305      	str	r3, [sp, #20]
 800a6f6:	9b06      	ldr	r3, [sp, #24]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	9306      	str	r3, [sp, #24]
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a702:	2b00      	cmp	r3, #0
 800a704:	f47f af6f 	bne.w	800a5e6 <_dtoa_r+0x70e>
 800a708:	2001      	movs	r0, #1
 800a70a:	e774      	b.n	800a5f6 <_dtoa_r+0x71e>
 800a70c:	2300      	movs	r3, #0
 800a70e:	e7f6      	b.n	800a6fe <_dtoa_r+0x826>
 800a710:	9b02      	ldr	r3, [sp, #8]
 800a712:	e7f4      	b.n	800a6fe <_dtoa_r+0x826>
 800a714:	920a      	str	r2, [sp, #40]	; 0x28
 800a716:	e7f3      	b.n	800a700 <_dtoa_r+0x828>
 800a718:	d081      	beq.n	800a61e <_dtoa_r+0x746>
 800a71a:	4610      	mov	r0, r2
 800a71c:	301c      	adds	r0, #28
 800a71e:	e777      	b.n	800a610 <_dtoa_r+0x738>
 800a720:	f1b9 0f00 	cmp.w	r9, #0
 800a724:	dc37      	bgt.n	800a796 <_dtoa_r+0x8be>
 800a726:	9b07      	ldr	r3, [sp, #28]
 800a728:	2b02      	cmp	r3, #2
 800a72a:	dd34      	ble.n	800a796 <_dtoa_r+0x8be>
 800a72c:	46ca      	mov	sl, r9
 800a72e:	f1ba 0f00 	cmp.w	sl, #0
 800a732:	d10d      	bne.n	800a750 <_dtoa_r+0x878>
 800a734:	4621      	mov	r1, r4
 800a736:	4653      	mov	r3, sl
 800a738:	2205      	movs	r2, #5
 800a73a:	4630      	mov	r0, r6
 800a73c:	f000 fd50 	bl	800b1e0 <__multadd>
 800a740:	4601      	mov	r1, r0
 800a742:	4604      	mov	r4, r0
 800a744:	4628      	mov	r0, r5
 800a746:	f000 ffb1 	bl	800b6ac <__mcmp>
 800a74a:	2800      	cmp	r0, #0
 800a74c:	f73f adde 	bgt.w	800a30c <_dtoa_r+0x434>
 800a750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a752:	f8dd 8000 	ldr.w	r8, [sp]
 800a756:	ea6f 0b03 	mvn.w	fp, r3
 800a75a:	f04f 0900 	mov.w	r9, #0
 800a75e:	4621      	mov	r1, r4
 800a760:	4630      	mov	r0, r6
 800a762:	f000 fd1b 	bl	800b19c <_Bfree>
 800a766:	2f00      	cmp	r7, #0
 800a768:	f43f aea7 	beq.w	800a4ba <_dtoa_r+0x5e2>
 800a76c:	f1b9 0f00 	cmp.w	r9, #0
 800a770:	d005      	beq.n	800a77e <_dtoa_r+0x8a6>
 800a772:	45b9      	cmp	r9, r7
 800a774:	d003      	beq.n	800a77e <_dtoa_r+0x8a6>
 800a776:	4649      	mov	r1, r9
 800a778:	4630      	mov	r0, r6
 800a77a:	f000 fd0f 	bl	800b19c <_Bfree>
 800a77e:	4639      	mov	r1, r7
 800a780:	4630      	mov	r0, r6
 800a782:	f000 fd0b 	bl	800b19c <_Bfree>
 800a786:	e698      	b.n	800a4ba <_dtoa_r+0x5e2>
 800a788:	2400      	movs	r4, #0
 800a78a:	4627      	mov	r7, r4
 800a78c:	e7e0      	b.n	800a750 <_dtoa_r+0x878>
 800a78e:	46bb      	mov	fp, r7
 800a790:	4604      	mov	r4, r0
 800a792:	4607      	mov	r7, r0
 800a794:	e5ba      	b.n	800a30c <_dtoa_r+0x434>
 800a796:	9b08      	ldr	r3, [sp, #32]
 800a798:	46ca      	mov	sl, r9
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	f000 8100 	beq.w	800a9a0 <_dtoa_r+0xac8>
 800a7a0:	f1b8 0f00 	cmp.w	r8, #0
 800a7a4:	dd05      	ble.n	800a7b2 <_dtoa_r+0x8da>
 800a7a6:	4639      	mov	r1, r7
 800a7a8:	4642      	mov	r2, r8
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	f000 ff12 	bl	800b5d4 <__lshift>
 800a7b0:	4607      	mov	r7, r0
 800a7b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d05d      	beq.n	800a874 <_dtoa_r+0x99c>
 800a7b8:	6879      	ldr	r1, [r7, #4]
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f000 fcae 	bl	800b11c <_Balloc>
 800a7c0:	4680      	mov	r8, r0
 800a7c2:	b928      	cbnz	r0, 800a7d0 <_dtoa_r+0x8f8>
 800a7c4:	4b82      	ldr	r3, [pc, #520]	; (800a9d0 <_dtoa_r+0xaf8>)
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a7cc:	f7ff bb9a 	b.w	8009f04 <_dtoa_r+0x2c>
 800a7d0:	693a      	ldr	r2, [r7, #16]
 800a7d2:	3202      	adds	r2, #2
 800a7d4:	0092      	lsls	r2, r2, #2
 800a7d6:	f107 010c 	add.w	r1, r7, #12
 800a7da:	300c      	adds	r0, #12
 800a7dc:	f7fd fd5c 	bl	8008298 <memcpy>
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	4641      	mov	r1, r8
 800a7e4:	4630      	mov	r0, r6
 800a7e6:	f000 fef5 	bl	800b5d4 <__lshift>
 800a7ea:	9b00      	ldr	r3, [sp, #0]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	9305      	str	r3, [sp, #20]
 800a7f0:	9b00      	ldr	r3, [sp, #0]
 800a7f2:	4453      	add	r3, sl
 800a7f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7f6:	9b02      	ldr	r3, [sp, #8]
 800a7f8:	f003 0301 	and.w	r3, r3, #1
 800a7fc:	46b9      	mov	r9, r7
 800a7fe:	9308      	str	r3, [sp, #32]
 800a800:	4607      	mov	r7, r0
 800a802:	9b05      	ldr	r3, [sp, #20]
 800a804:	4621      	mov	r1, r4
 800a806:	3b01      	subs	r3, #1
 800a808:	4628      	mov	r0, r5
 800a80a:	9302      	str	r3, [sp, #8]
 800a80c:	f7ff fad8 	bl	8009dc0 <quorem>
 800a810:	4603      	mov	r3, r0
 800a812:	3330      	adds	r3, #48	; 0x30
 800a814:	9006      	str	r0, [sp, #24]
 800a816:	4649      	mov	r1, r9
 800a818:	4628      	mov	r0, r5
 800a81a:	930a      	str	r3, [sp, #40]	; 0x28
 800a81c:	f000 ff46 	bl	800b6ac <__mcmp>
 800a820:	463a      	mov	r2, r7
 800a822:	4682      	mov	sl, r0
 800a824:	4621      	mov	r1, r4
 800a826:	4630      	mov	r0, r6
 800a828:	f000 ff5c 	bl	800b6e4 <__mdiff>
 800a82c:	68c2      	ldr	r2, [r0, #12]
 800a82e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a830:	4680      	mov	r8, r0
 800a832:	bb0a      	cbnz	r2, 800a878 <_dtoa_r+0x9a0>
 800a834:	4601      	mov	r1, r0
 800a836:	4628      	mov	r0, r5
 800a838:	f000 ff38 	bl	800b6ac <__mcmp>
 800a83c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a83e:	4602      	mov	r2, r0
 800a840:	4641      	mov	r1, r8
 800a842:	4630      	mov	r0, r6
 800a844:	920e      	str	r2, [sp, #56]	; 0x38
 800a846:	930a      	str	r3, [sp, #40]	; 0x28
 800a848:	f000 fca8 	bl	800b19c <_Bfree>
 800a84c:	9b07      	ldr	r3, [sp, #28]
 800a84e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a850:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a854:	ea43 0102 	orr.w	r1, r3, r2
 800a858:	9b08      	ldr	r3, [sp, #32]
 800a85a:	430b      	orrs	r3, r1
 800a85c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a85e:	d10d      	bne.n	800a87c <_dtoa_r+0x9a4>
 800a860:	2b39      	cmp	r3, #57	; 0x39
 800a862:	d029      	beq.n	800a8b8 <_dtoa_r+0x9e0>
 800a864:	f1ba 0f00 	cmp.w	sl, #0
 800a868:	dd01      	ble.n	800a86e <_dtoa_r+0x996>
 800a86a:	9b06      	ldr	r3, [sp, #24]
 800a86c:	3331      	adds	r3, #49	; 0x31
 800a86e:	9a02      	ldr	r2, [sp, #8]
 800a870:	7013      	strb	r3, [r2, #0]
 800a872:	e774      	b.n	800a75e <_dtoa_r+0x886>
 800a874:	4638      	mov	r0, r7
 800a876:	e7b8      	b.n	800a7ea <_dtoa_r+0x912>
 800a878:	2201      	movs	r2, #1
 800a87a:	e7e1      	b.n	800a840 <_dtoa_r+0x968>
 800a87c:	f1ba 0f00 	cmp.w	sl, #0
 800a880:	db06      	blt.n	800a890 <_dtoa_r+0x9b8>
 800a882:	9907      	ldr	r1, [sp, #28]
 800a884:	ea41 0a0a 	orr.w	sl, r1, sl
 800a888:	9908      	ldr	r1, [sp, #32]
 800a88a:	ea5a 0101 	orrs.w	r1, sl, r1
 800a88e:	d120      	bne.n	800a8d2 <_dtoa_r+0x9fa>
 800a890:	2a00      	cmp	r2, #0
 800a892:	ddec      	ble.n	800a86e <_dtoa_r+0x996>
 800a894:	4629      	mov	r1, r5
 800a896:	2201      	movs	r2, #1
 800a898:	4630      	mov	r0, r6
 800a89a:	9305      	str	r3, [sp, #20]
 800a89c:	f000 fe9a 	bl	800b5d4 <__lshift>
 800a8a0:	4621      	mov	r1, r4
 800a8a2:	4605      	mov	r5, r0
 800a8a4:	f000 ff02 	bl	800b6ac <__mcmp>
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	9b05      	ldr	r3, [sp, #20]
 800a8ac:	dc02      	bgt.n	800a8b4 <_dtoa_r+0x9dc>
 800a8ae:	d1de      	bne.n	800a86e <_dtoa_r+0x996>
 800a8b0:	07da      	lsls	r2, r3, #31
 800a8b2:	d5dc      	bpl.n	800a86e <_dtoa_r+0x996>
 800a8b4:	2b39      	cmp	r3, #57	; 0x39
 800a8b6:	d1d8      	bne.n	800a86a <_dtoa_r+0x992>
 800a8b8:	9a02      	ldr	r2, [sp, #8]
 800a8ba:	2339      	movs	r3, #57	; 0x39
 800a8bc:	7013      	strb	r3, [r2, #0]
 800a8be:	4643      	mov	r3, r8
 800a8c0:	4698      	mov	r8, r3
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a8c8:	2a39      	cmp	r2, #57	; 0x39
 800a8ca:	d051      	beq.n	800a970 <_dtoa_r+0xa98>
 800a8cc:	3201      	adds	r2, #1
 800a8ce:	701a      	strb	r2, [r3, #0]
 800a8d0:	e745      	b.n	800a75e <_dtoa_r+0x886>
 800a8d2:	2a00      	cmp	r2, #0
 800a8d4:	dd03      	ble.n	800a8de <_dtoa_r+0xa06>
 800a8d6:	2b39      	cmp	r3, #57	; 0x39
 800a8d8:	d0ee      	beq.n	800a8b8 <_dtoa_r+0x9e0>
 800a8da:	3301      	adds	r3, #1
 800a8dc:	e7c7      	b.n	800a86e <_dtoa_r+0x996>
 800a8de:	9a05      	ldr	r2, [sp, #20]
 800a8e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8e2:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a8e6:	428a      	cmp	r2, r1
 800a8e8:	d02b      	beq.n	800a942 <_dtoa_r+0xa6a>
 800a8ea:	4629      	mov	r1, r5
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	220a      	movs	r2, #10
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	f000 fc75 	bl	800b1e0 <__multadd>
 800a8f6:	45b9      	cmp	r9, r7
 800a8f8:	4605      	mov	r5, r0
 800a8fa:	f04f 0300 	mov.w	r3, #0
 800a8fe:	f04f 020a 	mov.w	r2, #10
 800a902:	4649      	mov	r1, r9
 800a904:	4630      	mov	r0, r6
 800a906:	d107      	bne.n	800a918 <_dtoa_r+0xa40>
 800a908:	f000 fc6a 	bl	800b1e0 <__multadd>
 800a90c:	4681      	mov	r9, r0
 800a90e:	4607      	mov	r7, r0
 800a910:	9b05      	ldr	r3, [sp, #20]
 800a912:	3301      	adds	r3, #1
 800a914:	9305      	str	r3, [sp, #20]
 800a916:	e774      	b.n	800a802 <_dtoa_r+0x92a>
 800a918:	f000 fc62 	bl	800b1e0 <__multadd>
 800a91c:	4639      	mov	r1, r7
 800a91e:	4681      	mov	r9, r0
 800a920:	2300      	movs	r3, #0
 800a922:	220a      	movs	r2, #10
 800a924:	4630      	mov	r0, r6
 800a926:	f000 fc5b 	bl	800b1e0 <__multadd>
 800a92a:	4607      	mov	r7, r0
 800a92c:	e7f0      	b.n	800a910 <_dtoa_r+0xa38>
 800a92e:	f1ba 0f00 	cmp.w	sl, #0
 800a932:	9a00      	ldr	r2, [sp, #0]
 800a934:	bfcc      	ite	gt
 800a936:	46d0      	movgt	r8, sl
 800a938:	f04f 0801 	movle.w	r8, #1
 800a93c:	4490      	add	r8, r2
 800a93e:	f04f 0900 	mov.w	r9, #0
 800a942:	4629      	mov	r1, r5
 800a944:	2201      	movs	r2, #1
 800a946:	4630      	mov	r0, r6
 800a948:	9302      	str	r3, [sp, #8]
 800a94a:	f000 fe43 	bl	800b5d4 <__lshift>
 800a94e:	4621      	mov	r1, r4
 800a950:	4605      	mov	r5, r0
 800a952:	f000 feab 	bl	800b6ac <__mcmp>
 800a956:	2800      	cmp	r0, #0
 800a958:	dcb1      	bgt.n	800a8be <_dtoa_r+0x9e6>
 800a95a:	d102      	bne.n	800a962 <_dtoa_r+0xa8a>
 800a95c:	9b02      	ldr	r3, [sp, #8]
 800a95e:	07db      	lsls	r3, r3, #31
 800a960:	d4ad      	bmi.n	800a8be <_dtoa_r+0x9e6>
 800a962:	4643      	mov	r3, r8
 800a964:	4698      	mov	r8, r3
 800a966:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a96a:	2a30      	cmp	r2, #48	; 0x30
 800a96c:	d0fa      	beq.n	800a964 <_dtoa_r+0xa8c>
 800a96e:	e6f6      	b.n	800a75e <_dtoa_r+0x886>
 800a970:	9a00      	ldr	r2, [sp, #0]
 800a972:	429a      	cmp	r2, r3
 800a974:	d1a4      	bne.n	800a8c0 <_dtoa_r+0x9e8>
 800a976:	f10b 0b01 	add.w	fp, fp, #1
 800a97a:	2331      	movs	r3, #49	; 0x31
 800a97c:	e778      	b.n	800a870 <_dtoa_r+0x998>
 800a97e:	4b15      	ldr	r3, [pc, #84]	; (800a9d4 <_dtoa_r+0xafc>)
 800a980:	f7ff bb12 	b.w	8009fa8 <_dtoa_r+0xd0>
 800a984:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a986:	2b00      	cmp	r3, #0
 800a988:	f47f aaee 	bne.w	8009f68 <_dtoa_r+0x90>
 800a98c:	4b12      	ldr	r3, [pc, #72]	; (800a9d8 <_dtoa_r+0xb00>)
 800a98e:	f7ff bb0b 	b.w	8009fa8 <_dtoa_r+0xd0>
 800a992:	f1ba 0f00 	cmp.w	sl, #0
 800a996:	dc03      	bgt.n	800a9a0 <_dtoa_r+0xac8>
 800a998:	9b07      	ldr	r3, [sp, #28]
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	f73f aec7 	bgt.w	800a72e <_dtoa_r+0x856>
 800a9a0:	f8dd 8000 	ldr.w	r8, [sp]
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	f7ff fa0a 	bl	8009dc0 <quorem>
 800a9ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a9b0:	f808 3b01 	strb.w	r3, [r8], #1
 800a9b4:	9a00      	ldr	r2, [sp, #0]
 800a9b6:	eba8 0202 	sub.w	r2, r8, r2
 800a9ba:	4592      	cmp	sl, r2
 800a9bc:	ddb7      	ble.n	800a92e <_dtoa_r+0xa56>
 800a9be:	4629      	mov	r1, r5
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	220a      	movs	r2, #10
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	f000 fc0b 	bl	800b1e0 <__multadd>
 800a9ca:	4605      	mov	r5, r0
 800a9cc:	e7ea      	b.n	800a9a4 <_dtoa_r+0xacc>
 800a9ce:	bf00      	nop
 800a9d0:	0800d484 	.word	0x0800d484
 800a9d4:	0800d689 	.word	0x0800d689
 800a9d8:	0800d401 	.word	0x0800d401

0800a9dc <rshift>:
 800a9dc:	6903      	ldr	r3, [r0, #16]
 800a9de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a9e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a9ea:	f100 0414 	add.w	r4, r0, #20
 800a9ee:	dd45      	ble.n	800aa7c <rshift+0xa0>
 800a9f0:	f011 011f 	ands.w	r1, r1, #31
 800a9f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a9f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a9fc:	d10c      	bne.n	800aa18 <rshift+0x3c>
 800a9fe:	f100 0710 	add.w	r7, r0, #16
 800aa02:	4629      	mov	r1, r5
 800aa04:	42b1      	cmp	r1, r6
 800aa06:	d334      	bcc.n	800aa72 <rshift+0x96>
 800aa08:	1a9b      	subs	r3, r3, r2
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	1eea      	subs	r2, r5, #3
 800aa0e:	4296      	cmp	r6, r2
 800aa10:	bf38      	it	cc
 800aa12:	2300      	movcc	r3, #0
 800aa14:	4423      	add	r3, r4
 800aa16:	e015      	b.n	800aa44 <rshift+0x68>
 800aa18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aa1c:	f1c1 0820 	rsb	r8, r1, #32
 800aa20:	40cf      	lsrs	r7, r1
 800aa22:	f105 0e04 	add.w	lr, r5, #4
 800aa26:	46a1      	mov	r9, r4
 800aa28:	4576      	cmp	r6, lr
 800aa2a:	46f4      	mov	ip, lr
 800aa2c:	d815      	bhi.n	800aa5a <rshift+0x7e>
 800aa2e:	1a9b      	subs	r3, r3, r2
 800aa30:	009a      	lsls	r2, r3, #2
 800aa32:	3a04      	subs	r2, #4
 800aa34:	3501      	adds	r5, #1
 800aa36:	42ae      	cmp	r6, r5
 800aa38:	bf38      	it	cc
 800aa3a:	2200      	movcc	r2, #0
 800aa3c:	18a3      	adds	r3, r4, r2
 800aa3e:	50a7      	str	r7, [r4, r2]
 800aa40:	b107      	cbz	r7, 800aa44 <rshift+0x68>
 800aa42:	3304      	adds	r3, #4
 800aa44:	1b1a      	subs	r2, r3, r4
 800aa46:	42a3      	cmp	r3, r4
 800aa48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa4c:	bf08      	it	eq
 800aa4e:	2300      	moveq	r3, #0
 800aa50:	6102      	str	r2, [r0, #16]
 800aa52:	bf08      	it	eq
 800aa54:	6143      	streq	r3, [r0, #20]
 800aa56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa5a:	f8dc c000 	ldr.w	ip, [ip]
 800aa5e:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa62:	ea4c 0707 	orr.w	r7, ip, r7
 800aa66:	f849 7b04 	str.w	r7, [r9], #4
 800aa6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa6e:	40cf      	lsrs	r7, r1
 800aa70:	e7da      	b.n	800aa28 <rshift+0x4c>
 800aa72:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa76:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa7a:	e7c3      	b.n	800aa04 <rshift+0x28>
 800aa7c:	4623      	mov	r3, r4
 800aa7e:	e7e1      	b.n	800aa44 <rshift+0x68>

0800aa80 <__hexdig_fun>:
 800aa80:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aa84:	2b09      	cmp	r3, #9
 800aa86:	d802      	bhi.n	800aa8e <__hexdig_fun+0xe>
 800aa88:	3820      	subs	r0, #32
 800aa8a:	b2c0      	uxtb	r0, r0
 800aa8c:	4770      	bx	lr
 800aa8e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aa92:	2b05      	cmp	r3, #5
 800aa94:	d801      	bhi.n	800aa9a <__hexdig_fun+0x1a>
 800aa96:	3847      	subs	r0, #71	; 0x47
 800aa98:	e7f7      	b.n	800aa8a <__hexdig_fun+0xa>
 800aa9a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aa9e:	2b05      	cmp	r3, #5
 800aaa0:	d801      	bhi.n	800aaa6 <__hexdig_fun+0x26>
 800aaa2:	3827      	subs	r0, #39	; 0x27
 800aaa4:	e7f1      	b.n	800aa8a <__hexdig_fun+0xa>
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	4770      	bx	lr
	...

0800aaac <__gethex>:
 800aaac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab0:	ed2d 8b02 	vpush	{d8}
 800aab4:	b089      	sub	sp, #36	; 0x24
 800aab6:	ee08 0a10 	vmov	s16, r0
 800aaba:	9304      	str	r3, [sp, #16]
 800aabc:	4bbc      	ldr	r3, [pc, #752]	; (800adb0 <__gethex+0x304>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	9301      	str	r3, [sp, #4]
 800aac2:	4618      	mov	r0, r3
 800aac4:	468b      	mov	fp, r1
 800aac6:	4690      	mov	r8, r2
 800aac8:	f7f5 fbba 	bl	8000240 <strlen>
 800aacc:	9b01      	ldr	r3, [sp, #4]
 800aace:	f8db 2000 	ldr.w	r2, [fp]
 800aad2:	4403      	add	r3, r0
 800aad4:	4682      	mov	sl, r0
 800aad6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800aada:	9305      	str	r3, [sp, #20]
 800aadc:	1c93      	adds	r3, r2, #2
 800aade:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800aae2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800aae6:	32fe      	adds	r2, #254	; 0xfe
 800aae8:	18d1      	adds	r1, r2, r3
 800aaea:	461f      	mov	r7, r3
 800aaec:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aaf0:	9100      	str	r1, [sp, #0]
 800aaf2:	2830      	cmp	r0, #48	; 0x30
 800aaf4:	d0f8      	beq.n	800aae8 <__gethex+0x3c>
 800aaf6:	f7ff ffc3 	bl	800aa80 <__hexdig_fun>
 800aafa:	4604      	mov	r4, r0
 800aafc:	2800      	cmp	r0, #0
 800aafe:	d13a      	bne.n	800ab76 <__gethex+0xca>
 800ab00:	9901      	ldr	r1, [sp, #4]
 800ab02:	4652      	mov	r2, sl
 800ab04:	4638      	mov	r0, r7
 800ab06:	f001 fd5d 	bl	800c5c4 <strncmp>
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	d168      	bne.n	800abe2 <__gethex+0x136>
 800ab10:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ab14:	eb07 060a 	add.w	r6, r7, sl
 800ab18:	f7ff ffb2 	bl	800aa80 <__hexdig_fun>
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d062      	beq.n	800abe6 <__gethex+0x13a>
 800ab20:	4633      	mov	r3, r6
 800ab22:	7818      	ldrb	r0, [r3, #0]
 800ab24:	2830      	cmp	r0, #48	; 0x30
 800ab26:	461f      	mov	r7, r3
 800ab28:	f103 0301 	add.w	r3, r3, #1
 800ab2c:	d0f9      	beq.n	800ab22 <__gethex+0x76>
 800ab2e:	f7ff ffa7 	bl	800aa80 <__hexdig_fun>
 800ab32:	2301      	movs	r3, #1
 800ab34:	fab0 f480 	clz	r4, r0
 800ab38:	0964      	lsrs	r4, r4, #5
 800ab3a:	4635      	mov	r5, r6
 800ab3c:	9300      	str	r3, [sp, #0]
 800ab3e:	463a      	mov	r2, r7
 800ab40:	4616      	mov	r6, r2
 800ab42:	3201      	adds	r2, #1
 800ab44:	7830      	ldrb	r0, [r6, #0]
 800ab46:	f7ff ff9b 	bl	800aa80 <__hexdig_fun>
 800ab4a:	2800      	cmp	r0, #0
 800ab4c:	d1f8      	bne.n	800ab40 <__gethex+0x94>
 800ab4e:	9901      	ldr	r1, [sp, #4]
 800ab50:	4652      	mov	r2, sl
 800ab52:	4630      	mov	r0, r6
 800ab54:	f001 fd36 	bl	800c5c4 <strncmp>
 800ab58:	b980      	cbnz	r0, 800ab7c <__gethex+0xd0>
 800ab5a:	b94d      	cbnz	r5, 800ab70 <__gethex+0xc4>
 800ab5c:	eb06 050a 	add.w	r5, r6, sl
 800ab60:	462a      	mov	r2, r5
 800ab62:	4616      	mov	r6, r2
 800ab64:	3201      	adds	r2, #1
 800ab66:	7830      	ldrb	r0, [r6, #0]
 800ab68:	f7ff ff8a 	bl	800aa80 <__hexdig_fun>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	d1f8      	bne.n	800ab62 <__gethex+0xb6>
 800ab70:	1bad      	subs	r5, r5, r6
 800ab72:	00ad      	lsls	r5, r5, #2
 800ab74:	e004      	b.n	800ab80 <__gethex+0xd4>
 800ab76:	2400      	movs	r4, #0
 800ab78:	4625      	mov	r5, r4
 800ab7a:	e7e0      	b.n	800ab3e <__gethex+0x92>
 800ab7c:	2d00      	cmp	r5, #0
 800ab7e:	d1f7      	bne.n	800ab70 <__gethex+0xc4>
 800ab80:	7833      	ldrb	r3, [r6, #0]
 800ab82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ab86:	2b50      	cmp	r3, #80	; 0x50
 800ab88:	d13b      	bne.n	800ac02 <__gethex+0x156>
 800ab8a:	7873      	ldrb	r3, [r6, #1]
 800ab8c:	2b2b      	cmp	r3, #43	; 0x2b
 800ab8e:	d02c      	beq.n	800abea <__gethex+0x13e>
 800ab90:	2b2d      	cmp	r3, #45	; 0x2d
 800ab92:	d02e      	beq.n	800abf2 <__gethex+0x146>
 800ab94:	1c71      	adds	r1, r6, #1
 800ab96:	f04f 0900 	mov.w	r9, #0
 800ab9a:	7808      	ldrb	r0, [r1, #0]
 800ab9c:	f7ff ff70 	bl	800aa80 <__hexdig_fun>
 800aba0:	1e43      	subs	r3, r0, #1
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	2b18      	cmp	r3, #24
 800aba6:	d82c      	bhi.n	800ac02 <__gethex+0x156>
 800aba8:	f1a0 0210 	sub.w	r2, r0, #16
 800abac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800abb0:	f7ff ff66 	bl	800aa80 <__hexdig_fun>
 800abb4:	1e43      	subs	r3, r0, #1
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	2b18      	cmp	r3, #24
 800abba:	d91d      	bls.n	800abf8 <__gethex+0x14c>
 800abbc:	f1b9 0f00 	cmp.w	r9, #0
 800abc0:	d000      	beq.n	800abc4 <__gethex+0x118>
 800abc2:	4252      	negs	r2, r2
 800abc4:	4415      	add	r5, r2
 800abc6:	f8cb 1000 	str.w	r1, [fp]
 800abca:	b1e4      	cbz	r4, 800ac06 <__gethex+0x15a>
 800abcc:	9b00      	ldr	r3, [sp, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	bf14      	ite	ne
 800abd2:	2700      	movne	r7, #0
 800abd4:	2706      	moveq	r7, #6
 800abd6:	4638      	mov	r0, r7
 800abd8:	b009      	add	sp, #36	; 0x24
 800abda:	ecbd 8b02 	vpop	{d8}
 800abde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe2:	463e      	mov	r6, r7
 800abe4:	4625      	mov	r5, r4
 800abe6:	2401      	movs	r4, #1
 800abe8:	e7ca      	b.n	800ab80 <__gethex+0xd4>
 800abea:	f04f 0900 	mov.w	r9, #0
 800abee:	1cb1      	adds	r1, r6, #2
 800abf0:	e7d3      	b.n	800ab9a <__gethex+0xee>
 800abf2:	f04f 0901 	mov.w	r9, #1
 800abf6:	e7fa      	b.n	800abee <__gethex+0x142>
 800abf8:	230a      	movs	r3, #10
 800abfa:	fb03 0202 	mla	r2, r3, r2, r0
 800abfe:	3a10      	subs	r2, #16
 800ac00:	e7d4      	b.n	800abac <__gethex+0x100>
 800ac02:	4631      	mov	r1, r6
 800ac04:	e7df      	b.n	800abc6 <__gethex+0x11a>
 800ac06:	1bf3      	subs	r3, r6, r7
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	4621      	mov	r1, r4
 800ac0c:	2b07      	cmp	r3, #7
 800ac0e:	dc0b      	bgt.n	800ac28 <__gethex+0x17c>
 800ac10:	ee18 0a10 	vmov	r0, s16
 800ac14:	f000 fa82 	bl	800b11c <_Balloc>
 800ac18:	4604      	mov	r4, r0
 800ac1a:	b940      	cbnz	r0, 800ac2e <__gethex+0x182>
 800ac1c:	4b65      	ldr	r3, [pc, #404]	; (800adb4 <__gethex+0x308>)
 800ac1e:	4602      	mov	r2, r0
 800ac20:	21de      	movs	r1, #222	; 0xde
 800ac22:	4865      	ldr	r0, [pc, #404]	; (800adb8 <__gethex+0x30c>)
 800ac24:	f001 fda6 	bl	800c774 <__assert_func>
 800ac28:	3101      	adds	r1, #1
 800ac2a:	105b      	asrs	r3, r3, #1
 800ac2c:	e7ee      	b.n	800ac0c <__gethex+0x160>
 800ac2e:	f100 0914 	add.w	r9, r0, #20
 800ac32:	f04f 0b00 	mov.w	fp, #0
 800ac36:	f1ca 0301 	rsb	r3, sl, #1
 800ac3a:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac3e:	f8cd b000 	str.w	fp, [sp]
 800ac42:	9306      	str	r3, [sp, #24]
 800ac44:	42b7      	cmp	r7, r6
 800ac46:	d340      	bcc.n	800acca <__gethex+0x21e>
 800ac48:	9802      	ldr	r0, [sp, #8]
 800ac4a:	9b00      	ldr	r3, [sp, #0]
 800ac4c:	f840 3b04 	str.w	r3, [r0], #4
 800ac50:	eba0 0009 	sub.w	r0, r0, r9
 800ac54:	1080      	asrs	r0, r0, #2
 800ac56:	0146      	lsls	r6, r0, #5
 800ac58:	6120      	str	r0, [r4, #16]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f000 fb54 	bl	800b308 <__hi0bits>
 800ac60:	1a30      	subs	r0, r6, r0
 800ac62:	f8d8 6000 	ldr.w	r6, [r8]
 800ac66:	42b0      	cmp	r0, r6
 800ac68:	dd63      	ble.n	800ad32 <__gethex+0x286>
 800ac6a:	1b87      	subs	r7, r0, r6
 800ac6c:	4639      	mov	r1, r7
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f000 feef 	bl	800ba52 <__any_on>
 800ac74:	4682      	mov	sl, r0
 800ac76:	b1a8      	cbz	r0, 800aca4 <__gethex+0x1f8>
 800ac78:	1e7b      	subs	r3, r7, #1
 800ac7a:	1159      	asrs	r1, r3, #5
 800ac7c:	f003 021f 	and.w	r2, r3, #31
 800ac80:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ac84:	f04f 0a01 	mov.w	sl, #1
 800ac88:	fa0a f202 	lsl.w	r2, sl, r2
 800ac8c:	420a      	tst	r2, r1
 800ac8e:	d009      	beq.n	800aca4 <__gethex+0x1f8>
 800ac90:	4553      	cmp	r3, sl
 800ac92:	dd05      	ble.n	800aca0 <__gethex+0x1f4>
 800ac94:	1eb9      	subs	r1, r7, #2
 800ac96:	4620      	mov	r0, r4
 800ac98:	f000 fedb 	bl	800ba52 <__any_on>
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	d145      	bne.n	800ad2c <__gethex+0x280>
 800aca0:	f04f 0a02 	mov.w	sl, #2
 800aca4:	4639      	mov	r1, r7
 800aca6:	4620      	mov	r0, r4
 800aca8:	f7ff fe98 	bl	800a9dc <rshift>
 800acac:	443d      	add	r5, r7
 800acae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800acb2:	42ab      	cmp	r3, r5
 800acb4:	da4c      	bge.n	800ad50 <__gethex+0x2a4>
 800acb6:	ee18 0a10 	vmov	r0, s16
 800acba:	4621      	mov	r1, r4
 800acbc:	f000 fa6e 	bl	800b19c <_Bfree>
 800acc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800acc2:	2300      	movs	r3, #0
 800acc4:	6013      	str	r3, [r2, #0]
 800acc6:	27a3      	movs	r7, #163	; 0xa3
 800acc8:	e785      	b.n	800abd6 <__gethex+0x12a>
 800acca:	1e73      	subs	r3, r6, #1
 800accc:	9a05      	ldr	r2, [sp, #20]
 800acce:	9303      	str	r3, [sp, #12]
 800acd0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d019      	beq.n	800ad0c <__gethex+0x260>
 800acd8:	f1bb 0f20 	cmp.w	fp, #32
 800acdc:	d107      	bne.n	800acee <__gethex+0x242>
 800acde:	9b02      	ldr	r3, [sp, #8]
 800ace0:	9a00      	ldr	r2, [sp, #0]
 800ace2:	f843 2b04 	str.w	r2, [r3], #4
 800ace6:	9302      	str	r3, [sp, #8]
 800ace8:	2300      	movs	r3, #0
 800acea:	9300      	str	r3, [sp, #0]
 800acec:	469b      	mov	fp, r3
 800acee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800acf2:	f7ff fec5 	bl	800aa80 <__hexdig_fun>
 800acf6:	9b00      	ldr	r3, [sp, #0]
 800acf8:	f000 000f 	and.w	r0, r0, #15
 800acfc:	fa00 f00b 	lsl.w	r0, r0, fp
 800ad00:	4303      	orrs	r3, r0
 800ad02:	9300      	str	r3, [sp, #0]
 800ad04:	f10b 0b04 	add.w	fp, fp, #4
 800ad08:	9b03      	ldr	r3, [sp, #12]
 800ad0a:	e00d      	b.n	800ad28 <__gethex+0x27c>
 800ad0c:	9b03      	ldr	r3, [sp, #12]
 800ad0e:	9a06      	ldr	r2, [sp, #24]
 800ad10:	4413      	add	r3, r2
 800ad12:	42bb      	cmp	r3, r7
 800ad14:	d3e0      	bcc.n	800acd8 <__gethex+0x22c>
 800ad16:	4618      	mov	r0, r3
 800ad18:	9901      	ldr	r1, [sp, #4]
 800ad1a:	9307      	str	r3, [sp, #28]
 800ad1c:	4652      	mov	r2, sl
 800ad1e:	f001 fc51 	bl	800c5c4 <strncmp>
 800ad22:	9b07      	ldr	r3, [sp, #28]
 800ad24:	2800      	cmp	r0, #0
 800ad26:	d1d7      	bne.n	800acd8 <__gethex+0x22c>
 800ad28:	461e      	mov	r6, r3
 800ad2a:	e78b      	b.n	800ac44 <__gethex+0x198>
 800ad2c:	f04f 0a03 	mov.w	sl, #3
 800ad30:	e7b8      	b.n	800aca4 <__gethex+0x1f8>
 800ad32:	da0a      	bge.n	800ad4a <__gethex+0x29e>
 800ad34:	1a37      	subs	r7, r6, r0
 800ad36:	4621      	mov	r1, r4
 800ad38:	ee18 0a10 	vmov	r0, s16
 800ad3c:	463a      	mov	r2, r7
 800ad3e:	f000 fc49 	bl	800b5d4 <__lshift>
 800ad42:	1bed      	subs	r5, r5, r7
 800ad44:	4604      	mov	r4, r0
 800ad46:	f100 0914 	add.w	r9, r0, #20
 800ad4a:	f04f 0a00 	mov.w	sl, #0
 800ad4e:	e7ae      	b.n	800acae <__gethex+0x202>
 800ad50:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ad54:	42a8      	cmp	r0, r5
 800ad56:	dd72      	ble.n	800ae3e <__gethex+0x392>
 800ad58:	1b45      	subs	r5, r0, r5
 800ad5a:	42ae      	cmp	r6, r5
 800ad5c:	dc36      	bgt.n	800adcc <__gethex+0x320>
 800ad5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad62:	2b02      	cmp	r3, #2
 800ad64:	d02a      	beq.n	800adbc <__gethex+0x310>
 800ad66:	2b03      	cmp	r3, #3
 800ad68:	d02c      	beq.n	800adc4 <__gethex+0x318>
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d115      	bne.n	800ad9a <__gethex+0x2ee>
 800ad6e:	42ae      	cmp	r6, r5
 800ad70:	d113      	bne.n	800ad9a <__gethex+0x2ee>
 800ad72:	2e01      	cmp	r6, #1
 800ad74:	d10b      	bne.n	800ad8e <__gethex+0x2e2>
 800ad76:	9a04      	ldr	r2, [sp, #16]
 800ad78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ad7c:	6013      	str	r3, [r2, #0]
 800ad7e:	2301      	movs	r3, #1
 800ad80:	6123      	str	r3, [r4, #16]
 800ad82:	f8c9 3000 	str.w	r3, [r9]
 800ad86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad88:	2762      	movs	r7, #98	; 0x62
 800ad8a:	601c      	str	r4, [r3, #0]
 800ad8c:	e723      	b.n	800abd6 <__gethex+0x12a>
 800ad8e:	1e71      	subs	r1, r6, #1
 800ad90:	4620      	mov	r0, r4
 800ad92:	f000 fe5e 	bl	800ba52 <__any_on>
 800ad96:	2800      	cmp	r0, #0
 800ad98:	d1ed      	bne.n	800ad76 <__gethex+0x2ca>
 800ad9a:	ee18 0a10 	vmov	r0, s16
 800ad9e:	4621      	mov	r1, r4
 800ada0:	f000 f9fc 	bl	800b19c <_Bfree>
 800ada4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ada6:	2300      	movs	r3, #0
 800ada8:	6013      	str	r3, [r2, #0]
 800adaa:	2750      	movs	r7, #80	; 0x50
 800adac:	e713      	b.n	800abd6 <__gethex+0x12a>
 800adae:	bf00      	nop
 800adb0:	0800d500 	.word	0x0800d500
 800adb4:	0800d484 	.word	0x0800d484
 800adb8:	0800d495 	.word	0x0800d495
 800adbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1eb      	bne.n	800ad9a <__gethex+0x2ee>
 800adc2:	e7d8      	b.n	800ad76 <__gethex+0x2ca>
 800adc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1d5      	bne.n	800ad76 <__gethex+0x2ca>
 800adca:	e7e6      	b.n	800ad9a <__gethex+0x2ee>
 800adcc:	1e6f      	subs	r7, r5, #1
 800adce:	f1ba 0f00 	cmp.w	sl, #0
 800add2:	d131      	bne.n	800ae38 <__gethex+0x38c>
 800add4:	b127      	cbz	r7, 800ade0 <__gethex+0x334>
 800add6:	4639      	mov	r1, r7
 800add8:	4620      	mov	r0, r4
 800adda:	f000 fe3a 	bl	800ba52 <__any_on>
 800adde:	4682      	mov	sl, r0
 800ade0:	117b      	asrs	r3, r7, #5
 800ade2:	2101      	movs	r1, #1
 800ade4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ade8:	f007 071f 	and.w	r7, r7, #31
 800adec:	fa01 f707 	lsl.w	r7, r1, r7
 800adf0:	421f      	tst	r7, r3
 800adf2:	4629      	mov	r1, r5
 800adf4:	4620      	mov	r0, r4
 800adf6:	bf18      	it	ne
 800adf8:	f04a 0a02 	orrne.w	sl, sl, #2
 800adfc:	1b76      	subs	r6, r6, r5
 800adfe:	f7ff fded 	bl	800a9dc <rshift>
 800ae02:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ae06:	2702      	movs	r7, #2
 800ae08:	f1ba 0f00 	cmp.w	sl, #0
 800ae0c:	d048      	beq.n	800aea0 <__gethex+0x3f4>
 800ae0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d015      	beq.n	800ae42 <__gethex+0x396>
 800ae16:	2b03      	cmp	r3, #3
 800ae18:	d017      	beq.n	800ae4a <__gethex+0x39e>
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d109      	bne.n	800ae32 <__gethex+0x386>
 800ae1e:	f01a 0f02 	tst.w	sl, #2
 800ae22:	d006      	beq.n	800ae32 <__gethex+0x386>
 800ae24:	f8d9 0000 	ldr.w	r0, [r9]
 800ae28:	ea4a 0a00 	orr.w	sl, sl, r0
 800ae2c:	f01a 0f01 	tst.w	sl, #1
 800ae30:	d10e      	bne.n	800ae50 <__gethex+0x3a4>
 800ae32:	f047 0710 	orr.w	r7, r7, #16
 800ae36:	e033      	b.n	800aea0 <__gethex+0x3f4>
 800ae38:	f04f 0a01 	mov.w	sl, #1
 800ae3c:	e7d0      	b.n	800ade0 <__gethex+0x334>
 800ae3e:	2701      	movs	r7, #1
 800ae40:	e7e2      	b.n	800ae08 <__gethex+0x35c>
 800ae42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae44:	f1c3 0301 	rsb	r3, r3, #1
 800ae48:	9315      	str	r3, [sp, #84]	; 0x54
 800ae4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d0f0      	beq.n	800ae32 <__gethex+0x386>
 800ae50:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ae54:	f104 0314 	add.w	r3, r4, #20
 800ae58:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ae5c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ae60:	f04f 0c00 	mov.w	ip, #0
 800ae64:	4618      	mov	r0, r3
 800ae66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae6a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800ae6e:	d01c      	beq.n	800aeaa <__gethex+0x3fe>
 800ae70:	3201      	adds	r2, #1
 800ae72:	6002      	str	r2, [r0, #0]
 800ae74:	2f02      	cmp	r7, #2
 800ae76:	f104 0314 	add.w	r3, r4, #20
 800ae7a:	d13f      	bne.n	800aefc <__gethex+0x450>
 800ae7c:	f8d8 2000 	ldr.w	r2, [r8]
 800ae80:	3a01      	subs	r2, #1
 800ae82:	42b2      	cmp	r2, r6
 800ae84:	d10a      	bne.n	800ae9c <__gethex+0x3f0>
 800ae86:	1171      	asrs	r1, r6, #5
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae8e:	f006 061f 	and.w	r6, r6, #31
 800ae92:	fa02 f606 	lsl.w	r6, r2, r6
 800ae96:	421e      	tst	r6, r3
 800ae98:	bf18      	it	ne
 800ae9a:	4617      	movne	r7, r2
 800ae9c:	f047 0720 	orr.w	r7, r7, #32
 800aea0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aea2:	601c      	str	r4, [r3, #0]
 800aea4:	9b04      	ldr	r3, [sp, #16]
 800aea6:	601d      	str	r5, [r3, #0]
 800aea8:	e695      	b.n	800abd6 <__gethex+0x12a>
 800aeaa:	4299      	cmp	r1, r3
 800aeac:	f843 cc04 	str.w	ip, [r3, #-4]
 800aeb0:	d8d8      	bhi.n	800ae64 <__gethex+0x3b8>
 800aeb2:	68a3      	ldr	r3, [r4, #8]
 800aeb4:	459b      	cmp	fp, r3
 800aeb6:	db19      	blt.n	800aeec <__gethex+0x440>
 800aeb8:	6861      	ldr	r1, [r4, #4]
 800aeba:	ee18 0a10 	vmov	r0, s16
 800aebe:	3101      	adds	r1, #1
 800aec0:	f000 f92c 	bl	800b11c <_Balloc>
 800aec4:	4681      	mov	r9, r0
 800aec6:	b918      	cbnz	r0, 800aed0 <__gethex+0x424>
 800aec8:	4b1a      	ldr	r3, [pc, #104]	; (800af34 <__gethex+0x488>)
 800aeca:	4602      	mov	r2, r0
 800aecc:	2184      	movs	r1, #132	; 0x84
 800aece:	e6a8      	b.n	800ac22 <__gethex+0x176>
 800aed0:	6922      	ldr	r2, [r4, #16]
 800aed2:	3202      	adds	r2, #2
 800aed4:	f104 010c 	add.w	r1, r4, #12
 800aed8:	0092      	lsls	r2, r2, #2
 800aeda:	300c      	adds	r0, #12
 800aedc:	f7fd f9dc 	bl	8008298 <memcpy>
 800aee0:	4621      	mov	r1, r4
 800aee2:	ee18 0a10 	vmov	r0, s16
 800aee6:	f000 f959 	bl	800b19c <_Bfree>
 800aeea:	464c      	mov	r4, r9
 800aeec:	6923      	ldr	r3, [r4, #16]
 800aeee:	1c5a      	adds	r2, r3, #1
 800aef0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aef4:	6122      	str	r2, [r4, #16]
 800aef6:	2201      	movs	r2, #1
 800aef8:	615a      	str	r2, [r3, #20]
 800aefa:	e7bb      	b.n	800ae74 <__gethex+0x3c8>
 800aefc:	6922      	ldr	r2, [r4, #16]
 800aefe:	455a      	cmp	r2, fp
 800af00:	dd0b      	ble.n	800af1a <__gethex+0x46e>
 800af02:	2101      	movs	r1, #1
 800af04:	4620      	mov	r0, r4
 800af06:	f7ff fd69 	bl	800a9dc <rshift>
 800af0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af0e:	3501      	adds	r5, #1
 800af10:	42ab      	cmp	r3, r5
 800af12:	f6ff aed0 	blt.w	800acb6 <__gethex+0x20a>
 800af16:	2701      	movs	r7, #1
 800af18:	e7c0      	b.n	800ae9c <__gethex+0x3f0>
 800af1a:	f016 061f 	ands.w	r6, r6, #31
 800af1e:	d0fa      	beq.n	800af16 <__gethex+0x46a>
 800af20:	449a      	add	sl, r3
 800af22:	f1c6 0620 	rsb	r6, r6, #32
 800af26:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800af2a:	f000 f9ed 	bl	800b308 <__hi0bits>
 800af2e:	42b0      	cmp	r0, r6
 800af30:	dbe7      	blt.n	800af02 <__gethex+0x456>
 800af32:	e7f0      	b.n	800af16 <__gethex+0x46a>
 800af34:	0800d484 	.word	0x0800d484

0800af38 <L_shift>:
 800af38:	f1c2 0208 	rsb	r2, r2, #8
 800af3c:	0092      	lsls	r2, r2, #2
 800af3e:	b570      	push	{r4, r5, r6, lr}
 800af40:	f1c2 0620 	rsb	r6, r2, #32
 800af44:	6843      	ldr	r3, [r0, #4]
 800af46:	6804      	ldr	r4, [r0, #0]
 800af48:	fa03 f506 	lsl.w	r5, r3, r6
 800af4c:	432c      	orrs	r4, r5
 800af4e:	40d3      	lsrs	r3, r2
 800af50:	6004      	str	r4, [r0, #0]
 800af52:	f840 3f04 	str.w	r3, [r0, #4]!
 800af56:	4288      	cmp	r0, r1
 800af58:	d3f4      	bcc.n	800af44 <L_shift+0xc>
 800af5a:	bd70      	pop	{r4, r5, r6, pc}

0800af5c <__match>:
 800af5c:	b530      	push	{r4, r5, lr}
 800af5e:	6803      	ldr	r3, [r0, #0]
 800af60:	3301      	adds	r3, #1
 800af62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af66:	b914      	cbnz	r4, 800af6e <__match+0x12>
 800af68:	6003      	str	r3, [r0, #0]
 800af6a:	2001      	movs	r0, #1
 800af6c:	bd30      	pop	{r4, r5, pc}
 800af6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af72:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800af76:	2d19      	cmp	r5, #25
 800af78:	bf98      	it	ls
 800af7a:	3220      	addls	r2, #32
 800af7c:	42a2      	cmp	r2, r4
 800af7e:	d0f0      	beq.n	800af62 <__match+0x6>
 800af80:	2000      	movs	r0, #0
 800af82:	e7f3      	b.n	800af6c <__match+0x10>

0800af84 <__hexnan>:
 800af84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af88:	680b      	ldr	r3, [r1, #0]
 800af8a:	6801      	ldr	r1, [r0, #0]
 800af8c:	115e      	asrs	r6, r3, #5
 800af8e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800af92:	f013 031f 	ands.w	r3, r3, #31
 800af96:	b087      	sub	sp, #28
 800af98:	bf18      	it	ne
 800af9a:	3604      	addne	r6, #4
 800af9c:	2500      	movs	r5, #0
 800af9e:	1f37      	subs	r7, r6, #4
 800afa0:	4682      	mov	sl, r0
 800afa2:	4690      	mov	r8, r2
 800afa4:	9301      	str	r3, [sp, #4]
 800afa6:	f846 5c04 	str.w	r5, [r6, #-4]
 800afaa:	46b9      	mov	r9, r7
 800afac:	463c      	mov	r4, r7
 800afae:	9502      	str	r5, [sp, #8]
 800afb0:	46ab      	mov	fp, r5
 800afb2:	784a      	ldrb	r2, [r1, #1]
 800afb4:	1c4b      	adds	r3, r1, #1
 800afb6:	9303      	str	r3, [sp, #12]
 800afb8:	b342      	cbz	r2, 800b00c <__hexnan+0x88>
 800afba:	4610      	mov	r0, r2
 800afbc:	9105      	str	r1, [sp, #20]
 800afbe:	9204      	str	r2, [sp, #16]
 800afc0:	f7ff fd5e 	bl	800aa80 <__hexdig_fun>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	d14f      	bne.n	800b068 <__hexnan+0xe4>
 800afc8:	9a04      	ldr	r2, [sp, #16]
 800afca:	9905      	ldr	r1, [sp, #20]
 800afcc:	2a20      	cmp	r2, #32
 800afce:	d818      	bhi.n	800b002 <__hexnan+0x7e>
 800afd0:	9b02      	ldr	r3, [sp, #8]
 800afd2:	459b      	cmp	fp, r3
 800afd4:	dd13      	ble.n	800affe <__hexnan+0x7a>
 800afd6:	454c      	cmp	r4, r9
 800afd8:	d206      	bcs.n	800afe8 <__hexnan+0x64>
 800afda:	2d07      	cmp	r5, #7
 800afdc:	dc04      	bgt.n	800afe8 <__hexnan+0x64>
 800afde:	462a      	mov	r2, r5
 800afe0:	4649      	mov	r1, r9
 800afe2:	4620      	mov	r0, r4
 800afe4:	f7ff ffa8 	bl	800af38 <L_shift>
 800afe8:	4544      	cmp	r4, r8
 800afea:	d950      	bls.n	800b08e <__hexnan+0x10a>
 800afec:	2300      	movs	r3, #0
 800afee:	f1a4 0904 	sub.w	r9, r4, #4
 800aff2:	f844 3c04 	str.w	r3, [r4, #-4]
 800aff6:	f8cd b008 	str.w	fp, [sp, #8]
 800affa:	464c      	mov	r4, r9
 800affc:	461d      	mov	r5, r3
 800affe:	9903      	ldr	r1, [sp, #12]
 800b000:	e7d7      	b.n	800afb2 <__hexnan+0x2e>
 800b002:	2a29      	cmp	r2, #41	; 0x29
 800b004:	d156      	bne.n	800b0b4 <__hexnan+0x130>
 800b006:	3102      	adds	r1, #2
 800b008:	f8ca 1000 	str.w	r1, [sl]
 800b00c:	f1bb 0f00 	cmp.w	fp, #0
 800b010:	d050      	beq.n	800b0b4 <__hexnan+0x130>
 800b012:	454c      	cmp	r4, r9
 800b014:	d206      	bcs.n	800b024 <__hexnan+0xa0>
 800b016:	2d07      	cmp	r5, #7
 800b018:	dc04      	bgt.n	800b024 <__hexnan+0xa0>
 800b01a:	462a      	mov	r2, r5
 800b01c:	4649      	mov	r1, r9
 800b01e:	4620      	mov	r0, r4
 800b020:	f7ff ff8a 	bl	800af38 <L_shift>
 800b024:	4544      	cmp	r4, r8
 800b026:	d934      	bls.n	800b092 <__hexnan+0x10e>
 800b028:	f1a8 0204 	sub.w	r2, r8, #4
 800b02c:	4623      	mov	r3, r4
 800b02e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b032:	f842 1f04 	str.w	r1, [r2, #4]!
 800b036:	429f      	cmp	r7, r3
 800b038:	d2f9      	bcs.n	800b02e <__hexnan+0xaa>
 800b03a:	1b3b      	subs	r3, r7, r4
 800b03c:	f023 0303 	bic.w	r3, r3, #3
 800b040:	3304      	adds	r3, #4
 800b042:	3401      	adds	r4, #1
 800b044:	3e03      	subs	r6, #3
 800b046:	42b4      	cmp	r4, r6
 800b048:	bf88      	it	hi
 800b04a:	2304      	movhi	r3, #4
 800b04c:	4443      	add	r3, r8
 800b04e:	2200      	movs	r2, #0
 800b050:	f843 2b04 	str.w	r2, [r3], #4
 800b054:	429f      	cmp	r7, r3
 800b056:	d2fb      	bcs.n	800b050 <__hexnan+0xcc>
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	b91b      	cbnz	r3, 800b064 <__hexnan+0xe0>
 800b05c:	4547      	cmp	r7, r8
 800b05e:	d127      	bne.n	800b0b0 <__hexnan+0x12c>
 800b060:	2301      	movs	r3, #1
 800b062:	603b      	str	r3, [r7, #0]
 800b064:	2005      	movs	r0, #5
 800b066:	e026      	b.n	800b0b6 <__hexnan+0x132>
 800b068:	3501      	adds	r5, #1
 800b06a:	2d08      	cmp	r5, #8
 800b06c:	f10b 0b01 	add.w	fp, fp, #1
 800b070:	dd06      	ble.n	800b080 <__hexnan+0xfc>
 800b072:	4544      	cmp	r4, r8
 800b074:	d9c3      	bls.n	800affe <__hexnan+0x7a>
 800b076:	2300      	movs	r3, #0
 800b078:	f844 3c04 	str.w	r3, [r4, #-4]
 800b07c:	2501      	movs	r5, #1
 800b07e:	3c04      	subs	r4, #4
 800b080:	6822      	ldr	r2, [r4, #0]
 800b082:	f000 000f 	and.w	r0, r0, #15
 800b086:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b08a:	6022      	str	r2, [r4, #0]
 800b08c:	e7b7      	b.n	800affe <__hexnan+0x7a>
 800b08e:	2508      	movs	r5, #8
 800b090:	e7b5      	b.n	800affe <__hexnan+0x7a>
 800b092:	9b01      	ldr	r3, [sp, #4]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d0df      	beq.n	800b058 <__hexnan+0xd4>
 800b098:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b09c:	f1c3 0320 	rsb	r3, r3, #32
 800b0a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b0a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b0a8:	401a      	ands	r2, r3
 800b0aa:	f846 2c04 	str.w	r2, [r6, #-4]
 800b0ae:	e7d3      	b.n	800b058 <__hexnan+0xd4>
 800b0b0:	3f04      	subs	r7, #4
 800b0b2:	e7d1      	b.n	800b058 <__hexnan+0xd4>
 800b0b4:	2004      	movs	r0, #4
 800b0b6:	b007      	add	sp, #28
 800b0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b0bc <_localeconv_r>:
 800b0bc:	4800      	ldr	r0, [pc, #0]	; (800b0c0 <_localeconv_r+0x4>)
 800b0be:	4770      	bx	lr
 800b0c0:	200001b4 	.word	0x200001b4

0800b0c4 <_lseek_r>:
 800b0c4:	b538      	push	{r3, r4, r5, lr}
 800b0c6:	4d07      	ldr	r5, [pc, #28]	; (800b0e4 <_lseek_r+0x20>)
 800b0c8:	4604      	mov	r4, r0
 800b0ca:	4608      	mov	r0, r1
 800b0cc:	4611      	mov	r1, r2
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	602a      	str	r2, [r5, #0]
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	f7f7 fda8 	bl	8002c28 <_lseek>
 800b0d8:	1c43      	adds	r3, r0, #1
 800b0da:	d102      	bne.n	800b0e2 <_lseek_r+0x1e>
 800b0dc:	682b      	ldr	r3, [r5, #0]
 800b0de:	b103      	cbz	r3, 800b0e2 <_lseek_r+0x1e>
 800b0e0:	6023      	str	r3, [r4, #0]
 800b0e2:	bd38      	pop	{r3, r4, r5, pc}
 800b0e4:	2000084c 	.word	0x2000084c

0800b0e8 <malloc>:
 800b0e8:	4b02      	ldr	r3, [pc, #8]	; (800b0f4 <malloc+0xc>)
 800b0ea:	4601      	mov	r1, r0
 800b0ec:	6818      	ldr	r0, [r3, #0]
 800b0ee:	f000 bd31 	b.w	800bb54 <_malloc_r>
 800b0f2:	bf00      	nop
 800b0f4:	2000005c 	.word	0x2000005c

0800b0f8 <__ascii_mbtowc>:
 800b0f8:	b082      	sub	sp, #8
 800b0fa:	b901      	cbnz	r1, 800b0fe <__ascii_mbtowc+0x6>
 800b0fc:	a901      	add	r1, sp, #4
 800b0fe:	b142      	cbz	r2, 800b112 <__ascii_mbtowc+0x1a>
 800b100:	b14b      	cbz	r3, 800b116 <__ascii_mbtowc+0x1e>
 800b102:	7813      	ldrb	r3, [r2, #0]
 800b104:	600b      	str	r3, [r1, #0]
 800b106:	7812      	ldrb	r2, [r2, #0]
 800b108:	1e10      	subs	r0, r2, #0
 800b10a:	bf18      	it	ne
 800b10c:	2001      	movne	r0, #1
 800b10e:	b002      	add	sp, #8
 800b110:	4770      	bx	lr
 800b112:	4610      	mov	r0, r2
 800b114:	e7fb      	b.n	800b10e <__ascii_mbtowc+0x16>
 800b116:	f06f 0001 	mvn.w	r0, #1
 800b11a:	e7f8      	b.n	800b10e <__ascii_mbtowc+0x16>

0800b11c <_Balloc>:
 800b11c:	b570      	push	{r4, r5, r6, lr}
 800b11e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b120:	4604      	mov	r4, r0
 800b122:	460d      	mov	r5, r1
 800b124:	b976      	cbnz	r6, 800b144 <_Balloc+0x28>
 800b126:	2010      	movs	r0, #16
 800b128:	f7ff ffde 	bl	800b0e8 <malloc>
 800b12c:	4602      	mov	r2, r0
 800b12e:	6260      	str	r0, [r4, #36]	; 0x24
 800b130:	b920      	cbnz	r0, 800b13c <_Balloc+0x20>
 800b132:	4b18      	ldr	r3, [pc, #96]	; (800b194 <_Balloc+0x78>)
 800b134:	4818      	ldr	r0, [pc, #96]	; (800b198 <_Balloc+0x7c>)
 800b136:	2166      	movs	r1, #102	; 0x66
 800b138:	f001 fb1c 	bl	800c774 <__assert_func>
 800b13c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b140:	6006      	str	r6, [r0, #0]
 800b142:	60c6      	str	r6, [r0, #12]
 800b144:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b146:	68f3      	ldr	r3, [r6, #12]
 800b148:	b183      	cbz	r3, 800b16c <_Balloc+0x50>
 800b14a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b14c:	68db      	ldr	r3, [r3, #12]
 800b14e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b152:	b9b8      	cbnz	r0, 800b184 <_Balloc+0x68>
 800b154:	2101      	movs	r1, #1
 800b156:	fa01 f605 	lsl.w	r6, r1, r5
 800b15a:	1d72      	adds	r2, r6, #5
 800b15c:	0092      	lsls	r2, r2, #2
 800b15e:	4620      	mov	r0, r4
 800b160:	f000 fc98 	bl	800ba94 <_calloc_r>
 800b164:	b160      	cbz	r0, 800b180 <_Balloc+0x64>
 800b166:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b16a:	e00e      	b.n	800b18a <_Balloc+0x6e>
 800b16c:	2221      	movs	r2, #33	; 0x21
 800b16e:	2104      	movs	r1, #4
 800b170:	4620      	mov	r0, r4
 800b172:	f000 fc8f 	bl	800ba94 <_calloc_r>
 800b176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b178:	60f0      	str	r0, [r6, #12]
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d1e4      	bne.n	800b14a <_Balloc+0x2e>
 800b180:	2000      	movs	r0, #0
 800b182:	bd70      	pop	{r4, r5, r6, pc}
 800b184:	6802      	ldr	r2, [r0, #0]
 800b186:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b18a:	2300      	movs	r3, #0
 800b18c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b190:	e7f7      	b.n	800b182 <_Balloc+0x66>
 800b192:	bf00      	nop
 800b194:	0800d40e 	.word	0x0800d40e
 800b198:	0800d514 	.word	0x0800d514

0800b19c <_Bfree>:
 800b19c:	b570      	push	{r4, r5, r6, lr}
 800b19e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1a0:	4605      	mov	r5, r0
 800b1a2:	460c      	mov	r4, r1
 800b1a4:	b976      	cbnz	r6, 800b1c4 <_Bfree+0x28>
 800b1a6:	2010      	movs	r0, #16
 800b1a8:	f7ff ff9e 	bl	800b0e8 <malloc>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	6268      	str	r0, [r5, #36]	; 0x24
 800b1b0:	b920      	cbnz	r0, 800b1bc <_Bfree+0x20>
 800b1b2:	4b09      	ldr	r3, [pc, #36]	; (800b1d8 <_Bfree+0x3c>)
 800b1b4:	4809      	ldr	r0, [pc, #36]	; (800b1dc <_Bfree+0x40>)
 800b1b6:	218a      	movs	r1, #138	; 0x8a
 800b1b8:	f001 fadc 	bl	800c774 <__assert_func>
 800b1bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1c0:	6006      	str	r6, [r0, #0]
 800b1c2:	60c6      	str	r6, [r0, #12]
 800b1c4:	b13c      	cbz	r4, 800b1d6 <_Bfree+0x3a>
 800b1c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b1c8:	6862      	ldr	r2, [r4, #4]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1d0:	6021      	str	r1, [r4, #0]
 800b1d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b1d6:	bd70      	pop	{r4, r5, r6, pc}
 800b1d8:	0800d40e 	.word	0x0800d40e
 800b1dc:	0800d514 	.word	0x0800d514

0800b1e0 <__multadd>:
 800b1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1e4:	690e      	ldr	r6, [r1, #16]
 800b1e6:	4607      	mov	r7, r0
 800b1e8:	4698      	mov	r8, r3
 800b1ea:	460c      	mov	r4, r1
 800b1ec:	f101 0014 	add.w	r0, r1, #20
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	6805      	ldr	r5, [r0, #0]
 800b1f4:	b2a9      	uxth	r1, r5
 800b1f6:	fb02 8101 	mla	r1, r2, r1, r8
 800b1fa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b1fe:	0c2d      	lsrs	r5, r5, #16
 800b200:	fb02 c505 	mla	r5, r2, r5, ip
 800b204:	b289      	uxth	r1, r1
 800b206:	3301      	adds	r3, #1
 800b208:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b20c:	429e      	cmp	r6, r3
 800b20e:	f840 1b04 	str.w	r1, [r0], #4
 800b212:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b216:	dcec      	bgt.n	800b1f2 <__multadd+0x12>
 800b218:	f1b8 0f00 	cmp.w	r8, #0
 800b21c:	d022      	beq.n	800b264 <__multadd+0x84>
 800b21e:	68a3      	ldr	r3, [r4, #8]
 800b220:	42b3      	cmp	r3, r6
 800b222:	dc19      	bgt.n	800b258 <__multadd+0x78>
 800b224:	6861      	ldr	r1, [r4, #4]
 800b226:	4638      	mov	r0, r7
 800b228:	3101      	adds	r1, #1
 800b22a:	f7ff ff77 	bl	800b11c <_Balloc>
 800b22e:	4605      	mov	r5, r0
 800b230:	b928      	cbnz	r0, 800b23e <__multadd+0x5e>
 800b232:	4602      	mov	r2, r0
 800b234:	4b0d      	ldr	r3, [pc, #52]	; (800b26c <__multadd+0x8c>)
 800b236:	480e      	ldr	r0, [pc, #56]	; (800b270 <__multadd+0x90>)
 800b238:	21b5      	movs	r1, #181	; 0xb5
 800b23a:	f001 fa9b 	bl	800c774 <__assert_func>
 800b23e:	6922      	ldr	r2, [r4, #16]
 800b240:	3202      	adds	r2, #2
 800b242:	f104 010c 	add.w	r1, r4, #12
 800b246:	0092      	lsls	r2, r2, #2
 800b248:	300c      	adds	r0, #12
 800b24a:	f7fd f825 	bl	8008298 <memcpy>
 800b24e:	4621      	mov	r1, r4
 800b250:	4638      	mov	r0, r7
 800b252:	f7ff ffa3 	bl	800b19c <_Bfree>
 800b256:	462c      	mov	r4, r5
 800b258:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b25c:	3601      	adds	r6, #1
 800b25e:	f8c3 8014 	str.w	r8, [r3, #20]
 800b262:	6126      	str	r6, [r4, #16]
 800b264:	4620      	mov	r0, r4
 800b266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b26a:	bf00      	nop
 800b26c:	0800d484 	.word	0x0800d484
 800b270:	0800d514 	.word	0x0800d514

0800b274 <__s2b>:
 800b274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b278:	460c      	mov	r4, r1
 800b27a:	4615      	mov	r5, r2
 800b27c:	461f      	mov	r7, r3
 800b27e:	2209      	movs	r2, #9
 800b280:	3308      	adds	r3, #8
 800b282:	4606      	mov	r6, r0
 800b284:	fb93 f3f2 	sdiv	r3, r3, r2
 800b288:	2100      	movs	r1, #0
 800b28a:	2201      	movs	r2, #1
 800b28c:	429a      	cmp	r2, r3
 800b28e:	db09      	blt.n	800b2a4 <__s2b+0x30>
 800b290:	4630      	mov	r0, r6
 800b292:	f7ff ff43 	bl	800b11c <_Balloc>
 800b296:	b940      	cbnz	r0, 800b2aa <__s2b+0x36>
 800b298:	4602      	mov	r2, r0
 800b29a:	4b19      	ldr	r3, [pc, #100]	; (800b300 <__s2b+0x8c>)
 800b29c:	4819      	ldr	r0, [pc, #100]	; (800b304 <__s2b+0x90>)
 800b29e:	21ce      	movs	r1, #206	; 0xce
 800b2a0:	f001 fa68 	bl	800c774 <__assert_func>
 800b2a4:	0052      	lsls	r2, r2, #1
 800b2a6:	3101      	adds	r1, #1
 800b2a8:	e7f0      	b.n	800b28c <__s2b+0x18>
 800b2aa:	9b08      	ldr	r3, [sp, #32]
 800b2ac:	6143      	str	r3, [r0, #20]
 800b2ae:	2d09      	cmp	r5, #9
 800b2b0:	f04f 0301 	mov.w	r3, #1
 800b2b4:	6103      	str	r3, [r0, #16]
 800b2b6:	dd16      	ble.n	800b2e6 <__s2b+0x72>
 800b2b8:	f104 0909 	add.w	r9, r4, #9
 800b2bc:	46c8      	mov	r8, r9
 800b2be:	442c      	add	r4, r5
 800b2c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b2c4:	4601      	mov	r1, r0
 800b2c6:	3b30      	subs	r3, #48	; 0x30
 800b2c8:	220a      	movs	r2, #10
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	f7ff ff88 	bl	800b1e0 <__multadd>
 800b2d0:	45a0      	cmp	r8, r4
 800b2d2:	d1f5      	bne.n	800b2c0 <__s2b+0x4c>
 800b2d4:	f1a5 0408 	sub.w	r4, r5, #8
 800b2d8:	444c      	add	r4, r9
 800b2da:	1b2d      	subs	r5, r5, r4
 800b2dc:	1963      	adds	r3, r4, r5
 800b2de:	42bb      	cmp	r3, r7
 800b2e0:	db04      	blt.n	800b2ec <__s2b+0x78>
 800b2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2e6:	340a      	adds	r4, #10
 800b2e8:	2509      	movs	r5, #9
 800b2ea:	e7f6      	b.n	800b2da <__s2b+0x66>
 800b2ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b2f0:	4601      	mov	r1, r0
 800b2f2:	3b30      	subs	r3, #48	; 0x30
 800b2f4:	220a      	movs	r2, #10
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	f7ff ff72 	bl	800b1e0 <__multadd>
 800b2fc:	e7ee      	b.n	800b2dc <__s2b+0x68>
 800b2fe:	bf00      	nop
 800b300:	0800d484 	.word	0x0800d484
 800b304:	0800d514 	.word	0x0800d514

0800b308 <__hi0bits>:
 800b308:	0c03      	lsrs	r3, r0, #16
 800b30a:	041b      	lsls	r3, r3, #16
 800b30c:	b9d3      	cbnz	r3, 800b344 <__hi0bits+0x3c>
 800b30e:	0400      	lsls	r0, r0, #16
 800b310:	2310      	movs	r3, #16
 800b312:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b316:	bf04      	itt	eq
 800b318:	0200      	lsleq	r0, r0, #8
 800b31a:	3308      	addeq	r3, #8
 800b31c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b320:	bf04      	itt	eq
 800b322:	0100      	lsleq	r0, r0, #4
 800b324:	3304      	addeq	r3, #4
 800b326:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b32a:	bf04      	itt	eq
 800b32c:	0080      	lsleq	r0, r0, #2
 800b32e:	3302      	addeq	r3, #2
 800b330:	2800      	cmp	r0, #0
 800b332:	db05      	blt.n	800b340 <__hi0bits+0x38>
 800b334:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b338:	f103 0301 	add.w	r3, r3, #1
 800b33c:	bf08      	it	eq
 800b33e:	2320      	moveq	r3, #32
 800b340:	4618      	mov	r0, r3
 800b342:	4770      	bx	lr
 800b344:	2300      	movs	r3, #0
 800b346:	e7e4      	b.n	800b312 <__hi0bits+0xa>

0800b348 <__lo0bits>:
 800b348:	6803      	ldr	r3, [r0, #0]
 800b34a:	f013 0207 	ands.w	r2, r3, #7
 800b34e:	4601      	mov	r1, r0
 800b350:	d00b      	beq.n	800b36a <__lo0bits+0x22>
 800b352:	07da      	lsls	r2, r3, #31
 800b354:	d424      	bmi.n	800b3a0 <__lo0bits+0x58>
 800b356:	0798      	lsls	r0, r3, #30
 800b358:	bf49      	itett	mi
 800b35a:	085b      	lsrmi	r3, r3, #1
 800b35c:	089b      	lsrpl	r3, r3, #2
 800b35e:	2001      	movmi	r0, #1
 800b360:	600b      	strmi	r3, [r1, #0]
 800b362:	bf5c      	itt	pl
 800b364:	600b      	strpl	r3, [r1, #0]
 800b366:	2002      	movpl	r0, #2
 800b368:	4770      	bx	lr
 800b36a:	b298      	uxth	r0, r3
 800b36c:	b9b0      	cbnz	r0, 800b39c <__lo0bits+0x54>
 800b36e:	0c1b      	lsrs	r3, r3, #16
 800b370:	2010      	movs	r0, #16
 800b372:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b376:	bf04      	itt	eq
 800b378:	0a1b      	lsreq	r3, r3, #8
 800b37a:	3008      	addeq	r0, #8
 800b37c:	071a      	lsls	r2, r3, #28
 800b37e:	bf04      	itt	eq
 800b380:	091b      	lsreq	r3, r3, #4
 800b382:	3004      	addeq	r0, #4
 800b384:	079a      	lsls	r2, r3, #30
 800b386:	bf04      	itt	eq
 800b388:	089b      	lsreq	r3, r3, #2
 800b38a:	3002      	addeq	r0, #2
 800b38c:	07da      	lsls	r2, r3, #31
 800b38e:	d403      	bmi.n	800b398 <__lo0bits+0x50>
 800b390:	085b      	lsrs	r3, r3, #1
 800b392:	f100 0001 	add.w	r0, r0, #1
 800b396:	d005      	beq.n	800b3a4 <__lo0bits+0x5c>
 800b398:	600b      	str	r3, [r1, #0]
 800b39a:	4770      	bx	lr
 800b39c:	4610      	mov	r0, r2
 800b39e:	e7e8      	b.n	800b372 <__lo0bits+0x2a>
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	4770      	bx	lr
 800b3a4:	2020      	movs	r0, #32
 800b3a6:	4770      	bx	lr

0800b3a8 <__i2b>:
 800b3a8:	b510      	push	{r4, lr}
 800b3aa:	460c      	mov	r4, r1
 800b3ac:	2101      	movs	r1, #1
 800b3ae:	f7ff feb5 	bl	800b11c <_Balloc>
 800b3b2:	4602      	mov	r2, r0
 800b3b4:	b928      	cbnz	r0, 800b3c2 <__i2b+0x1a>
 800b3b6:	4b05      	ldr	r3, [pc, #20]	; (800b3cc <__i2b+0x24>)
 800b3b8:	4805      	ldr	r0, [pc, #20]	; (800b3d0 <__i2b+0x28>)
 800b3ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b3be:	f001 f9d9 	bl	800c774 <__assert_func>
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	6144      	str	r4, [r0, #20]
 800b3c6:	6103      	str	r3, [r0, #16]
 800b3c8:	bd10      	pop	{r4, pc}
 800b3ca:	bf00      	nop
 800b3cc:	0800d484 	.word	0x0800d484
 800b3d0:	0800d514 	.word	0x0800d514

0800b3d4 <__multiply>:
 800b3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d8:	4614      	mov	r4, r2
 800b3da:	690a      	ldr	r2, [r1, #16]
 800b3dc:	6923      	ldr	r3, [r4, #16]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	bfb8      	it	lt
 800b3e2:	460b      	movlt	r3, r1
 800b3e4:	460d      	mov	r5, r1
 800b3e6:	bfbc      	itt	lt
 800b3e8:	4625      	movlt	r5, r4
 800b3ea:	461c      	movlt	r4, r3
 800b3ec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b3f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b3f4:	68ab      	ldr	r3, [r5, #8]
 800b3f6:	6869      	ldr	r1, [r5, #4]
 800b3f8:	eb0a 0709 	add.w	r7, sl, r9
 800b3fc:	42bb      	cmp	r3, r7
 800b3fe:	b085      	sub	sp, #20
 800b400:	bfb8      	it	lt
 800b402:	3101      	addlt	r1, #1
 800b404:	f7ff fe8a 	bl	800b11c <_Balloc>
 800b408:	b930      	cbnz	r0, 800b418 <__multiply+0x44>
 800b40a:	4602      	mov	r2, r0
 800b40c:	4b42      	ldr	r3, [pc, #264]	; (800b518 <__multiply+0x144>)
 800b40e:	4843      	ldr	r0, [pc, #268]	; (800b51c <__multiply+0x148>)
 800b410:	f240 115d 	movw	r1, #349	; 0x15d
 800b414:	f001 f9ae 	bl	800c774 <__assert_func>
 800b418:	f100 0614 	add.w	r6, r0, #20
 800b41c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b420:	4633      	mov	r3, r6
 800b422:	2200      	movs	r2, #0
 800b424:	4543      	cmp	r3, r8
 800b426:	d31e      	bcc.n	800b466 <__multiply+0x92>
 800b428:	f105 0c14 	add.w	ip, r5, #20
 800b42c:	f104 0314 	add.w	r3, r4, #20
 800b430:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b434:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b438:	9202      	str	r2, [sp, #8]
 800b43a:	ebac 0205 	sub.w	r2, ip, r5
 800b43e:	3a15      	subs	r2, #21
 800b440:	f022 0203 	bic.w	r2, r2, #3
 800b444:	3204      	adds	r2, #4
 800b446:	f105 0115 	add.w	r1, r5, #21
 800b44a:	458c      	cmp	ip, r1
 800b44c:	bf38      	it	cc
 800b44e:	2204      	movcc	r2, #4
 800b450:	9201      	str	r2, [sp, #4]
 800b452:	9a02      	ldr	r2, [sp, #8]
 800b454:	9303      	str	r3, [sp, #12]
 800b456:	429a      	cmp	r2, r3
 800b458:	d808      	bhi.n	800b46c <__multiply+0x98>
 800b45a:	2f00      	cmp	r7, #0
 800b45c:	dc55      	bgt.n	800b50a <__multiply+0x136>
 800b45e:	6107      	str	r7, [r0, #16]
 800b460:	b005      	add	sp, #20
 800b462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b466:	f843 2b04 	str.w	r2, [r3], #4
 800b46a:	e7db      	b.n	800b424 <__multiply+0x50>
 800b46c:	f8b3 a000 	ldrh.w	sl, [r3]
 800b470:	f1ba 0f00 	cmp.w	sl, #0
 800b474:	d020      	beq.n	800b4b8 <__multiply+0xe4>
 800b476:	f105 0e14 	add.w	lr, r5, #20
 800b47a:	46b1      	mov	r9, r6
 800b47c:	2200      	movs	r2, #0
 800b47e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b482:	f8d9 b000 	ldr.w	fp, [r9]
 800b486:	b2a1      	uxth	r1, r4
 800b488:	fa1f fb8b 	uxth.w	fp, fp
 800b48c:	fb0a b101 	mla	r1, sl, r1, fp
 800b490:	4411      	add	r1, r2
 800b492:	f8d9 2000 	ldr.w	r2, [r9]
 800b496:	0c24      	lsrs	r4, r4, #16
 800b498:	0c12      	lsrs	r2, r2, #16
 800b49a:	fb0a 2404 	mla	r4, sl, r4, r2
 800b49e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b4a2:	b289      	uxth	r1, r1
 800b4a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b4a8:	45f4      	cmp	ip, lr
 800b4aa:	f849 1b04 	str.w	r1, [r9], #4
 800b4ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b4b2:	d8e4      	bhi.n	800b47e <__multiply+0xaa>
 800b4b4:	9901      	ldr	r1, [sp, #4]
 800b4b6:	5072      	str	r2, [r6, r1]
 800b4b8:	9a03      	ldr	r2, [sp, #12]
 800b4ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b4be:	3304      	adds	r3, #4
 800b4c0:	f1b9 0f00 	cmp.w	r9, #0
 800b4c4:	d01f      	beq.n	800b506 <__multiply+0x132>
 800b4c6:	6834      	ldr	r4, [r6, #0]
 800b4c8:	f105 0114 	add.w	r1, r5, #20
 800b4cc:	46b6      	mov	lr, r6
 800b4ce:	f04f 0a00 	mov.w	sl, #0
 800b4d2:	880a      	ldrh	r2, [r1, #0]
 800b4d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b4d8:	fb09 b202 	mla	r2, r9, r2, fp
 800b4dc:	4492      	add	sl, r2
 800b4de:	b2a4      	uxth	r4, r4
 800b4e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b4e4:	f84e 4b04 	str.w	r4, [lr], #4
 800b4e8:	f851 4b04 	ldr.w	r4, [r1], #4
 800b4ec:	f8be 2000 	ldrh.w	r2, [lr]
 800b4f0:	0c24      	lsrs	r4, r4, #16
 800b4f2:	fb09 2404 	mla	r4, r9, r4, r2
 800b4f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b4fa:	458c      	cmp	ip, r1
 800b4fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b500:	d8e7      	bhi.n	800b4d2 <__multiply+0xfe>
 800b502:	9a01      	ldr	r2, [sp, #4]
 800b504:	50b4      	str	r4, [r6, r2]
 800b506:	3604      	adds	r6, #4
 800b508:	e7a3      	b.n	800b452 <__multiply+0x7e>
 800b50a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d1a5      	bne.n	800b45e <__multiply+0x8a>
 800b512:	3f01      	subs	r7, #1
 800b514:	e7a1      	b.n	800b45a <__multiply+0x86>
 800b516:	bf00      	nop
 800b518:	0800d484 	.word	0x0800d484
 800b51c:	0800d514 	.word	0x0800d514

0800b520 <__pow5mult>:
 800b520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b524:	4615      	mov	r5, r2
 800b526:	f012 0203 	ands.w	r2, r2, #3
 800b52a:	4606      	mov	r6, r0
 800b52c:	460f      	mov	r7, r1
 800b52e:	d007      	beq.n	800b540 <__pow5mult+0x20>
 800b530:	4c25      	ldr	r4, [pc, #148]	; (800b5c8 <__pow5mult+0xa8>)
 800b532:	3a01      	subs	r2, #1
 800b534:	2300      	movs	r3, #0
 800b536:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b53a:	f7ff fe51 	bl	800b1e0 <__multadd>
 800b53e:	4607      	mov	r7, r0
 800b540:	10ad      	asrs	r5, r5, #2
 800b542:	d03d      	beq.n	800b5c0 <__pow5mult+0xa0>
 800b544:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b546:	b97c      	cbnz	r4, 800b568 <__pow5mult+0x48>
 800b548:	2010      	movs	r0, #16
 800b54a:	f7ff fdcd 	bl	800b0e8 <malloc>
 800b54e:	4602      	mov	r2, r0
 800b550:	6270      	str	r0, [r6, #36]	; 0x24
 800b552:	b928      	cbnz	r0, 800b560 <__pow5mult+0x40>
 800b554:	4b1d      	ldr	r3, [pc, #116]	; (800b5cc <__pow5mult+0xac>)
 800b556:	481e      	ldr	r0, [pc, #120]	; (800b5d0 <__pow5mult+0xb0>)
 800b558:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b55c:	f001 f90a 	bl	800c774 <__assert_func>
 800b560:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b564:	6004      	str	r4, [r0, #0]
 800b566:	60c4      	str	r4, [r0, #12]
 800b568:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b56c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b570:	b94c      	cbnz	r4, 800b586 <__pow5mult+0x66>
 800b572:	f240 2171 	movw	r1, #625	; 0x271
 800b576:	4630      	mov	r0, r6
 800b578:	f7ff ff16 	bl	800b3a8 <__i2b>
 800b57c:	2300      	movs	r3, #0
 800b57e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b582:	4604      	mov	r4, r0
 800b584:	6003      	str	r3, [r0, #0]
 800b586:	f04f 0900 	mov.w	r9, #0
 800b58a:	07eb      	lsls	r3, r5, #31
 800b58c:	d50a      	bpl.n	800b5a4 <__pow5mult+0x84>
 800b58e:	4639      	mov	r1, r7
 800b590:	4622      	mov	r2, r4
 800b592:	4630      	mov	r0, r6
 800b594:	f7ff ff1e 	bl	800b3d4 <__multiply>
 800b598:	4639      	mov	r1, r7
 800b59a:	4680      	mov	r8, r0
 800b59c:	4630      	mov	r0, r6
 800b59e:	f7ff fdfd 	bl	800b19c <_Bfree>
 800b5a2:	4647      	mov	r7, r8
 800b5a4:	106d      	asrs	r5, r5, #1
 800b5a6:	d00b      	beq.n	800b5c0 <__pow5mult+0xa0>
 800b5a8:	6820      	ldr	r0, [r4, #0]
 800b5aa:	b938      	cbnz	r0, 800b5bc <__pow5mult+0x9c>
 800b5ac:	4622      	mov	r2, r4
 800b5ae:	4621      	mov	r1, r4
 800b5b0:	4630      	mov	r0, r6
 800b5b2:	f7ff ff0f 	bl	800b3d4 <__multiply>
 800b5b6:	6020      	str	r0, [r4, #0]
 800b5b8:	f8c0 9000 	str.w	r9, [r0]
 800b5bc:	4604      	mov	r4, r0
 800b5be:	e7e4      	b.n	800b58a <__pow5mult+0x6a>
 800b5c0:	4638      	mov	r0, r7
 800b5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5c6:	bf00      	nop
 800b5c8:	0800d668 	.word	0x0800d668
 800b5cc:	0800d40e 	.word	0x0800d40e
 800b5d0:	0800d514 	.word	0x0800d514

0800b5d4 <__lshift>:
 800b5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5d8:	460c      	mov	r4, r1
 800b5da:	6849      	ldr	r1, [r1, #4]
 800b5dc:	6923      	ldr	r3, [r4, #16]
 800b5de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5e2:	68a3      	ldr	r3, [r4, #8]
 800b5e4:	4607      	mov	r7, r0
 800b5e6:	4691      	mov	r9, r2
 800b5e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5ec:	f108 0601 	add.w	r6, r8, #1
 800b5f0:	42b3      	cmp	r3, r6
 800b5f2:	db0b      	blt.n	800b60c <__lshift+0x38>
 800b5f4:	4638      	mov	r0, r7
 800b5f6:	f7ff fd91 	bl	800b11c <_Balloc>
 800b5fa:	4605      	mov	r5, r0
 800b5fc:	b948      	cbnz	r0, 800b612 <__lshift+0x3e>
 800b5fe:	4602      	mov	r2, r0
 800b600:	4b28      	ldr	r3, [pc, #160]	; (800b6a4 <__lshift+0xd0>)
 800b602:	4829      	ldr	r0, [pc, #164]	; (800b6a8 <__lshift+0xd4>)
 800b604:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b608:	f001 f8b4 	bl	800c774 <__assert_func>
 800b60c:	3101      	adds	r1, #1
 800b60e:	005b      	lsls	r3, r3, #1
 800b610:	e7ee      	b.n	800b5f0 <__lshift+0x1c>
 800b612:	2300      	movs	r3, #0
 800b614:	f100 0114 	add.w	r1, r0, #20
 800b618:	f100 0210 	add.w	r2, r0, #16
 800b61c:	4618      	mov	r0, r3
 800b61e:	4553      	cmp	r3, sl
 800b620:	db33      	blt.n	800b68a <__lshift+0xb6>
 800b622:	6920      	ldr	r0, [r4, #16]
 800b624:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b628:	f104 0314 	add.w	r3, r4, #20
 800b62c:	f019 091f 	ands.w	r9, r9, #31
 800b630:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b634:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b638:	d02b      	beq.n	800b692 <__lshift+0xbe>
 800b63a:	f1c9 0e20 	rsb	lr, r9, #32
 800b63e:	468a      	mov	sl, r1
 800b640:	2200      	movs	r2, #0
 800b642:	6818      	ldr	r0, [r3, #0]
 800b644:	fa00 f009 	lsl.w	r0, r0, r9
 800b648:	4302      	orrs	r2, r0
 800b64a:	f84a 2b04 	str.w	r2, [sl], #4
 800b64e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b652:	459c      	cmp	ip, r3
 800b654:	fa22 f20e 	lsr.w	r2, r2, lr
 800b658:	d8f3      	bhi.n	800b642 <__lshift+0x6e>
 800b65a:	ebac 0304 	sub.w	r3, ip, r4
 800b65e:	3b15      	subs	r3, #21
 800b660:	f023 0303 	bic.w	r3, r3, #3
 800b664:	3304      	adds	r3, #4
 800b666:	f104 0015 	add.w	r0, r4, #21
 800b66a:	4584      	cmp	ip, r0
 800b66c:	bf38      	it	cc
 800b66e:	2304      	movcc	r3, #4
 800b670:	50ca      	str	r2, [r1, r3]
 800b672:	b10a      	cbz	r2, 800b678 <__lshift+0xa4>
 800b674:	f108 0602 	add.w	r6, r8, #2
 800b678:	3e01      	subs	r6, #1
 800b67a:	4638      	mov	r0, r7
 800b67c:	612e      	str	r6, [r5, #16]
 800b67e:	4621      	mov	r1, r4
 800b680:	f7ff fd8c 	bl	800b19c <_Bfree>
 800b684:	4628      	mov	r0, r5
 800b686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b68a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b68e:	3301      	adds	r3, #1
 800b690:	e7c5      	b.n	800b61e <__lshift+0x4a>
 800b692:	3904      	subs	r1, #4
 800b694:	f853 2b04 	ldr.w	r2, [r3], #4
 800b698:	f841 2f04 	str.w	r2, [r1, #4]!
 800b69c:	459c      	cmp	ip, r3
 800b69e:	d8f9      	bhi.n	800b694 <__lshift+0xc0>
 800b6a0:	e7ea      	b.n	800b678 <__lshift+0xa4>
 800b6a2:	bf00      	nop
 800b6a4:	0800d484 	.word	0x0800d484
 800b6a8:	0800d514 	.word	0x0800d514

0800b6ac <__mcmp>:
 800b6ac:	b530      	push	{r4, r5, lr}
 800b6ae:	6902      	ldr	r2, [r0, #16]
 800b6b0:	690c      	ldr	r4, [r1, #16]
 800b6b2:	1b12      	subs	r2, r2, r4
 800b6b4:	d10e      	bne.n	800b6d4 <__mcmp+0x28>
 800b6b6:	f100 0314 	add.w	r3, r0, #20
 800b6ba:	3114      	adds	r1, #20
 800b6bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b6c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b6c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b6c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b6cc:	42a5      	cmp	r5, r4
 800b6ce:	d003      	beq.n	800b6d8 <__mcmp+0x2c>
 800b6d0:	d305      	bcc.n	800b6de <__mcmp+0x32>
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	4610      	mov	r0, r2
 800b6d6:	bd30      	pop	{r4, r5, pc}
 800b6d8:	4283      	cmp	r3, r0
 800b6da:	d3f3      	bcc.n	800b6c4 <__mcmp+0x18>
 800b6dc:	e7fa      	b.n	800b6d4 <__mcmp+0x28>
 800b6de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6e2:	e7f7      	b.n	800b6d4 <__mcmp+0x28>

0800b6e4 <__mdiff>:
 800b6e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e8:	460c      	mov	r4, r1
 800b6ea:	4606      	mov	r6, r0
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	4617      	mov	r7, r2
 800b6f2:	f7ff ffdb 	bl	800b6ac <__mcmp>
 800b6f6:	1e05      	subs	r5, r0, #0
 800b6f8:	d110      	bne.n	800b71c <__mdiff+0x38>
 800b6fa:	4629      	mov	r1, r5
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	f7ff fd0d 	bl	800b11c <_Balloc>
 800b702:	b930      	cbnz	r0, 800b712 <__mdiff+0x2e>
 800b704:	4b39      	ldr	r3, [pc, #228]	; (800b7ec <__mdiff+0x108>)
 800b706:	4602      	mov	r2, r0
 800b708:	f240 2132 	movw	r1, #562	; 0x232
 800b70c:	4838      	ldr	r0, [pc, #224]	; (800b7f0 <__mdiff+0x10c>)
 800b70e:	f001 f831 	bl	800c774 <__assert_func>
 800b712:	2301      	movs	r3, #1
 800b714:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b718:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b71c:	bfa4      	itt	ge
 800b71e:	463b      	movge	r3, r7
 800b720:	4627      	movge	r7, r4
 800b722:	4630      	mov	r0, r6
 800b724:	6879      	ldr	r1, [r7, #4]
 800b726:	bfa6      	itte	ge
 800b728:	461c      	movge	r4, r3
 800b72a:	2500      	movge	r5, #0
 800b72c:	2501      	movlt	r5, #1
 800b72e:	f7ff fcf5 	bl	800b11c <_Balloc>
 800b732:	b920      	cbnz	r0, 800b73e <__mdiff+0x5a>
 800b734:	4b2d      	ldr	r3, [pc, #180]	; (800b7ec <__mdiff+0x108>)
 800b736:	4602      	mov	r2, r0
 800b738:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b73c:	e7e6      	b.n	800b70c <__mdiff+0x28>
 800b73e:	693e      	ldr	r6, [r7, #16]
 800b740:	60c5      	str	r5, [r0, #12]
 800b742:	6925      	ldr	r5, [r4, #16]
 800b744:	f107 0114 	add.w	r1, r7, #20
 800b748:	f104 0914 	add.w	r9, r4, #20
 800b74c:	f100 0e14 	add.w	lr, r0, #20
 800b750:	f107 0210 	add.w	r2, r7, #16
 800b754:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b758:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b75c:	46f2      	mov	sl, lr
 800b75e:	2700      	movs	r7, #0
 800b760:	f859 3b04 	ldr.w	r3, [r9], #4
 800b764:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b768:	fa1f f883 	uxth.w	r8, r3
 800b76c:	fa17 f78b 	uxtah	r7, r7, fp
 800b770:	0c1b      	lsrs	r3, r3, #16
 800b772:	eba7 0808 	sub.w	r8, r7, r8
 800b776:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b77a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b77e:	fa1f f888 	uxth.w	r8, r8
 800b782:	141f      	asrs	r7, r3, #16
 800b784:	454d      	cmp	r5, r9
 800b786:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b78a:	f84a 3b04 	str.w	r3, [sl], #4
 800b78e:	d8e7      	bhi.n	800b760 <__mdiff+0x7c>
 800b790:	1b2b      	subs	r3, r5, r4
 800b792:	3b15      	subs	r3, #21
 800b794:	f023 0303 	bic.w	r3, r3, #3
 800b798:	3304      	adds	r3, #4
 800b79a:	3415      	adds	r4, #21
 800b79c:	42a5      	cmp	r5, r4
 800b79e:	bf38      	it	cc
 800b7a0:	2304      	movcc	r3, #4
 800b7a2:	4419      	add	r1, r3
 800b7a4:	4473      	add	r3, lr
 800b7a6:	469e      	mov	lr, r3
 800b7a8:	460d      	mov	r5, r1
 800b7aa:	4565      	cmp	r5, ip
 800b7ac:	d30e      	bcc.n	800b7cc <__mdiff+0xe8>
 800b7ae:	f10c 0203 	add.w	r2, ip, #3
 800b7b2:	1a52      	subs	r2, r2, r1
 800b7b4:	f022 0203 	bic.w	r2, r2, #3
 800b7b8:	3903      	subs	r1, #3
 800b7ba:	458c      	cmp	ip, r1
 800b7bc:	bf38      	it	cc
 800b7be:	2200      	movcc	r2, #0
 800b7c0:	441a      	add	r2, r3
 800b7c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b7c6:	b17b      	cbz	r3, 800b7e8 <__mdiff+0x104>
 800b7c8:	6106      	str	r6, [r0, #16]
 800b7ca:	e7a5      	b.n	800b718 <__mdiff+0x34>
 800b7cc:	f855 8b04 	ldr.w	r8, [r5], #4
 800b7d0:	fa17 f488 	uxtah	r4, r7, r8
 800b7d4:	1422      	asrs	r2, r4, #16
 800b7d6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b7da:	b2a4      	uxth	r4, r4
 800b7dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b7e0:	f84e 4b04 	str.w	r4, [lr], #4
 800b7e4:	1417      	asrs	r7, r2, #16
 800b7e6:	e7e0      	b.n	800b7aa <__mdiff+0xc6>
 800b7e8:	3e01      	subs	r6, #1
 800b7ea:	e7ea      	b.n	800b7c2 <__mdiff+0xde>
 800b7ec:	0800d484 	.word	0x0800d484
 800b7f0:	0800d514 	.word	0x0800d514

0800b7f4 <__ulp>:
 800b7f4:	b082      	sub	sp, #8
 800b7f6:	ed8d 0b00 	vstr	d0, [sp]
 800b7fa:	9b01      	ldr	r3, [sp, #4]
 800b7fc:	4912      	ldr	r1, [pc, #72]	; (800b848 <__ulp+0x54>)
 800b7fe:	4019      	ands	r1, r3
 800b800:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b804:	2900      	cmp	r1, #0
 800b806:	dd05      	ble.n	800b814 <__ulp+0x20>
 800b808:	2200      	movs	r2, #0
 800b80a:	460b      	mov	r3, r1
 800b80c:	ec43 2b10 	vmov	d0, r2, r3
 800b810:	b002      	add	sp, #8
 800b812:	4770      	bx	lr
 800b814:	4249      	negs	r1, r1
 800b816:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b81a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b81e:	f04f 0200 	mov.w	r2, #0
 800b822:	f04f 0300 	mov.w	r3, #0
 800b826:	da04      	bge.n	800b832 <__ulp+0x3e>
 800b828:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b82c:	fa41 f300 	asr.w	r3, r1, r0
 800b830:	e7ec      	b.n	800b80c <__ulp+0x18>
 800b832:	f1a0 0114 	sub.w	r1, r0, #20
 800b836:	291e      	cmp	r1, #30
 800b838:	bfda      	itte	le
 800b83a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b83e:	fa20 f101 	lsrle.w	r1, r0, r1
 800b842:	2101      	movgt	r1, #1
 800b844:	460a      	mov	r2, r1
 800b846:	e7e1      	b.n	800b80c <__ulp+0x18>
 800b848:	7ff00000 	.word	0x7ff00000

0800b84c <__b2d>:
 800b84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b84e:	6905      	ldr	r5, [r0, #16]
 800b850:	f100 0714 	add.w	r7, r0, #20
 800b854:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b858:	1f2e      	subs	r6, r5, #4
 800b85a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b85e:	4620      	mov	r0, r4
 800b860:	f7ff fd52 	bl	800b308 <__hi0bits>
 800b864:	f1c0 0320 	rsb	r3, r0, #32
 800b868:	280a      	cmp	r0, #10
 800b86a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b8e8 <__b2d+0x9c>
 800b86e:	600b      	str	r3, [r1, #0]
 800b870:	dc14      	bgt.n	800b89c <__b2d+0x50>
 800b872:	f1c0 0e0b 	rsb	lr, r0, #11
 800b876:	fa24 f10e 	lsr.w	r1, r4, lr
 800b87a:	42b7      	cmp	r7, r6
 800b87c:	ea41 030c 	orr.w	r3, r1, ip
 800b880:	bf34      	ite	cc
 800b882:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b886:	2100      	movcs	r1, #0
 800b888:	3015      	adds	r0, #21
 800b88a:	fa04 f000 	lsl.w	r0, r4, r0
 800b88e:	fa21 f10e 	lsr.w	r1, r1, lr
 800b892:	ea40 0201 	orr.w	r2, r0, r1
 800b896:	ec43 2b10 	vmov	d0, r2, r3
 800b89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b89c:	42b7      	cmp	r7, r6
 800b89e:	bf3a      	itte	cc
 800b8a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b8a4:	f1a5 0608 	subcc.w	r6, r5, #8
 800b8a8:	2100      	movcs	r1, #0
 800b8aa:	380b      	subs	r0, #11
 800b8ac:	d017      	beq.n	800b8de <__b2d+0x92>
 800b8ae:	f1c0 0c20 	rsb	ip, r0, #32
 800b8b2:	fa04 f500 	lsl.w	r5, r4, r0
 800b8b6:	42be      	cmp	r6, r7
 800b8b8:	fa21 f40c 	lsr.w	r4, r1, ip
 800b8bc:	ea45 0504 	orr.w	r5, r5, r4
 800b8c0:	bf8c      	ite	hi
 800b8c2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b8c6:	2400      	movls	r4, #0
 800b8c8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b8cc:	fa01 f000 	lsl.w	r0, r1, r0
 800b8d0:	fa24 f40c 	lsr.w	r4, r4, ip
 800b8d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b8d8:	ea40 0204 	orr.w	r2, r0, r4
 800b8dc:	e7db      	b.n	800b896 <__b2d+0x4a>
 800b8de:	ea44 030c 	orr.w	r3, r4, ip
 800b8e2:	460a      	mov	r2, r1
 800b8e4:	e7d7      	b.n	800b896 <__b2d+0x4a>
 800b8e6:	bf00      	nop
 800b8e8:	3ff00000 	.word	0x3ff00000

0800b8ec <__d2b>:
 800b8ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8f0:	4689      	mov	r9, r1
 800b8f2:	2101      	movs	r1, #1
 800b8f4:	ec57 6b10 	vmov	r6, r7, d0
 800b8f8:	4690      	mov	r8, r2
 800b8fa:	f7ff fc0f 	bl	800b11c <_Balloc>
 800b8fe:	4604      	mov	r4, r0
 800b900:	b930      	cbnz	r0, 800b910 <__d2b+0x24>
 800b902:	4602      	mov	r2, r0
 800b904:	4b25      	ldr	r3, [pc, #148]	; (800b99c <__d2b+0xb0>)
 800b906:	4826      	ldr	r0, [pc, #152]	; (800b9a0 <__d2b+0xb4>)
 800b908:	f240 310a 	movw	r1, #778	; 0x30a
 800b90c:	f000 ff32 	bl	800c774 <__assert_func>
 800b910:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b914:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b918:	bb35      	cbnz	r5, 800b968 <__d2b+0x7c>
 800b91a:	2e00      	cmp	r6, #0
 800b91c:	9301      	str	r3, [sp, #4]
 800b91e:	d028      	beq.n	800b972 <__d2b+0x86>
 800b920:	4668      	mov	r0, sp
 800b922:	9600      	str	r6, [sp, #0]
 800b924:	f7ff fd10 	bl	800b348 <__lo0bits>
 800b928:	9900      	ldr	r1, [sp, #0]
 800b92a:	b300      	cbz	r0, 800b96e <__d2b+0x82>
 800b92c:	9a01      	ldr	r2, [sp, #4]
 800b92e:	f1c0 0320 	rsb	r3, r0, #32
 800b932:	fa02 f303 	lsl.w	r3, r2, r3
 800b936:	430b      	orrs	r3, r1
 800b938:	40c2      	lsrs	r2, r0
 800b93a:	6163      	str	r3, [r4, #20]
 800b93c:	9201      	str	r2, [sp, #4]
 800b93e:	9b01      	ldr	r3, [sp, #4]
 800b940:	61a3      	str	r3, [r4, #24]
 800b942:	2b00      	cmp	r3, #0
 800b944:	bf14      	ite	ne
 800b946:	2202      	movne	r2, #2
 800b948:	2201      	moveq	r2, #1
 800b94a:	6122      	str	r2, [r4, #16]
 800b94c:	b1d5      	cbz	r5, 800b984 <__d2b+0x98>
 800b94e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b952:	4405      	add	r5, r0
 800b954:	f8c9 5000 	str.w	r5, [r9]
 800b958:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b95c:	f8c8 0000 	str.w	r0, [r8]
 800b960:	4620      	mov	r0, r4
 800b962:	b003      	add	sp, #12
 800b964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b968:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b96c:	e7d5      	b.n	800b91a <__d2b+0x2e>
 800b96e:	6161      	str	r1, [r4, #20]
 800b970:	e7e5      	b.n	800b93e <__d2b+0x52>
 800b972:	a801      	add	r0, sp, #4
 800b974:	f7ff fce8 	bl	800b348 <__lo0bits>
 800b978:	9b01      	ldr	r3, [sp, #4]
 800b97a:	6163      	str	r3, [r4, #20]
 800b97c:	2201      	movs	r2, #1
 800b97e:	6122      	str	r2, [r4, #16]
 800b980:	3020      	adds	r0, #32
 800b982:	e7e3      	b.n	800b94c <__d2b+0x60>
 800b984:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b988:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b98c:	f8c9 0000 	str.w	r0, [r9]
 800b990:	6918      	ldr	r0, [r3, #16]
 800b992:	f7ff fcb9 	bl	800b308 <__hi0bits>
 800b996:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b99a:	e7df      	b.n	800b95c <__d2b+0x70>
 800b99c:	0800d484 	.word	0x0800d484
 800b9a0:	0800d514 	.word	0x0800d514

0800b9a4 <__ratio>:
 800b9a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a8:	468a      	mov	sl, r1
 800b9aa:	4669      	mov	r1, sp
 800b9ac:	4683      	mov	fp, r0
 800b9ae:	f7ff ff4d 	bl	800b84c <__b2d>
 800b9b2:	a901      	add	r1, sp, #4
 800b9b4:	4650      	mov	r0, sl
 800b9b6:	ec59 8b10 	vmov	r8, r9, d0
 800b9ba:	ee10 6a10 	vmov	r6, s0
 800b9be:	f7ff ff45 	bl	800b84c <__b2d>
 800b9c2:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b9c6:	f8da 2010 	ldr.w	r2, [sl, #16]
 800b9ca:	eba3 0c02 	sub.w	ip, r3, r2
 800b9ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b9d2:	1a9b      	subs	r3, r3, r2
 800b9d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b9d8:	ec55 4b10 	vmov	r4, r5, d0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	ee10 0a10 	vmov	r0, s0
 800b9e2:	bfce      	itee	gt
 800b9e4:	464a      	movgt	r2, r9
 800b9e6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b9ea:	462a      	movle	r2, r5
 800b9ec:	464f      	mov	r7, r9
 800b9ee:	4629      	mov	r1, r5
 800b9f0:	bfcc      	ite	gt
 800b9f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b9f6:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b9fa:	ec47 6b17 	vmov	d7, r6, r7
 800b9fe:	ec41 0b16 	vmov	d6, r0, r1
 800ba02:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800ba06:	b003      	add	sp, #12
 800ba08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba0c <__copybits>:
 800ba0c:	3901      	subs	r1, #1
 800ba0e:	b570      	push	{r4, r5, r6, lr}
 800ba10:	1149      	asrs	r1, r1, #5
 800ba12:	6914      	ldr	r4, [r2, #16]
 800ba14:	3101      	adds	r1, #1
 800ba16:	f102 0314 	add.w	r3, r2, #20
 800ba1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ba1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ba22:	1f05      	subs	r5, r0, #4
 800ba24:	42a3      	cmp	r3, r4
 800ba26:	d30c      	bcc.n	800ba42 <__copybits+0x36>
 800ba28:	1aa3      	subs	r3, r4, r2
 800ba2a:	3b11      	subs	r3, #17
 800ba2c:	f023 0303 	bic.w	r3, r3, #3
 800ba30:	3211      	adds	r2, #17
 800ba32:	42a2      	cmp	r2, r4
 800ba34:	bf88      	it	hi
 800ba36:	2300      	movhi	r3, #0
 800ba38:	4418      	add	r0, r3
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	4288      	cmp	r0, r1
 800ba3e:	d305      	bcc.n	800ba4c <__copybits+0x40>
 800ba40:	bd70      	pop	{r4, r5, r6, pc}
 800ba42:	f853 6b04 	ldr.w	r6, [r3], #4
 800ba46:	f845 6f04 	str.w	r6, [r5, #4]!
 800ba4a:	e7eb      	b.n	800ba24 <__copybits+0x18>
 800ba4c:	f840 3b04 	str.w	r3, [r0], #4
 800ba50:	e7f4      	b.n	800ba3c <__copybits+0x30>

0800ba52 <__any_on>:
 800ba52:	f100 0214 	add.w	r2, r0, #20
 800ba56:	6900      	ldr	r0, [r0, #16]
 800ba58:	114b      	asrs	r3, r1, #5
 800ba5a:	4298      	cmp	r0, r3
 800ba5c:	b510      	push	{r4, lr}
 800ba5e:	db11      	blt.n	800ba84 <__any_on+0x32>
 800ba60:	dd0a      	ble.n	800ba78 <__any_on+0x26>
 800ba62:	f011 011f 	ands.w	r1, r1, #31
 800ba66:	d007      	beq.n	800ba78 <__any_on+0x26>
 800ba68:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ba6c:	fa24 f001 	lsr.w	r0, r4, r1
 800ba70:	fa00 f101 	lsl.w	r1, r0, r1
 800ba74:	428c      	cmp	r4, r1
 800ba76:	d10b      	bne.n	800ba90 <__any_on+0x3e>
 800ba78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d803      	bhi.n	800ba88 <__any_on+0x36>
 800ba80:	2000      	movs	r0, #0
 800ba82:	bd10      	pop	{r4, pc}
 800ba84:	4603      	mov	r3, r0
 800ba86:	e7f7      	b.n	800ba78 <__any_on+0x26>
 800ba88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba8c:	2900      	cmp	r1, #0
 800ba8e:	d0f5      	beq.n	800ba7c <__any_on+0x2a>
 800ba90:	2001      	movs	r0, #1
 800ba92:	e7f6      	b.n	800ba82 <__any_on+0x30>

0800ba94 <_calloc_r>:
 800ba94:	b513      	push	{r0, r1, r4, lr}
 800ba96:	434a      	muls	r2, r1
 800ba98:	4611      	mov	r1, r2
 800ba9a:	9201      	str	r2, [sp, #4]
 800ba9c:	f000 f85a 	bl	800bb54 <_malloc_r>
 800baa0:	4604      	mov	r4, r0
 800baa2:	b118      	cbz	r0, 800baac <_calloc_r+0x18>
 800baa4:	9a01      	ldr	r2, [sp, #4]
 800baa6:	2100      	movs	r1, #0
 800baa8:	f7fc fc04 	bl	80082b4 <memset>
 800baac:	4620      	mov	r0, r4
 800baae:	b002      	add	sp, #8
 800bab0:	bd10      	pop	{r4, pc}
	...

0800bab4 <_free_r>:
 800bab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bab6:	2900      	cmp	r1, #0
 800bab8:	d048      	beq.n	800bb4c <_free_r+0x98>
 800baba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800babe:	9001      	str	r0, [sp, #4]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f1a1 0404 	sub.w	r4, r1, #4
 800bac6:	bfb8      	it	lt
 800bac8:	18e4      	addlt	r4, r4, r3
 800baca:	f001 f857 	bl	800cb7c <__malloc_lock>
 800bace:	4a20      	ldr	r2, [pc, #128]	; (800bb50 <_free_r+0x9c>)
 800bad0:	9801      	ldr	r0, [sp, #4]
 800bad2:	6813      	ldr	r3, [r2, #0]
 800bad4:	4615      	mov	r5, r2
 800bad6:	b933      	cbnz	r3, 800bae6 <_free_r+0x32>
 800bad8:	6063      	str	r3, [r4, #4]
 800bada:	6014      	str	r4, [r2, #0]
 800badc:	b003      	add	sp, #12
 800bade:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bae2:	f001 b851 	b.w	800cb88 <__malloc_unlock>
 800bae6:	42a3      	cmp	r3, r4
 800bae8:	d90b      	bls.n	800bb02 <_free_r+0x4e>
 800baea:	6821      	ldr	r1, [r4, #0]
 800baec:	1862      	adds	r2, r4, r1
 800baee:	4293      	cmp	r3, r2
 800baf0:	bf04      	itt	eq
 800baf2:	681a      	ldreq	r2, [r3, #0]
 800baf4:	685b      	ldreq	r3, [r3, #4]
 800baf6:	6063      	str	r3, [r4, #4]
 800baf8:	bf04      	itt	eq
 800bafa:	1852      	addeq	r2, r2, r1
 800bafc:	6022      	streq	r2, [r4, #0]
 800bafe:	602c      	str	r4, [r5, #0]
 800bb00:	e7ec      	b.n	800badc <_free_r+0x28>
 800bb02:	461a      	mov	r2, r3
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	b10b      	cbz	r3, 800bb0c <_free_r+0x58>
 800bb08:	42a3      	cmp	r3, r4
 800bb0a:	d9fa      	bls.n	800bb02 <_free_r+0x4e>
 800bb0c:	6811      	ldr	r1, [r2, #0]
 800bb0e:	1855      	adds	r5, r2, r1
 800bb10:	42a5      	cmp	r5, r4
 800bb12:	d10b      	bne.n	800bb2c <_free_r+0x78>
 800bb14:	6824      	ldr	r4, [r4, #0]
 800bb16:	4421      	add	r1, r4
 800bb18:	1854      	adds	r4, r2, r1
 800bb1a:	42a3      	cmp	r3, r4
 800bb1c:	6011      	str	r1, [r2, #0]
 800bb1e:	d1dd      	bne.n	800badc <_free_r+0x28>
 800bb20:	681c      	ldr	r4, [r3, #0]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	6053      	str	r3, [r2, #4]
 800bb26:	4421      	add	r1, r4
 800bb28:	6011      	str	r1, [r2, #0]
 800bb2a:	e7d7      	b.n	800badc <_free_r+0x28>
 800bb2c:	d902      	bls.n	800bb34 <_free_r+0x80>
 800bb2e:	230c      	movs	r3, #12
 800bb30:	6003      	str	r3, [r0, #0]
 800bb32:	e7d3      	b.n	800badc <_free_r+0x28>
 800bb34:	6825      	ldr	r5, [r4, #0]
 800bb36:	1961      	adds	r1, r4, r5
 800bb38:	428b      	cmp	r3, r1
 800bb3a:	bf04      	itt	eq
 800bb3c:	6819      	ldreq	r1, [r3, #0]
 800bb3e:	685b      	ldreq	r3, [r3, #4]
 800bb40:	6063      	str	r3, [r4, #4]
 800bb42:	bf04      	itt	eq
 800bb44:	1949      	addeq	r1, r1, r5
 800bb46:	6021      	streq	r1, [r4, #0]
 800bb48:	6054      	str	r4, [r2, #4]
 800bb4a:	e7c7      	b.n	800badc <_free_r+0x28>
 800bb4c:	b003      	add	sp, #12
 800bb4e:	bd30      	pop	{r4, r5, pc}
 800bb50:	20000268 	.word	0x20000268

0800bb54 <_malloc_r>:
 800bb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb56:	1ccd      	adds	r5, r1, #3
 800bb58:	f025 0503 	bic.w	r5, r5, #3
 800bb5c:	3508      	adds	r5, #8
 800bb5e:	2d0c      	cmp	r5, #12
 800bb60:	bf38      	it	cc
 800bb62:	250c      	movcc	r5, #12
 800bb64:	2d00      	cmp	r5, #0
 800bb66:	4606      	mov	r6, r0
 800bb68:	db01      	blt.n	800bb6e <_malloc_r+0x1a>
 800bb6a:	42a9      	cmp	r1, r5
 800bb6c:	d903      	bls.n	800bb76 <_malloc_r+0x22>
 800bb6e:	230c      	movs	r3, #12
 800bb70:	6033      	str	r3, [r6, #0]
 800bb72:	2000      	movs	r0, #0
 800bb74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb76:	f001 f801 	bl	800cb7c <__malloc_lock>
 800bb7a:	4921      	ldr	r1, [pc, #132]	; (800bc00 <_malloc_r+0xac>)
 800bb7c:	680a      	ldr	r2, [r1, #0]
 800bb7e:	4614      	mov	r4, r2
 800bb80:	b99c      	cbnz	r4, 800bbaa <_malloc_r+0x56>
 800bb82:	4f20      	ldr	r7, [pc, #128]	; (800bc04 <_malloc_r+0xb0>)
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	b923      	cbnz	r3, 800bb92 <_malloc_r+0x3e>
 800bb88:	4621      	mov	r1, r4
 800bb8a:	4630      	mov	r0, r6
 800bb8c:	f000 fcd0 	bl	800c530 <_sbrk_r>
 800bb90:	6038      	str	r0, [r7, #0]
 800bb92:	4629      	mov	r1, r5
 800bb94:	4630      	mov	r0, r6
 800bb96:	f000 fccb 	bl	800c530 <_sbrk_r>
 800bb9a:	1c43      	adds	r3, r0, #1
 800bb9c:	d123      	bne.n	800bbe6 <_malloc_r+0x92>
 800bb9e:	230c      	movs	r3, #12
 800bba0:	6033      	str	r3, [r6, #0]
 800bba2:	4630      	mov	r0, r6
 800bba4:	f000 fff0 	bl	800cb88 <__malloc_unlock>
 800bba8:	e7e3      	b.n	800bb72 <_malloc_r+0x1e>
 800bbaa:	6823      	ldr	r3, [r4, #0]
 800bbac:	1b5b      	subs	r3, r3, r5
 800bbae:	d417      	bmi.n	800bbe0 <_malloc_r+0x8c>
 800bbb0:	2b0b      	cmp	r3, #11
 800bbb2:	d903      	bls.n	800bbbc <_malloc_r+0x68>
 800bbb4:	6023      	str	r3, [r4, #0]
 800bbb6:	441c      	add	r4, r3
 800bbb8:	6025      	str	r5, [r4, #0]
 800bbba:	e004      	b.n	800bbc6 <_malloc_r+0x72>
 800bbbc:	6863      	ldr	r3, [r4, #4]
 800bbbe:	42a2      	cmp	r2, r4
 800bbc0:	bf0c      	ite	eq
 800bbc2:	600b      	streq	r3, [r1, #0]
 800bbc4:	6053      	strne	r3, [r2, #4]
 800bbc6:	4630      	mov	r0, r6
 800bbc8:	f000 ffde 	bl	800cb88 <__malloc_unlock>
 800bbcc:	f104 000b 	add.w	r0, r4, #11
 800bbd0:	1d23      	adds	r3, r4, #4
 800bbd2:	f020 0007 	bic.w	r0, r0, #7
 800bbd6:	1ac2      	subs	r2, r0, r3
 800bbd8:	d0cc      	beq.n	800bb74 <_malloc_r+0x20>
 800bbda:	1a1b      	subs	r3, r3, r0
 800bbdc:	50a3      	str	r3, [r4, r2]
 800bbde:	e7c9      	b.n	800bb74 <_malloc_r+0x20>
 800bbe0:	4622      	mov	r2, r4
 800bbe2:	6864      	ldr	r4, [r4, #4]
 800bbe4:	e7cc      	b.n	800bb80 <_malloc_r+0x2c>
 800bbe6:	1cc4      	adds	r4, r0, #3
 800bbe8:	f024 0403 	bic.w	r4, r4, #3
 800bbec:	42a0      	cmp	r0, r4
 800bbee:	d0e3      	beq.n	800bbb8 <_malloc_r+0x64>
 800bbf0:	1a21      	subs	r1, r4, r0
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	f000 fc9c 	bl	800c530 <_sbrk_r>
 800bbf8:	3001      	adds	r0, #1
 800bbfa:	d1dd      	bne.n	800bbb8 <_malloc_r+0x64>
 800bbfc:	e7cf      	b.n	800bb9e <_malloc_r+0x4a>
 800bbfe:	bf00      	nop
 800bc00:	20000268 	.word	0x20000268
 800bc04:	2000026c 	.word	0x2000026c

0800bc08 <__ssputs_r>:
 800bc08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc0c:	688e      	ldr	r6, [r1, #8]
 800bc0e:	429e      	cmp	r6, r3
 800bc10:	4682      	mov	sl, r0
 800bc12:	460c      	mov	r4, r1
 800bc14:	4690      	mov	r8, r2
 800bc16:	461f      	mov	r7, r3
 800bc18:	d838      	bhi.n	800bc8c <__ssputs_r+0x84>
 800bc1a:	898a      	ldrh	r2, [r1, #12]
 800bc1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc20:	d032      	beq.n	800bc88 <__ssputs_r+0x80>
 800bc22:	6825      	ldr	r5, [r4, #0]
 800bc24:	6909      	ldr	r1, [r1, #16]
 800bc26:	eba5 0901 	sub.w	r9, r5, r1
 800bc2a:	6965      	ldr	r5, [r4, #20]
 800bc2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc34:	3301      	adds	r3, #1
 800bc36:	444b      	add	r3, r9
 800bc38:	106d      	asrs	r5, r5, #1
 800bc3a:	429d      	cmp	r5, r3
 800bc3c:	bf38      	it	cc
 800bc3e:	461d      	movcc	r5, r3
 800bc40:	0553      	lsls	r3, r2, #21
 800bc42:	d531      	bpl.n	800bca8 <__ssputs_r+0xa0>
 800bc44:	4629      	mov	r1, r5
 800bc46:	f7ff ff85 	bl	800bb54 <_malloc_r>
 800bc4a:	4606      	mov	r6, r0
 800bc4c:	b950      	cbnz	r0, 800bc64 <__ssputs_r+0x5c>
 800bc4e:	230c      	movs	r3, #12
 800bc50:	f8ca 3000 	str.w	r3, [sl]
 800bc54:	89a3      	ldrh	r3, [r4, #12]
 800bc56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc5a:	81a3      	strh	r3, [r4, #12]
 800bc5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc64:	6921      	ldr	r1, [r4, #16]
 800bc66:	464a      	mov	r2, r9
 800bc68:	f7fc fb16 	bl	8008298 <memcpy>
 800bc6c:	89a3      	ldrh	r3, [r4, #12]
 800bc6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc76:	81a3      	strh	r3, [r4, #12]
 800bc78:	6126      	str	r6, [r4, #16]
 800bc7a:	6165      	str	r5, [r4, #20]
 800bc7c:	444e      	add	r6, r9
 800bc7e:	eba5 0509 	sub.w	r5, r5, r9
 800bc82:	6026      	str	r6, [r4, #0]
 800bc84:	60a5      	str	r5, [r4, #8]
 800bc86:	463e      	mov	r6, r7
 800bc88:	42be      	cmp	r6, r7
 800bc8a:	d900      	bls.n	800bc8e <__ssputs_r+0x86>
 800bc8c:	463e      	mov	r6, r7
 800bc8e:	4632      	mov	r2, r6
 800bc90:	6820      	ldr	r0, [r4, #0]
 800bc92:	4641      	mov	r1, r8
 800bc94:	f000 ff58 	bl	800cb48 <memmove>
 800bc98:	68a3      	ldr	r3, [r4, #8]
 800bc9a:	6822      	ldr	r2, [r4, #0]
 800bc9c:	1b9b      	subs	r3, r3, r6
 800bc9e:	4432      	add	r2, r6
 800bca0:	60a3      	str	r3, [r4, #8]
 800bca2:	6022      	str	r2, [r4, #0]
 800bca4:	2000      	movs	r0, #0
 800bca6:	e7db      	b.n	800bc60 <__ssputs_r+0x58>
 800bca8:	462a      	mov	r2, r5
 800bcaa:	f000 ff73 	bl	800cb94 <_realloc_r>
 800bcae:	4606      	mov	r6, r0
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	d1e1      	bne.n	800bc78 <__ssputs_r+0x70>
 800bcb4:	6921      	ldr	r1, [r4, #16]
 800bcb6:	4650      	mov	r0, sl
 800bcb8:	f7ff fefc 	bl	800bab4 <_free_r>
 800bcbc:	e7c7      	b.n	800bc4e <__ssputs_r+0x46>
	...

0800bcc0 <_svfiprintf_r>:
 800bcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc4:	4698      	mov	r8, r3
 800bcc6:	898b      	ldrh	r3, [r1, #12]
 800bcc8:	061b      	lsls	r3, r3, #24
 800bcca:	b09d      	sub	sp, #116	; 0x74
 800bccc:	4607      	mov	r7, r0
 800bcce:	460d      	mov	r5, r1
 800bcd0:	4614      	mov	r4, r2
 800bcd2:	d50e      	bpl.n	800bcf2 <_svfiprintf_r+0x32>
 800bcd4:	690b      	ldr	r3, [r1, #16]
 800bcd6:	b963      	cbnz	r3, 800bcf2 <_svfiprintf_r+0x32>
 800bcd8:	2140      	movs	r1, #64	; 0x40
 800bcda:	f7ff ff3b 	bl	800bb54 <_malloc_r>
 800bcde:	6028      	str	r0, [r5, #0]
 800bce0:	6128      	str	r0, [r5, #16]
 800bce2:	b920      	cbnz	r0, 800bcee <_svfiprintf_r+0x2e>
 800bce4:	230c      	movs	r3, #12
 800bce6:	603b      	str	r3, [r7, #0]
 800bce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcec:	e0d1      	b.n	800be92 <_svfiprintf_r+0x1d2>
 800bcee:	2340      	movs	r3, #64	; 0x40
 800bcf0:	616b      	str	r3, [r5, #20]
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	9309      	str	r3, [sp, #36]	; 0x24
 800bcf6:	2320      	movs	r3, #32
 800bcf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd00:	2330      	movs	r3, #48	; 0x30
 800bd02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800beac <_svfiprintf_r+0x1ec>
 800bd06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd0a:	f04f 0901 	mov.w	r9, #1
 800bd0e:	4623      	mov	r3, r4
 800bd10:	469a      	mov	sl, r3
 800bd12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd16:	b10a      	cbz	r2, 800bd1c <_svfiprintf_r+0x5c>
 800bd18:	2a25      	cmp	r2, #37	; 0x25
 800bd1a:	d1f9      	bne.n	800bd10 <_svfiprintf_r+0x50>
 800bd1c:	ebba 0b04 	subs.w	fp, sl, r4
 800bd20:	d00b      	beq.n	800bd3a <_svfiprintf_r+0x7a>
 800bd22:	465b      	mov	r3, fp
 800bd24:	4622      	mov	r2, r4
 800bd26:	4629      	mov	r1, r5
 800bd28:	4638      	mov	r0, r7
 800bd2a:	f7ff ff6d 	bl	800bc08 <__ssputs_r>
 800bd2e:	3001      	adds	r0, #1
 800bd30:	f000 80aa 	beq.w	800be88 <_svfiprintf_r+0x1c8>
 800bd34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd36:	445a      	add	r2, fp
 800bd38:	9209      	str	r2, [sp, #36]	; 0x24
 800bd3a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	f000 80a2 	beq.w	800be88 <_svfiprintf_r+0x1c8>
 800bd44:	2300      	movs	r3, #0
 800bd46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd4e:	f10a 0a01 	add.w	sl, sl, #1
 800bd52:	9304      	str	r3, [sp, #16]
 800bd54:	9307      	str	r3, [sp, #28]
 800bd56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd5a:	931a      	str	r3, [sp, #104]	; 0x68
 800bd5c:	4654      	mov	r4, sl
 800bd5e:	2205      	movs	r2, #5
 800bd60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd64:	4851      	ldr	r0, [pc, #324]	; (800beac <_svfiprintf_r+0x1ec>)
 800bd66:	f7f4 fa73 	bl	8000250 <memchr>
 800bd6a:	9a04      	ldr	r2, [sp, #16]
 800bd6c:	b9d8      	cbnz	r0, 800bda6 <_svfiprintf_r+0xe6>
 800bd6e:	06d0      	lsls	r0, r2, #27
 800bd70:	bf44      	itt	mi
 800bd72:	2320      	movmi	r3, #32
 800bd74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd78:	0711      	lsls	r1, r2, #28
 800bd7a:	bf44      	itt	mi
 800bd7c:	232b      	movmi	r3, #43	; 0x2b
 800bd7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd82:	f89a 3000 	ldrb.w	r3, [sl]
 800bd86:	2b2a      	cmp	r3, #42	; 0x2a
 800bd88:	d015      	beq.n	800bdb6 <_svfiprintf_r+0xf6>
 800bd8a:	9a07      	ldr	r2, [sp, #28]
 800bd8c:	4654      	mov	r4, sl
 800bd8e:	2000      	movs	r0, #0
 800bd90:	f04f 0c0a 	mov.w	ip, #10
 800bd94:	4621      	mov	r1, r4
 800bd96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd9a:	3b30      	subs	r3, #48	; 0x30
 800bd9c:	2b09      	cmp	r3, #9
 800bd9e:	d94e      	bls.n	800be3e <_svfiprintf_r+0x17e>
 800bda0:	b1b0      	cbz	r0, 800bdd0 <_svfiprintf_r+0x110>
 800bda2:	9207      	str	r2, [sp, #28]
 800bda4:	e014      	b.n	800bdd0 <_svfiprintf_r+0x110>
 800bda6:	eba0 0308 	sub.w	r3, r0, r8
 800bdaa:	fa09 f303 	lsl.w	r3, r9, r3
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	9304      	str	r3, [sp, #16]
 800bdb2:	46a2      	mov	sl, r4
 800bdb4:	e7d2      	b.n	800bd5c <_svfiprintf_r+0x9c>
 800bdb6:	9b03      	ldr	r3, [sp, #12]
 800bdb8:	1d19      	adds	r1, r3, #4
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	9103      	str	r1, [sp, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	bfbb      	ittet	lt
 800bdc2:	425b      	neglt	r3, r3
 800bdc4:	f042 0202 	orrlt.w	r2, r2, #2
 800bdc8:	9307      	strge	r3, [sp, #28]
 800bdca:	9307      	strlt	r3, [sp, #28]
 800bdcc:	bfb8      	it	lt
 800bdce:	9204      	strlt	r2, [sp, #16]
 800bdd0:	7823      	ldrb	r3, [r4, #0]
 800bdd2:	2b2e      	cmp	r3, #46	; 0x2e
 800bdd4:	d10c      	bne.n	800bdf0 <_svfiprintf_r+0x130>
 800bdd6:	7863      	ldrb	r3, [r4, #1]
 800bdd8:	2b2a      	cmp	r3, #42	; 0x2a
 800bdda:	d135      	bne.n	800be48 <_svfiprintf_r+0x188>
 800bddc:	9b03      	ldr	r3, [sp, #12]
 800bdde:	1d1a      	adds	r2, r3, #4
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	9203      	str	r2, [sp, #12]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	bfb8      	it	lt
 800bde8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bdec:	3402      	adds	r4, #2
 800bdee:	9305      	str	r3, [sp, #20]
 800bdf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bebc <_svfiprintf_r+0x1fc>
 800bdf4:	7821      	ldrb	r1, [r4, #0]
 800bdf6:	2203      	movs	r2, #3
 800bdf8:	4650      	mov	r0, sl
 800bdfa:	f7f4 fa29 	bl	8000250 <memchr>
 800bdfe:	b140      	cbz	r0, 800be12 <_svfiprintf_r+0x152>
 800be00:	2340      	movs	r3, #64	; 0x40
 800be02:	eba0 000a 	sub.w	r0, r0, sl
 800be06:	fa03 f000 	lsl.w	r0, r3, r0
 800be0a:	9b04      	ldr	r3, [sp, #16]
 800be0c:	4303      	orrs	r3, r0
 800be0e:	3401      	adds	r4, #1
 800be10:	9304      	str	r3, [sp, #16]
 800be12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be16:	4826      	ldr	r0, [pc, #152]	; (800beb0 <_svfiprintf_r+0x1f0>)
 800be18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be1c:	2206      	movs	r2, #6
 800be1e:	f7f4 fa17 	bl	8000250 <memchr>
 800be22:	2800      	cmp	r0, #0
 800be24:	d038      	beq.n	800be98 <_svfiprintf_r+0x1d8>
 800be26:	4b23      	ldr	r3, [pc, #140]	; (800beb4 <_svfiprintf_r+0x1f4>)
 800be28:	bb1b      	cbnz	r3, 800be72 <_svfiprintf_r+0x1b2>
 800be2a:	9b03      	ldr	r3, [sp, #12]
 800be2c:	3307      	adds	r3, #7
 800be2e:	f023 0307 	bic.w	r3, r3, #7
 800be32:	3308      	adds	r3, #8
 800be34:	9303      	str	r3, [sp, #12]
 800be36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be38:	4433      	add	r3, r6
 800be3a:	9309      	str	r3, [sp, #36]	; 0x24
 800be3c:	e767      	b.n	800bd0e <_svfiprintf_r+0x4e>
 800be3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800be42:	460c      	mov	r4, r1
 800be44:	2001      	movs	r0, #1
 800be46:	e7a5      	b.n	800bd94 <_svfiprintf_r+0xd4>
 800be48:	2300      	movs	r3, #0
 800be4a:	3401      	adds	r4, #1
 800be4c:	9305      	str	r3, [sp, #20]
 800be4e:	4619      	mov	r1, r3
 800be50:	f04f 0c0a 	mov.w	ip, #10
 800be54:	4620      	mov	r0, r4
 800be56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be5a:	3a30      	subs	r2, #48	; 0x30
 800be5c:	2a09      	cmp	r2, #9
 800be5e:	d903      	bls.n	800be68 <_svfiprintf_r+0x1a8>
 800be60:	2b00      	cmp	r3, #0
 800be62:	d0c5      	beq.n	800bdf0 <_svfiprintf_r+0x130>
 800be64:	9105      	str	r1, [sp, #20]
 800be66:	e7c3      	b.n	800bdf0 <_svfiprintf_r+0x130>
 800be68:	fb0c 2101 	mla	r1, ip, r1, r2
 800be6c:	4604      	mov	r4, r0
 800be6e:	2301      	movs	r3, #1
 800be70:	e7f0      	b.n	800be54 <_svfiprintf_r+0x194>
 800be72:	ab03      	add	r3, sp, #12
 800be74:	9300      	str	r3, [sp, #0]
 800be76:	462a      	mov	r2, r5
 800be78:	4b0f      	ldr	r3, [pc, #60]	; (800beb8 <_svfiprintf_r+0x1f8>)
 800be7a:	a904      	add	r1, sp, #16
 800be7c:	4638      	mov	r0, r7
 800be7e:	f7fc fab3 	bl	80083e8 <_printf_float>
 800be82:	1c42      	adds	r2, r0, #1
 800be84:	4606      	mov	r6, r0
 800be86:	d1d6      	bne.n	800be36 <_svfiprintf_r+0x176>
 800be88:	89ab      	ldrh	r3, [r5, #12]
 800be8a:	065b      	lsls	r3, r3, #25
 800be8c:	f53f af2c 	bmi.w	800bce8 <_svfiprintf_r+0x28>
 800be90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be92:	b01d      	add	sp, #116	; 0x74
 800be94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be98:	ab03      	add	r3, sp, #12
 800be9a:	9300      	str	r3, [sp, #0]
 800be9c:	462a      	mov	r2, r5
 800be9e:	4b06      	ldr	r3, [pc, #24]	; (800beb8 <_svfiprintf_r+0x1f8>)
 800bea0:	a904      	add	r1, sp, #16
 800bea2:	4638      	mov	r0, r7
 800bea4:	f7fc fd2c 	bl	8008900 <_printf_i>
 800bea8:	e7eb      	b.n	800be82 <_svfiprintf_r+0x1c2>
 800beaa:	bf00      	nop
 800beac:	0800d674 	.word	0x0800d674
 800beb0:	0800d67e 	.word	0x0800d67e
 800beb4:	080083e9 	.word	0x080083e9
 800beb8:	0800bc09 	.word	0x0800bc09
 800bebc:	0800d67a 	.word	0x0800d67a

0800bec0 <_sungetc_r>:
 800bec0:	b538      	push	{r3, r4, r5, lr}
 800bec2:	1c4b      	adds	r3, r1, #1
 800bec4:	4614      	mov	r4, r2
 800bec6:	d103      	bne.n	800bed0 <_sungetc_r+0x10>
 800bec8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800becc:	4628      	mov	r0, r5
 800bece:	bd38      	pop	{r3, r4, r5, pc}
 800bed0:	8993      	ldrh	r3, [r2, #12]
 800bed2:	f023 0320 	bic.w	r3, r3, #32
 800bed6:	8193      	strh	r3, [r2, #12]
 800bed8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800beda:	6852      	ldr	r2, [r2, #4]
 800bedc:	b2cd      	uxtb	r5, r1
 800bede:	b18b      	cbz	r3, 800bf04 <_sungetc_r+0x44>
 800bee0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bee2:	4293      	cmp	r3, r2
 800bee4:	dd08      	ble.n	800bef8 <_sungetc_r+0x38>
 800bee6:	6823      	ldr	r3, [r4, #0]
 800bee8:	1e5a      	subs	r2, r3, #1
 800beea:	6022      	str	r2, [r4, #0]
 800beec:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bef0:	6863      	ldr	r3, [r4, #4]
 800bef2:	3301      	adds	r3, #1
 800bef4:	6063      	str	r3, [r4, #4]
 800bef6:	e7e9      	b.n	800becc <_sungetc_r+0xc>
 800bef8:	4621      	mov	r1, r4
 800befa:	f000 fbf3 	bl	800c6e4 <__submore>
 800befe:	2800      	cmp	r0, #0
 800bf00:	d0f1      	beq.n	800bee6 <_sungetc_r+0x26>
 800bf02:	e7e1      	b.n	800bec8 <_sungetc_r+0x8>
 800bf04:	6921      	ldr	r1, [r4, #16]
 800bf06:	6823      	ldr	r3, [r4, #0]
 800bf08:	b151      	cbz	r1, 800bf20 <_sungetc_r+0x60>
 800bf0a:	4299      	cmp	r1, r3
 800bf0c:	d208      	bcs.n	800bf20 <_sungetc_r+0x60>
 800bf0e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bf12:	42a9      	cmp	r1, r5
 800bf14:	d104      	bne.n	800bf20 <_sungetc_r+0x60>
 800bf16:	3b01      	subs	r3, #1
 800bf18:	3201      	adds	r2, #1
 800bf1a:	6023      	str	r3, [r4, #0]
 800bf1c:	6062      	str	r2, [r4, #4]
 800bf1e:	e7d5      	b.n	800becc <_sungetc_r+0xc>
 800bf20:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800bf24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf28:	6363      	str	r3, [r4, #52]	; 0x34
 800bf2a:	2303      	movs	r3, #3
 800bf2c:	63a3      	str	r3, [r4, #56]	; 0x38
 800bf2e:	4623      	mov	r3, r4
 800bf30:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bf34:	6023      	str	r3, [r4, #0]
 800bf36:	2301      	movs	r3, #1
 800bf38:	e7dc      	b.n	800bef4 <_sungetc_r+0x34>

0800bf3a <__ssrefill_r>:
 800bf3a:	b510      	push	{r4, lr}
 800bf3c:	460c      	mov	r4, r1
 800bf3e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bf40:	b169      	cbz	r1, 800bf5e <__ssrefill_r+0x24>
 800bf42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf46:	4299      	cmp	r1, r3
 800bf48:	d001      	beq.n	800bf4e <__ssrefill_r+0x14>
 800bf4a:	f7ff fdb3 	bl	800bab4 <_free_r>
 800bf4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf50:	6063      	str	r3, [r4, #4]
 800bf52:	2000      	movs	r0, #0
 800bf54:	6360      	str	r0, [r4, #52]	; 0x34
 800bf56:	b113      	cbz	r3, 800bf5e <__ssrefill_r+0x24>
 800bf58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bf5a:	6023      	str	r3, [r4, #0]
 800bf5c:	bd10      	pop	{r4, pc}
 800bf5e:	6923      	ldr	r3, [r4, #16]
 800bf60:	6023      	str	r3, [r4, #0]
 800bf62:	2300      	movs	r3, #0
 800bf64:	6063      	str	r3, [r4, #4]
 800bf66:	89a3      	ldrh	r3, [r4, #12]
 800bf68:	f043 0320 	orr.w	r3, r3, #32
 800bf6c:	81a3      	strh	r3, [r4, #12]
 800bf6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf72:	e7f3      	b.n	800bf5c <__ssrefill_r+0x22>

0800bf74 <__ssvfiscanf_r>:
 800bf74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf78:	460c      	mov	r4, r1
 800bf7a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800bf7e:	2100      	movs	r1, #0
 800bf80:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bf84:	49b2      	ldr	r1, [pc, #712]	; (800c250 <__ssvfiscanf_r+0x2dc>)
 800bf86:	91a0      	str	r1, [sp, #640]	; 0x280
 800bf88:	f10d 0804 	add.w	r8, sp, #4
 800bf8c:	49b1      	ldr	r1, [pc, #708]	; (800c254 <__ssvfiscanf_r+0x2e0>)
 800bf8e:	4fb2      	ldr	r7, [pc, #712]	; (800c258 <__ssvfiscanf_r+0x2e4>)
 800bf90:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800c25c <__ssvfiscanf_r+0x2e8>
 800bf94:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bf98:	4606      	mov	r6, r0
 800bf9a:	91a1      	str	r1, [sp, #644]	; 0x284
 800bf9c:	9300      	str	r3, [sp, #0]
 800bf9e:	f892 a000 	ldrb.w	sl, [r2]
 800bfa2:	f1ba 0f00 	cmp.w	sl, #0
 800bfa6:	f000 8151 	beq.w	800c24c <__ssvfiscanf_r+0x2d8>
 800bfaa:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800bfae:	f013 0308 	ands.w	r3, r3, #8
 800bfb2:	f102 0501 	add.w	r5, r2, #1
 800bfb6:	d019      	beq.n	800bfec <__ssvfiscanf_r+0x78>
 800bfb8:	6863      	ldr	r3, [r4, #4]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	dd0f      	ble.n	800bfde <__ssvfiscanf_r+0x6a>
 800bfbe:	6823      	ldr	r3, [r4, #0]
 800bfc0:	781a      	ldrb	r2, [r3, #0]
 800bfc2:	5cba      	ldrb	r2, [r7, r2]
 800bfc4:	0712      	lsls	r2, r2, #28
 800bfc6:	d401      	bmi.n	800bfcc <__ssvfiscanf_r+0x58>
 800bfc8:	462a      	mov	r2, r5
 800bfca:	e7e8      	b.n	800bf9e <__ssvfiscanf_r+0x2a>
 800bfcc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bfce:	3201      	adds	r2, #1
 800bfd0:	9245      	str	r2, [sp, #276]	; 0x114
 800bfd2:	6862      	ldr	r2, [r4, #4]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	3a01      	subs	r2, #1
 800bfd8:	6062      	str	r2, [r4, #4]
 800bfda:	6023      	str	r3, [r4, #0]
 800bfdc:	e7ec      	b.n	800bfb8 <__ssvfiscanf_r+0x44>
 800bfde:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bfe0:	4621      	mov	r1, r4
 800bfe2:	4630      	mov	r0, r6
 800bfe4:	4798      	blx	r3
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	d0e9      	beq.n	800bfbe <__ssvfiscanf_r+0x4a>
 800bfea:	e7ed      	b.n	800bfc8 <__ssvfiscanf_r+0x54>
 800bfec:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800bff0:	f040 8083 	bne.w	800c0fa <__ssvfiscanf_r+0x186>
 800bff4:	9341      	str	r3, [sp, #260]	; 0x104
 800bff6:	9343      	str	r3, [sp, #268]	; 0x10c
 800bff8:	7853      	ldrb	r3, [r2, #1]
 800bffa:	2b2a      	cmp	r3, #42	; 0x2a
 800bffc:	bf02      	ittt	eq
 800bffe:	2310      	moveq	r3, #16
 800c000:	1c95      	addeq	r5, r2, #2
 800c002:	9341      	streq	r3, [sp, #260]	; 0x104
 800c004:	220a      	movs	r2, #10
 800c006:	46ab      	mov	fp, r5
 800c008:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800c00c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c010:	2b09      	cmp	r3, #9
 800c012:	d91d      	bls.n	800c050 <__ssvfiscanf_r+0xdc>
 800c014:	4891      	ldr	r0, [pc, #580]	; (800c25c <__ssvfiscanf_r+0x2e8>)
 800c016:	2203      	movs	r2, #3
 800c018:	f7f4 f91a 	bl	8000250 <memchr>
 800c01c:	b140      	cbz	r0, 800c030 <__ssvfiscanf_r+0xbc>
 800c01e:	2301      	movs	r3, #1
 800c020:	eba0 0009 	sub.w	r0, r0, r9
 800c024:	fa03 f000 	lsl.w	r0, r3, r0
 800c028:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c02a:	4318      	orrs	r0, r3
 800c02c:	9041      	str	r0, [sp, #260]	; 0x104
 800c02e:	465d      	mov	r5, fp
 800c030:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c034:	2b78      	cmp	r3, #120	; 0x78
 800c036:	d806      	bhi.n	800c046 <__ssvfiscanf_r+0xd2>
 800c038:	2b57      	cmp	r3, #87	; 0x57
 800c03a:	d810      	bhi.n	800c05e <__ssvfiscanf_r+0xea>
 800c03c:	2b25      	cmp	r3, #37	; 0x25
 800c03e:	d05c      	beq.n	800c0fa <__ssvfiscanf_r+0x186>
 800c040:	d856      	bhi.n	800c0f0 <__ssvfiscanf_r+0x17c>
 800c042:	2b00      	cmp	r3, #0
 800c044:	d074      	beq.n	800c130 <__ssvfiscanf_r+0x1bc>
 800c046:	2303      	movs	r3, #3
 800c048:	9347      	str	r3, [sp, #284]	; 0x11c
 800c04a:	230a      	movs	r3, #10
 800c04c:	9342      	str	r3, [sp, #264]	; 0x108
 800c04e:	e081      	b.n	800c154 <__ssvfiscanf_r+0x1e0>
 800c050:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c052:	fb02 1303 	mla	r3, r2, r3, r1
 800c056:	3b30      	subs	r3, #48	; 0x30
 800c058:	9343      	str	r3, [sp, #268]	; 0x10c
 800c05a:	465d      	mov	r5, fp
 800c05c:	e7d3      	b.n	800c006 <__ssvfiscanf_r+0x92>
 800c05e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c062:	2a20      	cmp	r2, #32
 800c064:	d8ef      	bhi.n	800c046 <__ssvfiscanf_r+0xd2>
 800c066:	a101      	add	r1, pc, #4	; (adr r1, 800c06c <__ssvfiscanf_r+0xf8>)
 800c068:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c06c:	0800c13f 	.word	0x0800c13f
 800c070:	0800c047 	.word	0x0800c047
 800c074:	0800c047 	.word	0x0800c047
 800c078:	0800c19d 	.word	0x0800c19d
 800c07c:	0800c047 	.word	0x0800c047
 800c080:	0800c047 	.word	0x0800c047
 800c084:	0800c047 	.word	0x0800c047
 800c088:	0800c047 	.word	0x0800c047
 800c08c:	0800c047 	.word	0x0800c047
 800c090:	0800c047 	.word	0x0800c047
 800c094:	0800c047 	.word	0x0800c047
 800c098:	0800c1b3 	.word	0x0800c1b3
 800c09c:	0800c189 	.word	0x0800c189
 800c0a0:	0800c0f7 	.word	0x0800c0f7
 800c0a4:	0800c0f7 	.word	0x0800c0f7
 800c0a8:	0800c0f7 	.word	0x0800c0f7
 800c0ac:	0800c047 	.word	0x0800c047
 800c0b0:	0800c18d 	.word	0x0800c18d
 800c0b4:	0800c047 	.word	0x0800c047
 800c0b8:	0800c047 	.word	0x0800c047
 800c0bc:	0800c047 	.word	0x0800c047
 800c0c0:	0800c047 	.word	0x0800c047
 800c0c4:	0800c1c3 	.word	0x0800c1c3
 800c0c8:	0800c195 	.word	0x0800c195
 800c0cc:	0800c137 	.word	0x0800c137
 800c0d0:	0800c047 	.word	0x0800c047
 800c0d4:	0800c047 	.word	0x0800c047
 800c0d8:	0800c1bf 	.word	0x0800c1bf
 800c0dc:	0800c047 	.word	0x0800c047
 800c0e0:	0800c189 	.word	0x0800c189
 800c0e4:	0800c047 	.word	0x0800c047
 800c0e8:	0800c047 	.word	0x0800c047
 800c0ec:	0800c13f 	.word	0x0800c13f
 800c0f0:	3b45      	subs	r3, #69	; 0x45
 800c0f2:	2b02      	cmp	r3, #2
 800c0f4:	d8a7      	bhi.n	800c046 <__ssvfiscanf_r+0xd2>
 800c0f6:	2305      	movs	r3, #5
 800c0f8:	e02b      	b.n	800c152 <__ssvfiscanf_r+0x1de>
 800c0fa:	6863      	ldr	r3, [r4, #4]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	dd0d      	ble.n	800c11c <__ssvfiscanf_r+0x1a8>
 800c100:	6823      	ldr	r3, [r4, #0]
 800c102:	781a      	ldrb	r2, [r3, #0]
 800c104:	4552      	cmp	r2, sl
 800c106:	f040 80a1 	bne.w	800c24c <__ssvfiscanf_r+0x2d8>
 800c10a:	3301      	adds	r3, #1
 800c10c:	6862      	ldr	r2, [r4, #4]
 800c10e:	6023      	str	r3, [r4, #0]
 800c110:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c112:	3a01      	subs	r2, #1
 800c114:	3301      	adds	r3, #1
 800c116:	6062      	str	r2, [r4, #4]
 800c118:	9345      	str	r3, [sp, #276]	; 0x114
 800c11a:	e755      	b.n	800bfc8 <__ssvfiscanf_r+0x54>
 800c11c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c11e:	4621      	mov	r1, r4
 800c120:	4630      	mov	r0, r6
 800c122:	4798      	blx	r3
 800c124:	2800      	cmp	r0, #0
 800c126:	d0eb      	beq.n	800c100 <__ssvfiscanf_r+0x18c>
 800c128:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c12a:	2800      	cmp	r0, #0
 800c12c:	f040 8084 	bne.w	800c238 <__ssvfiscanf_r+0x2c4>
 800c130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c134:	e086      	b.n	800c244 <__ssvfiscanf_r+0x2d0>
 800c136:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c138:	f042 0220 	orr.w	r2, r2, #32
 800c13c:	9241      	str	r2, [sp, #260]	; 0x104
 800c13e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c144:	9241      	str	r2, [sp, #260]	; 0x104
 800c146:	2210      	movs	r2, #16
 800c148:	2b6f      	cmp	r3, #111	; 0x6f
 800c14a:	9242      	str	r2, [sp, #264]	; 0x108
 800c14c:	bf34      	ite	cc
 800c14e:	2303      	movcc	r3, #3
 800c150:	2304      	movcs	r3, #4
 800c152:	9347      	str	r3, [sp, #284]	; 0x11c
 800c154:	6863      	ldr	r3, [r4, #4]
 800c156:	2b00      	cmp	r3, #0
 800c158:	dd41      	ble.n	800c1de <__ssvfiscanf_r+0x26a>
 800c15a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c15c:	0659      	lsls	r1, r3, #25
 800c15e:	d404      	bmi.n	800c16a <__ssvfiscanf_r+0x1f6>
 800c160:	6823      	ldr	r3, [r4, #0]
 800c162:	781a      	ldrb	r2, [r3, #0]
 800c164:	5cba      	ldrb	r2, [r7, r2]
 800c166:	0712      	lsls	r2, r2, #28
 800c168:	d440      	bmi.n	800c1ec <__ssvfiscanf_r+0x278>
 800c16a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c16c:	2b02      	cmp	r3, #2
 800c16e:	dc4f      	bgt.n	800c210 <__ssvfiscanf_r+0x29c>
 800c170:	466b      	mov	r3, sp
 800c172:	4622      	mov	r2, r4
 800c174:	a941      	add	r1, sp, #260	; 0x104
 800c176:	4630      	mov	r0, r6
 800c178:	f000 f874 	bl	800c264 <_scanf_chars>
 800c17c:	2801      	cmp	r0, #1
 800c17e:	d065      	beq.n	800c24c <__ssvfiscanf_r+0x2d8>
 800c180:	2802      	cmp	r0, #2
 800c182:	f47f af21 	bne.w	800bfc8 <__ssvfiscanf_r+0x54>
 800c186:	e7cf      	b.n	800c128 <__ssvfiscanf_r+0x1b4>
 800c188:	220a      	movs	r2, #10
 800c18a:	e7dd      	b.n	800c148 <__ssvfiscanf_r+0x1d4>
 800c18c:	2300      	movs	r3, #0
 800c18e:	9342      	str	r3, [sp, #264]	; 0x108
 800c190:	2303      	movs	r3, #3
 800c192:	e7de      	b.n	800c152 <__ssvfiscanf_r+0x1de>
 800c194:	2308      	movs	r3, #8
 800c196:	9342      	str	r3, [sp, #264]	; 0x108
 800c198:	2304      	movs	r3, #4
 800c19a:	e7da      	b.n	800c152 <__ssvfiscanf_r+0x1de>
 800c19c:	4629      	mov	r1, r5
 800c19e:	4640      	mov	r0, r8
 800c1a0:	f000 f9d6 	bl	800c550 <__sccl>
 800c1a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c1a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1aa:	9341      	str	r3, [sp, #260]	; 0x104
 800c1ac:	4605      	mov	r5, r0
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e7cf      	b.n	800c152 <__ssvfiscanf_r+0x1de>
 800c1b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c1b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1b8:	9341      	str	r3, [sp, #260]	; 0x104
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	e7c9      	b.n	800c152 <__ssvfiscanf_r+0x1de>
 800c1be:	2302      	movs	r3, #2
 800c1c0:	e7c7      	b.n	800c152 <__ssvfiscanf_r+0x1de>
 800c1c2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c1c4:	06c3      	lsls	r3, r0, #27
 800c1c6:	f53f aeff 	bmi.w	800bfc8 <__ssvfiscanf_r+0x54>
 800c1ca:	9b00      	ldr	r3, [sp, #0]
 800c1cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c1ce:	1d19      	adds	r1, r3, #4
 800c1d0:	9100      	str	r1, [sp, #0]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	07c0      	lsls	r0, r0, #31
 800c1d6:	bf4c      	ite	mi
 800c1d8:	801a      	strhmi	r2, [r3, #0]
 800c1da:	601a      	strpl	r2, [r3, #0]
 800c1dc:	e6f4      	b.n	800bfc8 <__ssvfiscanf_r+0x54>
 800c1de:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c1e0:	4621      	mov	r1, r4
 800c1e2:	4630      	mov	r0, r6
 800c1e4:	4798      	blx	r3
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	d0b7      	beq.n	800c15a <__ssvfiscanf_r+0x1e6>
 800c1ea:	e79d      	b.n	800c128 <__ssvfiscanf_r+0x1b4>
 800c1ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c1ee:	3201      	adds	r2, #1
 800c1f0:	9245      	str	r2, [sp, #276]	; 0x114
 800c1f2:	6862      	ldr	r2, [r4, #4]
 800c1f4:	3a01      	subs	r2, #1
 800c1f6:	2a00      	cmp	r2, #0
 800c1f8:	6062      	str	r2, [r4, #4]
 800c1fa:	dd02      	ble.n	800c202 <__ssvfiscanf_r+0x28e>
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	6023      	str	r3, [r4, #0]
 800c200:	e7ae      	b.n	800c160 <__ssvfiscanf_r+0x1ec>
 800c202:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c204:	4621      	mov	r1, r4
 800c206:	4630      	mov	r0, r6
 800c208:	4798      	blx	r3
 800c20a:	2800      	cmp	r0, #0
 800c20c:	d0a8      	beq.n	800c160 <__ssvfiscanf_r+0x1ec>
 800c20e:	e78b      	b.n	800c128 <__ssvfiscanf_r+0x1b4>
 800c210:	2b04      	cmp	r3, #4
 800c212:	dc06      	bgt.n	800c222 <__ssvfiscanf_r+0x2ae>
 800c214:	466b      	mov	r3, sp
 800c216:	4622      	mov	r2, r4
 800c218:	a941      	add	r1, sp, #260	; 0x104
 800c21a:	4630      	mov	r0, r6
 800c21c:	f000 f87a 	bl	800c314 <_scanf_i>
 800c220:	e7ac      	b.n	800c17c <__ssvfiscanf_r+0x208>
 800c222:	4b0f      	ldr	r3, [pc, #60]	; (800c260 <__ssvfiscanf_r+0x2ec>)
 800c224:	2b00      	cmp	r3, #0
 800c226:	f43f aecf 	beq.w	800bfc8 <__ssvfiscanf_r+0x54>
 800c22a:	466b      	mov	r3, sp
 800c22c:	4622      	mov	r2, r4
 800c22e:	a941      	add	r1, sp, #260	; 0x104
 800c230:	4630      	mov	r0, r6
 800c232:	f7fc fc8b 	bl	8008b4c <_scanf_float>
 800c236:	e7a1      	b.n	800c17c <__ssvfiscanf_r+0x208>
 800c238:	89a3      	ldrh	r3, [r4, #12]
 800c23a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c23e:	bf18      	it	ne
 800c240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800c244:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800c248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c24c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c24e:	e7f9      	b.n	800c244 <__ssvfiscanf_r+0x2d0>
 800c250:	0800bec1 	.word	0x0800bec1
 800c254:	0800bf3b 	.word	0x0800bf3b
 800c258:	0800d301 	.word	0x0800d301
 800c25c:	0800d67a 	.word	0x0800d67a
 800c260:	08008b4d 	.word	0x08008b4d

0800c264 <_scanf_chars>:
 800c264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c268:	4615      	mov	r5, r2
 800c26a:	688a      	ldr	r2, [r1, #8]
 800c26c:	4680      	mov	r8, r0
 800c26e:	460c      	mov	r4, r1
 800c270:	b932      	cbnz	r2, 800c280 <_scanf_chars+0x1c>
 800c272:	698a      	ldr	r2, [r1, #24]
 800c274:	2a00      	cmp	r2, #0
 800c276:	bf0c      	ite	eq
 800c278:	2201      	moveq	r2, #1
 800c27a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800c27e:	608a      	str	r2, [r1, #8]
 800c280:	6822      	ldr	r2, [r4, #0]
 800c282:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c310 <_scanf_chars+0xac>
 800c286:	06d1      	lsls	r1, r2, #27
 800c288:	bf5f      	itttt	pl
 800c28a:	681a      	ldrpl	r2, [r3, #0]
 800c28c:	1d11      	addpl	r1, r2, #4
 800c28e:	6019      	strpl	r1, [r3, #0]
 800c290:	6816      	ldrpl	r6, [r2, #0]
 800c292:	2700      	movs	r7, #0
 800c294:	69a0      	ldr	r0, [r4, #24]
 800c296:	b188      	cbz	r0, 800c2bc <_scanf_chars+0x58>
 800c298:	2801      	cmp	r0, #1
 800c29a:	d107      	bne.n	800c2ac <_scanf_chars+0x48>
 800c29c:	682b      	ldr	r3, [r5, #0]
 800c29e:	781a      	ldrb	r2, [r3, #0]
 800c2a0:	6963      	ldr	r3, [r4, #20]
 800c2a2:	5c9b      	ldrb	r3, [r3, r2]
 800c2a4:	b953      	cbnz	r3, 800c2bc <_scanf_chars+0x58>
 800c2a6:	bb27      	cbnz	r7, 800c2f2 <_scanf_chars+0x8e>
 800c2a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2ac:	2802      	cmp	r0, #2
 800c2ae:	d120      	bne.n	800c2f2 <_scanf_chars+0x8e>
 800c2b0:	682b      	ldr	r3, [r5, #0]
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c2b8:	071b      	lsls	r3, r3, #28
 800c2ba:	d41a      	bmi.n	800c2f2 <_scanf_chars+0x8e>
 800c2bc:	6823      	ldr	r3, [r4, #0]
 800c2be:	06da      	lsls	r2, r3, #27
 800c2c0:	bf5e      	ittt	pl
 800c2c2:	682b      	ldrpl	r3, [r5, #0]
 800c2c4:	781b      	ldrbpl	r3, [r3, #0]
 800c2c6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c2ca:	682a      	ldr	r2, [r5, #0]
 800c2cc:	686b      	ldr	r3, [r5, #4]
 800c2ce:	3201      	adds	r2, #1
 800c2d0:	602a      	str	r2, [r5, #0]
 800c2d2:	68a2      	ldr	r2, [r4, #8]
 800c2d4:	3b01      	subs	r3, #1
 800c2d6:	3a01      	subs	r2, #1
 800c2d8:	606b      	str	r3, [r5, #4]
 800c2da:	3701      	adds	r7, #1
 800c2dc:	60a2      	str	r2, [r4, #8]
 800c2de:	b142      	cbz	r2, 800c2f2 <_scanf_chars+0x8e>
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	dcd7      	bgt.n	800c294 <_scanf_chars+0x30>
 800c2e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c2e8:	4629      	mov	r1, r5
 800c2ea:	4640      	mov	r0, r8
 800c2ec:	4798      	blx	r3
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	d0d0      	beq.n	800c294 <_scanf_chars+0x30>
 800c2f2:	6823      	ldr	r3, [r4, #0]
 800c2f4:	f013 0310 	ands.w	r3, r3, #16
 800c2f8:	d105      	bne.n	800c306 <_scanf_chars+0xa2>
 800c2fa:	68e2      	ldr	r2, [r4, #12]
 800c2fc:	3201      	adds	r2, #1
 800c2fe:	60e2      	str	r2, [r4, #12]
 800c300:	69a2      	ldr	r2, [r4, #24]
 800c302:	b102      	cbz	r2, 800c306 <_scanf_chars+0xa2>
 800c304:	7033      	strb	r3, [r6, #0]
 800c306:	6923      	ldr	r3, [r4, #16]
 800c308:	441f      	add	r7, r3
 800c30a:	6127      	str	r7, [r4, #16]
 800c30c:	2000      	movs	r0, #0
 800c30e:	e7cb      	b.n	800c2a8 <_scanf_chars+0x44>
 800c310:	0800d301 	.word	0x0800d301

0800c314 <_scanf_i>:
 800c314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c318:	4698      	mov	r8, r3
 800c31a:	4b74      	ldr	r3, [pc, #464]	; (800c4ec <_scanf_i+0x1d8>)
 800c31c:	460c      	mov	r4, r1
 800c31e:	4682      	mov	sl, r0
 800c320:	4616      	mov	r6, r2
 800c322:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c326:	b087      	sub	sp, #28
 800c328:	ab03      	add	r3, sp, #12
 800c32a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c32e:	4b70      	ldr	r3, [pc, #448]	; (800c4f0 <_scanf_i+0x1dc>)
 800c330:	69a1      	ldr	r1, [r4, #24]
 800c332:	4a70      	ldr	r2, [pc, #448]	; (800c4f4 <_scanf_i+0x1e0>)
 800c334:	2903      	cmp	r1, #3
 800c336:	bf18      	it	ne
 800c338:	461a      	movne	r2, r3
 800c33a:	68a3      	ldr	r3, [r4, #8]
 800c33c:	9201      	str	r2, [sp, #4]
 800c33e:	1e5a      	subs	r2, r3, #1
 800c340:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c344:	bf88      	it	hi
 800c346:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c34a:	4627      	mov	r7, r4
 800c34c:	bf82      	ittt	hi
 800c34e:	eb03 0905 	addhi.w	r9, r3, r5
 800c352:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c356:	60a3      	strhi	r3, [r4, #8]
 800c358:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c35c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c360:	bf98      	it	ls
 800c362:	f04f 0900 	movls.w	r9, #0
 800c366:	6023      	str	r3, [r4, #0]
 800c368:	463d      	mov	r5, r7
 800c36a:	f04f 0b00 	mov.w	fp, #0
 800c36e:	6831      	ldr	r1, [r6, #0]
 800c370:	ab03      	add	r3, sp, #12
 800c372:	7809      	ldrb	r1, [r1, #0]
 800c374:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c378:	2202      	movs	r2, #2
 800c37a:	f7f3 ff69 	bl	8000250 <memchr>
 800c37e:	b328      	cbz	r0, 800c3cc <_scanf_i+0xb8>
 800c380:	f1bb 0f01 	cmp.w	fp, #1
 800c384:	d159      	bne.n	800c43a <_scanf_i+0x126>
 800c386:	6862      	ldr	r2, [r4, #4]
 800c388:	b92a      	cbnz	r2, 800c396 <_scanf_i+0x82>
 800c38a:	6822      	ldr	r2, [r4, #0]
 800c38c:	2308      	movs	r3, #8
 800c38e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c392:	6063      	str	r3, [r4, #4]
 800c394:	6022      	str	r2, [r4, #0]
 800c396:	6822      	ldr	r2, [r4, #0]
 800c398:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c39c:	6022      	str	r2, [r4, #0]
 800c39e:	68a2      	ldr	r2, [r4, #8]
 800c3a0:	1e51      	subs	r1, r2, #1
 800c3a2:	60a1      	str	r1, [r4, #8]
 800c3a4:	b192      	cbz	r2, 800c3cc <_scanf_i+0xb8>
 800c3a6:	6832      	ldr	r2, [r6, #0]
 800c3a8:	1c51      	adds	r1, r2, #1
 800c3aa:	6031      	str	r1, [r6, #0]
 800c3ac:	7812      	ldrb	r2, [r2, #0]
 800c3ae:	f805 2b01 	strb.w	r2, [r5], #1
 800c3b2:	6872      	ldr	r2, [r6, #4]
 800c3b4:	3a01      	subs	r2, #1
 800c3b6:	2a00      	cmp	r2, #0
 800c3b8:	6072      	str	r2, [r6, #4]
 800c3ba:	dc07      	bgt.n	800c3cc <_scanf_i+0xb8>
 800c3bc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c3c0:	4631      	mov	r1, r6
 800c3c2:	4650      	mov	r0, sl
 800c3c4:	4790      	blx	r2
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	f040 8085 	bne.w	800c4d6 <_scanf_i+0x1c2>
 800c3cc:	f10b 0b01 	add.w	fp, fp, #1
 800c3d0:	f1bb 0f03 	cmp.w	fp, #3
 800c3d4:	d1cb      	bne.n	800c36e <_scanf_i+0x5a>
 800c3d6:	6863      	ldr	r3, [r4, #4]
 800c3d8:	b90b      	cbnz	r3, 800c3de <_scanf_i+0xca>
 800c3da:	230a      	movs	r3, #10
 800c3dc:	6063      	str	r3, [r4, #4]
 800c3de:	6863      	ldr	r3, [r4, #4]
 800c3e0:	4945      	ldr	r1, [pc, #276]	; (800c4f8 <_scanf_i+0x1e4>)
 800c3e2:	6960      	ldr	r0, [r4, #20]
 800c3e4:	1ac9      	subs	r1, r1, r3
 800c3e6:	f000 f8b3 	bl	800c550 <__sccl>
 800c3ea:	f04f 0b00 	mov.w	fp, #0
 800c3ee:	68a3      	ldr	r3, [r4, #8]
 800c3f0:	6822      	ldr	r2, [r4, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d03d      	beq.n	800c472 <_scanf_i+0x15e>
 800c3f6:	6831      	ldr	r1, [r6, #0]
 800c3f8:	6960      	ldr	r0, [r4, #20]
 800c3fa:	f891 c000 	ldrb.w	ip, [r1]
 800c3fe:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c402:	2800      	cmp	r0, #0
 800c404:	d035      	beq.n	800c472 <_scanf_i+0x15e>
 800c406:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c40a:	d124      	bne.n	800c456 <_scanf_i+0x142>
 800c40c:	0510      	lsls	r0, r2, #20
 800c40e:	d522      	bpl.n	800c456 <_scanf_i+0x142>
 800c410:	f10b 0b01 	add.w	fp, fp, #1
 800c414:	f1b9 0f00 	cmp.w	r9, #0
 800c418:	d003      	beq.n	800c422 <_scanf_i+0x10e>
 800c41a:	3301      	adds	r3, #1
 800c41c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c420:	60a3      	str	r3, [r4, #8]
 800c422:	6873      	ldr	r3, [r6, #4]
 800c424:	3b01      	subs	r3, #1
 800c426:	2b00      	cmp	r3, #0
 800c428:	6073      	str	r3, [r6, #4]
 800c42a:	dd1b      	ble.n	800c464 <_scanf_i+0x150>
 800c42c:	6833      	ldr	r3, [r6, #0]
 800c42e:	3301      	adds	r3, #1
 800c430:	6033      	str	r3, [r6, #0]
 800c432:	68a3      	ldr	r3, [r4, #8]
 800c434:	3b01      	subs	r3, #1
 800c436:	60a3      	str	r3, [r4, #8]
 800c438:	e7d9      	b.n	800c3ee <_scanf_i+0xda>
 800c43a:	f1bb 0f02 	cmp.w	fp, #2
 800c43e:	d1ae      	bne.n	800c39e <_scanf_i+0x8a>
 800c440:	6822      	ldr	r2, [r4, #0]
 800c442:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c446:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c44a:	d1bf      	bne.n	800c3cc <_scanf_i+0xb8>
 800c44c:	2310      	movs	r3, #16
 800c44e:	6063      	str	r3, [r4, #4]
 800c450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c454:	e7a2      	b.n	800c39c <_scanf_i+0x88>
 800c456:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c45a:	6022      	str	r2, [r4, #0]
 800c45c:	780b      	ldrb	r3, [r1, #0]
 800c45e:	f805 3b01 	strb.w	r3, [r5], #1
 800c462:	e7de      	b.n	800c422 <_scanf_i+0x10e>
 800c464:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c468:	4631      	mov	r1, r6
 800c46a:	4650      	mov	r0, sl
 800c46c:	4798      	blx	r3
 800c46e:	2800      	cmp	r0, #0
 800c470:	d0df      	beq.n	800c432 <_scanf_i+0x11e>
 800c472:	6823      	ldr	r3, [r4, #0]
 800c474:	05d9      	lsls	r1, r3, #23
 800c476:	d50d      	bpl.n	800c494 <_scanf_i+0x180>
 800c478:	42bd      	cmp	r5, r7
 800c47a:	d909      	bls.n	800c490 <_scanf_i+0x17c>
 800c47c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c480:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c484:	4632      	mov	r2, r6
 800c486:	4650      	mov	r0, sl
 800c488:	4798      	blx	r3
 800c48a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800c48e:	464d      	mov	r5, r9
 800c490:	42bd      	cmp	r5, r7
 800c492:	d028      	beq.n	800c4e6 <_scanf_i+0x1d2>
 800c494:	6822      	ldr	r2, [r4, #0]
 800c496:	f012 0210 	ands.w	r2, r2, #16
 800c49a:	d113      	bne.n	800c4c4 <_scanf_i+0x1b0>
 800c49c:	702a      	strb	r2, [r5, #0]
 800c49e:	6863      	ldr	r3, [r4, #4]
 800c4a0:	9e01      	ldr	r6, [sp, #4]
 800c4a2:	4639      	mov	r1, r7
 800c4a4:	4650      	mov	r0, sl
 800c4a6:	47b0      	blx	r6
 800c4a8:	f8d8 3000 	ldr.w	r3, [r8]
 800c4ac:	6821      	ldr	r1, [r4, #0]
 800c4ae:	1d1a      	adds	r2, r3, #4
 800c4b0:	f8c8 2000 	str.w	r2, [r8]
 800c4b4:	f011 0f20 	tst.w	r1, #32
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	d00f      	beq.n	800c4dc <_scanf_i+0x1c8>
 800c4bc:	6018      	str	r0, [r3, #0]
 800c4be:	68e3      	ldr	r3, [r4, #12]
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	60e3      	str	r3, [r4, #12]
 800c4c4:	1bed      	subs	r5, r5, r7
 800c4c6:	44ab      	add	fp, r5
 800c4c8:	6925      	ldr	r5, [r4, #16]
 800c4ca:	445d      	add	r5, fp
 800c4cc:	6125      	str	r5, [r4, #16]
 800c4ce:	2000      	movs	r0, #0
 800c4d0:	b007      	add	sp, #28
 800c4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4d6:	f04f 0b00 	mov.w	fp, #0
 800c4da:	e7ca      	b.n	800c472 <_scanf_i+0x15e>
 800c4dc:	07ca      	lsls	r2, r1, #31
 800c4de:	bf4c      	ite	mi
 800c4e0:	8018      	strhmi	r0, [r3, #0]
 800c4e2:	6018      	strpl	r0, [r3, #0]
 800c4e4:	e7eb      	b.n	800c4be <_scanf_i+0x1aa>
 800c4e6:	2001      	movs	r0, #1
 800c4e8:	e7f2      	b.n	800c4d0 <_scanf_i+0x1bc>
 800c4ea:	bf00      	nop
 800c4ec:	0800d250 	.word	0x0800d250
 800c4f0:	0800c6e1 	.word	0x0800c6e1
 800c4f4:	08009d79 	.word	0x08009d79
 800c4f8:	0800d69e 	.word	0x0800d69e

0800c4fc <_read_r>:
 800c4fc:	b538      	push	{r3, r4, r5, lr}
 800c4fe:	4d07      	ldr	r5, [pc, #28]	; (800c51c <_read_r+0x20>)
 800c500:	4604      	mov	r4, r0
 800c502:	4608      	mov	r0, r1
 800c504:	4611      	mov	r1, r2
 800c506:	2200      	movs	r2, #0
 800c508:	602a      	str	r2, [r5, #0]
 800c50a:	461a      	mov	r2, r3
 800c50c:	f7f6 fb2c 	bl	8002b68 <_read>
 800c510:	1c43      	adds	r3, r0, #1
 800c512:	d102      	bne.n	800c51a <_read_r+0x1e>
 800c514:	682b      	ldr	r3, [r5, #0]
 800c516:	b103      	cbz	r3, 800c51a <_read_r+0x1e>
 800c518:	6023      	str	r3, [r4, #0]
 800c51a:	bd38      	pop	{r3, r4, r5, pc}
 800c51c:	2000084c 	.word	0x2000084c

0800c520 <nan>:
 800c520:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c528 <nan+0x8>
 800c524:	4770      	bx	lr
 800c526:	bf00      	nop
 800c528:	00000000 	.word	0x00000000
 800c52c:	7ff80000 	.word	0x7ff80000

0800c530 <_sbrk_r>:
 800c530:	b538      	push	{r3, r4, r5, lr}
 800c532:	4d06      	ldr	r5, [pc, #24]	; (800c54c <_sbrk_r+0x1c>)
 800c534:	2300      	movs	r3, #0
 800c536:	4604      	mov	r4, r0
 800c538:	4608      	mov	r0, r1
 800c53a:	602b      	str	r3, [r5, #0]
 800c53c:	f7f6 fb82 	bl	8002c44 <_sbrk>
 800c540:	1c43      	adds	r3, r0, #1
 800c542:	d102      	bne.n	800c54a <_sbrk_r+0x1a>
 800c544:	682b      	ldr	r3, [r5, #0]
 800c546:	b103      	cbz	r3, 800c54a <_sbrk_r+0x1a>
 800c548:	6023      	str	r3, [r4, #0]
 800c54a:	bd38      	pop	{r3, r4, r5, pc}
 800c54c:	2000084c 	.word	0x2000084c

0800c550 <__sccl>:
 800c550:	b570      	push	{r4, r5, r6, lr}
 800c552:	780b      	ldrb	r3, [r1, #0]
 800c554:	4604      	mov	r4, r0
 800c556:	2b5e      	cmp	r3, #94	; 0x5e
 800c558:	bf0b      	itete	eq
 800c55a:	784b      	ldrbeq	r3, [r1, #1]
 800c55c:	1c48      	addne	r0, r1, #1
 800c55e:	1c88      	addeq	r0, r1, #2
 800c560:	2200      	movne	r2, #0
 800c562:	bf08      	it	eq
 800c564:	2201      	moveq	r2, #1
 800c566:	1e61      	subs	r1, r4, #1
 800c568:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c56c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c570:	42a9      	cmp	r1, r5
 800c572:	d1fb      	bne.n	800c56c <__sccl+0x1c>
 800c574:	b90b      	cbnz	r3, 800c57a <__sccl+0x2a>
 800c576:	3801      	subs	r0, #1
 800c578:	bd70      	pop	{r4, r5, r6, pc}
 800c57a:	f082 0101 	eor.w	r1, r2, #1
 800c57e:	54e1      	strb	r1, [r4, r3]
 800c580:	1c42      	adds	r2, r0, #1
 800c582:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800c586:	2d2d      	cmp	r5, #45	; 0x2d
 800c588:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 800c58c:	4610      	mov	r0, r2
 800c58e:	d006      	beq.n	800c59e <__sccl+0x4e>
 800c590:	2d5d      	cmp	r5, #93	; 0x5d
 800c592:	d0f1      	beq.n	800c578 <__sccl+0x28>
 800c594:	b90d      	cbnz	r5, 800c59a <__sccl+0x4a>
 800c596:	4630      	mov	r0, r6
 800c598:	e7ee      	b.n	800c578 <__sccl+0x28>
 800c59a:	462b      	mov	r3, r5
 800c59c:	e7ef      	b.n	800c57e <__sccl+0x2e>
 800c59e:	7816      	ldrb	r6, [r2, #0]
 800c5a0:	2e5d      	cmp	r6, #93	; 0x5d
 800c5a2:	d0fa      	beq.n	800c59a <__sccl+0x4a>
 800c5a4:	42b3      	cmp	r3, r6
 800c5a6:	dcf8      	bgt.n	800c59a <__sccl+0x4a>
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3001      	adds	r0, #1
 800c5ac:	4286      	cmp	r6, r0
 800c5ae:	5421      	strb	r1, [r4, r0]
 800c5b0:	dcfb      	bgt.n	800c5aa <__sccl+0x5a>
 800c5b2:	43d8      	mvns	r0, r3
 800c5b4:	4430      	add	r0, r6
 800c5b6:	1c5d      	adds	r5, r3, #1
 800c5b8:	42b3      	cmp	r3, r6
 800c5ba:	bfa8      	it	ge
 800c5bc:	2000      	movge	r0, #0
 800c5be:	182b      	adds	r3, r5, r0
 800c5c0:	3202      	adds	r2, #2
 800c5c2:	e7de      	b.n	800c582 <__sccl+0x32>

0800c5c4 <strncmp>:
 800c5c4:	b510      	push	{r4, lr}
 800c5c6:	b16a      	cbz	r2, 800c5e4 <strncmp+0x20>
 800c5c8:	3901      	subs	r1, #1
 800c5ca:	1884      	adds	r4, r0, r2
 800c5cc:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c5d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d103      	bne.n	800c5e0 <strncmp+0x1c>
 800c5d8:	42a0      	cmp	r0, r4
 800c5da:	d001      	beq.n	800c5e0 <strncmp+0x1c>
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d1f5      	bne.n	800c5cc <strncmp+0x8>
 800c5e0:	1a98      	subs	r0, r3, r2
 800c5e2:	bd10      	pop	{r4, pc}
 800c5e4:	4610      	mov	r0, r2
 800c5e6:	e7fc      	b.n	800c5e2 <strncmp+0x1e>

0800c5e8 <_strtoul_l.isra.0>:
 800c5e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5ec:	4e3b      	ldr	r6, [pc, #236]	; (800c6dc <_strtoul_l.isra.0+0xf4>)
 800c5ee:	4686      	mov	lr, r0
 800c5f0:	468c      	mov	ip, r1
 800c5f2:	4660      	mov	r0, ip
 800c5f4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c5f8:	5da5      	ldrb	r5, [r4, r6]
 800c5fa:	f015 0508 	ands.w	r5, r5, #8
 800c5fe:	d1f8      	bne.n	800c5f2 <_strtoul_l.isra.0+0xa>
 800c600:	2c2d      	cmp	r4, #45	; 0x2d
 800c602:	d134      	bne.n	800c66e <_strtoul_l.isra.0+0x86>
 800c604:	f89c 4000 	ldrb.w	r4, [ip]
 800c608:	f04f 0801 	mov.w	r8, #1
 800c60c:	f100 0c02 	add.w	ip, r0, #2
 800c610:	2b00      	cmp	r3, #0
 800c612:	d05e      	beq.n	800c6d2 <_strtoul_l.isra.0+0xea>
 800c614:	2b10      	cmp	r3, #16
 800c616:	d10c      	bne.n	800c632 <_strtoul_l.isra.0+0x4a>
 800c618:	2c30      	cmp	r4, #48	; 0x30
 800c61a:	d10a      	bne.n	800c632 <_strtoul_l.isra.0+0x4a>
 800c61c:	f89c 0000 	ldrb.w	r0, [ip]
 800c620:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c624:	2858      	cmp	r0, #88	; 0x58
 800c626:	d14f      	bne.n	800c6c8 <_strtoul_l.isra.0+0xe0>
 800c628:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c62c:	2310      	movs	r3, #16
 800c62e:	f10c 0c02 	add.w	ip, ip, #2
 800c632:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c636:	2500      	movs	r5, #0
 800c638:	fbb7 f7f3 	udiv	r7, r7, r3
 800c63c:	fb03 f907 	mul.w	r9, r3, r7
 800c640:	ea6f 0909 	mvn.w	r9, r9
 800c644:	4628      	mov	r0, r5
 800c646:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c64a:	2e09      	cmp	r6, #9
 800c64c:	d818      	bhi.n	800c680 <_strtoul_l.isra.0+0x98>
 800c64e:	4634      	mov	r4, r6
 800c650:	42a3      	cmp	r3, r4
 800c652:	dd24      	ble.n	800c69e <_strtoul_l.isra.0+0xb6>
 800c654:	2d00      	cmp	r5, #0
 800c656:	db1f      	blt.n	800c698 <_strtoul_l.isra.0+0xb0>
 800c658:	4287      	cmp	r7, r0
 800c65a:	d31d      	bcc.n	800c698 <_strtoul_l.isra.0+0xb0>
 800c65c:	d101      	bne.n	800c662 <_strtoul_l.isra.0+0x7a>
 800c65e:	45a1      	cmp	r9, r4
 800c660:	db1a      	blt.n	800c698 <_strtoul_l.isra.0+0xb0>
 800c662:	fb00 4003 	mla	r0, r0, r3, r4
 800c666:	2501      	movs	r5, #1
 800c668:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c66c:	e7eb      	b.n	800c646 <_strtoul_l.isra.0+0x5e>
 800c66e:	2c2b      	cmp	r4, #43	; 0x2b
 800c670:	bf08      	it	eq
 800c672:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c676:	46a8      	mov	r8, r5
 800c678:	bf08      	it	eq
 800c67a:	f100 0c02 	addeq.w	ip, r0, #2
 800c67e:	e7c7      	b.n	800c610 <_strtoul_l.isra.0+0x28>
 800c680:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c684:	2e19      	cmp	r6, #25
 800c686:	d801      	bhi.n	800c68c <_strtoul_l.isra.0+0xa4>
 800c688:	3c37      	subs	r4, #55	; 0x37
 800c68a:	e7e1      	b.n	800c650 <_strtoul_l.isra.0+0x68>
 800c68c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c690:	2e19      	cmp	r6, #25
 800c692:	d804      	bhi.n	800c69e <_strtoul_l.isra.0+0xb6>
 800c694:	3c57      	subs	r4, #87	; 0x57
 800c696:	e7db      	b.n	800c650 <_strtoul_l.isra.0+0x68>
 800c698:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c69c:	e7e4      	b.n	800c668 <_strtoul_l.isra.0+0x80>
 800c69e:	2d00      	cmp	r5, #0
 800c6a0:	da07      	bge.n	800c6b2 <_strtoul_l.isra.0+0xca>
 800c6a2:	2322      	movs	r3, #34	; 0x22
 800c6a4:	f8ce 3000 	str.w	r3, [lr]
 800c6a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6ac:	b942      	cbnz	r2, 800c6c0 <_strtoul_l.isra.0+0xd8>
 800c6ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6b2:	f1b8 0f00 	cmp.w	r8, #0
 800c6b6:	d000      	beq.n	800c6ba <_strtoul_l.isra.0+0xd2>
 800c6b8:	4240      	negs	r0, r0
 800c6ba:	2a00      	cmp	r2, #0
 800c6bc:	d0f7      	beq.n	800c6ae <_strtoul_l.isra.0+0xc6>
 800c6be:	b10d      	cbz	r5, 800c6c4 <_strtoul_l.isra.0+0xdc>
 800c6c0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800c6c4:	6011      	str	r1, [r2, #0]
 800c6c6:	e7f2      	b.n	800c6ae <_strtoul_l.isra.0+0xc6>
 800c6c8:	2430      	movs	r4, #48	; 0x30
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d1b1      	bne.n	800c632 <_strtoul_l.isra.0+0x4a>
 800c6ce:	2308      	movs	r3, #8
 800c6d0:	e7af      	b.n	800c632 <_strtoul_l.isra.0+0x4a>
 800c6d2:	2c30      	cmp	r4, #48	; 0x30
 800c6d4:	d0a2      	beq.n	800c61c <_strtoul_l.isra.0+0x34>
 800c6d6:	230a      	movs	r3, #10
 800c6d8:	e7ab      	b.n	800c632 <_strtoul_l.isra.0+0x4a>
 800c6da:	bf00      	nop
 800c6dc:	0800d301 	.word	0x0800d301

0800c6e0 <_strtoul_r>:
 800c6e0:	f7ff bf82 	b.w	800c5e8 <_strtoul_l.isra.0>

0800c6e4 <__submore>:
 800c6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e8:	460c      	mov	r4, r1
 800c6ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c6ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6f0:	4299      	cmp	r1, r3
 800c6f2:	d11d      	bne.n	800c730 <__submore+0x4c>
 800c6f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c6f8:	f7ff fa2c 	bl	800bb54 <_malloc_r>
 800c6fc:	b918      	cbnz	r0, 800c706 <__submore+0x22>
 800c6fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c70a:	63a3      	str	r3, [r4, #56]	; 0x38
 800c70c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c710:	6360      	str	r0, [r4, #52]	; 0x34
 800c712:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c716:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c71a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c71e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c722:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c726:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c72a:	6020      	str	r0, [r4, #0]
 800c72c:	2000      	movs	r0, #0
 800c72e:	e7e8      	b.n	800c702 <__submore+0x1e>
 800c730:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c732:	0077      	lsls	r7, r6, #1
 800c734:	463a      	mov	r2, r7
 800c736:	f000 fa2d 	bl	800cb94 <_realloc_r>
 800c73a:	4605      	mov	r5, r0
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d0de      	beq.n	800c6fe <__submore+0x1a>
 800c740:	eb00 0806 	add.w	r8, r0, r6
 800c744:	4601      	mov	r1, r0
 800c746:	4632      	mov	r2, r6
 800c748:	4640      	mov	r0, r8
 800c74a:	f7fb fda5 	bl	8008298 <memcpy>
 800c74e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c752:	f8c4 8000 	str.w	r8, [r4]
 800c756:	e7e9      	b.n	800c72c <__submore+0x48>

0800c758 <__ascii_wctomb>:
 800c758:	b149      	cbz	r1, 800c76e <__ascii_wctomb+0x16>
 800c75a:	2aff      	cmp	r2, #255	; 0xff
 800c75c:	bf85      	ittet	hi
 800c75e:	238a      	movhi	r3, #138	; 0x8a
 800c760:	6003      	strhi	r3, [r0, #0]
 800c762:	700a      	strbls	r2, [r1, #0]
 800c764:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c768:	bf98      	it	ls
 800c76a:	2001      	movls	r0, #1
 800c76c:	4770      	bx	lr
 800c76e:	4608      	mov	r0, r1
 800c770:	4770      	bx	lr
	...

0800c774 <__assert_func>:
 800c774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c776:	4614      	mov	r4, r2
 800c778:	461a      	mov	r2, r3
 800c77a:	4b09      	ldr	r3, [pc, #36]	; (800c7a0 <__assert_func+0x2c>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4605      	mov	r5, r0
 800c780:	68d8      	ldr	r0, [r3, #12]
 800c782:	b14c      	cbz	r4, 800c798 <__assert_func+0x24>
 800c784:	4b07      	ldr	r3, [pc, #28]	; (800c7a4 <__assert_func+0x30>)
 800c786:	9100      	str	r1, [sp, #0]
 800c788:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c78c:	4906      	ldr	r1, [pc, #24]	; (800c7a8 <__assert_func+0x34>)
 800c78e:	462b      	mov	r3, r5
 800c790:	f000 f9a6 	bl	800cae0 <fiprintf>
 800c794:	f000 fc3e 	bl	800d014 <abort>
 800c798:	4b04      	ldr	r3, [pc, #16]	; (800c7ac <__assert_func+0x38>)
 800c79a:	461c      	mov	r4, r3
 800c79c:	e7f3      	b.n	800c786 <__assert_func+0x12>
 800c79e:	bf00      	nop
 800c7a0:	2000005c 	.word	0x2000005c
 800c7a4:	0800d6a0 	.word	0x0800d6a0
 800c7a8:	0800d6ad 	.word	0x0800d6ad
 800c7ac:	0800d6db 	.word	0x0800d6db

0800c7b0 <__sflush_r>:
 800c7b0:	898a      	ldrh	r2, [r1, #12]
 800c7b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7b6:	4605      	mov	r5, r0
 800c7b8:	0710      	lsls	r0, r2, #28
 800c7ba:	460c      	mov	r4, r1
 800c7bc:	d458      	bmi.n	800c870 <__sflush_r+0xc0>
 800c7be:	684b      	ldr	r3, [r1, #4]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	dc05      	bgt.n	800c7d0 <__sflush_r+0x20>
 800c7c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	dc02      	bgt.n	800c7d0 <__sflush_r+0x20>
 800c7ca:	2000      	movs	r0, #0
 800c7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7d2:	2e00      	cmp	r6, #0
 800c7d4:	d0f9      	beq.n	800c7ca <__sflush_r+0x1a>
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c7dc:	682f      	ldr	r7, [r5, #0]
 800c7de:	602b      	str	r3, [r5, #0]
 800c7e0:	d032      	beq.n	800c848 <__sflush_r+0x98>
 800c7e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c7e4:	89a3      	ldrh	r3, [r4, #12]
 800c7e6:	075a      	lsls	r2, r3, #29
 800c7e8:	d505      	bpl.n	800c7f6 <__sflush_r+0x46>
 800c7ea:	6863      	ldr	r3, [r4, #4]
 800c7ec:	1ac0      	subs	r0, r0, r3
 800c7ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7f0:	b10b      	cbz	r3, 800c7f6 <__sflush_r+0x46>
 800c7f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7f4:	1ac0      	subs	r0, r0, r3
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7fc:	6a21      	ldr	r1, [r4, #32]
 800c7fe:	4628      	mov	r0, r5
 800c800:	47b0      	blx	r6
 800c802:	1c43      	adds	r3, r0, #1
 800c804:	89a3      	ldrh	r3, [r4, #12]
 800c806:	d106      	bne.n	800c816 <__sflush_r+0x66>
 800c808:	6829      	ldr	r1, [r5, #0]
 800c80a:	291d      	cmp	r1, #29
 800c80c:	d82c      	bhi.n	800c868 <__sflush_r+0xb8>
 800c80e:	4a2a      	ldr	r2, [pc, #168]	; (800c8b8 <__sflush_r+0x108>)
 800c810:	40ca      	lsrs	r2, r1
 800c812:	07d6      	lsls	r6, r2, #31
 800c814:	d528      	bpl.n	800c868 <__sflush_r+0xb8>
 800c816:	2200      	movs	r2, #0
 800c818:	6062      	str	r2, [r4, #4]
 800c81a:	04d9      	lsls	r1, r3, #19
 800c81c:	6922      	ldr	r2, [r4, #16]
 800c81e:	6022      	str	r2, [r4, #0]
 800c820:	d504      	bpl.n	800c82c <__sflush_r+0x7c>
 800c822:	1c42      	adds	r2, r0, #1
 800c824:	d101      	bne.n	800c82a <__sflush_r+0x7a>
 800c826:	682b      	ldr	r3, [r5, #0]
 800c828:	b903      	cbnz	r3, 800c82c <__sflush_r+0x7c>
 800c82a:	6560      	str	r0, [r4, #84]	; 0x54
 800c82c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c82e:	602f      	str	r7, [r5, #0]
 800c830:	2900      	cmp	r1, #0
 800c832:	d0ca      	beq.n	800c7ca <__sflush_r+0x1a>
 800c834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c838:	4299      	cmp	r1, r3
 800c83a:	d002      	beq.n	800c842 <__sflush_r+0x92>
 800c83c:	4628      	mov	r0, r5
 800c83e:	f7ff f939 	bl	800bab4 <_free_r>
 800c842:	2000      	movs	r0, #0
 800c844:	6360      	str	r0, [r4, #52]	; 0x34
 800c846:	e7c1      	b.n	800c7cc <__sflush_r+0x1c>
 800c848:	6a21      	ldr	r1, [r4, #32]
 800c84a:	2301      	movs	r3, #1
 800c84c:	4628      	mov	r0, r5
 800c84e:	47b0      	blx	r6
 800c850:	1c41      	adds	r1, r0, #1
 800c852:	d1c7      	bne.n	800c7e4 <__sflush_r+0x34>
 800c854:	682b      	ldr	r3, [r5, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d0c4      	beq.n	800c7e4 <__sflush_r+0x34>
 800c85a:	2b1d      	cmp	r3, #29
 800c85c:	d001      	beq.n	800c862 <__sflush_r+0xb2>
 800c85e:	2b16      	cmp	r3, #22
 800c860:	d101      	bne.n	800c866 <__sflush_r+0xb6>
 800c862:	602f      	str	r7, [r5, #0]
 800c864:	e7b1      	b.n	800c7ca <__sflush_r+0x1a>
 800c866:	89a3      	ldrh	r3, [r4, #12]
 800c868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c86c:	81a3      	strh	r3, [r4, #12]
 800c86e:	e7ad      	b.n	800c7cc <__sflush_r+0x1c>
 800c870:	690f      	ldr	r7, [r1, #16]
 800c872:	2f00      	cmp	r7, #0
 800c874:	d0a9      	beq.n	800c7ca <__sflush_r+0x1a>
 800c876:	0793      	lsls	r3, r2, #30
 800c878:	680e      	ldr	r6, [r1, #0]
 800c87a:	bf08      	it	eq
 800c87c:	694b      	ldreq	r3, [r1, #20]
 800c87e:	600f      	str	r7, [r1, #0]
 800c880:	bf18      	it	ne
 800c882:	2300      	movne	r3, #0
 800c884:	eba6 0807 	sub.w	r8, r6, r7
 800c888:	608b      	str	r3, [r1, #8]
 800c88a:	f1b8 0f00 	cmp.w	r8, #0
 800c88e:	dd9c      	ble.n	800c7ca <__sflush_r+0x1a>
 800c890:	6a21      	ldr	r1, [r4, #32]
 800c892:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c894:	4643      	mov	r3, r8
 800c896:	463a      	mov	r2, r7
 800c898:	4628      	mov	r0, r5
 800c89a:	47b0      	blx	r6
 800c89c:	2800      	cmp	r0, #0
 800c89e:	dc06      	bgt.n	800c8ae <__sflush_r+0xfe>
 800c8a0:	89a3      	ldrh	r3, [r4, #12]
 800c8a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8a6:	81a3      	strh	r3, [r4, #12]
 800c8a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8ac:	e78e      	b.n	800c7cc <__sflush_r+0x1c>
 800c8ae:	4407      	add	r7, r0
 800c8b0:	eba8 0800 	sub.w	r8, r8, r0
 800c8b4:	e7e9      	b.n	800c88a <__sflush_r+0xda>
 800c8b6:	bf00      	nop
 800c8b8:	20400001 	.word	0x20400001

0800c8bc <_fflush_r>:
 800c8bc:	b538      	push	{r3, r4, r5, lr}
 800c8be:	690b      	ldr	r3, [r1, #16]
 800c8c0:	4605      	mov	r5, r0
 800c8c2:	460c      	mov	r4, r1
 800c8c4:	b913      	cbnz	r3, 800c8cc <_fflush_r+0x10>
 800c8c6:	2500      	movs	r5, #0
 800c8c8:	4628      	mov	r0, r5
 800c8ca:	bd38      	pop	{r3, r4, r5, pc}
 800c8cc:	b118      	cbz	r0, 800c8d6 <_fflush_r+0x1a>
 800c8ce:	6983      	ldr	r3, [r0, #24]
 800c8d0:	b90b      	cbnz	r3, 800c8d6 <_fflush_r+0x1a>
 800c8d2:	f000 f887 	bl	800c9e4 <__sinit>
 800c8d6:	4b14      	ldr	r3, [pc, #80]	; (800c928 <_fflush_r+0x6c>)
 800c8d8:	429c      	cmp	r4, r3
 800c8da:	d11b      	bne.n	800c914 <_fflush_r+0x58>
 800c8dc:	686c      	ldr	r4, [r5, #4]
 800c8de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d0ef      	beq.n	800c8c6 <_fflush_r+0xa>
 800c8e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c8e8:	07d0      	lsls	r0, r2, #31
 800c8ea:	d404      	bmi.n	800c8f6 <_fflush_r+0x3a>
 800c8ec:	0599      	lsls	r1, r3, #22
 800c8ee:	d402      	bmi.n	800c8f6 <_fflush_r+0x3a>
 800c8f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8f2:	f000 f927 	bl	800cb44 <__retarget_lock_acquire_recursive>
 800c8f6:	4628      	mov	r0, r5
 800c8f8:	4621      	mov	r1, r4
 800c8fa:	f7ff ff59 	bl	800c7b0 <__sflush_r>
 800c8fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c900:	07da      	lsls	r2, r3, #31
 800c902:	4605      	mov	r5, r0
 800c904:	d4e0      	bmi.n	800c8c8 <_fflush_r+0xc>
 800c906:	89a3      	ldrh	r3, [r4, #12]
 800c908:	059b      	lsls	r3, r3, #22
 800c90a:	d4dd      	bmi.n	800c8c8 <_fflush_r+0xc>
 800c90c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c90e:	f000 f91a 	bl	800cb46 <__retarget_lock_release_recursive>
 800c912:	e7d9      	b.n	800c8c8 <_fflush_r+0xc>
 800c914:	4b05      	ldr	r3, [pc, #20]	; (800c92c <_fflush_r+0x70>)
 800c916:	429c      	cmp	r4, r3
 800c918:	d101      	bne.n	800c91e <_fflush_r+0x62>
 800c91a:	68ac      	ldr	r4, [r5, #8]
 800c91c:	e7df      	b.n	800c8de <_fflush_r+0x22>
 800c91e:	4b04      	ldr	r3, [pc, #16]	; (800c930 <_fflush_r+0x74>)
 800c920:	429c      	cmp	r4, r3
 800c922:	bf08      	it	eq
 800c924:	68ec      	ldreq	r4, [r5, #12]
 800c926:	e7da      	b.n	800c8de <_fflush_r+0x22>
 800c928:	0800d6fc 	.word	0x0800d6fc
 800c92c:	0800d71c 	.word	0x0800d71c
 800c930:	0800d6dc 	.word	0x0800d6dc

0800c934 <std>:
 800c934:	2300      	movs	r3, #0
 800c936:	b510      	push	{r4, lr}
 800c938:	4604      	mov	r4, r0
 800c93a:	e9c0 3300 	strd	r3, r3, [r0]
 800c93e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c942:	6083      	str	r3, [r0, #8]
 800c944:	8181      	strh	r1, [r0, #12]
 800c946:	6643      	str	r3, [r0, #100]	; 0x64
 800c948:	81c2      	strh	r2, [r0, #14]
 800c94a:	6183      	str	r3, [r0, #24]
 800c94c:	4619      	mov	r1, r3
 800c94e:	2208      	movs	r2, #8
 800c950:	305c      	adds	r0, #92	; 0x5c
 800c952:	f7fb fcaf 	bl	80082b4 <memset>
 800c956:	4b05      	ldr	r3, [pc, #20]	; (800c96c <std+0x38>)
 800c958:	6263      	str	r3, [r4, #36]	; 0x24
 800c95a:	4b05      	ldr	r3, [pc, #20]	; (800c970 <std+0x3c>)
 800c95c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c95e:	4b05      	ldr	r3, [pc, #20]	; (800c974 <std+0x40>)
 800c960:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c962:	4b05      	ldr	r3, [pc, #20]	; (800c978 <std+0x44>)
 800c964:	6224      	str	r4, [r4, #32]
 800c966:	6323      	str	r3, [r4, #48]	; 0x30
 800c968:	bd10      	pop	{r4, pc}
 800c96a:	bf00      	nop
 800c96c:	08008ff9 	.word	0x08008ff9
 800c970:	0800901f 	.word	0x0800901f
 800c974:	08009057 	.word	0x08009057
 800c978:	0800907b 	.word	0x0800907b

0800c97c <_cleanup_r>:
 800c97c:	4901      	ldr	r1, [pc, #4]	; (800c984 <_cleanup_r+0x8>)
 800c97e:	f000 b8c1 	b.w	800cb04 <_fwalk_reent>
 800c982:	bf00      	nop
 800c984:	0800c8bd 	.word	0x0800c8bd

0800c988 <__sfmoreglue>:
 800c988:	b570      	push	{r4, r5, r6, lr}
 800c98a:	1e4a      	subs	r2, r1, #1
 800c98c:	2568      	movs	r5, #104	; 0x68
 800c98e:	4355      	muls	r5, r2
 800c990:	460e      	mov	r6, r1
 800c992:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c996:	f7ff f8dd 	bl	800bb54 <_malloc_r>
 800c99a:	4604      	mov	r4, r0
 800c99c:	b140      	cbz	r0, 800c9b0 <__sfmoreglue+0x28>
 800c99e:	2100      	movs	r1, #0
 800c9a0:	e9c0 1600 	strd	r1, r6, [r0]
 800c9a4:	300c      	adds	r0, #12
 800c9a6:	60a0      	str	r0, [r4, #8]
 800c9a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c9ac:	f7fb fc82 	bl	80082b4 <memset>
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	bd70      	pop	{r4, r5, r6, pc}

0800c9b4 <__sfp_lock_acquire>:
 800c9b4:	4801      	ldr	r0, [pc, #4]	; (800c9bc <__sfp_lock_acquire+0x8>)
 800c9b6:	f000 b8c5 	b.w	800cb44 <__retarget_lock_acquire_recursive>
 800c9ba:	bf00      	nop
 800c9bc:	20000858 	.word	0x20000858

0800c9c0 <__sfp_lock_release>:
 800c9c0:	4801      	ldr	r0, [pc, #4]	; (800c9c8 <__sfp_lock_release+0x8>)
 800c9c2:	f000 b8c0 	b.w	800cb46 <__retarget_lock_release_recursive>
 800c9c6:	bf00      	nop
 800c9c8:	20000858 	.word	0x20000858

0800c9cc <__sinit_lock_acquire>:
 800c9cc:	4801      	ldr	r0, [pc, #4]	; (800c9d4 <__sinit_lock_acquire+0x8>)
 800c9ce:	f000 b8b9 	b.w	800cb44 <__retarget_lock_acquire_recursive>
 800c9d2:	bf00      	nop
 800c9d4:	20000853 	.word	0x20000853

0800c9d8 <__sinit_lock_release>:
 800c9d8:	4801      	ldr	r0, [pc, #4]	; (800c9e0 <__sinit_lock_release+0x8>)
 800c9da:	f000 b8b4 	b.w	800cb46 <__retarget_lock_release_recursive>
 800c9de:	bf00      	nop
 800c9e0:	20000853 	.word	0x20000853

0800c9e4 <__sinit>:
 800c9e4:	b510      	push	{r4, lr}
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	f7ff fff0 	bl	800c9cc <__sinit_lock_acquire>
 800c9ec:	69a3      	ldr	r3, [r4, #24]
 800c9ee:	b11b      	cbz	r3, 800c9f8 <__sinit+0x14>
 800c9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9f4:	f7ff bff0 	b.w	800c9d8 <__sinit_lock_release>
 800c9f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c9fc:	6523      	str	r3, [r4, #80]	; 0x50
 800c9fe:	4b13      	ldr	r3, [pc, #76]	; (800ca4c <__sinit+0x68>)
 800ca00:	4a13      	ldr	r2, [pc, #76]	; (800ca50 <__sinit+0x6c>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	62a2      	str	r2, [r4, #40]	; 0x28
 800ca06:	42a3      	cmp	r3, r4
 800ca08:	bf04      	itt	eq
 800ca0a:	2301      	moveq	r3, #1
 800ca0c:	61a3      	streq	r3, [r4, #24]
 800ca0e:	4620      	mov	r0, r4
 800ca10:	f000 f820 	bl	800ca54 <__sfp>
 800ca14:	6060      	str	r0, [r4, #4]
 800ca16:	4620      	mov	r0, r4
 800ca18:	f000 f81c 	bl	800ca54 <__sfp>
 800ca1c:	60a0      	str	r0, [r4, #8]
 800ca1e:	4620      	mov	r0, r4
 800ca20:	f000 f818 	bl	800ca54 <__sfp>
 800ca24:	2200      	movs	r2, #0
 800ca26:	60e0      	str	r0, [r4, #12]
 800ca28:	2104      	movs	r1, #4
 800ca2a:	6860      	ldr	r0, [r4, #4]
 800ca2c:	f7ff ff82 	bl	800c934 <std>
 800ca30:	68a0      	ldr	r0, [r4, #8]
 800ca32:	2201      	movs	r2, #1
 800ca34:	2109      	movs	r1, #9
 800ca36:	f7ff ff7d 	bl	800c934 <std>
 800ca3a:	68e0      	ldr	r0, [r4, #12]
 800ca3c:	2202      	movs	r2, #2
 800ca3e:	2112      	movs	r1, #18
 800ca40:	f7ff ff78 	bl	800c934 <std>
 800ca44:	2301      	movs	r3, #1
 800ca46:	61a3      	str	r3, [r4, #24]
 800ca48:	e7d2      	b.n	800c9f0 <__sinit+0xc>
 800ca4a:	bf00      	nop
 800ca4c:	0800d274 	.word	0x0800d274
 800ca50:	0800c97d 	.word	0x0800c97d

0800ca54 <__sfp>:
 800ca54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca56:	4607      	mov	r7, r0
 800ca58:	f7ff ffac 	bl	800c9b4 <__sfp_lock_acquire>
 800ca5c:	4b1e      	ldr	r3, [pc, #120]	; (800cad8 <__sfp+0x84>)
 800ca5e:	681e      	ldr	r6, [r3, #0]
 800ca60:	69b3      	ldr	r3, [r6, #24]
 800ca62:	b913      	cbnz	r3, 800ca6a <__sfp+0x16>
 800ca64:	4630      	mov	r0, r6
 800ca66:	f7ff ffbd 	bl	800c9e4 <__sinit>
 800ca6a:	3648      	adds	r6, #72	; 0x48
 800ca6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ca70:	3b01      	subs	r3, #1
 800ca72:	d503      	bpl.n	800ca7c <__sfp+0x28>
 800ca74:	6833      	ldr	r3, [r6, #0]
 800ca76:	b30b      	cbz	r3, 800cabc <__sfp+0x68>
 800ca78:	6836      	ldr	r6, [r6, #0]
 800ca7a:	e7f7      	b.n	800ca6c <__sfp+0x18>
 800ca7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ca80:	b9d5      	cbnz	r5, 800cab8 <__sfp+0x64>
 800ca82:	4b16      	ldr	r3, [pc, #88]	; (800cadc <__sfp+0x88>)
 800ca84:	60e3      	str	r3, [r4, #12]
 800ca86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ca8a:	6665      	str	r5, [r4, #100]	; 0x64
 800ca8c:	f000 f859 	bl	800cb42 <__retarget_lock_init_recursive>
 800ca90:	f7ff ff96 	bl	800c9c0 <__sfp_lock_release>
 800ca94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ca98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ca9c:	6025      	str	r5, [r4, #0]
 800ca9e:	61a5      	str	r5, [r4, #24]
 800caa0:	2208      	movs	r2, #8
 800caa2:	4629      	mov	r1, r5
 800caa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800caa8:	f7fb fc04 	bl	80082b4 <memset>
 800caac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cab0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cab4:	4620      	mov	r0, r4
 800cab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cab8:	3468      	adds	r4, #104	; 0x68
 800caba:	e7d9      	b.n	800ca70 <__sfp+0x1c>
 800cabc:	2104      	movs	r1, #4
 800cabe:	4638      	mov	r0, r7
 800cac0:	f7ff ff62 	bl	800c988 <__sfmoreglue>
 800cac4:	4604      	mov	r4, r0
 800cac6:	6030      	str	r0, [r6, #0]
 800cac8:	2800      	cmp	r0, #0
 800caca:	d1d5      	bne.n	800ca78 <__sfp+0x24>
 800cacc:	f7ff ff78 	bl	800c9c0 <__sfp_lock_release>
 800cad0:	230c      	movs	r3, #12
 800cad2:	603b      	str	r3, [r7, #0]
 800cad4:	e7ee      	b.n	800cab4 <__sfp+0x60>
 800cad6:	bf00      	nop
 800cad8:	0800d274 	.word	0x0800d274
 800cadc:	ffff0001 	.word	0xffff0001

0800cae0 <fiprintf>:
 800cae0:	b40e      	push	{r1, r2, r3}
 800cae2:	b503      	push	{r0, r1, lr}
 800cae4:	4601      	mov	r1, r0
 800cae6:	ab03      	add	r3, sp, #12
 800cae8:	4805      	ldr	r0, [pc, #20]	; (800cb00 <fiprintf+0x20>)
 800caea:	f853 2b04 	ldr.w	r2, [r3], #4
 800caee:	6800      	ldr	r0, [r0, #0]
 800caf0:	9301      	str	r3, [sp, #4]
 800caf2:	f000 f89f 	bl	800cc34 <_vfiprintf_r>
 800caf6:	b002      	add	sp, #8
 800caf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cafc:	b003      	add	sp, #12
 800cafe:	4770      	bx	lr
 800cb00:	2000005c 	.word	0x2000005c

0800cb04 <_fwalk_reent>:
 800cb04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb08:	4606      	mov	r6, r0
 800cb0a:	4688      	mov	r8, r1
 800cb0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cb10:	2700      	movs	r7, #0
 800cb12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb16:	f1b9 0901 	subs.w	r9, r9, #1
 800cb1a:	d505      	bpl.n	800cb28 <_fwalk_reent+0x24>
 800cb1c:	6824      	ldr	r4, [r4, #0]
 800cb1e:	2c00      	cmp	r4, #0
 800cb20:	d1f7      	bne.n	800cb12 <_fwalk_reent+0xe>
 800cb22:	4638      	mov	r0, r7
 800cb24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb28:	89ab      	ldrh	r3, [r5, #12]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d907      	bls.n	800cb3e <_fwalk_reent+0x3a>
 800cb2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb32:	3301      	adds	r3, #1
 800cb34:	d003      	beq.n	800cb3e <_fwalk_reent+0x3a>
 800cb36:	4629      	mov	r1, r5
 800cb38:	4630      	mov	r0, r6
 800cb3a:	47c0      	blx	r8
 800cb3c:	4307      	orrs	r7, r0
 800cb3e:	3568      	adds	r5, #104	; 0x68
 800cb40:	e7e9      	b.n	800cb16 <_fwalk_reent+0x12>

0800cb42 <__retarget_lock_init_recursive>:
 800cb42:	4770      	bx	lr

0800cb44 <__retarget_lock_acquire_recursive>:
 800cb44:	4770      	bx	lr

0800cb46 <__retarget_lock_release_recursive>:
 800cb46:	4770      	bx	lr

0800cb48 <memmove>:
 800cb48:	4288      	cmp	r0, r1
 800cb4a:	b510      	push	{r4, lr}
 800cb4c:	eb01 0402 	add.w	r4, r1, r2
 800cb50:	d902      	bls.n	800cb58 <memmove+0x10>
 800cb52:	4284      	cmp	r4, r0
 800cb54:	4623      	mov	r3, r4
 800cb56:	d807      	bhi.n	800cb68 <memmove+0x20>
 800cb58:	1e43      	subs	r3, r0, #1
 800cb5a:	42a1      	cmp	r1, r4
 800cb5c:	d008      	beq.n	800cb70 <memmove+0x28>
 800cb5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb62:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb66:	e7f8      	b.n	800cb5a <memmove+0x12>
 800cb68:	4402      	add	r2, r0
 800cb6a:	4601      	mov	r1, r0
 800cb6c:	428a      	cmp	r2, r1
 800cb6e:	d100      	bne.n	800cb72 <memmove+0x2a>
 800cb70:	bd10      	pop	{r4, pc}
 800cb72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb7a:	e7f7      	b.n	800cb6c <memmove+0x24>

0800cb7c <__malloc_lock>:
 800cb7c:	4801      	ldr	r0, [pc, #4]	; (800cb84 <__malloc_lock+0x8>)
 800cb7e:	f7ff bfe1 	b.w	800cb44 <__retarget_lock_acquire_recursive>
 800cb82:	bf00      	nop
 800cb84:	20000854 	.word	0x20000854

0800cb88 <__malloc_unlock>:
 800cb88:	4801      	ldr	r0, [pc, #4]	; (800cb90 <__malloc_unlock+0x8>)
 800cb8a:	f7ff bfdc 	b.w	800cb46 <__retarget_lock_release_recursive>
 800cb8e:	bf00      	nop
 800cb90:	20000854 	.word	0x20000854

0800cb94 <_realloc_r>:
 800cb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb96:	4607      	mov	r7, r0
 800cb98:	4614      	mov	r4, r2
 800cb9a:	460e      	mov	r6, r1
 800cb9c:	b921      	cbnz	r1, 800cba8 <_realloc_r+0x14>
 800cb9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cba2:	4611      	mov	r1, r2
 800cba4:	f7fe bfd6 	b.w	800bb54 <_malloc_r>
 800cba8:	b922      	cbnz	r2, 800cbb4 <_realloc_r+0x20>
 800cbaa:	f7fe ff83 	bl	800bab4 <_free_r>
 800cbae:	4625      	mov	r5, r4
 800cbb0:	4628      	mov	r0, r5
 800cbb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbb4:	f000 fa9a 	bl	800d0ec <_malloc_usable_size_r>
 800cbb8:	42a0      	cmp	r0, r4
 800cbba:	d20f      	bcs.n	800cbdc <_realloc_r+0x48>
 800cbbc:	4621      	mov	r1, r4
 800cbbe:	4638      	mov	r0, r7
 800cbc0:	f7fe ffc8 	bl	800bb54 <_malloc_r>
 800cbc4:	4605      	mov	r5, r0
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d0f2      	beq.n	800cbb0 <_realloc_r+0x1c>
 800cbca:	4631      	mov	r1, r6
 800cbcc:	4622      	mov	r2, r4
 800cbce:	f7fb fb63 	bl	8008298 <memcpy>
 800cbd2:	4631      	mov	r1, r6
 800cbd4:	4638      	mov	r0, r7
 800cbd6:	f7fe ff6d 	bl	800bab4 <_free_r>
 800cbda:	e7e9      	b.n	800cbb0 <_realloc_r+0x1c>
 800cbdc:	4635      	mov	r5, r6
 800cbde:	e7e7      	b.n	800cbb0 <_realloc_r+0x1c>

0800cbe0 <__sfputc_r>:
 800cbe0:	6893      	ldr	r3, [r2, #8]
 800cbe2:	3b01      	subs	r3, #1
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	b410      	push	{r4}
 800cbe8:	6093      	str	r3, [r2, #8]
 800cbea:	da08      	bge.n	800cbfe <__sfputc_r+0x1e>
 800cbec:	6994      	ldr	r4, [r2, #24]
 800cbee:	42a3      	cmp	r3, r4
 800cbf0:	db01      	blt.n	800cbf6 <__sfputc_r+0x16>
 800cbf2:	290a      	cmp	r1, #10
 800cbf4:	d103      	bne.n	800cbfe <__sfputc_r+0x1e>
 800cbf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbfa:	f000 b94b 	b.w	800ce94 <__swbuf_r>
 800cbfe:	6813      	ldr	r3, [r2, #0]
 800cc00:	1c58      	adds	r0, r3, #1
 800cc02:	6010      	str	r0, [r2, #0]
 800cc04:	7019      	strb	r1, [r3, #0]
 800cc06:	4608      	mov	r0, r1
 800cc08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc0c:	4770      	bx	lr

0800cc0e <__sfputs_r>:
 800cc0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc10:	4606      	mov	r6, r0
 800cc12:	460f      	mov	r7, r1
 800cc14:	4614      	mov	r4, r2
 800cc16:	18d5      	adds	r5, r2, r3
 800cc18:	42ac      	cmp	r4, r5
 800cc1a:	d101      	bne.n	800cc20 <__sfputs_r+0x12>
 800cc1c:	2000      	movs	r0, #0
 800cc1e:	e007      	b.n	800cc30 <__sfputs_r+0x22>
 800cc20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc24:	463a      	mov	r2, r7
 800cc26:	4630      	mov	r0, r6
 800cc28:	f7ff ffda 	bl	800cbe0 <__sfputc_r>
 800cc2c:	1c43      	adds	r3, r0, #1
 800cc2e:	d1f3      	bne.n	800cc18 <__sfputs_r+0xa>
 800cc30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc34 <_vfiprintf_r>:
 800cc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc38:	460d      	mov	r5, r1
 800cc3a:	b09d      	sub	sp, #116	; 0x74
 800cc3c:	4614      	mov	r4, r2
 800cc3e:	4698      	mov	r8, r3
 800cc40:	4606      	mov	r6, r0
 800cc42:	b118      	cbz	r0, 800cc4c <_vfiprintf_r+0x18>
 800cc44:	6983      	ldr	r3, [r0, #24]
 800cc46:	b90b      	cbnz	r3, 800cc4c <_vfiprintf_r+0x18>
 800cc48:	f7ff fecc 	bl	800c9e4 <__sinit>
 800cc4c:	4b89      	ldr	r3, [pc, #548]	; (800ce74 <_vfiprintf_r+0x240>)
 800cc4e:	429d      	cmp	r5, r3
 800cc50:	d11b      	bne.n	800cc8a <_vfiprintf_r+0x56>
 800cc52:	6875      	ldr	r5, [r6, #4]
 800cc54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc56:	07d9      	lsls	r1, r3, #31
 800cc58:	d405      	bmi.n	800cc66 <_vfiprintf_r+0x32>
 800cc5a:	89ab      	ldrh	r3, [r5, #12]
 800cc5c:	059a      	lsls	r2, r3, #22
 800cc5e:	d402      	bmi.n	800cc66 <_vfiprintf_r+0x32>
 800cc60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc62:	f7ff ff6f 	bl	800cb44 <__retarget_lock_acquire_recursive>
 800cc66:	89ab      	ldrh	r3, [r5, #12]
 800cc68:	071b      	lsls	r3, r3, #28
 800cc6a:	d501      	bpl.n	800cc70 <_vfiprintf_r+0x3c>
 800cc6c:	692b      	ldr	r3, [r5, #16]
 800cc6e:	b9eb      	cbnz	r3, 800ccac <_vfiprintf_r+0x78>
 800cc70:	4629      	mov	r1, r5
 800cc72:	4630      	mov	r0, r6
 800cc74:	f000 f960 	bl	800cf38 <__swsetup_r>
 800cc78:	b1c0      	cbz	r0, 800ccac <_vfiprintf_r+0x78>
 800cc7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc7c:	07dc      	lsls	r4, r3, #31
 800cc7e:	d50e      	bpl.n	800cc9e <_vfiprintf_r+0x6a>
 800cc80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc84:	b01d      	add	sp, #116	; 0x74
 800cc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc8a:	4b7b      	ldr	r3, [pc, #492]	; (800ce78 <_vfiprintf_r+0x244>)
 800cc8c:	429d      	cmp	r5, r3
 800cc8e:	d101      	bne.n	800cc94 <_vfiprintf_r+0x60>
 800cc90:	68b5      	ldr	r5, [r6, #8]
 800cc92:	e7df      	b.n	800cc54 <_vfiprintf_r+0x20>
 800cc94:	4b79      	ldr	r3, [pc, #484]	; (800ce7c <_vfiprintf_r+0x248>)
 800cc96:	429d      	cmp	r5, r3
 800cc98:	bf08      	it	eq
 800cc9a:	68f5      	ldreq	r5, [r6, #12]
 800cc9c:	e7da      	b.n	800cc54 <_vfiprintf_r+0x20>
 800cc9e:	89ab      	ldrh	r3, [r5, #12]
 800cca0:	0598      	lsls	r0, r3, #22
 800cca2:	d4ed      	bmi.n	800cc80 <_vfiprintf_r+0x4c>
 800cca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cca6:	f7ff ff4e 	bl	800cb46 <__retarget_lock_release_recursive>
 800ccaa:	e7e9      	b.n	800cc80 <_vfiprintf_r+0x4c>
 800ccac:	2300      	movs	r3, #0
 800ccae:	9309      	str	r3, [sp, #36]	; 0x24
 800ccb0:	2320      	movs	r3, #32
 800ccb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccba:	2330      	movs	r3, #48	; 0x30
 800ccbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ce80 <_vfiprintf_r+0x24c>
 800ccc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccc4:	f04f 0901 	mov.w	r9, #1
 800ccc8:	4623      	mov	r3, r4
 800ccca:	469a      	mov	sl, r3
 800cccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccd0:	b10a      	cbz	r2, 800ccd6 <_vfiprintf_r+0xa2>
 800ccd2:	2a25      	cmp	r2, #37	; 0x25
 800ccd4:	d1f9      	bne.n	800ccca <_vfiprintf_r+0x96>
 800ccd6:	ebba 0b04 	subs.w	fp, sl, r4
 800ccda:	d00b      	beq.n	800ccf4 <_vfiprintf_r+0xc0>
 800ccdc:	465b      	mov	r3, fp
 800ccde:	4622      	mov	r2, r4
 800cce0:	4629      	mov	r1, r5
 800cce2:	4630      	mov	r0, r6
 800cce4:	f7ff ff93 	bl	800cc0e <__sfputs_r>
 800cce8:	3001      	adds	r0, #1
 800ccea:	f000 80aa 	beq.w	800ce42 <_vfiprintf_r+0x20e>
 800ccee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccf0:	445a      	add	r2, fp
 800ccf2:	9209      	str	r2, [sp, #36]	; 0x24
 800ccf4:	f89a 3000 	ldrb.w	r3, [sl]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	f000 80a2 	beq.w	800ce42 <_vfiprintf_r+0x20e>
 800ccfe:	2300      	movs	r3, #0
 800cd00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd08:	f10a 0a01 	add.w	sl, sl, #1
 800cd0c:	9304      	str	r3, [sp, #16]
 800cd0e:	9307      	str	r3, [sp, #28]
 800cd10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd14:	931a      	str	r3, [sp, #104]	; 0x68
 800cd16:	4654      	mov	r4, sl
 800cd18:	2205      	movs	r2, #5
 800cd1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd1e:	4858      	ldr	r0, [pc, #352]	; (800ce80 <_vfiprintf_r+0x24c>)
 800cd20:	f7f3 fa96 	bl	8000250 <memchr>
 800cd24:	9a04      	ldr	r2, [sp, #16]
 800cd26:	b9d8      	cbnz	r0, 800cd60 <_vfiprintf_r+0x12c>
 800cd28:	06d1      	lsls	r1, r2, #27
 800cd2a:	bf44      	itt	mi
 800cd2c:	2320      	movmi	r3, #32
 800cd2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd32:	0713      	lsls	r3, r2, #28
 800cd34:	bf44      	itt	mi
 800cd36:	232b      	movmi	r3, #43	; 0x2b
 800cd38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd3c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd40:	2b2a      	cmp	r3, #42	; 0x2a
 800cd42:	d015      	beq.n	800cd70 <_vfiprintf_r+0x13c>
 800cd44:	9a07      	ldr	r2, [sp, #28]
 800cd46:	4654      	mov	r4, sl
 800cd48:	2000      	movs	r0, #0
 800cd4a:	f04f 0c0a 	mov.w	ip, #10
 800cd4e:	4621      	mov	r1, r4
 800cd50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd54:	3b30      	subs	r3, #48	; 0x30
 800cd56:	2b09      	cmp	r3, #9
 800cd58:	d94e      	bls.n	800cdf8 <_vfiprintf_r+0x1c4>
 800cd5a:	b1b0      	cbz	r0, 800cd8a <_vfiprintf_r+0x156>
 800cd5c:	9207      	str	r2, [sp, #28]
 800cd5e:	e014      	b.n	800cd8a <_vfiprintf_r+0x156>
 800cd60:	eba0 0308 	sub.w	r3, r0, r8
 800cd64:	fa09 f303 	lsl.w	r3, r9, r3
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	9304      	str	r3, [sp, #16]
 800cd6c:	46a2      	mov	sl, r4
 800cd6e:	e7d2      	b.n	800cd16 <_vfiprintf_r+0xe2>
 800cd70:	9b03      	ldr	r3, [sp, #12]
 800cd72:	1d19      	adds	r1, r3, #4
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	9103      	str	r1, [sp, #12]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	bfbb      	ittet	lt
 800cd7c:	425b      	neglt	r3, r3
 800cd7e:	f042 0202 	orrlt.w	r2, r2, #2
 800cd82:	9307      	strge	r3, [sp, #28]
 800cd84:	9307      	strlt	r3, [sp, #28]
 800cd86:	bfb8      	it	lt
 800cd88:	9204      	strlt	r2, [sp, #16]
 800cd8a:	7823      	ldrb	r3, [r4, #0]
 800cd8c:	2b2e      	cmp	r3, #46	; 0x2e
 800cd8e:	d10c      	bne.n	800cdaa <_vfiprintf_r+0x176>
 800cd90:	7863      	ldrb	r3, [r4, #1]
 800cd92:	2b2a      	cmp	r3, #42	; 0x2a
 800cd94:	d135      	bne.n	800ce02 <_vfiprintf_r+0x1ce>
 800cd96:	9b03      	ldr	r3, [sp, #12]
 800cd98:	1d1a      	adds	r2, r3, #4
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	9203      	str	r2, [sp, #12]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	bfb8      	it	lt
 800cda2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cda6:	3402      	adds	r4, #2
 800cda8:	9305      	str	r3, [sp, #20]
 800cdaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ce90 <_vfiprintf_r+0x25c>
 800cdae:	7821      	ldrb	r1, [r4, #0]
 800cdb0:	2203      	movs	r2, #3
 800cdb2:	4650      	mov	r0, sl
 800cdb4:	f7f3 fa4c 	bl	8000250 <memchr>
 800cdb8:	b140      	cbz	r0, 800cdcc <_vfiprintf_r+0x198>
 800cdba:	2340      	movs	r3, #64	; 0x40
 800cdbc:	eba0 000a 	sub.w	r0, r0, sl
 800cdc0:	fa03 f000 	lsl.w	r0, r3, r0
 800cdc4:	9b04      	ldr	r3, [sp, #16]
 800cdc6:	4303      	orrs	r3, r0
 800cdc8:	3401      	adds	r4, #1
 800cdca:	9304      	str	r3, [sp, #16]
 800cdcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdd0:	482c      	ldr	r0, [pc, #176]	; (800ce84 <_vfiprintf_r+0x250>)
 800cdd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdd6:	2206      	movs	r2, #6
 800cdd8:	f7f3 fa3a 	bl	8000250 <memchr>
 800cddc:	2800      	cmp	r0, #0
 800cdde:	d03f      	beq.n	800ce60 <_vfiprintf_r+0x22c>
 800cde0:	4b29      	ldr	r3, [pc, #164]	; (800ce88 <_vfiprintf_r+0x254>)
 800cde2:	bb1b      	cbnz	r3, 800ce2c <_vfiprintf_r+0x1f8>
 800cde4:	9b03      	ldr	r3, [sp, #12]
 800cde6:	3307      	adds	r3, #7
 800cde8:	f023 0307 	bic.w	r3, r3, #7
 800cdec:	3308      	adds	r3, #8
 800cdee:	9303      	str	r3, [sp, #12]
 800cdf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdf2:	443b      	add	r3, r7
 800cdf4:	9309      	str	r3, [sp, #36]	; 0x24
 800cdf6:	e767      	b.n	800ccc8 <_vfiprintf_r+0x94>
 800cdf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdfc:	460c      	mov	r4, r1
 800cdfe:	2001      	movs	r0, #1
 800ce00:	e7a5      	b.n	800cd4e <_vfiprintf_r+0x11a>
 800ce02:	2300      	movs	r3, #0
 800ce04:	3401      	adds	r4, #1
 800ce06:	9305      	str	r3, [sp, #20]
 800ce08:	4619      	mov	r1, r3
 800ce0a:	f04f 0c0a 	mov.w	ip, #10
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce14:	3a30      	subs	r2, #48	; 0x30
 800ce16:	2a09      	cmp	r2, #9
 800ce18:	d903      	bls.n	800ce22 <_vfiprintf_r+0x1ee>
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d0c5      	beq.n	800cdaa <_vfiprintf_r+0x176>
 800ce1e:	9105      	str	r1, [sp, #20]
 800ce20:	e7c3      	b.n	800cdaa <_vfiprintf_r+0x176>
 800ce22:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce26:	4604      	mov	r4, r0
 800ce28:	2301      	movs	r3, #1
 800ce2a:	e7f0      	b.n	800ce0e <_vfiprintf_r+0x1da>
 800ce2c:	ab03      	add	r3, sp, #12
 800ce2e:	9300      	str	r3, [sp, #0]
 800ce30:	462a      	mov	r2, r5
 800ce32:	4b16      	ldr	r3, [pc, #88]	; (800ce8c <_vfiprintf_r+0x258>)
 800ce34:	a904      	add	r1, sp, #16
 800ce36:	4630      	mov	r0, r6
 800ce38:	f7fb fad6 	bl	80083e8 <_printf_float>
 800ce3c:	4607      	mov	r7, r0
 800ce3e:	1c78      	adds	r0, r7, #1
 800ce40:	d1d6      	bne.n	800cdf0 <_vfiprintf_r+0x1bc>
 800ce42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce44:	07d9      	lsls	r1, r3, #31
 800ce46:	d405      	bmi.n	800ce54 <_vfiprintf_r+0x220>
 800ce48:	89ab      	ldrh	r3, [r5, #12]
 800ce4a:	059a      	lsls	r2, r3, #22
 800ce4c:	d402      	bmi.n	800ce54 <_vfiprintf_r+0x220>
 800ce4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce50:	f7ff fe79 	bl	800cb46 <__retarget_lock_release_recursive>
 800ce54:	89ab      	ldrh	r3, [r5, #12]
 800ce56:	065b      	lsls	r3, r3, #25
 800ce58:	f53f af12 	bmi.w	800cc80 <_vfiprintf_r+0x4c>
 800ce5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce5e:	e711      	b.n	800cc84 <_vfiprintf_r+0x50>
 800ce60:	ab03      	add	r3, sp, #12
 800ce62:	9300      	str	r3, [sp, #0]
 800ce64:	462a      	mov	r2, r5
 800ce66:	4b09      	ldr	r3, [pc, #36]	; (800ce8c <_vfiprintf_r+0x258>)
 800ce68:	a904      	add	r1, sp, #16
 800ce6a:	4630      	mov	r0, r6
 800ce6c:	f7fb fd48 	bl	8008900 <_printf_i>
 800ce70:	e7e4      	b.n	800ce3c <_vfiprintf_r+0x208>
 800ce72:	bf00      	nop
 800ce74:	0800d6fc 	.word	0x0800d6fc
 800ce78:	0800d71c 	.word	0x0800d71c
 800ce7c:	0800d6dc 	.word	0x0800d6dc
 800ce80:	0800d674 	.word	0x0800d674
 800ce84:	0800d67e 	.word	0x0800d67e
 800ce88:	080083e9 	.word	0x080083e9
 800ce8c:	0800cc0f 	.word	0x0800cc0f
 800ce90:	0800d67a 	.word	0x0800d67a

0800ce94 <__swbuf_r>:
 800ce94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce96:	460e      	mov	r6, r1
 800ce98:	4614      	mov	r4, r2
 800ce9a:	4605      	mov	r5, r0
 800ce9c:	b118      	cbz	r0, 800cea6 <__swbuf_r+0x12>
 800ce9e:	6983      	ldr	r3, [r0, #24]
 800cea0:	b90b      	cbnz	r3, 800cea6 <__swbuf_r+0x12>
 800cea2:	f7ff fd9f 	bl	800c9e4 <__sinit>
 800cea6:	4b21      	ldr	r3, [pc, #132]	; (800cf2c <__swbuf_r+0x98>)
 800cea8:	429c      	cmp	r4, r3
 800ceaa:	d12b      	bne.n	800cf04 <__swbuf_r+0x70>
 800ceac:	686c      	ldr	r4, [r5, #4]
 800ceae:	69a3      	ldr	r3, [r4, #24]
 800ceb0:	60a3      	str	r3, [r4, #8]
 800ceb2:	89a3      	ldrh	r3, [r4, #12]
 800ceb4:	071a      	lsls	r2, r3, #28
 800ceb6:	d52f      	bpl.n	800cf18 <__swbuf_r+0x84>
 800ceb8:	6923      	ldr	r3, [r4, #16]
 800ceba:	b36b      	cbz	r3, 800cf18 <__swbuf_r+0x84>
 800cebc:	6923      	ldr	r3, [r4, #16]
 800cebe:	6820      	ldr	r0, [r4, #0]
 800cec0:	1ac0      	subs	r0, r0, r3
 800cec2:	6963      	ldr	r3, [r4, #20]
 800cec4:	b2f6      	uxtb	r6, r6
 800cec6:	4283      	cmp	r3, r0
 800cec8:	4637      	mov	r7, r6
 800ceca:	dc04      	bgt.n	800ced6 <__swbuf_r+0x42>
 800cecc:	4621      	mov	r1, r4
 800cece:	4628      	mov	r0, r5
 800ced0:	f7ff fcf4 	bl	800c8bc <_fflush_r>
 800ced4:	bb30      	cbnz	r0, 800cf24 <__swbuf_r+0x90>
 800ced6:	68a3      	ldr	r3, [r4, #8]
 800ced8:	3b01      	subs	r3, #1
 800ceda:	60a3      	str	r3, [r4, #8]
 800cedc:	6823      	ldr	r3, [r4, #0]
 800cede:	1c5a      	adds	r2, r3, #1
 800cee0:	6022      	str	r2, [r4, #0]
 800cee2:	701e      	strb	r6, [r3, #0]
 800cee4:	6963      	ldr	r3, [r4, #20]
 800cee6:	3001      	adds	r0, #1
 800cee8:	4283      	cmp	r3, r0
 800ceea:	d004      	beq.n	800cef6 <__swbuf_r+0x62>
 800ceec:	89a3      	ldrh	r3, [r4, #12]
 800ceee:	07db      	lsls	r3, r3, #31
 800cef0:	d506      	bpl.n	800cf00 <__swbuf_r+0x6c>
 800cef2:	2e0a      	cmp	r6, #10
 800cef4:	d104      	bne.n	800cf00 <__swbuf_r+0x6c>
 800cef6:	4621      	mov	r1, r4
 800cef8:	4628      	mov	r0, r5
 800cefa:	f7ff fcdf 	bl	800c8bc <_fflush_r>
 800cefe:	b988      	cbnz	r0, 800cf24 <__swbuf_r+0x90>
 800cf00:	4638      	mov	r0, r7
 800cf02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf04:	4b0a      	ldr	r3, [pc, #40]	; (800cf30 <__swbuf_r+0x9c>)
 800cf06:	429c      	cmp	r4, r3
 800cf08:	d101      	bne.n	800cf0e <__swbuf_r+0x7a>
 800cf0a:	68ac      	ldr	r4, [r5, #8]
 800cf0c:	e7cf      	b.n	800ceae <__swbuf_r+0x1a>
 800cf0e:	4b09      	ldr	r3, [pc, #36]	; (800cf34 <__swbuf_r+0xa0>)
 800cf10:	429c      	cmp	r4, r3
 800cf12:	bf08      	it	eq
 800cf14:	68ec      	ldreq	r4, [r5, #12]
 800cf16:	e7ca      	b.n	800ceae <__swbuf_r+0x1a>
 800cf18:	4621      	mov	r1, r4
 800cf1a:	4628      	mov	r0, r5
 800cf1c:	f000 f80c 	bl	800cf38 <__swsetup_r>
 800cf20:	2800      	cmp	r0, #0
 800cf22:	d0cb      	beq.n	800cebc <__swbuf_r+0x28>
 800cf24:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800cf28:	e7ea      	b.n	800cf00 <__swbuf_r+0x6c>
 800cf2a:	bf00      	nop
 800cf2c:	0800d6fc 	.word	0x0800d6fc
 800cf30:	0800d71c 	.word	0x0800d71c
 800cf34:	0800d6dc 	.word	0x0800d6dc

0800cf38 <__swsetup_r>:
 800cf38:	4b32      	ldr	r3, [pc, #200]	; (800d004 <__swsetup_r+0xcc>)
 800cf3a:	b570      	push	{r4, r5, r6, lr}
 800cf3c:	681d      	ldr	r5, [r3, #0]
 800cf3e:	4606      	mov	r6, r0
 800cf40:	460c      	mov	r4, r1
 800cf42:	b125      	cbz	r5, 800cf4e <__swsetup_r+0x16>
 800cf44:	69ab      	ldr	r3, [r5, #24]
 800cf46:	b913      	cbnz	r3, 800cf4e <__swsetup_r+0x16>
 800cf48:	4628      	mov	r0, r5
 800cf4a:	f7ff fd4b 	bl	800c9e4 <__sinit>
 800cf4e:	4b2e      	ldr	r3, [pc, #184]	; (800d008 <__swsetup_r+0xd0>)
 800cf50:	429c      	cmp	r4, r3
 800cf52:	d10f      	bne.n	800cf74 <__swsetup_r+0x3c>
 800cf54:	686c      	ldr	r4, [r5, #4]
 800cf56:	89a3      	ldrh	r3, [r4, #12]
 800cf58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf5c:	0719      	lsls	r1, r3, #28
 800cf5e:	d42c      	bmi.n	800cfba <__swsetup_r+0x82>
 800cf60:	06dd      	lsls	r5, r3, #27
 800cf62:	d411      	bmi.n	800cf88 <__swsetup_r+0x50>
 800cf64:	2309      	movs	r3, #9
 800cf66:	6033      	str	r3, [r6, #0]
 800cf68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cf6c:	81a3      	strh	r3, [r4, #12]
 800cf6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf72:	e03e      	b.n	800cff2 <__swsetup_r+0xba>
 800cf74:	4b25      	ldr	r3, [pc, #148]	; (800d00c <__swsetup_r+0xd4>)
 800cf76:	429c      	cmp	r4, r3
 800cf78:	d101      	bne.n	800cf7e <__swsetup_r+0x46>
 800cf7a:	68ac      	ldr	r4, [r5, #8]
 800cf7c:	e7eb      	b.n	800cf56 <__swsetup_r+0x1e>
 800cf7e:	4b24      	ldr	r3, [pc, #144]	; (800d010 <__swsetup_r+0xd8>)
 800cf80:	429c      	cmp	r4, r3
 800cf82:	bf08      	it	eq
 800cf84:	68ec      	ldreq	r4, [r5, #12]
 800cf86:	e7e6      	b.n	800cf56 <__swsetup_r+0x1e>
 800cf88:	0758      	lsls	r0, r3, #29
 800cf8a:	d512      	bpl.n	800cfb2 <__swsetup_r+0x7a>
 800cf8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf8e:	b141      	cbz	r1, 800cfa2 <__swsetup_r+0x6a>
 800cf90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf94:	4299      	cmp	r1, r3
 800cf96:	d002      	beq.n	800cf9e <__swsetup_r+0x66>
 800cf98:	4630      	mov	r0, r6
 800cf9a:	f7fe fd8b 	bl	800bab4 <_free_r>
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	6363      	str	r3, [r4, #52]	; 0x34
 800cfa2:	89a3      	ldrh	r3, [r4, #12]
 800cfa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cfa8:	81a3      	strh	r3, [r4, #12]
 800cfaa:	2300      	movs	r3, #0
 800cfac:	6063      	str	r3, [r4, #4]
 800cfae:	6923      	ldr	r3, [r4, #16]
 800cfb0:	6023      	str	r3, [r4, #0]
 800cfb2:	89a3      	ldrh	r3, [r4, #12]
 800cfb4:	f043 0308 	orr.w	r3, r3, #8
 800cfb8:	81a3      	strh	r3, [r4, #12]
 800cfba:	6923      	ldr	r3, [r4, #16]
 800cfbc:	b94b      	cbnz	r3, 800cfd2 <__swsetup_r+0x9a>
 800cfbe:	89a3      	ldrh	r3, [r4, #12]
 800cfc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cfc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfc8:	d003      	beq.n	800cfd2 <__swsetup_r+0x9a>
 800cfca:	4621      	mov	r1, r4
 800cfcc:	4630      	mov	r0, r6
 800cfce:	f000 f84d 	bl	800d06c <__smakebuf_r>
 800cfd2:	89a0      	ldrh	r0, [r4, #12]
 800cfd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cfd8:	f010 0301 	ands.w	r3, r0, #1
 800cfdc:	d00a      	beq.n	800cff4 <__swsetup_r+0xbc>
 800cfde:	2300      	movs	r3, #0
 800cfe0:	60a3      	str	r3, [r4, #8]
 800cfe2:	6963      	ldr	r3, [r4, #20]
 800cfe4:	425b      	negs	r3, r3
 800cfe6:	61a3      	str	r3, [r4, #24]
 800cfe8:	6923      	ldr	r3, [r4, #16]
 800cfea:	b943      	cbnz	r3, 800cffe <__swsetup_r+0xc6>
 800cfec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cff0:	d1ba      	bne.n	800cf68 <__swsetup_r+0x30>
 800cff2:	bd70      	pop	{r4, r5, r6, pc}
 800cff4:	0781      	lsls	r1, r0, #30
 800cff6:	bf58      	it	pl
 800cff8:	6963      	ldrpl	r3, [r4, #20]
 800cffa:	60a3      	str	r3, [r4, #8]
 800cffc:	e7f4      	b.n	800cfe8 <__swsetup_r+0xb0>
 800cffe:	2000      	movs	r0, #0
 800d000:	e7f7      	b.n	800cff2 <__swsetup_r+0xba>
 800d002:	bf00      	nop
 800d004:	2000005c 	.word	0x2000005c
 800d008:	0800d6fc 	.word	0x0800d6fc
 800d00c:	0800d71c 	.word	0x0800d71c
 800d010:	0800d6dc 	.word	0x0800d6dc

0800d014 <abort>:
 800d014:	b508      	push	{r3, lr}
 800d016:	2006      	movs	r0, #6
 800d018:	f000 f898 	bl	800d14c <raise>
 800d01c:	2001      	movs	r0, #1
 800d01e:	f7f5 fd99 	bl	8002b54 <_exit>

0800d022 <__swhatbuf_r>:
 800d022:	b570      	push	{r4, r5, r6, lr}
 800d024:	460e      	mov	r6, r1
 800d026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d02a:	2900      	cmp	r1, #0
 800d02c:	b096      	sub	sp, #88	; 0x58
 800d02e:	4614      	mov	r4, r2
 800d030:	461d      	mov	r5, r3
 800d032:	da07      	bge.n	800d044 <__swhatbuf_r+0x22>
 800d034:	2300      	movs	r3, #0
 800d036:	602b      	str	r3, [r5, #0]
 800d038:	89b3      	ldrh	r3, [r6, #12]
 800d03a:	061a      	lsls	r2, r3, #24
 800d03c:	d410      	bmi.n	800d060 <__swhatbuf_r+0x3e>
 800d03e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d042:	e00e      	b.n	800d062 <__swhatbuf_r+0x40>
 800d044:	466a      	mov	r2, sp
 800d046:	f000 f89d 	bl	800d184 <_fstat_r>
 800d04a:	2800      	cmp	r0, #0
 800d04c:	dbf2      	blt.n	800d034 <__swhatbuf_r+0x12>
 800d04e:	9a01      	ldr	r2, [sp, #4]
 800d050:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d054:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d058:	425a      	negs	r2, r3
 800d05a:	415a      	adcs	r2, r3
 800d05c:	602a      	str	r2, [r5, #0]
 800d05e:	e7ee      	b.n	800d03e <__swhatbuf_r+0x1c>
 800d060:	2340      	movs	r3, #64	; 0x40
 800d062:	2000      	movs	r0, #0
 800d064:	6023      	str	r3, [r4, #0]
 800d066:	b016      	add	sp, #88	; 0x58
 800d068:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d06c <__smakebuf_r>:
 800d06c:	898b      	ldrh	r3, [r1, #12]
 800d06e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d070:	079d      	lsls	r5, r3, #30
 800d072:	4606      	mov	r6, r0
 800d074:	460c      	mov	r4, r1
 800d076:	d507      	bpl.n	800d088 <__smakebuf_r+0x1c>
 800d078:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d07c:	6023      	str	r3, [r4, #0]
 800d07e:	6123      	str	r3, [r4, #16]
 800d080:	2301      	movs	r3, #1
 800d082:	6163      	str	r3, [r4, #20]
 800d084:	b002      	add	sp, #8
 800d086:	bd70      	pop	{r4, r5, r6, pc}
 800d088:	ab01      	add	r3, sp, #4
 800d08a:	466a      	mov	r2, sp
 800d08c:	f7ff ffc9 	bl	800d022 <__swhatbuf_r>
 800d090:	9900      	ldr	r1, [sp, #0]
 800d092:	4605      	mov	r5, r0
 800d094:	4630      	mov	r0, r6
 800d096:	f7fe fd5d 	bl	800bb54 <_malloc_r>
 800d09a:	b948      	cbnz	r0, 800d0b0 <__smakebuf_r+0x44>
 800d09c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0a0:	059a      	lsls	r2, r3, #22
 800d0a2:	d4ef      	bmi.n	800d084 <__smakebuf_r+0x18>
 800d0a4:	f023 0303 	bic.w	r3, r3, #3
 800d0a8:	f043 0302 	orr.w	r3, r3, #2
 800d0ac:	81a3      	strh	r3, [r4, #12]
 800d0ae:	e7e3      	b.n	800d078 <__smakebuf_r+0xc>
 800d0b0:	4b0d      	ldr	r3, [pc, #52]	; (800d0e8 <__smakebuf_r+0x7c>)
 800d0b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800d0b4:	89a3      	ldrh	r3, [r4, #12]
 800d0b6:	6020      	str	r0, [r4, #0]
 800d0b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0bc:	81a3      	strh	r3, [r4, #12]
 800d0be:	9b00      	ldr	r3, [sp, #0]
 800d0c0:	6163      	str	r3, [r4, #20]
 800d0c2:	9b01      	ldr	r3, [sp, #4]
 800d0c4:	6120      	str	r0, [r4, #16]
 800d0c6:	b15b      	cbz	r3, 800d0e0 <__smakebuf_r+0x74>
 800d0c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0cc:	4630      	mov	r0, r6
 800d0ce:	f000 f86b 	bl	800d1a8 <_isatty_r>
 800d0d2:	b128      	cbz	r0, 800d0e0 <__smakebuf_r+0x74>
 800d0d4:	89a3      	ldrh	r3, [r4, #12]
 800d0d6:	f023 0303 	bic.w	r3, r3, #3
 800d0da:	f043 0301 	orr.w	r3, r3, #1
 800d0de:	81a3      	strh	r3, [r4, #12]
 800d0e0:	89a0      	ldrh	r0, [r4, #12]
 800d0e2:	4305      	orrs	r5, r0
 800d0e4:	81a5      	strh	r5, [r4, #12]
 800d0e6:	e7cd      	b.n	800d084 <__smakebuf_r+0x18>
 800d0e8:	0800c97d 	.word	0x0800c97d

0800d0ec <_malloc_usable_size_r>:
 800d0ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0f0:	1f18      	subs	r0, r3, #4
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	bfbc      	itt	lt
 800d0f6:	580b      	ldrlt	r3, [r1, r0]
 800d0f8:	18c0      	addlt	r0, r0, r3
 800d0fa:	4770      	bx	lr

0800d0fc <_raise_r>:
 800d0fc:	291f      	cmp	r1, #31
 800d0fe:	b538      	push	{r3, r4, r5, lr}
 800d100:	4604      	mov	r4, r0
 800d102:	460d      	mov	r5, r1
 800d104:	d904      	bls.n	800d110 <_raise_r+0x14>
 800d106:	2316      	movs	r3, #22
 800d108:	6003      	str	r3, [r0, #0]
 800d10a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d10e:	bd38      	pop	{r3, r4, r5, pc}
 800d110:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d112:	b112      	cbz	r2, 800d11a <_raise_r+0x1e>
 800d114:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d118:	b94b      	cbnz	r3, 800d12e <_raise_r+0x32>
 800d11a:	4620      	mov	r0, r4
 800d11c:	f000 f830 	bl	800d180 <_getpid_r>
 800d120:	462a      	mov	r2, r5
 800d122:	4601      	mov	r1, r0
 800d124:	4620      	mov	r0, r4
 800d126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d12a:	f000 b817 	b.w	800d15c <_kill_r>
 800d12e:	2b01      	cmp	r3, #1
 800d130:	d00a      	beq.n	800d148 <_raise_r+0x4c>
 800d132:	1c59      	adds	r1, r3, #1
 800d134:	d103      	bne.n	800d13e <_raise_r+0x42>
 800d136:	2316      	movs	r3, #22
 800d138:	6003      	str	r3, [r0, #0]
 800d13a:	2001      	movs	r0, #1
 800d13c:	e7e7      	b.n	800d10e <_raise_r+0x12>
 800d13e:	2400      	movs	r4, #0
 800d140:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d144:	4628      	mov	r0, r5
 800d146:	4798      	blx	r3
 800d148:	2000      	movs	r0, #0
 800d14a:	e7e0      	b.n	800d10e <_raise_r+0x12>

0800d14c <raise>:
 800d14c:	4b02      	ldr	r3, [pc, #8]	; (800d158 <raise+0xc>)
 800d14e:	4601      	mov	r1, r0
 800d150:	6818      	ldr	r0, [r3, #0]
 800d152:	f7ff bfd3 	b.w	800d0fc <_raise_r>
 800d156:	bf00      	nop
 800d158:	2000005c 	.word	0x2000005c

0800d15c <_kill_r>:
 800d15c:	b538      	push	{r3, r4, r5, lr}
 800d15e:	4d07      	ldr	r5, [pc, #28]	; (800d17c <_kill_r+0x20>)
 800d160:	2300      	movs	r3, #0
 800d162:	4604      	mov	r4, r0
 800d164:	4608      	mov	r0, r1
 800d166:	4611      	mov	r1, r2
 800d168:	602b      	str	r3, [r5, #0]
 800d16a:	f7f5 fce3 	bl	8002b34 <_kill>
 800d16e:	1c43      	adds	r3, r0, #1
 800d170:	d102      	bne.n	800d178 <_kill_r+0x1c>
 800d172:	682b      	ldr	r3, [r5, #0]
 800d174:	b103      	cbz	r3, 800d178 <_kill_r+0x1c>
 800d176:	6023      	str	r3, [r4, #0]
 800d178:	bd38      	pop	{r3, r4, r5, pc}
 800d17a:	bf00      	nop
 800d17c:	2000084c 	.word	0x2000084c

0800d180 <_getpid_r>:
 800d180:	f7f5 bcd0 	b.w	8002b24 <_getpid>

0800d184 <_fstat_r>:
 800d184:	b538      	push	{r3, r4, r5, lr}
 800d186:	4d07      	ldr	r5, [pc, #28]	; (800d1a4 <_fstat_r+0x20>)
 800d188:	2300      	movs	r3, #0
 800d18a:	4604      	mov	r4, r0
 800d18c:	4608      	mov	r0, r1
 800d18e:	4611      	mov	r1, r2
 800d190:	602b      	str	r3, [r5, #0]
 800d192:	f7f5 fd2e 	bl	8002bf2 <_fstat>
 800d196:	1c43      	adds	r3, r0, #1
 800d198:	d102      	bne.n	800d1a0 <_fstat_r+0x1c>
 800d19a:	682b      	ldr	r3, [r5, #0]
 800d19c:	b103      	cbz	r3, 800d1a0 <_fstat_r+0x1c>
 800d19e:	6023      	str	r3, [r4, #0]
 800d1a0:	bd38      	pop	{r3, r4, r5, pc}
 800d1a2:	bf00      	nop
 800d1a4:	2000084c 	.word	0x2000084c

0800d1a8 <_isatty_r>:
 800d1a8:	b538      	push	{r3, r4, r5, lr}
 800d1aa:	4d06      	ldr	r5, [pc, #24]	; (800d1c4 <_isatty_r+0x1c>)
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	4604      	mov	r4, r0
 800d1b0:	4608      	mov	r0, r1
 800d1b2:	602b      	str	r3, [r5, #0]
 800d1b4:	f7f5 fd2d 	bl	8002c12 <_isatty>
 800d1b8:	1c43      	adds	r3, r0, #1
 800d1ba:	d102      	bne.n	800d1c2 <_isatty_r+0x1a>
 800d1bc:	682b      	ldr	r3, [r5, #0]
 800d1be:	b103      	cbz	r3, 800d1c2 <_isatty_r+0x1a>
 800d1c0:	6023      	str	r3, [r4, #0]
 800d1c2:	bd38      	pop	{r3, r4, r5, pc}
 800d1c4:	2000084c 	.word	0x2000084c

0800d1c8 <_init>:
 800d1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ca:	bf00      	nop
 800d1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1ce:	bc08      	pop	{r3}
 800d1d0:	469e      	mov	lr, r3
 800d1d2:	4770      	bx	lr

0800d1d4 <_fini>:
 800d1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1d6:	bf00      	nop
 800d1d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1da:	bc08      	pop	{r3}
 800d1dc:	469e      	mov	lr, r3
 800d1de:	4770      	bx	lr

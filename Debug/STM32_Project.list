
STM32_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097c4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  080099c8  080099c8  000199c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e2c  08009e2c  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  08009e2c  08009e2c  00019e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e34  08009e34  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e34  08009e34  00019e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e38  08009e38  00019e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08009e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  2000022c  0800a068  0002022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000848  0800a068  00020848  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba93  00000000  00000000  0002025a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000334a  00000000  00000000  0003bced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  0003f038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001360  00000000  00000000  000404e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a982  00000000  00000000  00041840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018682  00000000  00000000  0006c1c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105223  00000000  00000000  00084844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00189a67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066f8  00000000  00000000  00189abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000022c 	.word	0x2000022c
 800021c:	00000000 	.word	0x00000000
 8000220:	080099ac 	.word	0x080099ac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000230 	.word	0x20000230
 800023c:	080099ac 	.word	0x080099ac

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <delay>:
#define timer htim3


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <delay+0x30>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2200      	movs	r2, #0
 80005f8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 80005fa:	bf00      	nop
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <delay+0x30>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	429a      	cmp	r2, r3
 8000606:	d3f9      	bcc.n	80005fc <delay+0x14>
}
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000734 	.word	0x20000734

0800061c <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	6039      	str	r1, [r7, #0]
 8000626:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	461a      	mov	r2, r3
 800062e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000632:	4820      	ldr	r0, [pc, #128]	; (80006b4 <send_to_lcd+0x98>)
 8000634:	f002 fb04 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800063e:	481e      	ldr	r0, [pc, #120]	; (80006b8 <send_to_lcd+0x9c>)
 8000640:	f002 fafe 	bl	8002c40 <HAL_GPIO_WritePin>
//	delay (0.05);
	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	08db      	lsrs	r3, r3, #3
 8000648:	b2db      	uxtb	r3, r3
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	b2db      	uxtb	r3, r3
 8000650:	461a      	mov	r2, r3
 8000652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000656:	4819      	ldr	r0, [pc, #100]	; (80006bc <send_to_lcd+0xa0>)
 8000658:	f002 faf2 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	089b      	lsrs	r3, r3, #2
 8000660:	b2db      	uxtb	r3, r3
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	b2db      	uxtb	r3, r3
 8000668:	461a      	mov	r2, r3
 800066a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800066e:	4812      	ldr	r0, [pc, #72]	; (80006b8 <send_to_lcd+0x9c>)
 8000670:	f002 fae6 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	085b      	lsrs	r3, r3, #1
 8000678:	b2db      	uxtb	r3, r3
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	b2db      	uxtb	r3, r3
 8000680:	461a      	mov	r2, r3
 8000682:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000686:	480c      	ldr	r0, [pc, #48]	; (80006b8 <send_to_lcd+0x9c>)
 8000688:	f002 fada 	bl	8002c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	b2db      	uxtb	r3, r3
 8000694:	461a      	mov	r2, r3
 8000696:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800069a:	4808      	ldr	r0, [pc, #32]	; (80006bc <send_to_lcd+0xa0>)
 800069c:	f002 fad0 	bl	8002c40 <HAL_GPIO_WritePin>
	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a6:	4804      	ldr	r0, [pc, #16]	; (80006b8 <send_to_lcd+0x9c>)
 80006a8:	f002 faca 	bl	8002c40 <HAL_GPIO_WritePin>
//	delay (200);
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40021800 	.word	0x40021800
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40021400 	.word	0x40021400

080006c0 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	091b      	lsrs	r3, r3, #4
 80006ce:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ffa1 	bl	800061c <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	f003 030f 	and.w	r3, r3, #15
 80006e0:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff98 	bl	800061c <send_to_lcd>
}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	091b      	lsrs	r3, r3, #4
 8000702:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	2101      	movs	r1, #1
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff87 	bl	800061c <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	f003 030f 	and.w	r3, r3, #15
 8000714:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	2101      	movs	r1, #1
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff7e 	bl	800061c <send_to_lcd>
}
 8000720:	bf00      	nop
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <Lcd_clear>:

void Lcd_clear (void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 800072c:	2001      	movs	r0, #1
 800072e:	f7ff ffc7 	bl	80006c0 <lcd_send_cmd>
	HAL_Delay(2);
 8000732:	2002      	movs	r0, #2
 8000734:	f001 ffce 	bl	80026d4 <HAL_Delay>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}

0800073c <Lcd_put_cur>:

void Lcd_put_cur(int row, int col)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
	switch(row)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d003      	beq.n	8000754 <Lcd_put_cur+0x18>
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d005      	beq.n	800075e <Lcd_put_cur+0x22>
 8000752:	e009      	b.n	8000768 <Lcd_put_cur+0x2c>
	{
	case 0:
		col |=0x80;
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800075a:	603b      	str	r3, [r7, #0]
		break;
 800075c:	e004      	b.n	8000768 <Lcd_put_cur+0x2c>
	case 1:
		col |= 0xC0;
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000764:	603b      	str	r3, [r7, #0]
		break;
 8000766:	bf00      	nop
	}
    lcd_send_cmd (col);
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ffa7 	bl	80006c0 <lcd_send_cmd>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <Lcd_init>:


void Lcd_init (void)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800077e:	2032      	movs	r0, #50	; 0x32
 8000780:	f001 ffa8 	bl	80026d4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000784:	2030      	movs	r0, #48	; 0x30
 8000786:	f7ff ff9b 	bl	80006c0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800078a:	2005      	movs	r0, #5
 800078c:	f001 ffa2 	bl	80026d4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000790:	2030      	movs	r0, #48	; 0x30
 8000792:	f7ff ff95 	bl	80006c0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000796:	2001      	movs	r0, #1
 8000798:	f001 ff9c 	bl	80026d4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800079c:	2030      	movs	r0, #48	; 0x30
 800079e:	f7ff ff8f 	bl	80006c0 <lcd_send_cmd>
	HAL_Delay(10);
 80007a2:	200a      	movs	r0, #10
 80007a4:	f001 ff96 	bl	80026d4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80007a8:	2020      	movs	r0, #32
 80007aa:	f7ff ff89 	bl	80006c0 <lcd_send_cmd>
	HAL_Delay(10);
 80007ae:	200a      	movs	r0, #10
 80007b0:	f001 ff90 	bl	80026d4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80007b4:	2028      	movs	r0, #40	; 0x28
 80007b6:	f7ff ff83 	bl	80006c0 <lcd_send_cmd>
	HAL_Delay(1);
 80007ba:	2001      	movs	r0, #1
 80007bc:	f001 ff8a 	bl	80026d4 <HAL_Delay>

	lcd_send_cmd (0x08);  // clear display
 80007c0:	2008      	movs	r0, #8
 80007c2:	f7ff ff7d 	bl	80006c0 <lcd_send_cmd>
	HAL_Delay(1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f001 ff84 	bl	80026d4 <HAL_Delay>
	HAL_Delay(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f001 ff81 	bl	80026d4 <HAL_Delay>
	lcd_send_cmd (0x01); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80007d2:	2001      	movs	r0, #1
 80007d4:	f7ff ff74 	bl	80006c0 <lcd_send_cmd>
	HAL_Delay(1);
 80007d8:	2001      	movs	r0, #1
 80007da:	f001 ff7b 	bl	80026d4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80007de:	200c      	movs	r0, #12
 80007e0:	f7ff ff6e 	bl	80006c0 <lcd_send_cmd>



	HAL_Delay(1);
 80007e4:	2001      	movs	r0, #1
 80007e6:	f001 ff75 	bl	80026d4 <HAL_Delay>
	HAL_Delay(1);
 80007ea:	2001      	movs	r0, #1
 80007ec:	f001 ff72 	bl	80026d4 <HAL_Delay>
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <Lcd_send_string>:

void Lcd_send_string (char *str)
{
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(str); i++){
 80007fc:	2300      	movs	r3, #0
 80007fe:	73fb      	strb	r3, [r7, #15]
 8000800:	e00d      	b.n	800081e <Lcd_send_string+0x2a>
		lcd_send_data( str[i]);
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	4413      	add	r3, r2
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ff72 	bl	80006f4 <lcd_send_data>
		delay(500);
 8000810:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000814:	f7ff fee8 	bl	80005e8 <delay>
	for(uint8_t i = 0; i < strlen(str); i++){
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	3301      	adds	r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	7bfc      	ldrb	r4, [r7, #15]
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff fd0d 	bl	8000240 <strlen>
 8000826:	4603      	mov	r3, r0
 8000828:	429c      	cmp	r4, r3
 800082a:	d3ea      	bcc.n	8000802 <Lcd_send_string+0xe>
	}

}
 800082c:	bf00      	nop
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	bd90      	pop	{r4, r7, pc}

08000836 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b084      	sub	sp, #16
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f000 fa4c 	bl	8000cdc <null_ptr_check>
 8000844:	4603      	mov	r3, r0
 8000846:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d117      	bne.n	8000880 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000850:	6879      	ldr	r1, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2201      	movs	r2, #1
 8000856:	20d0      	movs	r0, #208	; 0xd0
 8000858:	f000 f818 	bl	800088c <bmp2_get_regs>
 800085c:	4603      	mov	r3, r0
 800085e:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d10b      	bne.n	8000880 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b58      	cmp	r3, #88	; 0x58
 800086e:	d105      	bne.n	800087c <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f000 fa7e 	bl	8000d72 <get_calib_param>
 8000876:	4603      	mov	r3, r0
 8000878:	73fb      	strb	r3, [r7, #15]
 800087a:	e001      	b.n	8000880 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 800087c:	23fc      	movs	r3, #252	; 0xfc
 800087e:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000880:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b087      	sub	sp, #28
 8000890:	af00      	add	r7, sp, #0
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	4603      	mov	r3, r0
 800089a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800089c:	6838      	ldr	r0, [r7, #0]
 800089e:	f000 fa1d 	bl	8000cdc <null_ptr_check>
 80008a2:	4603      	mov	r3, r0
 80008a4:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 80008a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d11e      	bne.n	80008ec <bmp2_get_regs+0x60>
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d01b      	beq.n	80008ec <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	785b      	ldrb	r3, [r3, #1]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d103      	bne.n	80008c4 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008c2:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	68dc      	ldr	r4, [r3, #12]
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	7bf8      	ldrb	r0, [r7, #15]
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	68b9      	ldr	r1, [r7, #8]
 80008d2:	47a0      	blx	r4
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d004      	beq.n	80008f0 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 80008e6:	23fe      	movs	r3, #254	; 0xfe
 80008e8:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80008ea:	e001      	b.n	80008f0 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80008ec:	23ff      	movs	r3, #255	; 0xff
 80008ee:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80008f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	371c      	adds	r7, #28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd90      	pop	{r4, r7, pc}

080008fc <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b08b      	sub	sp, #44	; 0x2c
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
 8000908:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b04      	cmp	r3, #4
 800090e:	d901      	bls.n	8000914 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8000910:	2304      	movs	r3, #4
 8000912:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8000914:	6838      	ldr	r0, [r7, #0]
 8000916:	f000 f9e1 	bl	8000cdc <null_ptr_check>
 800091a:	4603      	mov	r3, r0
 800091c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000920:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000924:	2b00      	cmp	r3, #0
 8000926:	d150      	bne.n	80009ca <bmp2_set_regs+0xce>
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d04d      	beq.n	80009ca <bmp2_set_regs+0xce>
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d04a      	beq.n	80009ca <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d043      	beq.n	80009c2 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	785b      	ldrb	r3, [r3, #1]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d114      	bne.n	8000972 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000948:	2300      	movs	r3, #0
 800094a:	77fb      	strb	r3, [r7, #31]
 800094c:	e00d      	b.n	800096a <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 800094e:	7ffb      	ldrb	r3, [r7, #31]
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	4413      	add	r3, r2
 8000954:	781a      	ldrb	r2, [r3, #0]
 8000956:	7ffb      	ldrb	r3, [r7, #31]
 8000958:	68f9      	ldr	r1, [r7, #12]
 800095a:	440b      	add	r3, r1
 800095c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000964:	7ffb      	ldrb	r3, [r7, #31]
 8000966:	3301      	adds	r3, #1
 8000968:	77fb      	strb	r3, [r7, #31]
 800096a:	7ffb      	ldrb	r3, [r7, #31]
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	429a      	cmp	r2, r3
 8000970:	d8ed      	bhi.n	800094e <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d90b      	bls.n	8000990 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8000978:	f107 0114 	add.w	r1, r7, #20
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	68f8      	ldr	r0, [r7, #12]
 8000982:	f000 f9cb 	bl	8000d1c <interleave_data>
                temp_len = ((len * 2) - 1);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	3b01      	subs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
 800098e:	e001      	b.n	8000994 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	691c      	ldr	r4, [r3, #16]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	7818      	ldrb	r0, [r3, #0]
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f107 0114 	add.w	r1, r7, #20
 80009a4:	6a3a      	ldr	r2, [r7, #32]
 80009a6:	47a0      	blx	r4
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d00b      	beq.n	80009d2 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 80009ba:	23fe      	movs	r3, #254	; 0xfe
 80009bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 80009c0:	e007      	b.n	80009d2 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 80009c2:	23fd      	movs	r3, #253	; 0xfd
 80009c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 80009c8:	e003      	b.n	80009d2 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80009ca:	23ff      	movs	r3, #255	; 0xff
 80009cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009d0:	e000      	b.n	80009d4 <bmp2_set_regs+0xd8>
        if (len > 0)
 80009d2:	bf00      	nop
    }

    return rslt;
 80009d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80009d8:	4618      	mov	r0, r3
 80009da:	372c      	adds	r7, #44	; 0x2c
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd90      	pop	{r4, r7, pc}

080009e0 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 80009e8:	23e0      	movs	r3, #224	; 0xe0
 80009ea:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 80009ec:	23b6      	movs	r3, #182	; 0xb6
 80009ee:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80009f0:	f107 010d 	add.w	r1, r7, #13
 80009f4:	f107 000e 	add.w	r0, r7, #14
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2201      	movs	r2, #1
 80009fc:	f7ff ff7e 	bl	80008fc <bmp2_set_regs>
 8000a00:	4603      	mov	r3, r0
 8000a02:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8000a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d02d      	beq.n	8000a80 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8000a24:	f107 010c 	add.w	r1, r7, #12
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	20f4      	movs	r0, #244	; 0xf4
 8000a2e:	f7ff ff2d 	bl	800088c <bmp2_get_regs>
 8000a32:	4603      	mov	r3, r0
 8000a34:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8000a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d122      	bne.n	8000a84 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8000a3e:	7b3b      	ldrb	r3, [r7, #12]
 8000a40:	095b      	lsrs	r3, r3, #5
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 8000a48:	7b3b      	ldrb	r3, [r7, #12]
 8000a4a:	109b      	asrs	r3, r3, #2
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 8000a58:	7b7b      	ldrb	r3, [r7, #13]
 8000a5a:	095b      	lsrs	r3, r3, #5
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 8000a62:	7b7b      	ldrb	r3, [r7, #13]
 8000a64:	109b      	asrs	r3, r3, #2
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	f003 0307 	and.w	r3, r3, #7
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 8000a72:	7b7b      	ldrb	r3, [r7, #13]
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	715a      	strb	r2, [r3, #5]
 8000a7e:	e001      	b.n	8000a84 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000a80:	23ff      	movs	r3, #255	; 0xff
 8000a82:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	6879      	ldr	r1, [r7, #4]
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 fa02 	bl	8000ea8 <conf_sensor>
 8000aa4:	4603      	mov	r3, r0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b084      	sub	sp, #16
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d01b      	beq.n	8000af6 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 8000abe:	f107 010e 	add.w	r1, r7, #14
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	20f3      	movs	r0, #243	; 0xf3
 8000ac8:	f7ff fee0 	bl	800088c <bmp2_get_regs>
 8000acc:	4603      	mov	r3, r0
 8000ace:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8000ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d110      	bne.n	8000afa <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 8000ad8:	7bbb      	ldrb	r3, [r7, #14]
 8000ada:	10db      	asrs	r3, r3, #3
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 8000ae8:	7bbb      	ldrb	r3, [r7, #14]
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	705a      	strb	r2, [r3, #1]
 8000af4:	e001      	b.n	8000afa <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000af6:	23ff      	movs	r3, #255	; 0xff
 8000af8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	68b9      	ldr	r1, [r7, #8]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f9c4 	bl	8000ea8 <conf_sensor>
 8000b20:	4603      	mov	r3, r0
 8000b22:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8000b24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	2300      	movs	r3, #0
 8000b40:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8000b42:	f107 0308 	add.w	r3, r7, #8
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d024      	beq.n	8000b9c <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8000b52:	f107 0110 	add.w	r1, r7, #16
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	2206      	movs	r2, #6
 8000b5a:	20f7      	movs	r0, #247	; 0xf7
 8000b5c:	f7ff fe96 	bl	800088c <bmp2_get_regs>
 8000b60:	4603      	mov	r3, r0
 8000b62:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8000b64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d119      	bne.n	8000ba0 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 8000b6c:	f107 0208 	add.w	r2, r7, #8
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 fabe 	bl	80010f8 <parse_sensor_data>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8000b80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d10b      	bne.n	8000ba0 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 8000b88:	f107 0308 	add.w	r3, r7, #8
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f000 f80b 	bl	8000bac <bmp2_compensate_data>
 8000b96:	4603      	mov	r3, r0
 8000b98:	75fb      	strb	r3, [r7, #23]
 8000b9a:	e001      	b.n	8000ba0 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000b9c:	23ff      	movs	r3, #255	; 0xff
 8000b9e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000ba0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f000 f88f 	bl	8000cdc <null_ptr_check>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8000bc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d129      	bne.n	8000c1e <bmp2_compensate_data+0x72>
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d026      	beq.n	8000c1e <bmp2_compensate_data+0x72>
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d023      	beq.n	8000c1e <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8000bd6:	68b9      	ldr	r1, [r7, #8]
 8000bd8:	f04f 0200 	mov.w	r2, #0
 8000bdc:	f04f 0300 	mov.w	r3, #0
 8000be0:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8000be4:	68b9      	ldr	r1, [r7, #8]
 8000be6:	f04f 0200 	mov.w	r2, #0
 8000bea:	f04f 0300 	mov.w	r3, #0
 8000bee:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	3308      	adds	r3, #8
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	68f9      	ldr	r1, [r7, #12]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 fac0 	bl	8001180 <compensate_temperature>
 8000c00:	4603      	mov	r3, r0
 8000c02:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8000c04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d10a      	bne.n	8000c22 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	68f9      	ldr	r1, [r7, #12]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 fb80 	bl	8001318 <compensate_pressure>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 8000c1c:	e001      	b.n	8000c22 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000c1e:	23ff      	movs	r3, #255	; 0xff
 8000c20:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8000c30:	b5b0      	push	{r4, r5, r7, lr}
 8000c32:	b092      	sub	sp, #72	; 0x48
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 8000c3c:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <bmp2_compute_meas_time+0xa4>)
 8000c3e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000c42:	461d      	mov	r5, r3
 8000c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c48:	682b      	ldr	r3, [r5, #0]
 8000c4a:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 8000c4c:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <bmp2_compute_meas_time+0xa8>)
 8000c4e:	f107 0410 	add.w	r4, r7, #16
 8000c52:	461d      	mov	r5, r3
 8000c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f000 f83b 	bl	8000cdc <null_ptr_check>
 8000c66:	4603      	mov	r3, r0
 8000c68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 8000c6c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d125      	bne.n	8000cc0 <bmp2_compute_meas_time+0x90>
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d022      	beq.n	8000cc0 <bmp2_compute_meas_time+0x90>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	7e1b      	ldrb	r3, [r3, #24]
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d113      	bne.n	8000caa <bmp2_compute_meas_time+0x7a>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	78db      	ldrb	r3, [r3, #3]
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000c8c:	4413      	add	r3, r2
 8000c8e:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	789b      	ldrb	r3, [r3, #2]
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000c9c:	440b      	add	r3, r1
 8000c9e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000ca2:	441a      	add	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8000ca8:	e00d      	b.n	8000cc6 <bmp2_compute_meas_time+0x96>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	78db      	ldrb	r3, [r3, #3]
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000cb4:	4413      	add	r3, r2
 8000cb6:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8000cbe:	e002      	b.n	8000cc6 <bmp2_compute_meas_time+0x96>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000cc0:	23ff      	movs	r3, #255	; 0xff
 8000cc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 8000cc6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3748      	adds	r7, #72	; 0x48
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	080099c8 	.word	0x080099c8
 8000cd8:	080099dc 	.word	0x080099dc

08000cdc <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d00b      	beq.n	8000d02 <null_ptr_check+0x26>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d007      	beq.n	8000d02 <null_ptr_check+0x26>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	691b      	ldr	r3, [r3, #16]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d003      	beq.n	8000d02 <null_ptr_check+0x26>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 8000d02:	23ff      	movs	r3, #255	; 0xff
 8000d04:	73fb      	strb	r3, [r7, #15]
 8000d06:	e001      	b.n	8000d0c <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	e015      	b.n	8000d5c <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	441a      	add	r2, r3
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	440b      	add	r3, r1
 8000d40:	7812      	ldrb	r2, [r2, #0]
 8000d42:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	441a      	add	r2, r3
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	68b9      	ldr	r1, [r7, #8]
 8000d50:	440b      	add	r3, r1
 8000d52:	7812      	ldrb	r2, [r2, #0]
 8000d54:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d3e5      	bcc.n	8000d30 <interleave_data+0x14>
    }
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	371c      	adds	r7, #28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b08a      	sub	sp, #40	; 0x28
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]
 8000d8e:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 8000d90:	f107 010c 	add.w	r1, r7, #12
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2219      	movs	r2, #25
 8000d98:	2088      	movs	r0, #136	; 0x88
 8000d9a:	f7ff fd77 	bl	800088c <bmp2_get_regs>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 8000da4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d177      	bne.n	8000e9c <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 8000dac:	7b7b      	ldrb	r3, [r7, #13]
 8000dae:	021b      	lsls	r3, r3, #8
 8000db0:	b21a      	sxth	r2, r3
 8000db2:	7b3b      	ldrb	r3, [r7, #12]
 8000db4:	b21b      	sxth	r3, r3
 8000db6:	4313      	orrs	r3, r2
 8000db8:	b21b      	sxth	r3, r3
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	021b      	lsls	r3, r3, #8
 8000dc4:	b21a      	sxth	r2, r3
 8000dc6:	7bbb      	ldrb	r3, [r7, #14]
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	b21a      	sxth	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 8000dd2:	7c7b      	ldrb	r3, [r7, #17]
 8000dd4:	021b      	lsls	r3, r3, #8
 8000dd6:	b21a      	sxth	r2, r3
 8000dd8:	7c3b      	ldrb	r3, [r7, #16]
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 8000de4:	7cfb      	ldrb	r3, [r7, #19]
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b21a      	sxth	r2, r3
 8000dea:	7cbb      	ldrb	r3, [r7, #18]
 8000dec:	b21b      	sxth	r3, r3
 8000dee:	4313      	orrs	r3, r2
 8000df0:	b21b      	sxth	r3, r3
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8000df8:	7d7b      	ldrb	r3, [r7, #21]
 8000dfa:	021b      	lsls	r3, r3, #8
 8000dfc:	b21a      	sxth	r2, r3
 8000dfe:	7d3b      	ldrb	r3, [r7, #20]
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	4313      	orrs	r3, r2
 8000e04:	b21a      	sxth	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8000e0a:	7dfb      	ldrb	r3, [r7, #23]
 8000e0c:	021b      	lsls	r3, r3, #8
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	7dbb      	ldrb	r3, [r7, #22]
 8000e12:	b21b      	sxth	r3, r3
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b21a      	sxth	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8000e1c:	7e7b      	ldrb	r3, [r7, #25]
 8000e1e:	021b      	lsls	r3, r3, #8
 8000e20:	b21a      	sxth	r2, r3
 8000e22:	7e3b      	ldrb	r3, [r7, #24]
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	4313      	orrs	r3, r2
 8000e28:	b21a      	sxth	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8000e2e:	7efb      	ldrb	r3, [r7, #27]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	b21a      	sxth	r2, r3
 8000e34:	7ebb      	ldrb	r3, [r7, #26]
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	b21a      	sxth	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8000e40:	7f7b      	ldrb	r3, [r7, #29]
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	7f3b      	ldrb	r3, [r7, #28]
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 8000e52:	7ffb      	ldrb	r3, [r7, #31]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	7fbb      	ldrb	r3, [r7, #30]
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8000e64:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	b21a      	sxth	r2, r3
 8000e6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e70:	b21b      	sxth	r3, r3
 8000e72:	4313      	orrs	r3, r2
 8000e74:	b21a      	sxth	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 8000e7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	b21a      	sxth	r2, r3
 8000e82:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000e86:	b21b      	sxth	r3, r3
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	b21a      	sxth	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 8000e90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e94:	b25a      	sxtb	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 8000e9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3728      	adds	r7, #40	; 0x28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 8000eba:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 8000ebe:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d074      	beq.n	8000fb0 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8000ec6:	f107 0114 	add.w	r1, r7, #20
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2202      	movs	r2, #2
 8000ece:	20f4      	movs	r0, #244	; 0xf4
 8000ed0:	f7ff fcdc 	bl	800088c <bmp2_get_regs>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8000ed8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d169      	bne.n	8000fb4 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff fd7d 	bl	80009e0 <bmp2_soft_reset>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8000eea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d160      	bne.n	8000fb4 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	68b9      	ldr	r1, [r7, #8]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f861 	bl	8000fc0 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 8000efe:	7d7b      	ldrb	r3, [r7, #21]
 8000f00:	b25b      	sxtb	r3, r3
 8000f02:	f003 031f 	and.w	r3, r3, #31
 8000f06:	b25a      	sxtb	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	789b      	ldrb	r3, [r3, #2]
 8000f0c:	015b      	lsls	r3, r3, #5
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8000f18:	7d7b      	ldrb	r3, [r7, #21]
 8000f1a:	b25b      	sxtb	r3, r3
 8000f1c:	f023 031c 	bic.w	r3, r3, #28
 8000f20:	b25a      	sxtb	r2, r3
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	791b      	ldrb	r3, [r3, #4]
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	f003 031c 	and.w	r3, r3, #28
 8000f2e:	b25b      	sxtb	r3, r3
 8000f30:	4313      	orrs	r3, r2
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8000f38:	7d7b      	ldrb	r3, [r7, #21]
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	f023 0301 	bic.w	r3, r3, #1
 8000f40:	b25a      	sxtb	r2, r3
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	795b      	ldrb	r3, [r3, #5]
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	b25b      	sxtb	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b25b      	sxtb	r3, r3
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 8000f56:	f107 0114 	add.w	r1, r7, #20
 8000f5a:	f107 0010 	add.w	r0, r7, #16
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2202      	movs	r2, #2
 8000f62:	f7ff fccb 	bl	80008fc <bmp2_set_regs>
 8000f66:	4603      	mov	r3, r0
 8000f68:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 8000f6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d120      	bne.n	8000fb4 <conf_sensor+0x10c>
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d01d      	beq.n	8000fb4 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7bfa      	ldrb	r2, [r7, #15]
 8000f7c:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 8000f7e:	7d3b      	ldrb	r3, [r7, #20]
 8000f80:	b25b      	sxtb	r3, r3
 8000f82:	f023 0303 	bic.w	r3, r3, #3
 8000f86:	b25a      	sxtb	r2, r3
 8000f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	b25b      	sxtb	r3, r3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 8000f9a:	f107 0114 	add.w	r1, r7, #20
 8000f9e:	f107 0010 	add.w	r0, r7, #16
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f7ff fca9 	bl	80008fc <bmp2_set_regs>
 8000faa:	4603      	mov	r3, r0
 8000fac:	75fb      	strb	r3, [r7, #23]
 8000fae:	e001      	b.n	8000fb4 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000fb0:	23ff      	movs	r3, #255	; 0xff
 8000fb2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000fb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	78db      	ldrb	r3, [r3, #3]
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	f200 808b 	bhi.w	80010ea <set_os_mode+0x12a>
 8000fd4:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <set_os_mode+0x1c>)
 8000fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fda:	bf00      	nop
 8000fdc:	08000ff1 	.word	0x08000ff1
 8000fe0:	08001023 	.word	0x08001023
 8000fe4:	08001055 	.word	0x08001055
 8000fe8:	08001087 	.word	0x08001087
 8000fec:	080010b9 	.word	0x080010b9
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	f003 031f 	and.w	r3, r3, #31
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	f043 0320 	orr.w	r3, r3, #32
 8001000:	b25b      	sxtb	r3, r3
 8001002:	b2da      	uxtb	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b25b      	sxtb	r3, r3
 800100e:	f023 031c 	bic.w	r3, r3, #28
 8001012:	b25b      	sxtb	r3, r3
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	b25b      	sxtb	r3, r3
 800101a:	b2da      	uxtb	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	701a      	strb	r2, [r3, #0]
            break;
 8001020:	e064      	b.n	80010ec <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b25b      	sxtb	r3, r3
 8001028:	f003 031f 	and.w	r3, r3, #31
 800102c:	b25b      	sxtb	r3, r3
 800102e:	f043 0320 	orr.w	r3, r3, #32
 8001032:	b25b      	sxtb	r3, r3
 8001034:	b2da      	uxtb	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b25b      	sxtb	r3, r3
 8001040:	f023 031c 	bic.w	r3, r3, #28
 8001044:	b25b      	sxtb	r3, r3
 8001046:	f043 0308 	orr.w	r3, r3, #8
 800104a:	b25b      	sxtb	r3, r3
 800104c:	b2da      	uxtb	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	701a      	strb	r2, [r3, #0]
            break;
 8001052:	e04b      	b.n	80010ec <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b25b      	sxtb	r3, r3
 800105a:	f003 031f 	and.w	r3, r3, #31
 800105e:	b25b      	sxtb	r3, r3
 8001060:	f043 0320 	orr.w	r3, r3, #32
 8001064:	b25b      	sxtb	r3, r3
 8001066:	b2da      	uxtb	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b25b      	sxtb	r3, r3
 8001072:	f023 031c 	bic.w	r3, r3, #28
 8001076:	b25b      	sxtb	r3, r3
 8001078:	f043 030c 	orr.w	r3, r3, #12
 800107c:	b25b      	sxtb	r3, r3
 800107e:	b2da      	uxtb	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	701a      	strb	r2, [r3, #0]
            break;
 8001084:	e032      	b.n	80010ec <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b25b      	sxtb	r3, r3
 800108c:	f003 031f 	and.w	r3, r3, #31
 8001090:	b25b      	sxtb	r3, r3
 8001092:	f043 0320 	orr.w	r3, r3, #32
 8001096:	b25b      	sxtb	r3, r3
 8001098:	b2da      	uxtb	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	f023 031c 	bic.w	r3, r3, #28
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	f043 0310 	orr.w	r3, r3, #16
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	701a      	strb	r2, [r3, #0]
            break;
 80010b6:	e019      	b.n	80010ec <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	f003 031f 	and.w	r3, r3, #31
 80010c2:	b25b      	sxtb	r3, r3
 80010c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	f023 031c 	bic.w	r3, r3, #28
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	f043 0314 	orr.w	r3, r3, #20
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	701a      	strb	r2, [r3, #0]
            break;
 80010e8:	e000      	b.n	80010ec <set_os_mode+0x12c>
        default:
            break;
 80010ea:	bf00      	nop
    }
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	031b      	lsls	r3, r3, #12
 8001108:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3301      	adds	r3, #1
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3302      	adds	r3, #2
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	091b      	lsrs	r3, r3, #4
 800111c:	b2db      	uxtb	r3, r3
 800111e:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	431a      	orrs	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	431a      	orrs	r2, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3303      	adds	r3, #3
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	031b      	lsls	r3, r3, #12
 8001136:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3304      	adds	r3, #4
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	011b      	lsls	r3, r3, #4
 8001140:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3305      	adds	r3, #5
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	b2db      	uxtb	r3, r3
 800114c:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	431a      	orrs	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4313      	orrs	r3, r2
 8001158:	461a      	mov	r2, r3
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4619      	mov	r1, r3
 8001168:	4610      	mov	r0, r2
 800116a:	f000 fa31 	bl	80015d0 <st_check_boundaries>
 800116e:	4603      	mov	r3, r0
 8001170:	72fb      	strb	r3, [r7, #11]

    return rslt;
 8001172:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001180:	b480      	push	{r7}
 8001182:	b08d      	sub	sp, #52	; 0x34
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 800118c:	2300      	movs	r3, #0
 800118e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	ee07 3a90 	vmov	s15, r3
 800119a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800119e:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 80012d8 <compensate_temperature+0x158>
 80011a2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	8b9b      	ldrh	r3, [r3, #28]
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 80011b2:	ed9f 4b4b 	vldr	d4, [pc, #300]	; 80012e0 <compensate_temperature+0x160>
 80011b6:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80011ba:	ee36 6b47 	vsub.f64	d6, d6, d7
           ((double) dev->calib_param.dig_t2);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80011cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80011d0:	ed87 7b06 	vstr	d7, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	ee07 3a90 	vmov	s15, r3
 80011dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011e0:	ed9f 5b41 	vldr	d5, [pc, #260]	; 80012e8 <compensate_temperature+0x168>
 80011e4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	8b9b      	ldrh	r3, [r3, #28]
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 80011f4:	ed9f 4b3e 	vldr	d4, [pc, #248]	; 80012f0 <compensate_temperature+0x170>
 80011f8:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80011fc:	ee36 6b47 	vsub.f64	d6, d6, d7
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	ee07 3a90 	vmov	s15, r3
 8001208:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800120c:	ed9f 4b36 	vldr	d4, [pc, #216]	; 80012e8 <compensate_temperature+0x168>
 8001210:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	8b9b      	ldrh	r3, [r3, #28]
 8001218:	ee07 3a90 	vmov	s15, r3
 800121c:	eeb8 4b67 	vcvt.f64.u32	d4, s15
 8001220:	ed9f 3b33 	vldr	d3, [pc, #204]	; 80012f0 <compensate_temperature+0x170>
 8001224:	ee84 7b03 	vdiv.f64	d7, d4, d3
 8001228:	ee35 7b47 	vsub.f64	d7, d5, d7
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 800122c:	ee26 6b07 	vmul.f64	d6, d6, d7
        ((double) dev->calib_param.dig_t3);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001236:	ee07 3a90 	vmov	s15, r3
 800123a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    var2 =
 800123e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001242:	ed87 7b04 	vstr	d7, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001246:	ed97 6b06 	vldr	d6, [r7, #24]
 800124a:	ed97 7b04 	vldr	d7, [r7, #16]
 800124e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001252:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001256:	ee17 2a90 	vmov	r2, s15
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 800125e:	ed97 6b06 	vldr	d6, [r7, #24]
 8001262:	ed97 7b04 	vldr	d7, [r7, #16]
 8001266:	ee36 6b07 	vadd.f64	d6, d6, d7
 800126a:	ed9f 5b23 	vldr	d5, [pc, #140]	; 80012f8 <compensate_temperature+0x178>
 800126e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001272:	ed87 7b08 	vstr	d7, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001276:	ed97 7b08 	vldr	d7, [r7, #32]
 800127a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001300 <compensate_temperature+0x180>
 800127e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001286:	d507      	bpl.n	8001298 <compensate_temperature+0x118>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b20      	ldr	r3, [pc, #128]	; (8001310 <compensate_temperature+0x190>)
 800128e:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001292:	2301      	movs	r3, #1
 8001294:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001298:	ed97 7b08 	vldr	d7, [r7, #32]
 800129c:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001308 <compensate_temperature+0x188>
 80012a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80012a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a8:	dd07      	ble.n	80012ba <compensate_temperature+0x13a>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <compensate_temperature+0x194>)
 80012b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 80012ba:	68f9      	ldr	r1, [r7, #12]
 80012bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012c0:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 80012c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3734      	adds	r7, #52	; 0x34
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	f3af 8000 	nop.w
 80012d8:	00000000 	.word	0x00000000
 80012dc:	40d00000 	.word	0x40d00000
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40900000 	.word	0x40900000
 80012e8:	00000000 	.word	0x00000000
 80012ec:	41000000 	.word	0x41000000
 80012f0:	00000000 	.word	0x00000000
 80012f4:	40c00000 	.word	0x40c00000
 80012f8:	00000000 	.word	0x00000000
 80012fc:	40b40000 	.word	0x40b40000
 8001300:	00000000 	.word	0x00000000
 8001304:	c0440000 	.word	0xc0440000
 8001308:	00000000 	.word	0x00000000
 800130c:	40554000 	.word	0x40554000
 8001310:	c0440000 	.word	0xc0440000
 8001314:	40554000 	.word	0x40554000

08001318 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001318:	b480      	push	{r7}
 800131a:	b08d      	sub	sp, #52	; 0x34
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001342:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001346:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800134a:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8001580 <compensate_pressure+0x268>
 800134e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001352:	ed87 7b06 	vstr	d7, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001356:	ed97 7b06 	vldr	d7, [r7, #24]
 800135a:	ee27 6b07 	vmul.f64	d6, d7, d7
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800136c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001370:	ed9f 5b85 	vldr	d5, [pc, #532]	; 8001588 <compensate_pressure+0x270>
 8001374:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001378:	ed87 7b04 	vstr	d7, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800138a:	ed97 7b06 	vldr	d7, [r7, #24]
 800138e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001392:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001396:	ed97 6b04 	vldr	d6, [r7, #16]
 800139a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800139e:	ed87 7b04 	vstr	d7, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 80013a2:	ed97 7b04 	vldr	d7, [r7, #16]
 80013a6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80013aa:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80013bc:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8001590 <compensate_pressure+0x278>
 80013c0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80013c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80013c8:	ed87 7b04 	vstr	d7, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80013da:	ed97 7b06 	vldr	d7, [r7, #24]
 80013de:	ee26 6b07 	vmul.f64	d6, d6, d7
 80013e2:	ed97 7b06 	vldr	d7, [r7, #24]
 80013e6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80013ea:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8001598 <compensate_pressure+0x280>
 80013ee:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80013f8:	ee07 3a90 	vmov	s15, r3
 80013fc:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001400:	ed97 7b06 	vldr	d7, [r7, #24]
 8001404:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001408:	ee36 6b07 	vadd.f64	d6, d6, d7
 800140c:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8001598 <compensate_pressure+0x280>
 8001410:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001414:	ed87 7b06 	vstr	d7, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001418:	ed97 6b06 	vldr	d6, [r7, #24]
 800141c:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 8001588 <compensate_pressure+0x270>
 8001420:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001424:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001428:	ee37 6b06 	vadd.f64	d6, d7, d6
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001438:	ee26 7b07 	vmul.f64	d7, d6, d7
 800143c:	ed87 7b06 	vstr	d7, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001440:	ed97 7b06 	vldr	d7, [r7, #24]
 8001444:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144c:	d407      	bmi.n	800145e <compensate_pressure+0x146>
 800144e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001452:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145a:	f340 8086 	ble.w	800156a <compensate_pressure+0x252>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	ee07 3a90 	vmov	s15, r3
 8001466:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800146a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80015a0 <compensate_pressure+0x288>
 800146e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001472:	ed87 7b08 	vstr	d7, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001476:	ed97 6b04 	vldr	d6, [r7, #16]
 800147a:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 80015a8 <compensate_pressure+0x290>
 800147e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001482:	ed97 6b08 	vldr	d6, [r7, #32]
 8001486:	ee36 7b47 	vsub.f64	d7, d6, d7
 800148a:	ed9f 6b49 	vldr	d6, [pc, #292]	; 80015b0 <compensate_pressure+0x298>
 800148e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001492:	ed97 6b06 	vldr	d6, [r7, #24]
 8001496:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800149a:	ed87 7b08 	vstr	d7, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80014ac:	ed97 7b08 	vldr	d7, [r7, #32]
 80014b0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80014b4:	ed97 7b08 	vldr	d7, [r7, #32]
 80014b8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80014bc:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 80015b8 <compensate_pressure+0x2a0>
 80014c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014c4:	ed87 7b06 	vstr	d7, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80014d6:	ed97 7b08 	vldr	d7, [r7, #32]
 80014da:	ee26 6b07 	vmul.f64	d6, d6, d7
 80014de:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8001588 <compensate_pressure+0x270>
 80014e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014e6:	ed87 7b04 	vstr	d7, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 80014ea:	ed97 6b06 	vldr	d6, [r7, #24]
 80014ee:	ed97 7b04 	vldr	d7, [r7, #16]
 80014f2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001504:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001508:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 800150c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001510:	ed97 6b08 	vldr	d6, [r7, #32]
 8001514:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001518:	ed87 7b08 	vstr	d7, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 800151c:	ed97 7b08 	vldr	d7, [r7, #32]
 8001520:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80015c0 <compensate_pressure+0x2a8>
 8001524:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	d507      	bpl.n	800153e <compensate_pressure+0x226>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 800152e:	a324      	add	r3, pc, #144	; (adr r3, 80015c0 <compensate_pressure+0x2a8>)
 8001530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001534:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001538:	2303      	movs	r3, #3
 800153a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 800153e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001542:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80015c8 <compensate_pressure+0x2b0>
 8001546:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800154a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154e:	dd07      	ble.n	8001560 <compensate_pressure+0x248>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001550:	a31d      	add	r3, pc, #116	; (adr r3, 80015c8 <compensate_pressure+0x2b0>)
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 800155a:	2304      	movs	r3, #4
 800155c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 8001560:	68f9      	ldr	r1, [r7, #12]
 8001562:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001566:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 800156a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800156e:	4618      	mov	r0, r3
 8001570:	3734      	adds	r7, #52	; 0x34
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	f3af 8000 	nop.w
 8001580:	00000000 	.word	0x00000000
 8001584:	40ef4000 	.word	0x40ef4000
 8001588:	00000000 	.word	0x00000000
 800158c:	40e00000 	.word	0x40e00000
 8001590:	00000000 	.word	0x00000000
 8001594:	40f00000 	.word	0x40f00000
 8001598:	00000000 	.word	0x00000000
 800159c:	41200000 	.word	0x41200000
 80015a0:	00000000 	.word	0x00000000
 80015a4:	41300000 	.word	0x41300000
 80015a8:	00000000 	.word	0x00000000
 80015ac:	40b00000 	.word	0x40b00000
 80015b0:	00000000 	.word	0x00000000
 80015b4:	40b86a00 	.word	0x40b86a00
 80015b8:	00000000 	.word	0x00000000
 80015bc:	41e00000 	.word	0x41e00000
 80015c0:	00000000 	.word	0x00000000
 80015c4:	40dd4c00 	.word	0x40dd4c00
 80015c8:	00000000 	.word	0x00000000
 80015cc:	40fadb00 	.word	0x40fadb00

080015d0 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db03      	blt.n	80015ec <st_check_boundaries+0x1c>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <st_check_boundaries+0x88>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	dd09      	ble.n	8001600 <st_check_boundaries+0x30>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	db06      	blt.n	8001600 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a18      	ldr	r2, [pc, #96]	; (8001658 <st_check_boundaries+0x88>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	dc02      	bgt.n	8001600 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 80015fa:	23fa      	movs	r3, #250	; 0xfa
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	e023      	b.n	8001648 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	db03      	blt.n	800160e <st_check_boundaries+0x3e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a13      	ldr	r2, [pc, #76]	; (8001658 <st_check_boundaries+0x88>)
 800160a:	4293      	cmp	r3, r2
 800160c:	dd09      	ble.n	8001622 <st_check_boundaries+0x52>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	db06      	blt.n	8001622 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	4a10      	ldr	r2, [pc, #64]	; (8001658 <st_check_boundaries+0x88>)
 8001618:	4293      	cmp	r3, r2
 800161a:	dc02      	bgt.n	8001622 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 800161c:	23fb      	movs	r3, #251	; 0xfb
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	e012      	b.n	8001648 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db03      	blt.n	8001630 <st_check_boundaries+0x60>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <st_check_boundaries+0x88>)
 800162c:	4293      	cmp	r3, r2
 800162e:	dd09      	ble.n	8001644 <st_check_boundaries+0x74>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	db03      	blt.n	800163e <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a07      	ldr	r2, [pc, #28]	; (8001658 <st_check_boundaries+0x88>)
 800163a:	4293      	cmp	r3, r2
 800163c:	dd02      	ble.n	8001644 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 800163e:	23f9      	movs	r3, #249	; 0xf9
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	e001      	b.n	8001648 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001648:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	000ffff0 	.word	0x000ffff0

0800165c <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff f8e6 	bl	8000836 <bmp2_init>
 800166a:	4603      	mov	r3, r0
 800166c:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 800166e:	f107 0308 	add.w	r3, r7, #8
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff f9cb 	bl	8000a10 <bmp2_get_config>
 800167a:	4603      	mov	r3, r0
 800167c:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_OFF;
 800167e:	2300      	movs	r3, #0
 8001680:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001682:	2300      	movs	r3, #0
 8001684:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001686:	2303      	movs	r3, #3
 8001688:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff f9fd 	bl	8000a90 <bmp2_set_config>
 8001696:	4603      	mov	r3, r0
 8001698:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	4619      	mov	r1, r3
 80016a2:	2003      	movs	r0, #3
 80016a4:	f7ff fa2f 	bl	8000b06 <bmp2_set_power_mode>
 80016a8:	4603      	mov	r3, r0
 80016aa:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 80016ac:	f107 0108 	add.w	r1, r7, #8
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff faba 	bl	8000c30 <bmp2_compute_meas_time>
 80016bc:	4603      	mov	r3, r0
 80016be:	75fb      	strb	r3, [r7, #23]

  return rslt;
 80016c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b096      	sub	sp, #88	; 0x58
 80016d0:	af02      	add	r7, sp, #8
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	4603      	mov	r3, r0
 80016da:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 80016dc:	2300      	movs	r3, #0
 80016de:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint8_t txarray[BMP2_SPI_BUFFER_LEN] = {0,};
 80016e8:	2300      	movs	r3, #0
 80016ea:	633b      	str	r3, [r7, #48]	; 0x30
 80016ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
 80016fc:	615a      	str	r2, [r3, #20]
  uint8_t rxarray[BMP2_SPI_BUFFER_LEN] = {0,};
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	f107 0318 	add.w	r3, r7, #24
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]
 8001712:	615a      	str	r2, [r3, #20]
  uint8_t cs = *(uint8_t*)intf_ptr;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 800171c:	7bfb      	ldrb	r3, [r7, #15]

  /* Copy selected register address to transmit buffer */
  memcpy(&txarray[BMP2_REG_ADDR_INDEX],  &reg_addr,  BMP2_REG_ADDR_LEN);
 800171e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(BMP2_CS_Ports[cs], BMP2_CS_Pins[cs], GPIO_PIN_RESET);
 8001722:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001726:	4a26      	ldr	r2, [pc, #152]	; (80017c0 <bmp2_spi_read+0xf4>)
 8001728:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800172c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001730:	4a24      	ldr	r2, [pc, #144]	; (80017c4 <bmp2_spi_read+0xf8>)
 8001732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001736:	2200      	movs	r2, #0
 8001738:	4619      	mov	r1, r3
 800173a:	f001 fa81 	bl	8002c40 <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_TransmitReceive(BMP2_SPI, (uint8_t*)(&txarray), (uint8_t*)(&rxarray), length+BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	b29b      	uxth	r3, r3
 8001742:	3301      	adds	r3, #1
 8001744:	b29b      	uxth	r3, r3
 8001746:	f107 0214 	add.w	r2, r7, #20
 800174a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800174e:	2005      	movs	r0, #5
 8001750:	9000      	str	r0, [sp, #0]
 8001752:	481d      	ldr	r0, [pc, #116]	; (80017c8 <bmp2_spi_read+0xfc>)
 8001754:	f002 ff27 	bl	80045a6 <HAL_SPI_TransmitReceive>
 8001758:	4603      	mov	r3, r0
 800175a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 800175e:	2300      	movs	r3, #0
 8001760:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001764:	e012      	b.n	800178c <bmp2_spi_read+0xc0>
  {
    HAL_GPIO_WritePin(BMP2_CS_Ports[i], BMP2_CS_Pins[i], GPIO_PIN_SET);
 8001766:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800176a:	4a15      	ldr	r2, [pc, #84]	; (80017c0 <bmp2_spi_read+0xf4>)
 800176c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001770:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001774:	4a13      	ldr	r2, [pc, #76]	; (80017c4 <bmp2_spi_read+0xf8>)
 8001776:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800177a:	2201      	movs	r2, #1
 800177c:	4619      	mov	r1, r3
 800177e:	f001 fa5f 	bl	8002c40 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001782:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001786:	3301      	adds	r3, #1
 8001788:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800178c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001790:	2b01      	cmp	r3, #1
 8001792:	d9e8      	bls.n	8001766 <bmp2_spi_read+0x9a>
  }

  if (status != HAL_OK)
 8001794:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <bmp2_spi_read+0xd6>
  {
    // The BME2xx API calls for 0 return value as a success, and -1 returned as failure
    iError = (-1);
 800179c:	23ff      	movs	r3, #255	; 0xff
 800179e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  /* Copy data content from receive buffer */
  memcpy(reg_data, &rxarray[BMP2_DATA_INDEX], length);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	3301      	adds	r3, #1
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	4619      	mov	r1, r3
 80017ac:	68b8      	ldr	r0, [r7, #8]
 80017ae:	f005 faef 	bl	8006d90 <memcpy>

  return iError;
 80017b2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3750      	adds	r7, #80	; 0x50
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000004 	.word	0x20000004
 80017c4:	2000000c 	.word	0x2000000c
 80017c8:	20000798 	.word	0x20000798

080017cc <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08c      	sub	sp, #48	; 0x30
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	4603      	mov	r3, r0
 80017da:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t txarray[BMP2_SPI_BUFFER_LEN] = {0,};
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
 80017fc:	615a      	str	r2, [r3, #20]
  uint8_t cs = *(uint8_t*)intf_ptr;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001806:	7bfb      	ldrb	r3, [r7, #15]

  /* Copy selected register address and data content to transmit buffer */
  memcpy(&txarray[BMP2_REG_ADDR_INDEX],  &reg_addr,  BMP2_REG_ADDR_LEN);
 8001808:	743b      	strb	r3, [r7, #16]
  memcpy(&txarray[BMP2_DATA_INDEX],       reg_data,  length);
 800180a:	f107 0310 	add.w	r3, r7, #16
 800180e:	3301      	adds	r3, #1
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	68b9      	ldr	r1, [r7, #8]
 8001814:	4618      	mov	r0, r3
 8001816:	f005 fabb 	bl	8006d90 <memcpy>

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(BMP2_CS_Ports[cs], BMP2_CS_Pins[cs], GPIO_PIN_RESET);
 800181a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800181e:	4a20      	ldr	r2, [pc, #128]	; (80018a0 <bmp2_spi_write+0xd4>)
 8001820:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001824:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001828:	4a1e      	ldr	r2, [pc, #120]	; (80018a4 <bmp2_spi_write+0xd8>)
 800182a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800182e:	2200      	movs	r2, #0
 8001830:	4619      	mov	r1, r3
 8001832:	f001 fa05 	bl	8002c40 <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_Transmit(BMP2_SPI, (uint8_t*)(&txarray), length+BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	b29b      	uxth	r3, r3
 800183a:	3301      	adds	r3, #1
 800183c:	b29a      	uxth	r2, r3
 800183e:	f107 0110 	add.w	r1, r7, #16
 8001842:	2305      	movs	r3, #5
 8001844:	4818      	ldr	r0, [pc, #96]	; (80018a8 <bmp2_spi_write+0xdc>)
 8001846:	f002 fd40 	bl	80042ca <HAL_SPI_Transmit>
 800184a:	4603      	mov	r3, r0
 800184c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001850:	2300      	movs	r3, #0
 8001852:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001856:	e012      	b.n	800187e <bmp2_spi_write+0xb2>
  {
    HAL_GPIO_WritePin(BMP2_CS_Ports[i], BMP2_CS_Pins[i], GPIO_PIN_SET);
 8001858:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800185c:	4a10      	ldr	r2, [pc, #64]	; (80018a0 <bmp2_spi_write+0xd4>)
 800185e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001862:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001866:	4a0f      	ldr	r2, [pc, #60]	; (80018a4 <bmp2_spi_write+0xd8>)
 8001868:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800186c:	2201      	movs	r2, #1
 800186e:	4619      	mov	r1, r3
 8001870:	f001 f9e6 	bl	8002c40 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001874:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001878:	3301      	adds	r3, #1
 800187a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800187e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001882:	2b01      	cmp	r3, #1
 8001884:	d9e8      	bls.n	8001858 <bmp2_spi_write+0x8c>
  }

  if (status != HAL_OK)
 8001886:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <bmp2_spi_write+0xc8>
  {
    // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
    iError = (-1);
 800188e:	23ff      	movs	r3, #255	; 0xff
 8001890:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return iError;
 8001894:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001898:	4618      	mov	r0, r3
 800189a:	3730      	adds	r7, #48	; 0x30
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000004 	.word	0x20000004
 80018a4:	2000000c 	.word	0x2000000c
 80018a8:	20000798 	.word	0x20000798

080018ac <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <bmp2_delay_us+0x24>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	099b      	lsrs	r3, r3, #6
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 ff07 	bl	80026d4 <HAL_Delay>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	10624dd3 	.word	0x10624dd3

080018d4 <BMP2_ReadTemperature_degC>:
 *  @param[in]  dev   : BMP2xx device structure
 *
 *  @return Temperature measurement [degC]
 */
double BMP2_ReadTemperature_degC(struct bmp2_dev *dev)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08c      	sub	sp, #48	; 0x30
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMP2_E_NULL_PTR;
 80018dc:	23ff      	movs	r3, #255	; 0xff
 80018de:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    struct bmp2_status status;
    struct bmp2_data comp_data;
    double temp = -1.0;
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	4b19      	ldr	r3, [pc, #100]	; (800194c <BMP2_ReadTemperature_degC+0x78>)
 80018e8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int8_t try = 10;
 80018ec:	230a      	movs	r3, #10
 80018ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    do {
      /* Read sensor status */
      rslt = bmp2_get_status(&status, dev);
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff f8d8 	bl	8000aae <bmp2_get_status>
 80018fe:	4603      	mov	r3, r0
 8001900:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      /* Read compensated data */
      rslt = bmp2_get_sensor_data(&comp_data, dev);
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff f910 	bl	8000b30 <bmp2_get_sensor_data>
 8001910:	4603      	mov	r3, r0
 8001912:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      temp = comp_data.temperature;
 8001916:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800191a:	e9c7 2308 	strd	r2, r3, [r7, #32]
      try--;
 800191e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001922:	b2db      	uxtb	r3, r3
 8001924:	3b01      	subs	r3, #1
 8001926:	b2db      	uxtb	r3, r3
 8001928:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 800192c:	7f3b      	ldrb	r3, [r7, #28]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <BMP2_ReadTemperature_degC+0x66>
 8001932:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001936:	2b00      	cmp	r3, #0
 8001938:	dcdb      	bgt.n	80018f2 <BMP2_ReadTemperature_degC+0x1e>

    return temp;
 800193a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800193e:	ec43 2b17 	vmov	d7, r2, r3
//
//	  /* Calculate measurement time in microseconds */
//	  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
//
//	  return rslt;
}
 8001942:	eeb0 0b47 	vmov.f64	d0, d7
 8001946:	3730      	adds	r7, #48	; 0x30
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	bff00000 	.word	0xbff00000

08001950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001956:	f000 fe60 	bl	800261a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800195a:	f000 f893 	bl	8001a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800195e:	f000 fa8d 	bl	8001e7c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001962:	f000 fa2d 	bl	8001dc0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001966:	f000 fa5b 	bl	8001e20 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800196a:	f000 f963 	bl	8001c34 <MX_TIM3_Init>
  MX_SPI4_Init();
 800196e:	f000 f923 	bl	8001bb8 <MX_SPI4_Init>
  MX_TIM4_Init();
 8001972:	f000 f9ad 	bl	8001cd0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8001976:	4836      	ldr	r0, [pc, #216]	; (8001a50 <main+0x100>)
 8001978:	f003 fa08 	bl	8004d8c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 800197c:	4835      	ldr	r0, [pc, #212]	; (8001a54 <main+0x104>)
 800197e:	f003 fa05 	bl	8004d8c <HAL_TIM_Base_Start>
  Lcd_init();
 8001982:	f7fe fefa 	bl	800077a <Lcd_init>

  BMP2_Init(&hbmp2_1);
 8001986:	4834      	ldr	r0, [pc, #208]	; (8001a58 <main+0x108>)
 8001988:	f7ff fe68 	bl	800165c <BMP2_Init>


  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800198c:	2108      	movs	r1, #8
 800198e:	4830      	ldr	r0, [pc, #192]	; (8001a50 <main+0x100>)
 8001990:	f003 face 	bl	8004f30 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);
 8001994:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <main+0x100>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800199c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  temp =  BMP2_ReadTemperature_degC(&hbmp2_1);
 800199e:	482e      	ldr	r0, [pc, #184]	; (8001a58 <main+0x108>)
 80019a0:	f7ff ff98 	bl	80018d4 <BMP2_ReadTemperature_degC>
 80019a4:	eeb0 7b40 	vmov.f64	d7, d0
 80019a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019ac:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <main+0x10c>)
 80019ae:	edc3 7a00 	vstr	s15, [r3]
	  char data_msg[32];
	  n = sprintf(data_msg, "Temp: %4.02f \r\n", (float)temp);
 80019b2:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <main+0x10c>)
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019bc:	4638      	mov	r0, r7
 80019be:	ec53 2b17 	vmov	r2, r3, d7
 80019c2:	4927      	ldr	r1, [pc, #156]	; (8001a60 <main+0x110>)
 80019c4:	f005 fe3e 	bl	8007644 <siprintf>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a26      	ldr	r2, [pc, #152]	; (8001a64 <main+0x114>)
 80019cc:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t*)data_msg, n, 0xffff);
 80019ce:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <main+0x114>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	4639      	mov	r1, r7
 80019d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019da:	4823      	ldr	r0, [pc, #140]	; (8001a68 <main+0x118>)
 80019dc:	f004 fa1a 	bl	8005e14 <HAL_UART_Transmit>

	  Lcd_clear();
 80019e0:	f7fe fea2 	bl	8000728 <Lcd_clear>
	  Lcd_put_cur(0, 0);
 80019e4:	2100      	movs	r1, #0
 80019e6:	2000      	movs	r0, #0
 80019e8:	f7fe fea8 	bl	800073c <Lcd_put_cur>

	  sprintf (buffer,"Set temp = %4.02f", stemp);
 80019ec:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <main+0x11c>)
 80019ee:	edd3 7a00 	vldr	s15, [r3]
 80019f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019f6:	ec53 2b17 	vmov	r2, r3, d7
 80019fa:	491d      	ldr	r1, [pc, #116]	; (8001a70 <main+0x120>)
 80019fc:	481d      	ldr	r0, [pc, #116]	; (8001a74 <main+0x124>)
 80019fe:	f005 fe21 	bl	8007644 <siprintf>
	  Lcd_send_string(buffer);
 8001a02:	481c      	ldr	r0, [pc, #112]	; (8001a74 <main+0x124>)
 8001a04:	f7fe fef6 	bl	80007f4 <Lcd_send_string>

	  Lcd_put_cur(1, 0);
 8001a08:	2100      	movs	r1, #0
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f7fe fe96 	bl	800073c <Lcd_put_cur>

//	  printed= a_temp[i];
	  sprintf (buffer1,"Act temp = %4.02f", (float)temp);
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <main+0x10c>)
 8001a12:	edd3 7a00 	vldr	s15, [r3]
 8001a16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a1a:	ec53 2b17 	vmov	r2, r3, d7
 8001a1e:	4916      	ldr	r1, [pc, #88]	; (8001a78 <main+0x128>)
 8001a20:	4816      	ldr	r0, [pc, #88]	; (8001a7c <main+0x12c>)
 8001a22:	f005 fe0f 	bl	8007644 <siprintf>
	  i++;
 8001a26:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <main+0x130>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <main+0x130>)
 8001a2e:	6013      	str	r3, [r2, #0]
	  if (i >2){
 8001a30:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <main+0x130>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	dd02      	ble.n	8001a3e <main+0xee>
		  i =0;
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <main+0x130>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
	  }

	  Lcd_send_string(buffer1);
 8001a3e:	480f      	ldr	r0, [pc, #60]	; (8001a7c <main+0x12c>)
 8001a40:	f7fe fed8 	bl	80007f4 <Lcd_send_string>
	  HAL_Delay(500);
 8001a44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a48:	f000 fe44 	bl	80026d4 <HAL_Delay>
  {
 8001a4c:	e7a7      	b.n	800199e <main+0x4e>
 8001a4e:	bf00      	nop
 8001a50:	20000734 	.word	0x20000734
 8001a54:	2000025c 	.word	0x2000025c
 8001a58:	20000010 	.word	0x20000010
 8001a5c:	20000730 	.word	0x20000730
 8001a60:	080099fc 	.word	0x080099fc
 8001a64:	20000258 	.word	0x20000258
 8001a68:	200002a8 	.word	0x200002a8
 8001a6c:	2000004c 	.word	0x2000004c
 8001a70:	08009a0c 	.word	0x08009a0c
 8001a74:	20000784 	.word	0x20000784
 8001a78:	08009a20 	.word	0x08009a20
 8001a7c:	20000800 	.word	0x20000800
 8001a80:	20000248 	.word	0x20000248

08001a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b0b8      	sub	sp, #224	; 0xe0
 8001a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a8e:	2234      	movs	r2, #52	; 0x34
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f005 f98a 	bl	8006dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a98:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa8:	f107 0308 	add.w	r3, r7, #8
 8001aac:	2290      	movs	r2, #144	; 0x90
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f005 f97b 	bl	8006dac <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ab6:	f001 fa25 	bl	8002f04 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	4b3c      	ldr	r3, [pc, #240]	; (8001bac <SystemClock_Config+0x128>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	4a3b      	ldr	r2, [pc, #236]	; (8001bac <SystemClock_Config+0x128>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac6:	4b39      	ldr	r3, [pc, #228]	; (8001bac <SystemClock_Config+0x128>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ad2:	4b37      	ldr	r3, [pc, #220]	; (8001bb0 <SystemClock_Config+0x12c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ada:	4a35      	ldr	r2, [pc, #212]	; (8001bb0 <SystemClock_Config+0x12c>)
 8001adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <SystemClock_Config+0x12c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001aee:	2301      	movs	r3, #1
 8001af0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001af4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001af8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001afc:	2302      	movs	r3, #2
 8001afe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001b10:	2360      	movs	r3, #96	; 0x60
 8001b12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b16:	2302      	movs	r3, #2
 8001b18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b22:	2302      	movs	r3, #2
 8001b24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b28:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f001 fa49 	bl	8002fc4 <HAL_RCC_OscConfig>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001b38:	f000 faca 	bl	80020d0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b3c:	f001 f9f2 	bl	8002f24 <HAL_PWREx_EnableOverDrive>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001b46:	f000 fac3 	bl	80020d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b4a:	230f      	movs	r3, #15
 8001b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b50:	2302      	movs	r3, #2
 8001b52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b6c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b70:	2103      	movs	r1, #3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f001 fcd4 	bl	8003520 <HAL_RCC_ClockConfig>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8001b7e:	f000 faa7 	bl	80020d0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <SystemClock_Config+0x130>)
 8001b84:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b86:	2300      	movs	r3, #0
 8001b88:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b90:	f107 0308 	add.w	r3, r7, #8
 8001b94:	4618      	mov	r0, r3
 8001b96:	f001 fec5 	bl	8003924 <HAL_RCCEx_PeriphCLKConfig>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8001ba0:	f000 fa96 	bl	80020d0 <Error_Handler>
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	37e0      	adds	r7, #224	; 0xe0
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40007000 	.word	0x40007000
 8001bb4:	00200100 	.word	0x00200100

08001bb8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <MX_SPI4_Init+0x74>)
 8001bbe:	4a1c      	ldr	r2, [pc, #112]	; (8001c30 <MX_SPI4_Init+0x78>)
 8001bc0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <MX_SPI4_Init+0x74>)
 8001bc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bc8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001bca:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <MX_SPI4_Init+0x74>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bd0:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <MX_SPI4_Init+0x74>)
 8001bd2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001bd6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001bd8:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <MX_SPI4_Init+0x74>)
 8001bda:	2202      	movs	r2, #2
 8001bdc:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001bde:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <MX_SPI4_Init+0x74>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <MX_SPI4_Init+0x74>)
 8001be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bea:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001bec:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <MX_SPI4_Init+0x74>)
 8001bee:	2210      	movs	r2, #16
 8001bf0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <MX_SPI4_Init+0x74>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <MX_SPI4_Init+0x74>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <MX_SPI4_Init+0x74>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <MX_SPI4_Init+0x74>)
 8001c06:	2207      	movs	r2, #7
 8001c08:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <MX_SPI4_Init+0x74>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <MX_SPI4_Init+0x74>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001c16:	4805      	ldr	r0, [pc, #20]	; (8001c2c <MX_SPI4_Init+0x74>)
 8001c18:	f002 faac 	bl	8004174 <HAL_SPI_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001c22:	f000 fa55 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000798 	.word	0x20000798
 8001c30:	40013400 	.word	0x40013400

08001c34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c3a:	f107 0310 	add.w	r3, r7, #16
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <MX_TIM3_Init+0x94>)
 8001c54:	4a1d      	ldr	r2, [pc, #116]	; (8001ccc <MX_TIM3_Init+0x98>)
 8001c56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <MX_TIM3_Init+0x94>)
 8001c5a:	225f      	movs	r2, #95	; 0x5f
 8001c5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <MX_TIM3_Init+0x94>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65534;
 8001c64:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <MX_TIM3_Init+0x94>)
 8001c66:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001c6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6c:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <MX_TIM3_Init+0x94>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <MX_TIM3_Init+0x94>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c78:	4813      	ldr	r0, [pc, #76]	; (8001cc8 <MX_TIM3_Init+0x94>)
 8001c7a:	f003 f82f 	bl	8004cdc <HAL_TIM_Base_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001c84:	f000 fa24 	bl	80020d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c8e:	f107 0310 	add.w	r3, r7, #16
 8001c92:	4619      	mov	r1, r3
 8001c94:	480c      	ldr	r0, [pc, #48]	; (8001cc8 <MX_TIM3_Init+0x94>)
 8001c96:	f003 fb59 	bl	800534c <HAL_TIM_ConfigClockSource>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001ca0:	f000 fa16 	bl	80020d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <MX_TIM3_Init+0x94>)
 8001cb2:	f003 ffd3 	bl	8005c5c <HAL_TIMEx_MasterConfigSynchronization>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001cbc:	f000 fa08 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	3720      	adds	r7, #32
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000734 	.word	0x20000734
 8001ccc:	40000400 	.word	0x40000400

08001cd0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08e      	sub	sp, #56	; 0x38
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce4:	f107 031c 	add.w	r3, r7, #28
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	60da      	str	r2, [r3, #12]
 8001cfc:	611a      	str	r2, [r3, #16]
 8001cfe:	615a      	str	r2, [r3, #20]
 8001d00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d02:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <MX_TIM4_Init+0xe8>)
 8001d04:	4a2d      	ldr	r2, [pc, #180]	; (8001dbc <MX_TIM4_Init+0xec>)
 8001d06:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 95;
 8001d08:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <MX_TIM4_Init+0xe8>)
 8001d0a:	225f      	movs	r2, #95	; 0x5f
 8001d0c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <MX_TIM4_Init+0xe8>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001d14:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <MX_TIM4_Init+0xe8>)
 8001d16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d1a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1c:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <MX_TIM4_Init+0xe8>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d22:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <MX_TIM4_Init+0xe8>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d28:	4823      	ldr	r0, [pc, #140]	; (8001db8 <MX_TIM4_Init+0xe8>)
 8001d2a:	f002 ffd7 	bl	8004cdc <HAL_TIM_Base_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001d34:	f000 f9cc 	bl	80020d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d42:	4619      	mov	r1, r3
 8001d44:	481c      	ldr	r0, [pc, #112]	; (8001db8 <MX_TIM4_Init+0xe8>)
 8001d46:	f003 fb01 	bl	800534c <HAL_TIM_ConfigClockSource>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001d50:	f000 f9be 	bl	80020d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d54:	4818      	ldr	r0, [pc, #96]	; (8001db8 <MX_TIM4_Init+0xe8>)
 8001d56:	f003 f889 	bl	8004e6c <HAL_TIM_PWM_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001d60:	f000 f9b6 	bl	80020d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d6c:	f107 031c 	add.w	r3, r7, #28
 8001d70:	4619      	mov	r1, r3
 8001d72:	4811      	ldr	r0, [pc, #68]	; (8001db8 <MX_TIM4_Init+0xe8>)
 8001d74:	f003 ff72 	bl	8005c5c <HAL_TIMEx_MasterConfigSynchronization>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001d7e:	f000 f9a7 	bl	80020d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d82:	2360      	movs	r3, #96	; 0x60
 8001d84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d92:	463b      	mov	r3, r7
 8001d94:	2208      	movs	r2, #8
 8001d96:	4619      	mov	r1, r3
 8001d98:	4807      	ldr	r0, [pc, #28]	; (8001db8 <MX_TIM4_Init+0xe8>)
 8001d9a:	f003 f9c3 	bl	8005124 <HAL_TIM_PWM_ConfigChannel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001da4:	f000 f994 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001da8:	4803      	ldr	r0, [pc, #12]	; (8001db8 <MX_TIM4_Init+0xe8>)
 8001daa:	f000 fa33 	bl	8002214 <HAL_TIM_MspPostInit>

}
 8001dae:	bf00      	nop
 8001db0:	3738      	adds	r7, #56	; 0x38
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	2000025c 	.word	0x2000025c
 8001dbc:	40000800 	.word	0x40000800

08001dc0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <MX_USART3_UART_Init+0x58>)
 8001dc6:	4a15      	ldr	r2, [pc, #84]	; (8001e1c <MX_USART3_UART_Init+0x5c>)
 8001dc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001dca:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <MX_USART3_UART_Init+0x58>)
 8001dcc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001dd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd2:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <MX_USART3_UART_Init+0x58>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <MX_USART3_UART_Init+0x58>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <MX_USART3_UART_Init+0x58>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <MX_USART3_UART_Init+0x58>)
 8001de6:	220c      	movs	r2, #12
 8001de8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dea:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <MX_USART3_UART_Init+0x58>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <MX_USART3_UART_Init+0x58>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <MX_USART3_UART_Init+0x58>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <MX_USART3_UART_Init+0x58>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e02:	4805      	ldr	r0, [pc, #20]	; (8001e18 <MX_USART3_UART_Init+0x58>)
 8001e04:	f003 ffb8 	bl	8005d78 <HAL_UART_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e0e:	f000 f95f 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200002a8 	.word	0x200002a8
 8001e1c:	40004800 	.word	0x40004800

08001e20 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001e24:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001e2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e2e:	2206      	movs	r2, #6
 8001e30:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e34:	2202      	movs	r2, #2
 8001e36:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001e38:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e40:	2202      	movs	r2, #2
 8001e42:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001e62:	4805      	ldr	r0, [pc, #20]	; (8001e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e64:	f000 ff05 	bl	8002c72 <HAL_PCD_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001e6e:	f000 f92f 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	2000032c 	.word	0x2000032c

08001e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08e      	sub	sp, #56	; 0x38
 8001e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e92:	4b89      	ldr	r3, [pc, #548]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a88      	ldr	r2, [pc, #544]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001e98:	f043 0310 	orr.w	r3, r3, #16
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b86      	ldr	r3, [pc, #536]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0310 	and.w	r3, r3, #16
 8001ea6:	623b      	str	r3, [r7, #32]
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eaa:	4b83      	ldr	r3, [pc, #524]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a82      	ldr	r2, [pc, #520]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001eb0:	f043 0304 	orr.w	r3, r3, #4
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b80      	ldr	r3, [pc, #512]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	61fb      	str	r3, [r7, #28]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ec2:	4b7d      	ldr	r3, [pc, #500]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a7c      	ldr	r2, [pc, #496]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b7a      	ldr	r3, [pc, #488]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed6:	61bb      	str	r3, [r7, #24]
 8001ed8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eda:	4b77      	ldr	r3, [pc, #476]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a76      	ldr	r2, [pc, #472]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001ee0:	f043 0302 	orr.w	r3, r3, #2
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b74      	ldr	r3, [pc, #464]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ef2:	4b71      	ldr	r3, [pc, #452]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a70      	ldr	r2, [pc, #448]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001ef8:	f043 0320 	orr.w	r3, r3, #32
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b6e      	ldr	r3, [pc, #440]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f0a:	4b6b      	ldr	r3, [pc, #428]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a6a      	ldr	r2, [pc, #424]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001f10:	f043 0308 	orr.w	r3, r3, #8
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b68      	ldr	r3, [pc, #416]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f22:	4b65      	ldr	r3, [pc, #404]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a64      	ldr	r2, [pc, #400]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b62      	ldr	r3, [pc, #392]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3a:	4b5f      	ldr	r3, [pc, #380]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a5e      	ldr	r2, [pc, #376]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b5c      	ldr	r3, [pc, #368]	; (80020b8 <MX_GPIO_Init+0x23c>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP280_CS2_Pin|BMP280_CS1_Pin|D6_Pin|D5_Pin
 8001f52:	2200      	movs	r2, #0
 8001f54:	f642 2118 	movw	r1, #10776	; 0x2a18
 8001f58:	4858      	ldr	r0, [pc, #352]	; (80020bc <MX_GPIO_Init+0x240>)
 8001f5a:	f000 fe71 	bl	8002c40 <HAL_GPIO_WritePin>
                          |EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f244 0181 	movw	r1, #16513	; 0x4081
 8001f64:	4856      	ldr	r0, [pc, #344]	; (80020c0 <MX_GPIO_Init+0x244>)
 8001f66:	f000 fe6b 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D7_Pin|D4_Pin|RW_Pin, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001f70:	4854      	ldr	r0, [pc, #336]	; (80020c4 <MX_GPIO_Init+0x248>)
 8001f72:	f000 fe65 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|RS_Pin, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	f244 0140 	movw	r1, #16448	; 0x4040
 8001f7c:	4852      	ldr	r0, [pc, #328]	; (80020c8 <MX_GPIO_Init+0x24c>)
 8001f7e:	f000 fe5f 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BMP280_CS2_Pin BMP280_CS1_Pin D6_Pin D5_Pin
                           EN_Pin */
  GPIO_InitStruct.Pin = BMP280_CS2_Pin|BMP280_CS1_Pin|D6_Pin|D5_Pin
 8001f82:	f642 2318 	movw	r3, #10776	; 0x2a18
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
                          |EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4848      	ldr	r0, [pc, #288]	; (80020bc <MX_GPIO_Init+0x240>)
 8001f9c:	f000 fca4 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fa6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001faa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4845      	ldr	r0, [pc, #276]	; (80020cc <MX_GPIO_Init+0x250>)
 8001fb8:	f000 fc96 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fcc:	230b      	movs	r3, #11
 8001fce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 8001fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	483d      	ldr	r0, [pc, #244]	; (80020cc <MX_GPIO_Init+0x250>)
 8001fd8:	f000 fc86 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001fdc:	f244 0381 	movw	r3, #16513	; 0x4081
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2300      	movs	r3, #0
 8001fec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4832      	ldr	r0, [pc, #200]	; (80020c0 <MX_GPIO_Init+0x244>)
 8001ff6:	f000 fc77 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin RW_Pin */
  GPIO_InitStruct.Pin = D7_Pin|RW_Pin;
 8001ffa:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002000:	2301      	movs	r3, #1
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800200c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002010:	4619      	mov	r1, r3
 8002012:	482c      	ldr	r0, [pc, #176]	; (80020c4 <MX_GPIO_Init+0x248>)
 8002014:	f000 fc68 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_Pin */
  GPIO_InitStruct.Pin = D4_Pin;
 8002018:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201e:	2301      	movs	r3, #1
 8002020:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002026:	2301      	movs	r3, #1
 8002028:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 800202a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800202e:	4619      	mov	r1, r3
 8002030:	4824      	ldr	r0, [pc, #144]	; (80020c4 <MX_GPIO_Init+0x248>)
 8002032:	f000 fc59 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002036:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002044:	2303      	movs	r3, #3
 8002046:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002048:	230b      	movs	r3, #11
 800204a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800204c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002050:	4619      	mov	r1, r3
 8002052:	481b      	ldr	r0, [pc, #108]	; (80020c0 <MX_GPIO_Init+0x244>)
 8002054:	f000 fc48 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin RS_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|RS_Pin;
 8002058:	f244 0340 	movw	r3, #16448	; 0x4040
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205e:	2301      	movs	r3, #1
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002066:	2300      	movs	r3, #0
 8002068:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800206a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800206e:	4619      	mov	r1, r3
 8002070:	4815      	ldr	r0, [pc, #84]	; (80020c8 <MX_GPIO_Init+0x24c>)
 8002072:	f000 fc39 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002076:	2380      	movs	r3, #128	; 0x80
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800207a:	2300      	movs	r3, #0
 800207c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002086:	4619      	mov	r1, r3
 8002088:	480f      	ldr	r0, [pc, #60]	; (80020c8 <MX_GPIO_Init+0x24c>)
 800208a:	f000 fc2d 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800208e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002094:	2302      	movs	r3, #2
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209c:	2303      	movs	r3, #3
 800209e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020a0:	230b      	movs	r3, #11
 80020a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a8:	4619      	mov	r1, r3
 80020aa:	4807      	ldr	r0, [pc, #28]	; (80020c8 <MX_GPIO_Init+0x24c>)
 80020ac:	f000 fc1c 	bl	80028e8 <HAL_GPIO_Init>

}
 80020b0:	bf00      	nop
 80020b2:	3738      	adds	r7, #56	; 0x38
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40020400 	.word	0x40020400
 80020c4:	40021400 	.word	0x40021400
 80020c8:	40021800 	.word	0x40021800
 80020cc:	40020800 	.word	0x40020800

080020d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020d4:	b672      	cpsid	i
}
 80020d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <Error_Handler+0x8>
	...

080020dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020e2:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <HAL_MspInit+0x44>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <HAL_MspInit+0x44>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <HAL_MspInit+0x44>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <HAL_MspInit+0x44>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	4a08      	ldr	r2, [pc, #32]	; (8002120 <HAL_MspInit+0x44>)
 8002100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002104:	6453      	str	r3, [r2, #68]	; 0x44
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_MspInit+0x44>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800

08002124 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	; 0x28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a17      	ldr	r2, [pc, #92]	; (80021a0 <HAL_SPI_MspInit+0x7c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d127      	bne.n	8002196 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002146:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <HAL_SPI_MspInit+0x80>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	4a16      	ldr	r2, [pc, #88]	; (80021a4 <HAL_SPI_MspInit+0x80>)
 800214c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002150:	6453      	str	r3, [r2, #68]	; 0x44
 8002152:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <HAL_SPI_MspInit+0x80>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <HAL_SPI_MspInit+0x80>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a10      	ldr	r2, [pc, #64]	; (80021a4 <HAL_SPI_MspInit+0x80>)
 8002164:	f043 0310 	orr.w	r3, r3, #16
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <HAL_SPI_MspInit+0x80>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002176:	2364      	movs	r3, #100	; 0x64
 8002178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002182:	2303      	movs	r3, #3
 8002184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002186:	2305      	movs	r3, #5
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800218a:	f107 0314 	add.w	r3, r7, #20
 800218e:	4619      	mov	r1, r3
 8002190:	4805      	ldr	r0, [pc, #20]	; (80021a8 <HAL_SPI_MspInit+0x84>)
 8002192:	f000 fba9 	bl	80028e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002196:	bf00      	nop
 8002198:	3728      	adds	r7, #40	; 0x28
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40013400 	.word	0x40013400
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40021000 	.word	0x40021000

080021ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a13      	ldr	r2, [pc, #76]	; (8002208 <HAL_TIM_Base_MspInit+0x5c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d10c      	bne.n	80021d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021be:	4b13      	ldr	r3, [pc, #76]	; (800220c <HAL_TIM_Base_MspInit+0x60>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	4a12      	ldr	r2, [pc, #72]	; (800220c <HAL_TIM_Base_MspInit+0x60>)
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <HAL_TIM_Base_MspInit+0x60>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021d6:	e010      	b.n	80021fa <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0c      	ldr	r2, [pc, #48]	; (8002210 <HAL_TIM_Base_MspInit+0x64>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d10b      	bne.n	80021fa <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_TIM_Base_MspInit+0x60>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a09      	ldr	r2, [pc, #36]	; (800220c <HAL_TIM_Base_MspInit+0x60>)
 80021e8:	f043 0304 	orr.w	r3, r3, #4
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_TIM_Base_MspInit+0x60>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40000400 	.word	0x40000400
 800220c:	40023800 	.word	0x40023800
 8002210:	40000800 	.word	0x40000800

08002214 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 030c 	add.w	r3, r7, #12
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a11      	ldr	r2, [pc, #68]	; (8002278 <HAL_TIM_MspPostInit+0x64>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d11c      	bne.n	8002270 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_TIM_MspPostInit+0x68>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a10      	ldr	r2, [pc, #64]	; (800227c <HAL_TIM_MspPostInit+0x68>)
 800223c:	f043 0308 	orr.w	r3, r3, #8
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <HAL_TIM_MspPostInit+0x68>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800224e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002252:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002260:	2302      	movs	r3, #2
 8002262:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	4619      	mov	r1, r3
 800226a:	4805      	ldr	r0, [pc, #20]	; (8002280 <HAL_TIM_MspPostInit+0x6c>)
 800226c:	f000 fb3c 	bl	80028e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002270:	bf00      	nop
 8002272:	3720      	adds	r7, #32
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40000800 	.word	0x40000800
 800227c:	40023800 	.word	0x40023800
 8002280:	40020c00 	.word	0x40020c00

08002284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	; 0x28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a17      	ldr	r2, [pc, #92]	; (8002300 <HAL_UART_MspInit+0x7c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d128      	bne.n	80022f8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022a6:	4b17      	ldr	r3, [pc, #92]	; (8002304 <HAL_UART_MspInit+0x80>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	4a16      	ldr	r2, [pc, #88]	; (8002304 <HAL_UART_MspInit+0x80>)
 80022ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b0:	6413      	str	r3, [r2, #64]	; 0x40
 80022b2:	4b14      	ldr	r3, [pc, #80]	; (8002304 <HAL_UART_MspInit+0x80>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022be:	4b11      	ldr	r3, [pc, #68]	; (8002304 <HAL_UART_MspInit+0x80>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a10      	ldr	r2, [pc, #64]	; (8002304 <HAL_UART_MspInit+0x80>)
 80022c4:	f043 0308 	orr.w	r3, r3, #8
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <HAL_UART_MspInit+0x80>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80022d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e4:	2303      	movs	r3, #3
 80022e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022e8:	2307      	movs	r3, #7
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	4619      	mov	r1, r3
 80022f2:	4805      	ldr	r0, [pc, #20]	; (8002308 <HAL_UART_MspInit+0x84>)
 80022f4:	f000 faf8 	bl	80028e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022f8:	bf00      	nop
 80022fa:	3728      	adds	r7, #40	; 0x28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40004800 	.word	0x40004800
 8002304:	40023800 	.word	0x40023800
 8002308:	40020c00 	.word	0x40020c00

0800230c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	; 0x28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800232c:	d141      	bne.n	80023b2 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232e:	4b23      	ldr	r3, [pc, #140]	; (80023bc <HAL_PCD_MspInit+0xb0>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a22      	ldr	r2, [pc, #136]	; (80023bc <HAL_PCD_MspInit+0xb0>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <HAL_PCD_MspInit+0xb0>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002346:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800234a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234c:	2302      	movs	r3, #2
 800234e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002354:	2303      	movs	r3, #3
 8002356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002358:	230a      	movs	r3, #10
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	4619      	mov	r1, r3
 8002362:	4817      	ldr	r0, [pc, #92]	; (80023c0 <HAL_PCD_MspInit+0xb4>)
 8002364:	f000 fac0 	bl	80028e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002368:	f44f 7300 	mov.w	r3, #512	; 0x200
 800236c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	4619      	mov	r1, r3
 800237c:	4810      	ldr	r0, [pc, #64]	; (80023c0 <HAL_PCD_MspInit+0xb4>)
 800237e:	f000 fab3 	bl	80028e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002382:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <HAL_PCD_MspInit+0xb0>)
 8002384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002386:	4a0d      	ldr	r2, [pc, #52]	; (80023bc <HAL_PCD_MspInit+0xb0>)
 8002388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800238c:	6353      	str	r3, [r2, #52]	; 0x34
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_PCD_MspInit+0xb0>)
 8002390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <HAL_PCD_MspInit+0xb0>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	4a07      	ldr	r2, [pc, #28]	; (80023bc <HAL_PCD_MspInit+0xb0>)
 80023a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a4:	6453      	str	r3, [r2, #68]	; 0x44
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_PCD_MspInit+0xb0>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80023b2:	bf00      	nop
 80023b4:	3728      	adds	r7, #40	; 0x28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40020000 	.word	0x40020000

080023c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <NMI_Handler+0x4>

080023ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ce:	e7fe      	b.n	80023ce <HardFault_Handler+0x4>

080023d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d4:	e7fe      	b.n	80023d4 <MemManage_Handler+0x4>

080023d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023da:	e7fe      	b.n	80023da <BusFault_Handler+0x4>

080023dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e0:	e7fe      	b.n	80023e0 <UsageFault_Handler+0x4>

080023e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002410:	f000 f940 	bl	8002694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}

08002418 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
	return 1;
 800241c:	2301      	movs	r3, #1
}
 800241e:	4618      	mov	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <_kill>:

int _kill(int pid, int sig)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002432:	f004 fc83 	bl	8006d3c <__errno>
 8002436:	4603      	mov	r3, r0
 8002438:	2216      	movs	r2, #22
 800243a:	601a      	str	r2, [r3, #0]
	return -1;
 800243c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <_exit>:

void _exit (int status)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002450:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7ff ffe7 	bl	8002428 <_kill>
	while (1) {}		/* Make sure we hang here */
 800245a:	e7fe      	b.n	800245a <_exit+0x12>

0800245c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	e00a      	b.n	8002484 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800246e:	f3af 8000 	nop.w
 8002472:	4601      	mov	r1, r0
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	1c5a      	adds	r2, r3, #1
 8002478:	60ba      	str	r2, [r7, #8]
 800247a:	b2ca      	uxtb	r2, r1
 800247c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	3301      	adds	r3, #1
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	429a      	cmp	r2, r3
 800248a:	dbf0      	blt.n	800246e <_read+0x12>
	}

return len;
 800248c:	687b      	ldr	r3, [r7, #4]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b086      	sub	sp, #24
 800249a:	af00      	add	r7, sp, #0
 800249c:	60f8      	str	r0, [r7, #12]
 800249e:	60b9      	str	r1, [r7, #8]
 80024a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	e009      	b.n	80024bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	60ba      	str	r2, [r7, #8]
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	3301      	adds	r3, #1
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	dbf1      	blt.n	80024a8 <_write+0x12>
	}
	return len;
 80024c4:	687b      	ldr	r3, [r7, #4]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <_close>:

int _close(int file)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
	return -1;
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024f6:	605a      	str	r2, [r3, #4]
	return 0;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <_isatty>:

int _isatty(int file)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
	return 1;
 800250e:	2301      	movs	r3, #1
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
	return 0;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002540:	4a14      	ldr	r2, [pc, #80]	; (8002594 <_sbrk+0x5c>)
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <_sbrk+0x60>)
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800254c:	4b13      	ldr	r3, [pc, #76]	; (800259c <_sbrk+0x64>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d102      	bne.n	800255a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002554:	4b11      	ldr	r3, [pc, #68]	; (800259c <_sbrk+0x64>)
 8002556:	4a12      	ldr	r2, [pc, #72]	; (80025a0 <_sbrk+0x68>)
 8002558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <_sbrk+0x64>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	429a      	cmp	r2, r3
 8002566:	d207      	bcs.n	8002578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002568:	f004 fbe8 	bl	8006d3c <__errno>
 800256c:	4603      	mov	r3, r0
 800256e:	220c      	movs	r2, #12
 8002570:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002576:	e009      	b.n	800258c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002578:	4b08      	ldr	r3, [pc, #32]	; (800259c <_sbrk+0x64>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800257e:	4b07      	ldr	r3, [pc, #28]	; (800259c <_sbrk+0x64>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	4a05      	ldr	r2, [pc, #20]	; (800259c <_sbrk+0x64>)
 8002588:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800258a:	68fb      	ldr	r3, [r7, #12]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20080000 	.word	0x20080000
 8002598:	00000400 	.word	0x00000400
 800259c:	2000024c 	.word	0x2000024c
 80025a0:	20000848 	.word	0x20000848

080025a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <SystemInit+0x20>)
 80025aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ae:	4a05      	ldr	r2, [pc, #20]	; (80025c4 <SystemInit+0x20>)
 80025b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002600 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025cc:	480d      	ldr	r0, [pc, #52]	; (8002604 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025ce:	490e      	ldr	r1, [pc, #56]	; (8002608 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025d0:	4a0e      	ldr	r2, [pc, #56]	; (800260c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025d4:	e002      	b.n	80025dc <LoopCopyDataInit>

080025d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025da:	3304      	adds	r3, #4

080025dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e0:	d3f9      	bcc.n	80025d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025e2:	4a0b      	ldr	r2, [pc, #44]	; (8002610 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025e4:	4c0b      	ldr	r4, [pc, #44]	; (8002614 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025e8:	e001      	b.n	80025ee <LoopFillZerobss>

080025ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025ec:	3204      	adds	r2, #4

080025ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f0:	d3fb      	bcc.n	80025ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025f2:	f7ff ffd7 	bl	80025a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025f6:	f004 fba7 	bl	8006d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025fa:	f7ff f9a9 	bl	8001950 <main>
  bx  lr    
 80025fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002600:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002608:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 800260c:	08009e3c 	.word	0x08009e3c
  ldr r2, =_sbss
 8002610:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 8002614:	20000848 	.word	0x20000848

08002618 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002618:	e7fe      	b.n	8002618 <ADC_IRQHandler>

0800261a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800261e:	2003      	movs	r0, #3
 8002620:	f000 f92e 	bl	8002880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002624:	2000      	movs	r0, #0
 8002626:	f000 f805 	bl	8002634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800262a:	f7ff fd57 	bl	80020dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800263c:	4b12      	ldr	r3, [pc, #72]	; (8002688 <HAL_InitTick+0x54>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b12      	ldr	r3, [pc, #72]	; (800268c <HAL_InitTick+0x58>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	4619      	mov	r1, r3
 8002646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800264a:	fbb3 f3f1 	udiv	r3, r3, r1
 800264e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f93b 	bl	80028ce <HAL_SYSTICK_Config>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e00e      	b.n	8002680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b0f      	cmp	r3, #15
 8002666:	d80a      	bhi.n	800267e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002668:	2200      	movs	r2, #0
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002670:	f000 f911 	bl	8002896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002674:	4a06      	ldr	r2, [pc, #24]	; (8002690 <HAL_InitTick+0x5c>)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	e000      	b.n	8002680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
}
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000050 	.word	0x20000050
 800268c:	20000058 	.word	0x20000058
 8002690:	20000054 	.word	0x20000054

08002694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_IncTick+0x20>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <HAL_IncTick+0x24>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4413      	add	r3, r2
 80026a4:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <HAL_IncTick+0x24>)
 80026a6:	6013      	str	r3, [r2, #0]
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	20000058 	.word	0x20000058
 80026b8:	20000834 	.word	0x20000834

080026bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return uwTick;
 80026c0:	4b03      	ldr	r3, [pc, #12]	; (80026d0 <HAL_GetTick+0x14>)
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	20000834 	.word	0x20000834

080026d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026dc:	f7ff ffee 	bl	80026bc <HAL_GetTick>
 80026e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ec:	d005      	beq.n	80026fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ee:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <HAL_Delay+0x44>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4413      	add	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026fa:	bf00      	nop
 80026fc:	f7ff ffde 	bl	80026bc <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	429a      	cmp	r2, r3
 800270a:	d8f7      	bhi.n	80026fc <HAL_Delay+0x28>
  {
  }
}
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000058 	.word	0x20000058

0800271c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <__NVIC_SetPriorityGrouping+0x40>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002738:	4013      	ands	r3, r2
 800273a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <__NVIC_SetPriorityGrouping+0x44>)
 8002746:	4313      	orrs	r3, r2
 8002748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800274a:	4a04      	ldr	r2, [pc, #16]	; (800275c <__NVIC_SetPriorityGrouping+0x40>)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	60d3      	str	r3, [r2, #12]
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000ed00 	.word	0xe000ed00
 8002760:	05fa0000 	.word	0x05fa0000

08002764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002768:	4b04      	ldr	r3, [pc, #16]	; (800277c <__NVIC_GetPriorityGrouping+0x18>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	f003 0307 	and.w	r3, r3, #7
}
 8002772:	4618      	mov	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	2b00      	cmp	r3, #0
 8002792:	db0a      	blt.n	80027aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	b2da      	uxtb	r2, r3
 8002798:	490c      	ldr	r1, [pc, #48]	; (80027cc <__NVIC_SetPriority+0x4c>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	0112      	lsls	r2, r2, #4
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	440b      	add	r3, r1
 80027a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a8:	e00a      	b.n	80027c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	4908      	ldr	r1, [pc, #32]	; (80027d0 <__NVIC_SetPriority+0x50>)
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	3b04      	subs	r3, #4
 80027b8:	0112      	lsls	r2, r2, #4
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	440b      	add	r3, r1
 80027be:	761a      	strb	r2, [r3, #24]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000e100 	.word	0xe000e100
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	; 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f1c3 0307 	rsb	r3, r3, #7
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	bf28      	it	cs
 80027f2:	2304      	movcs	r3, #4
 80027f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3304      	adds	r3, #4
 80027fa:	2b06      	cmp	r3, #6
 80027fc:	d902      	bls.n	8002804 <NVIC_EncodePriority+0x30>
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3b03      	subs	r3, #3
 8002802:	e000      	b.n	8002806 <NVIC_EncodePriority+0x32>
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43da      	mvns	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	401a      	ands	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800281c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	fa01 f303 	lsl.w	r3, r1, r3
 8002826:	43d9      	mvns	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	4313      	orrs	r3, r2
         );
}
 800282e:	4618      	mov	r0, r3
 8002830:	3724      	adds	r7, #36	; 0x24
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3b01      	subs	r3, #1
 8002848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800284c:	d301      	bcc.n	8002852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800284e:	2301      	movs	r3, #1
 8002850:	e00f      	b.n	8002872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002852:	4a0a      	ldr	r2, [pc, #40]	; (800287c <SysTick_Config+0x40>)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800285a:	210f      	movs	r1, #15
 800285c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002860:	f7ff ff8e 	bl	8002780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <SysTick_Config+0x40>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800286a:	4b04      	ldr	r3, [pc, #16]	; (800287c <SysTick_Config+0x40>)
 800286c:	2207      	movs	r2, #7
 800286e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	e000e010 	.word	0xe000e010

08002880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff ff47 	bl	800271c <__NVIC_SetPriorityGrouping>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002896:	b580      	push	{r7, lr}
 8002898:	b086      	sub	sp, #24
 800289a:	af00      	add	r7, sp, #0
 800289c:	4603      	mov	r3, r0
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a8:	f7ff ff5c 	bl	8002764 <__NVIC_GetPriorityGrouping>
 80028ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68b9      	ldr	r1, [r7, #8]
 80028b2:	6978      	ldr	r0, [r7, #20]
 80028b4:	f7ff ff8e 	bl	80027d4 <NVIC_EncodePriority>
 80028b8:	4602      	mov	r2, r0
 80028ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff5d 	bl	8002780 <__NVIC_SetPriority>
}
 80028c6:	bf00      	nop
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ffb0 	bl	800283c <SysTick_Config>
 80028dc:	4603      	mov	r3, r0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	; 0x24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	e175      	b.n	8002bf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002908:	2201      	movs	r2, #1
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4013      	ands	r3, r2
 800291a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	429a      	cmp	r2, r3
 8002922:	f040 8164 	bne.w	8002bee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d005      	beq.n	800293e <HAL_GPIO_Init+0x56>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d130      	bne.n	80029a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	2203      	movs	r2, #3
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002974:	2201      	movs	r2, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	f003 0201 	and.w	r2, r3, #1
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d017      	beq.n	80029dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	2203      	movs	r2, #3
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d123      	bne.n	8002a30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	08da      	lsrs	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3208      	adds	r2, #8
 80029f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	220f      	movs	r2, #15
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	08da      	lsrs	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3208      	adds	r2, #8
 8002a2a:	69b9      	ldr	r1, [r7, #24]
 8002a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0203 	and.w	r2, r3, #3
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80be 	beq.w	8002bee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a72:	4b66      	ldr	r3, [pc, #408]	; (8002c0c <HAL_GPIO_Init+0x324>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	4a65      	ldr	r2, [pc, #404]	; (8002c0c <HAL_GPIO_Init+0x324>)
 8002a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7e:	4b63      	ldr	r3, [pc, #396]	; (8002c0c <HAL_GPIO_Init+0x324>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a8a:	4a61      	ldr	r2, [pc, #388]	; (8002c10 <HAL_GPIO_Init+0x328>)
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	089b      	lsrs	r3, r3, #2
 8002a90:	3302      	adds	r3, #2
 8002a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	220f      	movs	r2, #15
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a58      	ldr	r2, [pc, #352]	; (8002c14 <HAL_GPIO_Init+0x32c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d037      	beq.n	8002b26 <HAL_GPIO_Init+0x23e>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a57      	ldr	r2, [pc, #348]	; (8002c18 <HAL_GPIO_Init+0x330>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d031      	beq.n	8002b22 <HAL_GPIO_Init+0x23a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a56      	ldr	r2, [pc, #344]	; (8002c1c <HAL_GPIO_Init+0x334>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d02b      	beq.n	8002b1e <HAL_GPIO_Init+0x236>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a55      	ldr	r2, [pc, #340]	; (8002c20 <HAL_GPIO_Init+0x338>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d025      	beq.n	8002b1a <HAL_GPIO_Init+0x232>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a54      	ldr	r2, [pc, #336]	; (8002c24 <HAL_GPIO_Init+0x33c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d01f      	beq.n	8002b16 <HAL_GPIO_Init+0x22e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a53      	ldr	r2, [pc, #332]	; (8002c28 <HAL_GPIO_Init+0x340>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d019      	beq.n	8002b12 <HAL_GPIO_Init+0x22a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a52      	ldr	r2, [pc, #328]	; (8002c2c <HAL_GPIO_Init+0x344>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d013      	beq.n	8002b0e <HAL_GPIO_Init+0x226>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a51      	ldr	r2, [pc, #324]	; (8002c30 <HAL_GPIO_Init+0x348>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00d      	beq.n	8002b0a <HAL_GPIO_Init+0x222>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a50      	ldr	r2, [pc, #320]	; (8002c34 <HAL_GPIO_Init+0x34c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d007      	beq.n	8002b06 <HAL_GPIO_Init+0x21e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4f      	ldr	r2, [pc, #316]	; (8002c38 <HAL_GPIO_Init+0x350>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d101      	bne.n	8002b02 <HAL_GPIO_Init+0x21a>
 8002afe:	2309      	movs	r3, #9
 8002b00:	e012      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b02:	230a      	movs	r3, #10
 8002b04:	e010      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b06:	2308      	movs	r3, #8
 8002b08:	e00e      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b0a:	2307      	movs	r3, #7
 8002b0c:	e00c      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b0e:	2306      	movs	r3, #6
 8002b10:	e00a      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b12:	2305      	movs	r3, #5
 8002b14:	e008      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b16:	2304      	movs	r3, #4
 8002b18:	e006      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e004      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e002      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b26:	2300      	movs	r3, #0
 8002b28:	69fa      	ldr	r2, [r7, #28]
 8002b2a:	f002 0203 	and.w	r2, r2, #3
 8002b2e:	0092      	lsls	r2, r2, #2
 8002b30:	4093      	lsls	r3, r2
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b38:	4935      	ldr	r1, [pc, #212]	; (8002c10 <HAL_GPIO_Init+0x328>)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	089b      	lsrs	r3, r3, #2
 8002b3e:	3302      	adds	r3, #2
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b46:	4b3d      	ldr	r3, [pc, #244]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b6a:	4a34      	ldr	r2, [pc, #208]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b70:	4b32      	ldr	r3, [pc, #200]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b94:	4a29      	ldr	r2, [pc, #164]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b9a:	4b28      	ldr	r3, [pc, #160]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bbe:	4a1f      	ldr	r2, [pc, #124]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bc4:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002be8:	4a14      	ldr	r2, [pc, #80]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	61fb      	str	r3, [r7, #28]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	2b0f      	cmp	r3, #15
 8002bf8:	f67f ae86 	bls.w	8002908 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	3724      	adds	r7, #36	; 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40013800 	.word	0x40013800
 8002c14:	40020000 	.word	0x40020000
 8002c18:	40020400 	.word	0x40020400
 8002c1c:	40020800 	.word	0x40020800
 8002c20:	40020c00 	.word	0x40020c00
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40021400 	.word	0x40021400
 8002c2c:	40021800 	.word	0x40021800
 8002c30:	40021c00 	.word	0x40021c00
 8002c34:	40022000 	.word	0x40022000
 8002c38:	40022400 	.word	0x40022400
 8002c3c:	40013c00 	.word	0x40013c00

08002c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	807b      	strh	r3, [r7, #2]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c50:	787b      	ldrb	r3, [r7, #1]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c56:	887a      	ldrh	r2, [r7, #2]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c5c:	e003      	b.n	8002c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c5e:	887b      	ldrh	r3, [r7, #2]
 8002c60:	041a      	lsls	r2, r3, #16
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	619a      	str	r2, [r3, #24]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c74:	b08f      	sub	sp, #60	; 0x3c
 8002c76:	af0a      	add	r7, sp, #40	; 0x28
 8002c78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e116      	b.n	8002eb2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff fb34 	bl	800230c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d102      	bne.n	8002cbe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f003 fda4 	bl	8006810 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	603b      	str	r3, [r7, #0]
 8002cce:	687e      	ldr	r6, [r7, #4]
 8002cd0:	466d      	mov	r5, sp
 8002cd2:	f106 0410 	add.w	r4, r6, #16
 8002cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ce2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ce6:	1d33      	adds	r3, r6, #4
 8002ce8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cea:	6838      	ldr	r0, [r7, #0]
 8002cec:	f003 fd38 	bl	8006760 <USB_CoreInit>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e0d7      	b.n	8002eb2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f003 fd92 	bl	8006832 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	73fb      	strb	r3, [r7, #15]
 8002d12:	e04a      	b.n	8002daa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d14:	7bfa      	ldrb	r2, [r7, #15]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	333d      	adds	r3, #61	; 0x3d
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d28:	7bfa      	ldrb	r2, [r7, #15]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	333c      	adds	r3, #60	; 0x3c
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d3c:	7bfa      	ldrb	r2, [r7, #15]
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	b298      	uxth	r0, r3
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	3342      	adds	r3, #66	; 0x42
 8002d50:	4602      	mov	r2, r0
 8002d52:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	333f      	adds	r3, #63	; 0x3f
 8002d64:	2200      	movs	r2, #0
 8002d66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d68:	7bfa      	ldrb	r2, [r7, #15]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	3344      	adds	r3, #68	; 0x44
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d7c:	7bfa      	ldrb	r2, [r7, #15]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	3348      	adds	r3, #72	; 0x48
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d90:	7bfa      	ldrb	r2, [r7, #15]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3350      	adds	r3, #80	; 0x50
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	3301      	adds	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
 8002daa:	7bfa      	ldrb	r2, [r7, #15]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d3af      	bcc.n	8002d14 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002db4:	2300      	movs	r3, #0
 8002db6:	73fb      	strb	r3, [r7, #15]
 8002db8:	e044      	b.n	8002e44 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dba:	7bfa      	ldrb	r2, [r7, #15]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	1a9b      	subs	r3, r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002dd0:	7bfa      	ldrb	r2, [r7, #15]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002de6:	7bfa      	ldrb	r2, [r7, #15]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	1a9b      	subs	r3, r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002df8:	2200      	movs	r2, #0
 8002dfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dfc:	7bfa      	ldrb	r2, [r7, #15]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e12:	7bfa      	ldrb	r2, [r7, #15]
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	1a9b      	subs	r3, r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e28:	7bfa      	ldrb	r2, [r7, #15]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	3301      	adds	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
 8002e44:	7bfa      	ldrb	r2, [r7, #15]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d3b5      	bcc.n	8002dba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	687e      	ldr	r6, [r7, #4]
 8002e56:	466d      	mov	r5, sp
 8002e58:	f106 0410 	add.w	r4, r6, #16
 8002e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e68:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e6c:	1d33      	adds	r3, r6, #4
 8002e6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e70:	6838      	ldr	r0, [r7, #0]
 8002e72:	f003 fd2b 	bl	80068cc <USB_DevInit>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e014      	b.n	8002eb2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d102      	bne.n	8002ea6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f80b 	bl	8002ebc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f003 fee5 	bl	8006c7a <USB_DevDisconnect>

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002ebc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eea:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <HAL_PCDEx_ActivateLPM+0x44>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	10000003 	.word	0x10000003

08002f04 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a04      	ldr	r2, [pc, #16]	; (8002f20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f12:	6013      	str	r3, [r2, #0]
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40007000 	.word	0x40007000

08002f24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	4b23      	ldr	r3, [pc, #140]	; (8002fbc <HAL_PWREx_EnableOverDrive+0x98>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	4a22      	ldr	r2, [pc, #136]	; (8002fbc <HAL_PWREx_EnableOverDrive+0x98>)
 8002f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f38:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3a:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <HAL_PWREx_EnableOverDrive+0x98>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f46:	4b1e      	ldr	r3, [pc, #120]	; (8002fc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1d      	ldr	r2, [pc, #116]	; (8002fc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f50:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f52:	f7ff fbb3 	bl	80026bc <HAL_GetTick>
 8002f56:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f58:	e009      	b.n	8002f6e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f5a:	f7ff fbaf 	bl	80026bc <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f68:	d901      	bls.n	8002f6e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e022      	b.n	8002fb4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f6e:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7a:	d1ee      	bne.n	8002f5a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f7c:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0f      	ldr	r2, [pc, #60]	; (8002fc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f86:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f88:	f7ff fb98 	bl	80026bc <HAL_GetTick>
 8002f8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f8e:	e009      	b.n	8002fa4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f90:	f7ff fb94 	bl	80026bc <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f9e:	d901      	bls.n	8002fa4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e007      	b.n	8002fb4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fb0:	d1ee      	bne.n	8002f90 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40007000 	.word	0x40007000

08002fc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e29b      	b.n	8003512 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 8087 	beq.w	80030f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fe8:	4b96      	ldr	r3, [pc, #600]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 030c 	and.w	r3, r3, #12
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d00c      	beq.n	800300e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ff4:	4b93      	ldr	r3, [pc, #588]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 030c 	and.w	r3, r3, #12
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d112      	bne.n	8003026 <HAL_RCC_OscConfig+0x62>
 8003000:	4b90      	ldr	r3, [pc, #576]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003008:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800300c:	d10b      	bne.n	8003026 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800300e:	4b8d      	ldr	r3, [pc, #564]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d06c      	beq.n	80030f4 <HAL_RCC_OscConfig+0x130>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d168      	bne.n	80030f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e275      	b.n	8003512 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302e:	d106      	bne.n	800303e <HAL_RCC_OscConfig+0x7a>
 8003030:	4b84      	ldr	r3, [pc, #528]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a83      	ldr	r2, [pc, #524]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8003036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303a:	6013      	str	r3, [r2, #0]
 800303c:	e02e      	b.n	800309c <HAL_RCC_OscConfig+0xd8>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10c      	bne.n	8003060 <HAL_RCC_OscConfig+0x9c>
 8003046:	4b7f      	ldr	r3, [pc, #508]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a7e      	ldr	r2, [pc, #504]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 800304c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	4b7c      	ldr	r3, [pc, #496]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a7b      	ldr	r2, [pc, #492]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8003058:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	e01d      	b.n	800309c <HAL_RCC_OscConfig+0xd8>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003068:	d10c      	bne.n	8003084 <HAL_RCC_OscConfig+0xc0>
 800306a:	4b76      	ldr	r3, [pc, #472]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a75      	ldr	r2, [pc, #468]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8003070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	4b73      	ldr	r3, [pc, #460]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a72      	ldr	r2, [pc, #456]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 800307c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	e00b      	b.n	800309c <HAL_RCC_OscConfig+0xd8>
 8003084:	4b6f      	ldr	r3, [pc, #444]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a6e      	ldr	r2, [pc, #440]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 800308a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	4b6c      	ldr	r3, [pc, #432]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a6b      	ldr	r2, [pc, #428]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8003096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800309a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d013      	beq.n	80030cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7ff fb0a 	bl	80026bc <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ac:	f7ff fb06 	bl	80026bc <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	; 0x64
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e229      	b.n	8003512 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	4b61      	ldr	r3, [pc, #388]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0xe8>
 80030ca:	e014      	b.n	80030f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7ff faf6 	bl	80026bc <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d4:	f7ff faf2 	bl	80026bc <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b64      	cmp	r3, #100	; 0x64
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e215      	b.n	8003512 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030e6:	4b57      	ldr	r3, [pc, #348]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x110>
 80030f2:	e000      	b.n	80030f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d069      	beq.n	80031d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003102:	4b50      	ldr	r3, [pc, #320]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00b      	beq.n	8003126 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800310e:	4b4d      	ldr	r3, [pc, #308]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b08      	cmp	r3, #8
 8003118:	d11c      	bne.n	8003154 <HAL_RCC_OscConfig+0x190>
 800311a:	4b4a      	ldr	r3, [pc, #296]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d116      	bne.n	8003154 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003126:	4b47      	ldr	r3, [pc, #284]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <HAL_RCC_OscConfig+0x17a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d001      	beq.n	800313e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e1e9      	b.n	8003512 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313e:	4b41      	ldr	r3, [pc, #260]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	493d      	ldr	r1, [pc, #244]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 800314e:	4313      	orrs	r3, r2
 8003150:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003152:	e040      	b.n	80031d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d023      	beq.n	80031a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800315c:	4b39      	ldr	r3, [pc, #228]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a38      	ldr	r2, [pc, #224]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7ff faa8 	bl	80026bc <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003170:	f7ff faa4 	bl	80026bc <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e1c7      	b.n	8003512 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003182:	4b30      	ldr	r3, [pc, #192]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318e:	4b2d      	ldr	r3, [pc, #180]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	4929      	ldr	r1, [pc, #164]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	600b      	str	r3, [r1, #0]
 80031a2:	e018      	b.n	80031d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a4:	4b27      	ldr	r3, [pc, #156]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a26      	ldr	r2, [pc, #152]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 80031aa:	f023 0301 	bic.w	r3, r3, #1
 80031ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7ff fa84 	bl	80026bc <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b8:	f7ff fa80 	bl	80026bc <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e1a3      	b.n	8003512 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ca:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d038      	beq.n	8003254 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d019      	beq.n	800321e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ea:	4b16      	ldr	r3, [pc, #88]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 80031ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ee:	4a15      	ldr	r2, [pc, #84]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f6:	f7ff fa61 	bl	80026bc <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031fe:	f7ff fa5d 	bl	80026bc <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e180      	b.n	8003512 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8003212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_OscConfig+0x23a>
 800321c:	e01a      	b.n	8003254 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800321e:	4b09      	ldr	r3, [pc, #36]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8003220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003222:	4a08      	ldr	r2, [pc, #32]	; (8003244 <HAL_RCC_OscConfig+0x280>)
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322a:	f7ff fa47 	bl	80026bc <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003230:	e00a      	b.n	8003248 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003232:	f7ff fa43 	bl	80026bc <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d903      	bls.n	8003248 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e166      	b.n	8003512 <HAL_RCC_OscConfig+0x54e>
 8003244:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003248:	4b92      	ldr	r3, [pc, #584]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 800324a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1ee      	bne.n	8003232 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80a4 	beq.w	80033aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003262:	4b8c      	ldr	r3, [pc, #560]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10d      	bne.n	800328a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800326e:	4b89      	ldr	r3, [pc, #548]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	4a88      	ldr	r2, [pc, #544]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 8003274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003278:	6413      	str	r3, [r2, #64]	; 0x40
 800327a:	4b86      	ldr	r3, [pc, #536]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003286:	2301      	movs	r3, #1
 8003288:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800328a:	4b83      	ldr	r3, [pc, #524]	; (8003498 <HAL_RCC_OscConfig+0x4d4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d118      	bne.n	80032c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003296:	4b80      	ldr	r3, [pc, #512]	; (8003498 <HAL_RCC_OscConfig+0x4d4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a7f      	ldr	r2, [pc, #508]	; (8003498 <HAL_RCC_OscConfig+0x4d4>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a2:	f7ff fa0b 	bl	80026bc <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032aa:	f7ff fa07 	bl	80026bc <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b64      	cmp	r3, #100	; 0x64
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e12a      	b.n	8003512 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032bc:	4b76      	ldr	r3, [pc, #472]	; (8003498 <HAL_RCC_OscConfig+0x4d4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d106      	bne.n	80032de <HAL_RCC_OscConfig+0x31a>
 80032d0:	4b70      	ldr	r3, [pc, #448]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 80032d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d4:	4a6f      	ldr	r2, [pc, #444]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	6713      	str	r3, [r2, #112]	; 0x70
 80032dc:	e02d      	b.n	800333a <HAL_RCC_OscConfig+0x376>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10c      	bne.n	8003300 <HAL_RCC_OscConfig+0x33c>
 80032e6:	4b6b      	ldr	r3, [pc, #428]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ea:	4a6a      	ldr	r2, [pc, #424]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 80032ec:	f023 0301 	bic.w	r3, r3, #1
 80032f0:	6713      	str	r3, [r2, #112]	; 0x70
 80032f2:	4b68      	ldr	r3, [pc, #416]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f6:	4a67      	ldr	r2, [pc, #412]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 80032f8:	f023 0304 	bic.w	r3, r3, #4
 80032fc:	6713      	str	r3, [r2, #112]	; 0x70
 80032fe:	e01c      	b.n	800333a <HAL_RCC_OscConfig+0x376>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b05      	cmp	r3, #5
 8003306:	d10c      	bne.n	8003322 <HAL_RCC_OscConfig+0x35e>
 8003308:	4b62      	ldr	r3, [pc, #392]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 800330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330c:	4a61      	ldr	r2, [pc, #388]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 800330e:	f043 0304 	orr.w	r3, r3, #4
 8003312:	6713      	str	r3, [r2, #112]	; 0x70
 8003314:	4b5f      	ldr	r3, [pc, #380]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 8003316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003318:	4a5e      	ldr	r2, [pc, #376]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	6713      	str	r3, [r2, #112]	; 0x70
 8003320:	e00b      	b.n	800333a <HAL_RCC_OscConfig+0x376>
 8003322:	4b5c      	ldr	r3, [pc, #368]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003326:	4a5b      	ldr	r2, [pc, #364]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	6713      	str	r3, [r2, #112]	; 0x70
 800332e:	4b59      	ldr	r3, [pc, #356]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 8003330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003332:	4a58      	ldr	r2, [pc, #352]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 8003334:	f023 0304 	bic.w	r3, r3, #4
 8003338:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d015      	beq.n	800336e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003342:	f7ff f9bb 	bl	80026bc <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003348:	e00a      	b.n	8003360 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334a:	f7ff f9b7 	bl	80026bc <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	f241 3288 	movw	r2, #5000	; 0x1388
 8003358:	4293      	cmp	r3, r2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e0d8      	b.n	8003512 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003360:	4b4c      	ldr	r3, [pc, #304]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0ee      	beq.n	800334a <HAL_RCC_OscConfig+0x386>
 800336c:	e014      	b.n	8003398 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336e:	f7ff f9a5 	bl	80026bc <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003374:	e00a      	b.n	800338c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003376:	f7ff f9a1 	bl	80026bc <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f241 3288 	movw	r2, #5000	; 0x1388
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e0c2      	b.n	8003512 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800338c:	4b41      	ldr	r3, [pc, #260]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1ee      	bne.n	8003376 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003398:	7dfb      	ldrb	r3, [r7, #23]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d105      	bne.n	80033aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800339e:	4b3d      	ldr	r3, [pc, #244]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	4a3c      	ldr	r2, [pc, #240]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 80033a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 80ae 	beq.w	8003510 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033b4:	4b37      	ldr	r3, [pc, #220]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 030c 	and.w	r3, r3, #12
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d06d      	beq.n	800349c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d14b      	bne.n	8003460 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c8:	4b32      	ldr	r3, [pc, #200]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a31      	ldr	r2, [pc, #196]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 80033ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d4:	f7ff f972 	bl	80026bc <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033dc:	f7ff f96e 	bl	80026bc <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e091      	b.n	8003512 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ee:	4b29      	ldr	r3, [pc, #164]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69da      	ldr	r2, [r3, #28]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	019b      	lsls	r3, r3, #6
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003410:	085b      	lsrs	r3, r3, #1
 8003412:	3b01      	subs	r3, #1
 8003414:	041b      	lsls	r3, r3, #16
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	061b      	lsls	r3, r3, #24
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	071b      	lsls	r3, r3, #28
 8003426:	491b      	ldr	r1, [pc, #108]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 8003428:	4313      	orrs	r3, r2
 800342a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800342c:	4b19      	ldr	r3, [pc, #100]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a18      	ldr	r2, [pc, #96]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 8003432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7ff f940 	bl	80026bc <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003440:	f7ff f93c 	bl	80026bc <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e05f      	b.n	8003512 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0x47c>
 800345e:	e057      	b.n	8003510 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a0b      	ldr	r2, [pc, #44]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 8003466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800346a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7ff f926 	bl	80026bc <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003474:	f7ff f922 	bl	80026bc <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e045      	b.n	8003512 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003486:	4b03      	ldr	r3, [pc, #12]	; (8003494 <HAL_RCC_OscConfig+0x4d0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x4b0>
 8003492:	e03d      	b.n	8003510 <HAL_RCC_OscConfig+0x54c>
 8003494:	40023800 	.word	0x40023800
 8003498:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800349c:	4b1f      	ldr	r3, [pc, #124]	; (800351c <HAL_RCC_OscConfig+0x558>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d030      	beq.n	800350c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d129      	bne.n	800350c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d122      	bne.n	800350c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034cc:	4013      	ands	r3, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d119      	bne.n	800350c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	085b      	lsrs	r3, r3, #1
 80034e4:	3b01      	subs	r3, #1
 80034e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d10f      	bne.n	800350c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d107      	bne.n	800350c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800

08003520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0d0      	b.n	80036da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003538:	4b6a      	ldr	r3, [pc, #424]	; (80036e4 <HAL_RCC_ClockConfig+0x1c4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 030f 	and.w	r3, r3, #15
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d910      	bls.n	8003568 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003546:	4b67      	ldr	r3, [pc, #412]	; (80036e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 020f 	bic.w	r2, r3, #15
 800354e:	4965      	ldr	r1, [pc, #404]	; (80036e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	4313      	orrs	r3, r2
 8003554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003556:	4b63      	ldr	r3, [pc, #396]	; (80036e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0b8      	b.n	80036da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d020      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003580:	4b59      	ldr	r3, [pc, #356]	; (80036e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	4a58      	ldr	r2, [pc, #352]	; (80036e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003586:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800358a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003598:	4b53      	ldr	r3, [pc, #332]	; (80036e8 <HAL_RCC_ClockConfig+0x1c8>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	4a52      	ldr	r2, [pc, #328]	; (80036e8 <HAL_RCC_ClockConfig+0x1c8>)
 800359e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a4:	4b50      	ldr	r3, [pc, #320]	; (80036e8 <HAL_RCC_ClockConfig+0x1c8>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	494d      	ldr	r1, [pc, #308]	; (80036e8 <HAL_RCC_ClockConfig+0x1c8>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d040      	beq.n	8003644 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d107      	bne.n	80035da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	4b47      	ldr	r3, [pc, #284]	; (80036e8 <HAL_RCC_ClockConfig+0x1c8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d115      	bne.n	8003602 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e07f      	b.n	80036da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d107      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e2:	4b41      	ldr	r3, [pc, #260]	; (80036e8 <HAL_RCC_ClockConfig+0x1c8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d109      	bne.n	8003602 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e073      	b.n	80036da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f2:	4b3d      	ldr	r3, [pc, #244]	; (80036e8 <HAL_RCC_ClockConfig+0x1c8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e06b      	b.n	80036da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003602:	4b39      	ldr	r3, [pc, #228]	; (80036e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f023 0203 	bic.w	r2, r3, #3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	4936      	ldr	r1, [pc, #216]	; (80036e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003610:	4313      	orrs	r3, r2
 8003612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003614:	f7ff f852 	bl	80026bc <HAL_GetTick>
 8003618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361a:	e00a      	b.n	8003632 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800361c:	f7ff f84e 	bl	80026bc <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	f241 3288 	movw	r2, #5000	; 0x1388
 800362a:	4293      	cmp	r3, r2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e053      	b.n	80036da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003632:	4b2d      	ldr	r3, [pc, #180]	; (80036e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 020c 	and.w	r2, r3, #12
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	429a      	cmp	r2, r3
 8003642:	d1eb      	bne.n	800361c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003644:	4b27      	ldr	r3, [pc, #156]	; (80036e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d210      	bcs.n	8003674 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003652:	4b24      	ldr	r3, [pc, #144]	; (80036e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 020f 	bic.w	r2, r3, #15
 800365a:	4922      	ldr	r1, [pc, #136]	; (80036e4 <HAL_RCC_ClockConfig+0x1c4>)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	4313      	orrs	r3, r2
 8003660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003662:	4b20      	ldr	r3, [pc, #128]	; (80036e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e032      	b.n	80036da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003680:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4916      	ldr	r1, [pc, #88]	; (80036e8 <HAL_RCC_ClockConfig+0x1c8>)
 800368e:	4313      	orrs	r3, r2
 8003690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d009      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800369e:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <HAL_RCC_ClockConfig+0x1c8>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	490e      	ldr	r1, [pc, #56]	; (80036e8 <HAL_RCC_ClockConfig+0x1c8>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036b2:	f000 f821 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 80036b6:	4602      	mov	r2, r0
 80036b8:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_RCC_ClockConfig+0x1c8>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	091b      	lsrs	r3, r3, #4
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	490a      	ldr	r1, [pc, #40]	; (80036ec <HAL_RCC_ClockConfig+0x1cc>)
 80036c4:	5ccb      	ldrb	r3, [r1, r3]
 80036c6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ca:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <HAL_RCC_ClockConfig+0x1d0>)
 80036cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036ce:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <HAL_RCC_ClockConfig+0x1d4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe ffae 	bl	8002634 <HAL_InitTick>

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40023c00 	.word	0x40023c00
 80036e8:	40023800 	.word	0x40023800
 80036ec:	08009a34 	.word	0x08009a34
 80036f0:	20000050 	.word	0x20000050
 80036f4:	20000054 	.word	0x20000054

080036f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	607b      	str	r3, [r7, #4]
 8003704:	2300      	movs	r3, #0
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	2300      	movs	r3, #0
 800370a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003710:	4b67      	ldr	r3, [pc, #412]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 030c 	and.w	r3, r3, #12
 8003718:	2b08      	cmp	r3, #8
 800371a:	d00d      	beq.n	8003738 <HAL_RCC_GetSysClockFreq+0x40>
 800371c:	2b08      	cmp	r3, #8
 800371e:	f200 80bd 	bhi.w	800389c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0x34>
 8003726:	2b04      	cmp	r3, #4
 8003728:	d003      	beq.n	8003732 <HAL_RCC_GetSysClockFreq+0x3a>
 800372a:	e0b7      	b.n	800389c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800372c:	4b61      	ldr	r3, [pc, #388]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800372e:	60bb      	str	r3, [r7, #8]
      break;
 8003730:	e0b7      	b.n	80038a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003732:	4b61      	ldr	r3, [pc, #388]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003734:	60bb      	str	r3, [r7, #8]
      break;
 8003736:	e0b4      	b.n	80038a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003738:	4b5d      	ldr	r3, [pc, #372]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003740:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003742:	4b5b      	ldr	r3, [pc, #364]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d04d      	beq.n	80037ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800374e:	4b58      	ldr	r3, [pc, #352]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	099b      	lsrs	r3, r3, #6
 8003754:	461a      	mov	r2, r3
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800375e:	f04f 0100 	mov.w	r1, #0
 8003762:	ea02 0800 	and.w	r8, r2, r0
 8003766:	ea03 0901 	and.w	r9, r3, r1
 800376a:	4640      	mov	r0, r8
 800376c:	4649      	mov	r1, r9
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	014b      	lsls	r3, r1, #5
 8003778:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800377c:	0142      	lsls	r2, r0, #5
 800377e:	4610      	mov	r0, r2
 8003780:	4619      	mov	r1, r3
 8003782:	ebb0 0008 	subs.w	r0, r0, r8
 8003786:	eb61 0109 	sbc.w	r1, r1, r9
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	018b      	lsls	r3, r1, #6
 8003794:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003798:	0182      	lsls	r2, r0, #6
 800379a:	1a12      	subs	r2, r2, r0
 800379c:	eb63 0301 	sbc.w	r3, r3, r1
 80037a0:	f04f 0000 	mov.w	r0, #0
 80037a4:	f04f 0100 	mov.w	r1, #0
 80037a8:	00d9      	lsls	r1, r3, #3
 80037aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037ae:	00d0      	lsls	r0, r2, #3
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	eb12 0208 	adds.w	r2, r2, r8
 80037b8:	eb43 0309 	adc.w	r3, r3, r9
 80037bc:	f04f 0000 	mov.w	r0, #0
 80037c0:	f04f 0100 	mov.w	r1, #0
 80037c4:	0259      	lsls	r1, r3, #9
 80037c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80037ca:	0250      	lsls	r0, r2, #9
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4610      	mov	r0, r2
 80037d2:	4619      	mov	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	461a      	mov	r2, r3
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	f7fc fd88 	bl	80002f0 <__aeabi_uldivmod>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4613      	mov	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	e04a      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ea:	4b31      	ldr	r3, [pc, #196]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	099b      	lsrs	r3, r3, #6
 80037f0:	461a      	mov	r2, r3
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037fa:	f04f 0100 	mov.w	r1, #0
 80037fe:	ea02 0400 	and.w	r4, r2, r0
 8003802:	ea03 0501 	and.w	r5, r3, r1
 8003806:	4620      	mov	r0, r4
 8003808:	4629      	mov	r1, r5
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	014b      	lsls	r3, r1, #5
 8003814:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003818:	0142      	lsls	r2, r0, #5
 800381a:	4610      	mov	r0, r2
 800381c:	4619      	mov	r1, r3
 800381e:	1b00      	subs	r0, r0, r4
 8003820:	eb61 0105 	sbc.w	r1, r1, r5
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	018b      	lsls	r3, r1, #6
 800382e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003832:	0182      	lsls	r2, r0, #6
 8003834:	1a12      	subs	r2, r2, r0
 8003836:	eb63 0301 	sbc.w	r3, r3, r1
 800383a:	f04f 0000 	mov.w	r0, #0
 800383e:	f04f 0100 	mov.w	r1, #0
 8003842:	00d9      	lsls	r1, r3, #3
 8003844:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003848:	00d0      	lsls	r0, r2, #3
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	1912      	adds	r2, r2, r4
 8003850:	eb45 0303 	adc.w	r3, r5, r3
 8003854:	f04f 0000 	mov.w	r0, #0
 8003858:	f04f 0100 	mov.w	r1, #0
 800385c:	0299      	lsls	r1, r3, #10
 800385e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003862:	0290      	lsls	r0, r2, #10
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4610      	mov	r0, r2
 800386a:	4619      	mov	r1, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	461a      	mov	r2, r3
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	f7fc fd3c 	bl	80002f0 <__aeabi_uldivmod>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4613      	mov	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003880:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	0c1b      	lsrs	r3, r3, #16
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	3301      	adds	r3, #1
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	fbb2 f3f3 	udiv	r3, r2, r3
 8003898:	60bb      	str	r3, [r7, #8]
      break;
 800389a:	e002      	b.n	80038a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800389c:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800389e:	60bb      	str	r3, [r7, #8]
      break;
 80038a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038a2:	68bb      	ldr	r3, [r7, #8]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038ae:	bf00      	nop
 80038b0:	40023800 	.word	0x40023800
 80038b4:	00f42400 	.word	0x00f42400
 80038b8:	007a1200 	.word	0x007a1200

080038bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038c0:	4b03      	ldr	r3, [pc, #12]	; (80038d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038c2:	681b      	ldr	r3, [r3, #0]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	20000050 	.word	0x20000050

080038d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038d8:	f7ff fff0 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 80038dc:	4602      	mov	r2, r0
 80038de:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	0a9b      	lsrs	r3, r3, #10
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	4903      	ldr	r1, [pc, #12]	; (80038f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ea:	5ccb      	ldrb	r3, [r1, r3]
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40023800 	.word	0x40023800
 80038f8:	08009a44 	.word	0x08009a44

080038fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003900:	f7ff ffdc 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 8003904:	4602      	mov	r2, r0
 8003906:	4b05      	ldr	r3, [pc, #20]	; (800391c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	0b5b      	lsrs	r3, r3, #13
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	4903      	ldr	r1, [pc, #12]	; (8003920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003912:	5ccb      	ldrb	r3, [r1, r3]
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003918:	4618      	mov	r0, r3
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40023800 	.word	0x40023800
 8003920:	08009a44 	.word	0x08009a44

08003924 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b088      	sub	sp, #32
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d012      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800394c:	4b69      	ldr	r3, [pc, #420]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	4a68      	ldr	r2, [pc, #416]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003952:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003956:	6093      	str	r3, [r2, #8]
 8003958:	4b66      	ldr	r3, [pc, #408]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003960:	4964      	ldr	r1, [pc, #400]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003962:	4313      	orrs	r3, r2
 8003964:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800396e:	2301      	movs	r3, #1
 8003970:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d017      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800397e:	4b5d      	ldr	r3, [pc, #372]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003984:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398c:	4959      	ldr	r1, [pc, #356]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003998:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800399c:	d101      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800399e:	2301      	movs	r3, #1
 80039a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80039aa:	2301      	movs	r3, #1
 80039ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d017      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039ba:	4b4e      	ldr	r3, [pc, #312]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	494a      	ldr	r1, [pc, #296]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039d8:	d101      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80039da:	2301      	movs	r3, #1
 80039dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80039e6:	2301      	movs	r3, #1
 80039e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80039f6:	2301      	movs	r3, #1
 80039f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 808b 	beq.w	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a08:	4b3a      	ldr	r3, [pc, #232]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	4a39      	ldr	r2, [pc, #228]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a12:	6413      	str	r3, [r2, #64]	; 0x40
 8003a14:	4b37      	ldr	r3, [pc, #220]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a20:	4b35      	ldr	r3, [pc, #212]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a34      	ldr	r2, [pc, #208]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a2c:	f7fe fe46 	bl	80026bc <HAL_GetTick>
 8003a30:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a34:	f7fe fe42 	bl	80026bc <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	; 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e38f      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a46:	4b2c      	ldr	r3, [pc, #176]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a52:	4b28      	ldr	r3, [pc, #160]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d035      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d02e      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a70:	4b20      	ldr	r3, [pc, #128]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a78:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a7a:	4b1e      	ldr	r3, [pc, #120]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7e:	4a1d      	ldr	r2, [pc, #116]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a84:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a86:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	4a1a      	ldr	r2, [pc, #104]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a92:	4a18      	ldr	r2, [pc, #96]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a98:	4b16      	ldr	r3, [pc, #88]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d114      	bne.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa4:	f7fe fe0a 	bl	80026bc <HAL_GetTick>
 8003aa8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aaa:	e00a      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aac:	f7fe fe06 	bl	80026bc <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e351      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac2:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0ee      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ada:	d111      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ae8:	4b04      	ldr	r3, [pc, #16]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003aea:	400b      	ands	r3, r1
 8003aec:	4901      	ldr	r1, [pc, #4]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	608b      	str	r3, [r1, #8]
 8003af2:	e00b      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003af4:	40023800 	.word	0x40023800
 8003af8:	40007000 	.word	0x40007000
 8003afc:	0ffffcff 	.word	0x0ffffcff
 8003b00:	4bb3      	ldr	r3, [pc, #716]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	4ab2      	ldr	r2, [pc, #712]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b06:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b0a:	6093      	str	r3, [r2, #8]
 8003b0c:	4bb0      	ldr	r3, [pc, #704]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b18:	49ad      	ldr	r1, [pc, #692]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0310 	and.w	r3, r3, #16
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d010      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b2a:	4ba9      	ldr	r3, [pc, #676]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b30:	4aa7      	ldr	r2, [pc, #668]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b3a:	4ba5      	ldr	r3, [pc, #660]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b3c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b44:	49a2      	ldr	r1, [pc, #648]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b58:	4b9d      	ldr	r3, [pc, #628]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b66:	499a      	ldr	r1, [pc, #616]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b7a:	4b95      	ldr	r3, [pc, #596]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b88:	4991      	ldr	r1, [pc, #580]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b9c:	4b8c      	ldr	r3, [pc, #560]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003baa:	4989      	ldr	r1, [pc, #548]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bbe:	4b84      	ldr	r3, [pc, #528]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	4980      	ldr	r1, [pc, #512]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003be0:	4b7b      	ldr	r3, [pc, #492]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be6:	f023 0203 	bic.w	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	4978      	ldr	r1, [pc, #480]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c02:	4b73      	ldr	r3, [pc, #460]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c08:	f023 020c 	bic.w	r2, r3, #12
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c10:	496f      	ldr	r1, [pc, #444]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c24:	4b6a      	ldr	r3, [pc, #424]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c32:	4967      	ldr	r1, [pc, #412]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c46:	4b62      	ldr	r3, [pc, #392]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c54:	495e      	ldr	r1, [pc, #376]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c68:	4b59      	ldr	r3, [pc, #356]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c76:	4956      	ldr	r1, [pc, #344]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c8a:	4b51      	ldr	r3, [pc, #324]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c90:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c98:	494d      	ldr	r1, [pc, #308]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003cac:	4b48      	ldr	r3, [pc, #288]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cba:	4945      	ldr	r1, [pc, #276]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003cce:	4b40      	ldr	r3, [pc, #256]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cdc:	493c      	ldr	r1, [pc, #240]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cf0:	4b37      	ldr	r3, [pc, #220]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cfe:	4934      	ldr	r1, [pc, #208]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d011      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d12:	4b2f      	ldr	r3, [pc, #188]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d18:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d20:	492b      	ldr	r1, [pc, #172]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d30:	d101      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d32:	2301      	movs	r3, #1
 8003d34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d42:	2301      	movs	r3, #1
 8003d44:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d52:	4b1f      	ldr	r3, [pc, #124]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d58:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d60:	491b      	ldr	r1, [pc, #108]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00b      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d74:	4b16      	ldr	r3, [pc, #88]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d84:	4912      	ldr	r1, [pc, #72]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00b      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003d98:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003da8:	4909      	ldr	r1, [pc, #36]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00f      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dc2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dcc:	e002      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003dce:	bf00      	nop
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	4986      	ldr	r1, [pc, #536]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00b      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003de8:	4b81      	ldr	r3, [pc, #516]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003df8:	497d      	ldr	r1, [pc, #500]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d006      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 80d6 	beq.w	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e14:	4b76      	ldr	r3, [pc, #472]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a75      	ldr	r2, [pc, #468]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e20:	f7fe fc4c 	bl	80026bc <HAL_GetTick>
 8003e24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e28:	f7fe fc48 	bl	80026bc <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b64      	cmp	r3, #100	; 0x64
 8003e34:	d901      	bls.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e195      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e3a:	4b6d      	ldr	r3, [pc, #436]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d021      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d11d      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e5a:	4b65      	ldr	r3, [pc, #404]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e60:	0c1b      	lsrs	r3, r3, #16
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e68:	4b61      	ldr	r3, [pc, #388]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e6e:	0e1b      	lsrs	r3, r3, #24
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	019a      	lsls	r2, r3, #6
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	041b      	lsls	r3, r3, #16
 8003e80:	431a      	orrs	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	061b      	lsls	r3, r3, #24
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	071b      	lsls	r3, r3, #28
 8003e8e:	4958      	ldr	r1, [pc, #352]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d004      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eaa:	d00a      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d02e      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ec0:	d129      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ec2:	4b4b      	ldr	r3, [pc, #300]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ec8:	0c1b      	lsrs	r3, r3, #16
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ed0:	4b47      	ldr	r3, [pc, #284]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed6:	0f1b      	lsrs	r3, r3, #28
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	019a      	lsls	r2, r3, #6
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	041b      	lsls	r3, r3, #16
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	061b      	lsls	r3, r3, #24
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	071b      	lsls	r3, r3, #28
 8003ef6:	493e      	ldr	r1, [pc, #248]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003efe:	4b3c      	ldr	r3, [pc, #240]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f04:	f023 021f 	bic.w	r2, r3, #31
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	4938      	ldr	r1, [pc, #224]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d01d      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f22:	4b33      	ldr	r3, [pc, #204]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f28:	0e1b      	lsrs	r3, r3, #24
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f30:	4b2f      	ldr	r3, [pc, #188]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f36:	0f1b      	lsrs	r3, r3, #28
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	019a      	lsls	r2, r3, #6
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	041b      	lsls	r3, r3, #16
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	061b      	lsls	r3, r3, #24
 8003f50:	431a      	orrs	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	071b      	lsls	r3, r3, #28
 8003f56:	4926      	ldr	r1, [pc, #152]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d011      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	019a      	lsls	r2, r3, #6
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	041b      	lsls	r3, r3, #16
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	071b      	lsls	r3, r3, #28
 8003f86:	491a      	ldr	r1, [pc, #104]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f8e:	4b18      	ldr	r3, [pc, #96]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a17      	ldr	r2, [pc, #92]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f9a:	f7fe fb8f 	bl	80026bc <HAL_GetTick>
 8003f9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fa2:	f7fe fb8b 	bl	80026bc <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b64      	cmp	r3, #100	; 0x64
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e0d8      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fb4:	4b0e      	ldr	r3, [pc, #56]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	f040 80ce 	bne.w	8004164 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003fc8:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a08      	ldr	r2, [pc, #32]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd4:	f7fe fb72 	bl	80026bc <HAL_GetTick>
 8003fd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fda:	e00b      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003fdc:	f7fe fb6e 	bl	80026bc <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	; 0x64
 8003fe8:	d904      	bls.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e0bb      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003fee:	bf00      	nop
 8003ff0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ff4:	4b5e      	ldr	r3, [pc, #376]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004000:	d0ec      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d009      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800401e:	2b00      	cmp	r3, #0
 8004020:	d02e      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d12a      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800402a:	4b51      	ldr	r3, [pc, #324]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004030:	0c1b      	lsrs	r3, r3, #16
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004038:	4b4d      	ldr	r3, [pc, #308]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	0f1b      	lsrs	r3, r3, #28
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	019a      	lsls	r2, r3, #6
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	041b      	lsls	r3, r3, #16
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	061b      	lsls	r3, r3, #24
 8004058:	431a      	orrs	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	071b      	lsls	r3, r3, #28
 800405e:	4944      	ldr	r1, [pc, #272]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004066:	4b42      	ldr	r3, [pc, #264]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800406c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004074:	3b01      	subs	r3, #1
 8004076:	021b      	lsls	r3, r3, #8
 8004078:	493d      	ldr	r1, [pc, #244]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d022      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004090:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004094:	d11d      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004096:	4b36      	ldr	r3, [pc, #216]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409c:	0e1b      	lsrs	r3, r3, #24
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040a4:	4b32      	ldr	r3, [pc, #200]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040aa:	0f1b      	lsrs	r3, r3, #28
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	019a      	lsls	r2, r3, #6
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	041b      	lsls	r3, r3, #16
 80040be:	431a      	orrs	r2, r3
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	061b      	lsls	r3, r3, #24
 80040c4:	431a      	orrs	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	071b      	lsls	r3, r3, #28
 80040ca:	4929      	ldr	r1, [pc, #164]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d028      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040de:	4b24      	ldr	r3, [pc, #144]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e4:	0e1b      	lsrs	r3, r3, #24
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040ec:	4b20      	ldr	r3, [pc, #128]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f2:	0c1b      	lsrs	r3, r3, #16
 80040f4:	f003 0303 	and.w	r3, r3, #3
 80040f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	019a      	lsls	r2, r3, #6
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	041b      	lsls	r3, r3, #16
 8004104:	431a      	orrs	r2, r3
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	061b      	lsls	r3, r3, #24
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	071b      	lsls	r3, r3, #28
 8004112:	4917      	ldr	r1, [pc, #92]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800411a:	4b15      	ldr	r3, [pc, #84]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800411c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004120:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	4911      	ldr	r1, [pc, #68]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004130:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a0e      	ldr	r2, [pc, #56]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800413a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800413c:	f7fe fabe 	bl	80026bc <HAL_GetTick>
 8004140:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004144:	f7fe faba 	bl	80026bc <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b64      	cmp	r3, #100	; 0x64
 8004150:	d901      	bls.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e007      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004156:	4b06      	ldr	r3, [pc, #24]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800415e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004162:	d1ef      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3720      	adds	r7, #32
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40023800 	.word	0x40023800

08004174 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e09d      	b.n	80042c2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	2b00      	cmp	r3, #0
 800418c:	d108      	bne.n	80041a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004196:	d009      	beq.n	80041ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	61da      	str	r2, [r3, #28]
 800419e:	e005      	b.n	80041ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fd ffac 	bl	8002124 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041ec:	d902      	bls.n	80041f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	e002      	b.n	80041fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004202:	d007      	beq.n	8004214 <HAL_SPI_Init+0xa0>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800420c:	d002      	beq.n	8004214 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	431a      	orrs	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004256:	ea42 0103 	orr.w	r1, r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	0c1b      	lsrs	r3, r3, #16
 8004270:	f003 0204 	and.w	r2, r3, #4
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	f003 0310 	and.w	r3, r3, #16
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004290:	ea42 0103 	orr.w	r1, r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69da      	ldr	r2, [r3, #28]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b088      	sub	sp, #32
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	603b      	str	r3, [r7, #0]
 80042d6:	4613      	mov	r3, r2
 80042d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_SPI_Transmit+0x22>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e158      	b.n	800459e <HAL_SPI_Transmit+0x2d4>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042f4:	f7fe f9e2 	bl	80026bc <HAL_GetTick>
 80042f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042fa:	88fb      	ldrh	r3, [r7, #6]
 80042fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b01      	cmp	r3, #1
 8004308:	d002      	beq.n	8004310 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800430a:	2302      	movs	r3, #2
 800430c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800430e:	e13d      	b.n	800458c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_SPI_Transmit+0x52>
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d102      	bne.n	8004322 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004320:	e134      	b.n	800458c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2203      	movs	r2, #3
 8004326:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	88fa      	ldrh	r2, [r7, #6]
 800433a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	88fa      	ldrh	r2, [r7, #6]
 8004340:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800436c:	d10f      	bne.n	800438e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800437c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800438c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b40      	cmp	r3, #64	; 0x40
 800439a:	d007      	beq.n	80043ac <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043b4:	d94b      	bls.n	800444e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <HAL_SPI_Transmit+0xfa>
 80043be:	8afb      	ldrh	r3, [r7, #22]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d13e      	bne.n	8004442 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	881a      	ldrh	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d4:	1c9a      	adds	r2, r3, #2
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043e8:	e02b      	b.n	8004442 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d112      	bne.n	800441e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	881a      	ldrh	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	1c9a      	adds	r2, r3, #2
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004412:	b29b      	uxth	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800441c:	e011      	b.n	8004442 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800441e:	f7fe f94d 	bl	80026bc <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d803      	bhi.n	8004436 <HAL_SPI_Transmit+0x16c>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004434:	d102      	bne.n	800443c <HAL_SPI_Transmit+0x172>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d102      	bne.n	8004442 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004440:	e0a4      	b.n	800458c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1ce      	bne.n	80043ea <HAL_SPI_Transmit+0x120>
 800444c:	e07c      	b.n	8004548 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <HAL_SPI_Transmit+0x192>
 8004456:	8afb      	ldrh	r3, [r7, #22]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d170      	bne.n	800453e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b01      	cmp	r3, #1
 8004464:	d912      	bls.n	800448c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446a:	881a      	ldrh	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	1c9a      	adds	r2, r3, #2
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b02      	subs	r3, #2
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	87da      	strh	r2, [r3, #62]	; 0x3e
 800448a:	e058      	b.n	800453e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	330c      	adds	r3, #12
 8004496:	7812      	ldrb	r2, [r2, #0]
 8004498:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80044b2:	e044      	b.n	800453e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d12b      	bne.n	800451a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d912      	bls.n	80044f2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d0:	881a      	ldrh	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044dc:	1c9a      	adds	r2, r3, #2
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b02      	subs	r3, #2
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044f0:	e025      	b.n	800453e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	330c      	adds	r3, #12
 80044fc:	7812      	ldrb	r2, [r2, #0]
 80044fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004518:	e011      	b.n	800453e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800451a:	f7fe f8cf 	bl	80026bc <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d803      	bhi.n	8004532 <HAL_SPI_Transmit+0x268>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004530:	d102      	bne.n	8004538 <HAL_SPI_Transmit+0x26e>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d102      	bne.n	800453e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800453c:	e026      	b.n	800458c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1b5      	bne.n	80044b4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	6839      	ldr	r1, [r7, #0]
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 fb5b 	bl	8004c08 <SPI_EndRxTxTransaction>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2220      	movs	r2, #32
 800455c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10a      	bne.n	800457c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004566:	2300      	movs	r3, #0
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	613b      	str	r3, [r7, #16]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	613b      	str	r3, [r7, #16]
 800457a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	77fb      	strb	r3, [r7, #31]
 8004588:	e000      	b.n	800458c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800458a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800459c:	7ffb      	ldrb	r3, [r7, #31]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b08a      	sub	sp, #40	; 0x28
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045b4:	2301      	movs	r3, #1
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_SPI_TransmitReceive+0x26>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e1fb      	b.n	80049c4 <HAL_SPI_TransmitReceive+0x41e>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045d4:	f7fe f872 	bl	80026bc <HAL_GetTick>
 80045d8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045e0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80045e8:	887b      	ldrh	r3, [r7, #2]
 80045ea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80045ec:	887b      	ldrh	r3, [r7, #2]
 80045ee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045f0:	7efb      	ldrb	r3, [r7, #27]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d00e      	beq.n	8004614 <HAL_SPI_TransmitReceive+0x6e>
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045fc:	d106      	bne.n	800460c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d102      	bne.n	800460c <HAL_SPI_TransmitReceive+0x66>
 8004606:	7efb      	ldrb	r3, [r7, #27]
 8004608:	2b04      	cmp	r3, #4
 800460a:	d003      	beq.n	8004614 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800460c:	2302      	movs	r3, #2
 800460e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004612:	e1cd      	b.n	80049b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_SPI_TransmitReceive+0x80>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <HAL_SPI_TransmitReceive+0x80>
 8004620:	887b      	ldrh	r3, [r7, #2]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d103      	bne.n	800462e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800462c:	e1c0      	b.n	80049b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b04      	cmp	r3, #4
 8004638:	d003      	beq.n	8004642 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2205      	movs	r2, #5
 800463e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	887a      	ldrh	r2, [r7, #2]
 8004652:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	887a      	ldrh	r2, [r7, #2]
 800465a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	887a      	ldrh	r2, [r7, #2]
 8004668:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	887a      	ldrh	r2, [r7, #2]
 800466e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004684:	d802      	bhi.n	800468c <HAL_SPI_TransmitReceive+0xe6>
 8004686:	8a3b      	ldrh	r3, [r7, #16]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d908      	bls.n	800469e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800469a:	605a      	str	r2, [r3, #4]
 800469c:	e007      	b.n	80046ae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046ac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b8:	2b40      	cmp	r3, #64	; 0x40
 80046ba:	d007      	beq.n	80046cc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046d4:	d97c      	bls.n	80047d0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_SPI_TransmitReceive+0x13e>
 80046de:	8a7b      	ldrh	r3, [r7, #18]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d169      	bne.n	80047b8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e8:	881a      	ldrh	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	1c9a      	adds	r2, r3, #2
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046fe:	b29b      	uxth	r3, r3
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004708:	e056      	b.n	80047b8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b02      	cmp	r3, #2
 8004716:	d11b      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x1aa>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d016      	beq.n	8004750 <HAL_SPI_TransmitReceive+0x1aa>
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	2b01      	cmp	r3, #1
 8004726:	d113      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	881a      	ldrh	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	1c9a      	adds	r2, r3, #2
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b01      	cmp	r3, #1
 800475c:	d11c      	bne.n	8004798 <HAL_SPI_TransmitReceive+0x1f2>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d016      	beq.n	8004798 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	b292      	uxth	r2, r2
 8004776:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	1c9a      	adds	r2, r3, #2
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004788:	b29b      	uxth	r3, r3
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004794:	2301      	movs	r3, #1
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004798:	f7fd ff90 	bl	80026bc <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d807      	bhi.n	80047b8 <HAL_SPI_TransmitReceive+0x212>
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ae:	d003      	beq.n	80047b8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80047b6:	e0fb      	b.n	80049b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1a3      	bne.n	800470a <HAL_SPI_TransmitReceive+0x164>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d19d      	bne.n	800470a <HAL_SPI_TransmitReceive+0x164>
 80047ce:	e0df      	b.n	8004990 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_SPI_TransmitReceive+0x23a>
 80047d8:	8a7b      	ldrh	r3, [r7, #18]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	f040 80cb 	bne.w	8004976 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d912      	bls.n	8004810 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	881a      	ldrh	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	1c9a      	adds	r2, r3, #2
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b02      	subs	r3, #2
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800480e:	e0b2      	b.n	8004976 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	330c      	adds	r3, #12
 800481a:	7812      	ldrb	r2, [r2, #0]
 800481c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800482c:	b29b      	uxth	r3, r3
 800482e:	3b01      	subs	r3, #1
 8004830:	b29a      	uxth	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004836:	e09e      	b.n	8004976 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b02      	cmp	r3, #2
 8004844:	d134      	bne.n	80048b0 <HAL_SPI_TransmitReceive+0x30a>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d02f      	beq.n	80048b0 <HAL_SPI_TransmitReceive+0x30a>
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	2b01      	cmp	r3, #1
 8004854:	d12c      	bne.n	80048b0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	d912      	bls.n	8004886 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	881a      	ldrh	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004870:	1c9a      	adds	r2, r3, #2
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b02      	subs	r3, #2
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004884:	e012      	b.n	80048ac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	330c      	adds	r3, #12
 8004890:	7812      	ldrb	r2, [r2, #0]
 8004892:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d148      	bne.n	8004950 <HAL_SPI_TransmitReceive+0x3aa>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d042      	beq.n	8004950 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d923      	bls.n	800491e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	b292      	uxth	r2, r2
 80048e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e8:	1c9a      	adds	r2, r3, #2
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	3b02      	subs	r3, #2
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004906:	b29b      	uxth	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	d81f      	bhi.n	800494c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800491a:	605a      	str	r2, [r3, #4]
 800491c:	e016      	b.n	800494c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f103 020c 	add.w	r2, r3, #12
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	7812      	ldrb	r2, [r2, #0]
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800494c:	2301      	movs	r3, #1
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004950:	f7fd feb4 	bl	80026bc <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800495c:	429a      	cmp	r2, r3
 800495e:	d803      	bhi.n	8004968 <HAL_SPI_TransmitReceive+0x3c2>
 8004960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004966:	d102      	bne.n	800496e <HAL_SPI_TransmitReceive+0x3c8>
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	2b00      	cmp	r3, #0
 800496c:	d103      	bne.n	8004976 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004974:	e01c      	b.n	80049b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	f47f af5b 	bne.w	8004838 <HAL_SPI_TransmitReceive+0x292>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	f47f af54 	bne.w	8004838 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004990:	69fa      	ldr	r2, [r7, #28]
 8004992:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 f937 	bl	8004c08 <SPI_EndRxTxTransaction>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d006      	beq.n	80049ae <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2220      	movs	r2, #32
 80049aa:	661a      	str	r2, [r3, #96]	; 0x60
 80049ac:	e000      	b.n	80049b0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80049ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80049c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3728      	adds	r7, #40	; 0x28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049dc:	f7fd fe6e 	bl	80026bc <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	4413      	add	r3, r2
 80049ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049ec:	f7fd fe66 	bl	80026bc <HAL_GetTick>
 80049f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049f2:	4b39      	ldr	r3, [pc, #228]	; (8004ad8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	015b      	lsls	r3, r3, #5
 80049f8:	0d1b      	lsrs	r3, r3, #20
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	fb02 f303 	mul.w	r3, r2, r3
 8004a00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a02:	e054      	b.n	8004aae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a0a:	d050      	beq.n	8004aae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a0c:	f7fd fe56 	bl	80026bc <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d902      	bls.n	8004a22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d13d      	bne.n	8004a9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a3a:	d111      	bne.n	8004a60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a44:	d004      	beq.n	8004a50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a4e:	d107      	bne.n	8004a60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a68:	d10f      	bne.n	8004a8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e017      	b.n	8004ace <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	bf0c      	ite	eq
 8004abe:	2301      	moveq	r3, #1
 8004ac0:	2300      	movne	r3, #0
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	79fb      	ldrb	r3, [r7, #7]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d19b      	bne.n	8004a04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3720      	adds	r7, #32
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000050 	.word	0x20000050

08004adc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08a      	sub	sp, #40	; 0x28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004aea:	2300      	movs	r3, #0
 8004aec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004aee:	f7fd fde5 	bl	80026bc <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af6:	1a9b      	subs	r3, r3, r2
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	4413      	add	r3, r2
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004afe:	f7fd fddd 	bl	80026bc <HAL_GetTick>
 8004b02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	330c      	adds	r3, #12
 8004b0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b0c:	4b3d      	ldr	r3, [pc, #244]	; (8004c04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	00da      	lsls	r2, r3, #3
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	0d1b      	lsrs	r3, r3, #20
 8004b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1e:	fb02 f303 	mul.w	r3, r2, r3
 8004b22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b24:	e060      	b.n	8004be8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b2c:	d107      	bne.n	8004b3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d104      	bne.n	8004b3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b44:	d050      	beq.n	8004be8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b46:	f7fd fdb9 	bl	80026bc <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d902      	bls.n	8004b5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d13d      	bne.n	8004bd8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b74:	d111      	bne.n	8004b9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b7e:	d004      	beq.n	8004b8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b88:	d107      	bne.n	8004b9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ba2:	d10f      	bne.n	8004bc4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bc2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e010      	b.n	8004bfa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	3b01      	subs	r3, #1
 8004be6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d196      	bne.n	8004b26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3728      	adds	r7, #40	; 0x28
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20000050 	.word	0x20000050

08004c08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f7ff ff5b 	bl	8004adc <SPI_WaitFifoStateUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d007      	beq.n	8004c3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c30:	f043 0220 	orr.w	r2, r3, #32
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e046      	b.n	8004cca <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c3c:	4b25      	ldr	r3, [pc, #148]	; (8004cd4 <SPI_EndRxTxTransaction+0xcc>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a25      	ldr	r2, [pc, #148]	; (8004cd8 <SPI_EndRxTxTransaction+0xd0>)
 8004c42:	fba2 2303 	umull	r2, r3, r2, r3
 8004c46:	0d5b      	lsrs	r3, r3, #21
 8004c48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c4c:	fb02 f303 	mul.w	r3, r2, r3
 8004c50:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c5a:	d112      	bne.n	8004c82 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	2200      	movs	r2, #0
 8004c64:	2180      	movs	r1, #128	; 0x80
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f7ff feb0 	bl	80049cc <SPI_WaitFlagStateUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d016      	beq.n	8004ca0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c76:	f043 0220 	orr.w	r2, r3, #32
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e023      	b.n	8004cca <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c98:	2b80      	cmp	r3, #128	; 0x80
 8004c9a:	d0f2      	beq.n	8004c82 <SPI_EndRxTxTransaction+0x7a>
 8004c9c:	e000      	b.n	8004ca0 <SPI_EndRxTxTransaction+0x98>
        break;
 8004c9e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f7ff ff15 	bl	8004adc <SPI_WaitFifoStateUntilTimeout>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d007      	beq.n	8004cc8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cbc:	f043 0220 	orr.w	r2, r3, #32
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e000      	b.n	8004cca <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000050 	.word	0x20000050
 8004cd8:	165e9f81 	.word	0x165e9f81

08004cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e049      	b.n	8004d82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fd fa52 	bl	80021ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3304      	adds	r3, #4
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	f000 fbe0 	bl	80054e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d001      	beq.n	8004da4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e04c      	b.n	8004e3e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a26      	ldr	r2, [pc, #152]	; (8004e4c <HAL_TIM_Base_Start+0xc0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d022      	beq.n	8004dfc <HAL_TIM_Base_Start+0x70>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dbe:	d01d      	beq.n	8004dfc <HAL_TIM_Base_Start+0x70>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a22      	ldr	r2, [pc, #136]	; (8004e50 <HAL_TIM_Base_Start+0xc4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d018      	beq.n	8004dfc <HAL_TIM_Base_Start+0x70>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a21      	ldr	r2, [pc, #132]	; (8004e54 <HAL_TIM_Base_Start+0xc8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d013      	beq.n	8004dfc <HAL_TIM_Base_Start+0x70>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a1f      	ldr	r2, [pc, #124]	; (8004e58 <HAL_TIM_Base_Start+0xcc>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d00e      	beq.n	8004dfc <HAL_TIM_Base_Start+0x70>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a1e      	ldr	r2, [pc, #120]	; (8004e5c <HAL_TIM_Base_Start+0xd0>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d009      	beq.n	8004dfc <HAL_TIM_Base_Start+0x70>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a1c      	ldr	r2, [pc, #112]	; (8004e60 <HAL_TIM_Base_Start+0xd4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d004      	beq.n	8004dfc <HAL_TIM_Base_Start+0x70>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a1b      	ldr	r2, [pc, #108]	; (8004e64 <HAL_TIM_Base_Start+0xd8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d115      	bne.n	8004e28 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	4b19      	ldr	r3, [pc, #100]	; (8004e68 <HAL_TIM_Base_Start+0xdc>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b06      	cmp	r3, #6
 8004e0c:	d015      	beq.n	8004e3a <HAL_TIM_Base_Start+0xae>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e14:	d011      	beq.n	8004e3a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f042 0201 	orr.w	r2, r2, #1
 8004e24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e26:	e008      	b.n	8004e3a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	e000      	b.n	8004e3c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	40000400 	.word	0x40000400
 8004e54:	40000800 	.word	0x40000800
 8004e58:	40000c00 	.word	0x40000c00
 8004e5c:	40010400 	.word	0x40010400
 8004e60:	40014000 	.word	0x40014000
 8004e64:	40001800 	.word	0x40001800
 8004e68:	00010007 	.word	0x00010007

08004e6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e049      	b.n	8004f12 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f841 	bl	8004f1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4610      	mov	r0, r2
 8004eac:	f000 fb18 	bl	80054e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
	...

08004f30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d109      	bne.n	8004f54 <HAL_TIM_PWM_Start+0x24>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	bf14      	ite	ne
 8004f4c:	2301      	movne	r3, #1
 8004f4e:	2300      	moveq	r3, #0
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	e03c      	b.n	8004fce <HAL_TIM_PWM_Start+0x9e>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d109      	bne.n	8004f6e <HAL_TIM_PWM_Start+0x3e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	bf14      	ite	ne
 8004f66:	2301      	movne	r3, #1
 8004f68:	2300      	moveq	r3, #0
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	e02f      	b.n	8004fce <HAL_TIM_PWM_Start+0x9e>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d109      	bne.n	8004f88 <HAL_TIM_PWM_Start+0x58>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	bf14      	ite	ne
 8004f80:	2301      	movne	r3, #1
 8004f82:	2300      	moveq	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	e022      	b.n	8004fce <HAL_TIM_PWM_Start+0x9e>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b0c      	cmp	r3, #12
 8004f8c:	d109      	bne.n	8004fa2 <HAL_TIM_PWM_Start+0x72>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	bf14      	ite	ne
 8004f9a:	2301      	movne	r3, #1
 8004f9c:	2300      	moveq	r3, #0
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	e015      	b.n	8004fce <HAL_TIM_PWM_Start+0x9e>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b10      	cmp	r3, #16
 8004fa6:	d109      	bne.n	8004fbc <HAL_TIM_PWM_Start+0x8c>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	bf14      	ite	ne
 8004fb4:	2301      	movne	r3, #1
 8004fb6:	2300      	moveq	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	e008      	b.n	8004fce <HAL_TIM_PWM_Start+0x9e>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	bf14      	ite	ne
 8004fc8:	2301      	movne	r3, #1
 8004fca:	2300      	moveq	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e092      	b.n	80050fc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d104      	bne.n	8004fe6 <HAL_TIM_PWM_Start+0xb6>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fe4:	e023      	b.n	800502e <HAL_TIM_PWM_Start+0xfe>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d104      	bne.n	8004ff6 <HAL_TIM_PWM_Start+0xc6>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ff4:	e01b      	b.n	800502e <HAL_TIM_PWM_Start+0xfe>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d104      	bne.n	8005006 <HAL_TIM_PWM_Start+0xd6>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005004:	e013      	b.n	800502e <HAL_TIM_PWM_Start+0xfe>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b0c      	cmp	r3, #12
 800500a:	d104      	bne.n	8005016 <HAL_TIM_PWM_Start+0xe6>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005014:	e00b      	b.n	800502e <HAL_TIM_PWM_Start+0xfe>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b10      	cmp	r3, #16
 800501a:	d104      	bne.n	8005026 <HAL_TIM_PWM_Start+0xf6>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005024:	e003      	b.n	800502e <HAL_TIM_PWM_Start+0xfe>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2202      	movs	r2, #2
 800502a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2201      	movs	r2, #1
 8005034:	6839      	ldr	r1, [r7, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fdea 	bl	8005c10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a30      	ldr	r2, [pc, #192]	; (8005104 <HAL_TIM_PWM_Start+0x1d4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d004      	beq.n	8005050 <HAL_TIM_PWM_Start+0x120>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a2f      	ldr	r2, [pc, #188]	; (8005108 <HAL_TIM_PWM_Start+0x1d8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d101      	bne.n	8005054 <HAL_TIM_PWM_Start+0x124>
 8005050:	2301      	movs	r3, #1
 8005052:	e000      	b.n	8005056 <HAL_TIM_PWM_Start+0x126>
 8005054:	2300      	movs	r3, #0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d007      	beq.n	800506a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005068:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a25      	ldr	r2, [pc, #148]	; (8005104 <HAL_TIM_PWM_Start+0x1d4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d022      	beq.n	80050ba <HAL_TIM_PWM_Start+0x18a>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800507c:	d01d      	beq.n	80050ba <HAL_TIM_PWM_Start+0x18a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a22      	ldr	r2, [pc, #136]	; (800510c <HAL_TIM_PWM_Start+0x1dc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d018      	beq.n	80050ba <HAL_TIM_PWM_Start+0x18a>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a20      	ldr	r2, [pc, #128]	; (8005110 <HAL_TIM_PWM_Start+0x1e0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d013      	beq.n	80050ba <HAL_TIM_PWM_Start+0x18a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a1f      	ldr	r2, [pc, #124]	; (8005114 <HAL_TIM_PWM_Start+0x1e4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00e      	beq.n	80050ba <HAL_TIM_PWM_Start+0x18a>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a19      	ldr	r2, [pc, #100]	; (8005108 <HAL_TIM_PWM_Start+0x1d8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d009      	beq.n	80050ba <HAL_TIM_PWM_Start+0x18a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a1b      	ldr	r2, [pc, #108]	; (8005118 <HAL_TIM_PWM_Start+0x1e8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d004      	beq.n	80050ba <HAL_TIM_PWM_Start+0x18a>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a19      	ldr	r2, [pc, #100]	; (800511c <HAL_TIM_PWM_Start+0x1ec>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d115      	bne.n	80050e6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	4b17      	ldr	r3, [pc, #92]	; (8005120 <HAL_TIM_PWM_Start+0x1f0>)
 80050c2:	4013      	ands	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b06      	cmp	r3, #6
 80050ca:	d015      	beq.n	80050f8 <HAL_TIM_PWM_Start+0x1c8>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d2:	d011      	beq.n	80050f8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0201 	orr.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e4:	e008      	b.n	80050f8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0201 	orr.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	e000      	b.n	80050fa <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	40010000 	.word	0x40010000
 8005108:	40010400 	.word	0x40010400
 800510c:	40000400 	.word	0x40000400
 8005110:	40000800 	.word	0x40000800
 8005114:	40000c00 	.word	0x40000c00
 8005118:	40014000 	.word	0x40014000
 800511c:	40001800 	.word	0x40001800
 8005120:	00010007 	.word	0x00010007

08005124 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005130:	2300      	movs	r3, #0
 8005132:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513a:	2b01      	cmp	r3, #1
 800513c:	d101      	bne.n	8005142 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800513e:	2302      	movs	r3, #2
 8005140:	e0ff      	b.n	8005342 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b14      	cmp	r3, #20
 800514e:	f200 80f0 	bhi.w	8005332 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005152:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005158:	080051ad 	.word	0x080051ad
 800515c:	08005333 	.word	0x08005333
 8005160:	08005333 	.word	0x08005333
 8005164:	08005333 	.word	0x08005333
 8005168:	080051ed 	.word	0x080051ed
 800516c:	08005333 	.word	0x08005333
 8005170:	08005333 	.word	0x08005333
 8005174:	08005333 	.word	0x08005333
 8005178:	0800522f 	.word	0x0800522f
 800517c:	08005333 	.word	0x08005333
 8005180:	08005333 	.word	0x08005333
 8005184:	08005333 	.word	0x08005333
 8005188:	0800526f 	.word	0x0800526f
 800518c:	08005333 	.word	0x08005333
 8005190:	08005333 	.word	0x08005333
 8005194:	08005333 	.word	0x08005333
 8005198:	080052b1 	.word	0x080052b1
 800519c:	08005333 	.word	0x08005333
 80051a0:	08005333 	.word	0x08005333
 80051a4:	08005333 	.word	0x08005333
 80051a8:	080052f1 	.word	0x080052f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68b9      	ldr	r1, [r7, #8]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fa34 	bl	8005620 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0208 	orr.w	r2, r2, #8
 80051c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699a      	ldr	r2, [r3, #24]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0204 	bic.w	r2, r2, #4
 80051d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6999      	ldr	r1, [r3, #24]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	619a      	str	r2, [r3, #24]
      break;
 80051ea:	e0a5      	b.n	8005338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fa86 	bl	8005704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699a      	ldr	r2, [r3, #24]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699a      	ldr	r2, [r3, #24]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6999      	ldr	r1, [r3, #24]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	021a      	lsls	r2, r3, #8
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	619a      	str	r2, [r3, #24]
      break;
 800522c:	e084      	b.n	8005338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68b9      	ldr	r1, [r7, #8]
 8005234:	4618      	mov	r0, r3
 8005236:	f000 fadd 	bl	80057f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69da      	ldr	r2, [r3, #28]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 0208 	orr.w	r2, r2, #8
 8005248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69da      	ldr	r2, [r3, #28]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0204 	bic.w	r2, r2, #4
 8005258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69d9      	ldr	r1, [r3, #28]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	691a      	ldr	r2, [r3, #16]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	61da      	str	r2, [r3, #28]
      break;
 800526c:	e064      	b.n	8005338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68b9      	ldr	r1, [r7, #8]
 8005274:	4618      	mov	r0, r3
 8005276:	f000 fb33 	bl	80058e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69da      	ldr	r2, [r3, #28]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69da      	ldr	r2, [r3, #28]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	69d9      	ldr	r1, [r3, #28]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	021a      	lsls	r2, r3, #8
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	61da      	str	r2, [r3, #28]
      break;
 80052ae:	e043      	b.n	8005338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fb6a 	bl	8005990 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0208 	orr.w	r2, r2, #8
 80052ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0204 	bic.w	r2, r2, #4
 80052da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	691a      	ldr	r2, [r3, #16]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052ee:	e023      	b.n	8005338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fb9c 	bl	8005a34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800530a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800531a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	021a      	lsls	r2, r3, #8
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	430a      	orrs	r2, r1
 800532e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005330:	e002      	b.n	8005338 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	75fb      	strb	r3, [r7, #23]
      break;
 8005336:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005340:	7dfb      	ldrb	r3, [r7, #23]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3718      	adds	r7, #24
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop

0800534c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005356:	2300      	movs	r3, #0
 8005358:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005360:	2b01      	cmp	r3, #1
 8005362:	d101      	bne.n	8005368 <HAL_TIM_ConfigClockSource+0x1c>
 8005364:	2302      	movs	r3, #2
 8005366:	e0b4      	b.n	80054d2 <HAL_TIM_ConfigClockSource+0x186>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	4b56      	ldr	r3, [pc, #344]	; (80054dc <HAL_TIM_ConfigClockSource+0x190>)
 8005384:	4013      	ands	r3, r2
 8005386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800538e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a0:	d03e      	beq.n	8005420 <HAL_TIM_ConfigClockSource+0xd4>
 80053a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a6:	f200 8087 	bhi.w	80054b8 <HAL_TIM_ConfigClockSource+0x16c>
 80053aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ae:	f000 8086 	beq.w	80054be <HAL_TIM_ConfigClockSource+0x172>
 80053b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b6:	d87f      	bhi.n	80054b8 <HAL_TIM_ConfigClockSource+0x16c>
 80053b8:	2b70      	cmp	r3, #112	; 0x70
 80053ba:	d01a      	beq.n	80053f2 <HAL_TIM_ConfigClockSource+0xa6>
 80053bc:	2b70      	cmp	r3, #112	; 0x70
 80053be:	d87b      	bhi.n	80054b8 <HAL_TIM_ConfigClockSource+0x16c>
 80053c0:	2b60      	cmp	r3, #96	; 0x60
 80053c2:	d050      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x11a>
 80053c4:	2b60      	cmp	r3, #96	; 0x60
 80053c6:	d877      	bhi.n	80054b8 <HAL_TIM_ConfigClockSource+0x16c>
 80053c8:	2b50      	cmp	r3, #80	; 0x50
 80053ca:	d03c      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0xfa>
 80053cc:	2b50      	cmp	r3, #80	; 0x50
 80053ce:	d873      	bhi.n	80054b8 <HAL_TIM_ConfigClockSource+0x16c>
 80053d0:	2b40      	cmp	r3, #64	; 0x40
 80053d2:	d058      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0x13a>
 80053d4:	2b40      	cmp	r3, #64	; 0x40
 80053d6:	d86f      	bhi.n	80054b8 <HAL_TIM_ConfigClockSource+0x16c>
 80053d8:	2b30      	cmp	r3, #48	; 0x30
 80053da:	d064      	beq.n	80054a6 <HAL_TIM_ConfigClockSource+0x15a>
 80053dc:	2b30      	cmp	r3, #48	; 0x30
 80053de:	d86b      	bhi.n	80054b8 <HAL_TIM_ConfigClockSource+0x16c>
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	d060      	beq.n	80054a6 <HAL_TIM_ConfigClockSource+0x15a>
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	d867      	bhi.n	80054b8 <HAL_TIM_ConfigClockSource+0x16c>
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d05c      	beq.n	80054a6 <HAL_TIM_ConfigClockSource+0x15a>
 80053ec:	2b10      	cmp	r3, #16
 80053ee:	d05a      	beq.n	80054a6 <HAL_TIM_ConfigClockSource+0x15a>
 80053f0:	e062      	b.n	80054b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6818      	ldr	r0, [r3, #0]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	6899      	ldr	r1, [r3, #8]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f000 fbe5 	bl	8005bd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005414:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	609a      	str	r2, [r3, #8]
      break;
 800541e:	e04f      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6818      	ldr	r0, [r3, #0]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	6899      	ldr	r1, [r3, #8]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f000 fbce 	bl	8005bd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005442:	609a      	str	r2, [r3, #8]
      break;
 8005444:	e03c      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6859      	ldr	r1, [r3, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	461a      	mov	r2, r3
 8005454:	f000 fb42 	bl	8005adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2150      	movs	r1, #80	; 0x50
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fb9b 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 8005464:	e02c      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	6859      	ldr	r1, [r3, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	461a      	mov	r2, r3
 8005474:	f000 fb61 	bl	8005b3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2160      	movs	r1, #96	; 0x60
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fb8b 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 8005484:	e01c      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	6859      	ldr	r1, [r3, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	461a      	mov	r2, r3
 8005494:	f000 fb22 	bl	8005adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2140      	movs	r1, #64	; 0x40
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 fb7b 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 80054a4:	e00c      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4619      	mov	r1, r3
 80054b0:	4610      	mov	r0, r2
 80054b2:	f000 fb72 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 80054b6:	e003      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	73fb      	strb	r3, [r7, #15]
      break;
 80054bc:	e000      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	fffeff88 	.word	0xfffeff88

080054e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a40      	ldr	r2, [pc, #256]	; (80055f4 <TIM_Base_SetConfig+0x114>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d013      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fe:	d00f      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a3d      	ldr	r2, [pc, #244]	; (80055f8 <TIM_Base_SetConfig+0x118>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00b      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a3c      	ldr	r2, [pc, #240]	; (80055fc <TIM_Base_SetConfig+0x11c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d007      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a3b      	ldr	r2, [pc, #236]	; (8005600 <TIM_Base_SetConfig+0x120>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d003      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a3a      	ldr	r2, [pc, #232]	; (8005604 <TIM_Base_SetConfig+0x124>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d108      	bne.n	8005532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a2f      	ldr	r2, [pc, #188]	; (80055f4 <TIM_Base_SetConfig+0x114>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d02b      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005540:	d027      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a2c      	ldr	r2, [pc, #176]	; (80055f8 <TIM_Base_SetConfig+0x118>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d023      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a2b      	ldr	r2, [pc, #172]	; (80055fc <TIM_Base_SetConfig+0x11c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d01f      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a2a      	ldr	r2, [pc, #168]	; (8005600 <TIM_Base_SetConfig+0x120>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d01b      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a29      	ldr	r2, [pc, #164]	; (8005604 <TIM_Base_SetConfig+0x124>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d017      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a28      	ldr	r2, [pc, #160]	; (8005608 <TIM_Base_SetConfig+0x128>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d013      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a27      	ldr	r2, [pc, #156]	; (800560c <TIM_Base_SetConfig+0x12c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00f      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a26      	ldr	r2, [pc, #152]	; (8005610 <TIM_Base_SetConfig+0x130>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00b      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a25      	ldr	r2, [pc, #148]	; (8005614 <TIM_Base_SetConfig+0x134>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d007      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a24      	ldr	r2, [pc, #144]	; (8005618 <TIM_Base_SetConfig+0x138>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d003      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a23      	ldr	r2, [pc, #140]	; (800561c <TIM_Base_SetConfig+0x13c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d108      	bne.n	80055a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a0a      	ldr	r2, [pc, #40]	; (80055f4 <TIM_Base_SetConfig+0x114>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d003      	beq.n	80055d8 <TIM_Base_SetConfig+0xf8>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a0c      	ldr	r2, [pc, #48]	; (8005604 <TIM_Base_SetConfig+0x124>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d103      	bne.n	80055e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	615a      	str	r2, [r3, #20]
}
 80055e6:	bf00      	nop
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40010000 	.word	0x40010000
 80055f8:	40000400 	.word	0x40000400
 80055fc:	40000800 	.word	0x40000800
 8005600:	40000c00 	.word	0x40000c00
 8005604:	40010400 	.word	0x40010400
 8005608:	40014000 	.word	0x40014000
 800560c:	40014400 	.word	0x40014400
 8005610:	40014800 	.word	0x40014800
 8005614:	40001800 	.word	0x40001800
 8005618:	40001c00 	.word	0x40001c00
 800561c:	40002000 	.word	0x40002000

08005620 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f023 0201 	bic.w	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	4b2b      	ldr	r3, [pc, #172]	; (80056f8 <TIM_OC1_SetConfig+0xd8>)
 800564c:	4013      	ands	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 0303 	bic.w	r3, r3, #3
 8005656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f023 0302 	bic.w	r3, r3, #2
 8005668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a21      	ldr	r2, [pc, #132]	; (80056fc <TIM_OC1_SetConfig+0xdc>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d003      	beq.n	8005684 <TIM_OC1_SetConfig+0x64>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a20      	ldr	r2, [pc, #128]	; (8005700 <TIM_OC1_SetConfig+0xe0>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d10c      	bne.n	800569e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f023 0308 	bic.w	r3, r3, #8
 800568a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	4313      	orrs	r3, r2
 8005694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f023 0304 	bic.w	r3, r3, #4
 800569c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a16      	ldr	r2, [pc, #88]	; (80056fc <TIM_OC1_SetConfig+0xdc>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d003      	beq.n	80056ae <TIM_OC1_SetConfig+0x8e>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a15      	ldr	r2, [pc, #84]	; (8005700 <TIM_OC1_SetConfig+0xe0>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d111      	bne.n	80056d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	621a      	str	r2, [r3, #32]
}
 80056ec:	bf00      	nop
 80056ee:	371c      	adds	r7, #28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	fffeff8f 	.word	0xfffeff8f
 80056fc:	40010000 	.word	0x40010000
 8005700:	40010400 	.word	0x40010400

08005704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	f023 0210 	bic.w	r2, r3, #16
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4b2e      	ldr	r3, [pc, #184]	; (80057e8 <TIM_OC2_SetConfig+0xe4>)
 8005730:	4013      	ands	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800573a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	021b      	lsls	r3, r3, #8
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	4313      	orrs	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f023 0320 	bic.w	r3, r3, #32
 800574e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	011b      	lsls	r3, r3, #4
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a23      	ldr	r2, [pc, #140]	; (80057ec <TIM_OC2_SetConfig+0xe8>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d003      	beq.n	800576c <TIM_OC2_SetConfig+0x68>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a22      	ldr	r2, [pc, #136]	; (80057f0 <TIM_OC2_SetConfig+0xec>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d10d      	bne.n	8005788 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	4313      	orrs	r3, r2
 800577e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005786:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a18      	ldr	r2, [pc, #96]	; (80057ec <TIM_OC2_SetConfig+0xe8>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d003      	beq.n	8005798 <TIM_OC2_SetConfig+0x94>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a17      	ldr	r2, [pc, #92]	; (80057f0 <TIM_OC2_SetConfig+0xec>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d113      	bne.n	80057c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800579e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	621a      	str	r2, [r3, #32]
}
 80057da:	bf00      	nop
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	feff8fff 	.word	0xfeff8fff
 80057ec:	40010000 	.word	0x40010000
 80057f0:	40010400 	.word	0x40010400

080057f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4b2d      	ldr	r3, [pc, #180]	; (80058d4 <TIM_OC3_SetConfig+0xe0>)
 8005820:	4013      	ands	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f023 0303 	bic.w	r3, r3, #3
 800582a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800583c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	021b      	lsls	r3, r3, #8
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	4313      	orrs	r3, r2
 8005848:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a22      	ldr	r2, [pc, #136]	; (80058d8 <TIM_OC3_SetConfig+0xe4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d003      	beq.n	800585a <TIM_OC3_SetConfig+0x66>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a21      	ldr	r2, [pc, #132]	; (80058dc <TIM_OC3_SetConfig+0xe8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d10d      	bne.n	8005876 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005860:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	021b      	lsls	r3, r3, #8
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a17      	ldr	r2, [pc, #92]	; (80058d8 <TIM_OC3_SetConfig+0xe4>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d003      	beq.n	8005886 <TIM_OC3_SetConfig+0x92>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a16      	ldr	r2, [pc, #88]	; (80058dc <TIM_OC3_SetConfig+0xe8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d113      	bne.n	80058ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800588c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	621a      	str	r2, [r3, #32]
}
 80058c8:	bf00      	nop
 80058ca:	371c      	adds	r7, #28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	fffeff8f 	.word	0xfffeff8f
 80058d8:	40010000 	.word	0x40010000
 80058dc:	40010400 	.word	0x40010400

080058e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4b1e      	ldr	r3, [pc, #120]	; (8005984 <TIM_OC4_SetConfig+0xa4>)
 800590c:	4013      	ands	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	021b      	lsls	r3, r3, #8
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4313      	orrs	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800592a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	031b      	lsls	r3, r3, #12
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	4313      	orrs	r3, r2
 8005936:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a13      	ldr	r2, [pc, #76]	; (8005988 <TIM_OC4_SetConfig+0xa8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d003      	beq.n	8005948 <TIM_OC4_SetConfig+0x68>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a12      	ldr	r2, [pc, #72]	; (800598c <TIM_OC4_SetConfig+0xac>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d109      	bne.n	800595c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800594e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	019b      	lsls	r3, r3, #6
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	621a      	str	r2, [r3, #32]
}
 8005976:	bf00      	nop
 8005978:	371c      	adds	r7, #28
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	feff8fff 	.word	0xfeff8fff
 8005988:	40010000 	.word	0x40010000
 800598c:	40010400 	.word	0x40010400

08005990 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4b1b      	ldr	r3, [pc, #108]	; (8005a28 <TIM_OC5_SetConfig+0x98>)
 80059bc:	4013      	ands	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80059d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	041b      	lsls	r3, r3, #16
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4313      	orrs	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a12      	ldr	r2, [pc, #72]	; (8005a2c <TIM_OC5_SetConfig+0x9c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d003      	beq.n	80059ee <TIM_OC5_SetConfig+0x5e>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a11      	ldr	r2, [pc, #68]	; (8005a30 <TIM_OC5_SetConfig+0xa0>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d109      	bne.n	8005a02 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	021b      	lsls	r3, r3, #8
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	621a      	str	r2, [r3, #32]
}
 8005a1c:	bf00      	nop
 8005a1e:	371c      	adds	r7, #28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	fffeff8f 	.word	0xfffeff8f
 8005a2c:	40010000 	.word	0x40010000
 8005a30:	40010400 	.word	0x40010400

08005a34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4b1c      	ldr	r3, [pc, #112]	; (8005ad0 <TIM_OC6_SetConfig+0x9c>)
 8005a60:	4013      	ands	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	021b      	lsls	r3, r3, #8
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	051b      	lsls	r3, r3, #20
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a13      	ldr	r2, [pc, #76]	; (8005ad4 <TIM_OC6_SetConfig+0xa0>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d003      	beq.n	8005a94 <TIM_OC6_SetConfig+0x60>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a12      	ldr	r2, [pc, #72]	; (8005ad8 <TIM_OC6_SetConfig+0xa4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d109      	bne.n	8005aa8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	029b      	lsls	r3, r3, #10
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	621a      	str	r2, [r3, #32]
}
 8005ac2:	bf00      	nop
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	feff8fff 	.word	0xfeff8fff
 8005ad4:	40010000 	.word	0x40010000
 8005ad8:	40010400 	.word	0x40010400

08005adc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f023 0201 	bic.w	r2, r3, #1
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f023 030a 	bic.w	r3, r3, #10
 8005b18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	621a      	str	r2, [r3, #32]
}
 8005b2e:	bf00      	nop
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b087      	sub	sp, #28
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	60f8      	str	r0, [r7, #12]
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	f023 0210 	bic.w	r2, r3, #16
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	031b      	lsls	r3, r3, #12
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	621a      	str	r2, [r3, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	371c      	adds	r7, #28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b085      	sub	sp, #20
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	f043 0307 	orr.w	r3, r3, #7
 8005bbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	609a      	str	r2, [r3, #8]
}
 8005bc4:	bf00      	nop
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	021a      	lsls	r2, r3, #8
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	609a      	str	r2, [r3, #8]
}
 8005c04:	bf00      	nop
 8005c06:	371c      	adds	r7, #28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f003 031f 	and.w	r3, r3, #31
 8005c22:	2201      	movs	r2, #1
 8005c24:	fa02 f303 	lsl.w	r3, r2, r3
 8005c28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a1a      	ldr	r2, [r3, #32]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	43db      	mvns	r3, r3
 8005c32:	401a      	ands	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6a1a      	ldr	r2, [r3, #32]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f003 031f 	and.w	r3, r3, #31
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	fa01 f303 	lsl.w	r3, r1, r3
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	621a      	str	r2, [r3, #32]
}
 8005c4e:	bf00      	nop
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
	...

08005c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d101      	bne.n	8005c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c70:	2302      	movs	r3, #2
 8005c72:	e06d      	b.n	8005d50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a30      	ldr	r2, [pc, #192]	; (8005d5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d004      	beq.n	8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a2f      	ldr	r2, [pc, #188]	; (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d108      	bne.n	8005cba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a20      	ldr	r2, [pc, #128]	; (8005d5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d022      	beq.n	8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce6:	d01d      	beq.n	8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a1d      	ldr	r2, [pc, #116]	; (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d018      	beq.n	8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a1c      	ldr	r2, [pc, #112]	; (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d013      	beq.n	8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a1a      	ldr	r2, [pc, #104]	; (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d00e      	beq.n	8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a15      	ldr	r2, [pc, #84]	; (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d009      	beq.n	8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a16      	ldr	r2, [pc, #88]	; (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d004      	beq.n	8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a15      	ldr	r2, [pc, #84]	; (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d10c      	bne.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	40010000 	.word	0x40010000
 8005d60:	40010400 	.word	0x40010400
 8005d64:	40000400 	.word	0x40000400
 8005d68:	40000800 	.word	0x40000800
 8005d6c:	40000c00 	.word	0x40000c00
 8005d70:	40014000 	.word	0x40014000
 8005d74:	40001800 	.word	0x40001800

08005d78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e040      	b.n	8005e0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d106      	bne.n	8005da0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7fc fa72 	bl	8002284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2224      	movs	r2, #36	; 0x24
 8005da4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0201 	bic.w	r2, r2, #1
 8005db4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f8c0 	bl	8005f3c <UART_SetConfig>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d101      	bne.n	8005dc6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e022      	b.n	8005e0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fb16 	bl	8006400 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005de2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005df2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f042 0201 	orr.w	r2, r2, #1
 8005e02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fb9d 	bl	8006544 <UART_CheckIdleState>
 8005e0a:	4603      	mov	r3, r0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b08a      	sub	sp, #40	; 0x28
 8005e18:	af02      	add	r7, sp, #8
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	603b      	str	r3, [r7, #0]
 8005e20:	4613      	mov	r3, r2
 8005e22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e28:	2b20      	cmp	r3, #32
 8005e2a:	f040 8081 	bne.w	8005f30 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <HAL_UART_Transmit+0x26>
 8005e34:	88fb      	ldrh	r3, [r7, #6]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e079      	b.n	8005f32 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d101      	bne.n	8005e4c <HAL_UART_Transmit+0x38>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	e072      	b.n	8005f32 <HAL_UART_Transmit+0x11e>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2221      	movs	r2, #33	; 0x21
 8005e60:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e62:	f7fc fc2b 	bl	80026bc <HAL_GetTick>
 8005e66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	88fa      	ldrh	r2, [r7, #6]
 8005e6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	88fa      	ldrh	r2, [r7, #6]
 8005e74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e80:	d108      	bne.n	8005e94 <HAL_UART_Transmit+0x80>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d104      	bne.n	8005e94 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	61bb      	str	r3, [r7, #24]
 8005e92:	e003      	b.n	8005e9c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005ea4:	e02c      	b.n	8005f00 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2200      	movs	r2, #0
 8005eae:	2180      	movs	r1, #128	; 0x80
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 fb90 	bl	80065d6 <UART_WaitOnFlagUntilTimeout>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d001      	beq.n	8005ec0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e038      	b.n	8005f32 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10b      	bne.n	8005ede <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ed4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	3302      	adds	r3, #2
 8005eda:	61bb      	str	r3, [r7, #24]
 8005edc:	e007      	b.n	8005eee <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	781a      	ldrb	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	3301      	adds	r3, #1
 8005eec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1cc      	bne.n	8005ea6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2200      	movs	r2, #0
 8005f14:	2140      	movs	r1, #64	; 0x40
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 fb5d 	bl	80065d6 <UART_WaitOnFlagUntilTimeout>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e005      	b.n	8005f32 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	e000      	b.n	8005f32 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005f30:	2302      	movs	r3, #2
  }
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3720      	adds	r7, #32
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
	...

08005f3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b088      	sub	sp, #32
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f44:	2300      	movs	r3, #0
 8005f46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	431a      	orrs	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	4ba7      	ldr	r3, [pc, #668]	; (8006204 <UART_SetConfig+0x2c8>)
 8005f68:	4013      	ands	r3, r2
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	6812      	ldr	r2, [r2, #0]
 8005f6e:	6979      	ldr	r1, [r7, #20]
 8005f70:	430b      	orrs	r3, r1
 8005f72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a95      	ldr	r2, [pc, #596]	; (8006208 <UART_SetConfig+0x2cc>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d120      	bne.n	8005ffa <UART_SetConfig+0xbe>
 8005fb8:	4b94      	ldr	r3, [pc, #592]	; (800620c <UART_SetConfig+0x2d0>)
 8005fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d816      	bhi.n	8005ff4 <UART_SetConfig+0xb8>
 8005fc6:	a201      	add	r2, pc, #4	; (adr r2, 8005fcc <UART_SetConfig+0x90>)
 8005fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fcc:	08005fdd 	.word	0x08005fdd
 8005fd0:	08005fe9 	.word	0x08005fe9
 8005fd4:	08005fe3 	.word	0x08005fe3
 8005fd8:	08005fef 	.word	0x08005fef
 8005fdc:	2301      	movs	r3, #1
 8005fde:	77fb      	strb	r3, [r7, #31]
 8005fe0:	e14f      	b.n	8006282 <UART_SetConfig+0x346>
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	77fb      	strb	r3, [r7, #31]
 8005fe6:	e14c      	b.n	8006282 <UART_SetConfig+0x346>
 8005fe8:	2304      	movs	r3, #4
 8005fea:	77fb      	strb	r3, [r7, #31]
 8005fec:	e149      	b.n	8006282 <UART_SetConfig+0x346>
 8005fee:	2308      	movs	r3, #8
 8005ff0:	77fb      	strb	r3, [r7, #31]
 8005ff2:	e146      	b.n	8006282 <UART_SetConfig+0x346>
 8005ff4:	2310      	movs	r3, #16
 8005ff6:	77fb      	strb	r3, [r7, #31]
 8005ff8:	e143      	b.n	8006282 <UART_SetConfig+0x346>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a84      	ldr	r2, [pc, #528]	; (8006210 <UART_SetConfig+0x2d4>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d132      	bne.n	800606a <UART_SetConfig+0x12e>
 8006004:	4b81      	ldr	r3, [pc, #516]	; (800620c <UART_SetConfig+0x2d0>)
 8006006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800600a:	f003 030c 	and.w	r3, r3, #12
 800600e:	2b0c      	cmp	r3, #12
 8006010:	d828      	bhi.n	8006064 <UART_SetConfig+0x128>
 8006012:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <UART_SetConfig+0xdc>)
 8006014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006018:	0800604d 	.word	0x0800604d
 800601c:	08006065 	.word	0x08006065
 8006020:	08006065 	.word	0x08006065
 8006024:	08006065 	.word	0x08006065
 8006028:	08006059 	.word	0x08006059
 800602c:	08006065 	.word	0x08006065
 8006030:	08006065 	.word	0x08006065
 8006034:	08006065 	.word	0x08006065
 8006038:	08006053 	.word	0x08006053
 800603c:	08006065 	.word	0x08006065
 8006040:	08006065 	.word	0x08006065
 8006044:	08006065 	.word	0x08006065
 8006048:	0800605f 	.word	0x0800605f
 800604c:	2300      	movs	r3, #0
 800604e:	77fb      	strb	r3, [r7, #31]
 8006050:	e117      	b.n	8006282 <UART_SetConfig+0x346>
 8006052:	2302      	movs	r3, #2
 8006054:	77fb      	strb	r3, [r7, #31]
 8006056:	e114      	b.n	8006282 <UART_SetConfig+0x346>
 8006058:	2304      	movs	r3, #4
 800605a:	77fb      	strb	r3, [r7, #31]
 800605c:	e111      	b.n	8006282 <UART_SetConfig+0x346>
 800605e:	2308      	movs	r3, #8
 8006060:	77fb      	strb	r3, [r7, #31]
 8006062:	e10e      	b.n	8006282 <UART_SetConfig+0x346>
 8006064:	2310      	movs	r3, #16
 8006066:	77fb      	strb	r3, [r7, #31]
 8006068:	e10b      	b.n	8006282 <UART_SetConfig+0x346>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a69      	ldr	r2, [pc, #420]	; (8006214 <UART_SetConfig+0x2d8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d120      	bne.n	80060b6 <UART_SetConfig+0x17a>
 8006074:	4b65      	ldr	r3, [pc, #404]	; (800620c <UART_SetConfig+0x2d0>)
 8006076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800607e:	2b30      	cmp	r3, #48	; 0x30
 8006080:	d013      	beq.n	80060aa <UART_SetConfig+0x16e>
 8006082:	2b30      	cmp	r3, #48	; 0x30
 8006084:	d814      	bhi.n	80060b0 <UART_SetConfig+0x174>
 8006086:	2b20      	cmp	r3, #32
 8006088:	d009      	beq.n	800609e <UART_SetConfig+0x162>
 800608a:	2b20      	cmp	r3, #32
 800608c:	d810      	bhi.n	80060b0 <UART_SetConfig+0x174>
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <UART_SetConfig+0x15c>
 8006092:	2b10      	cmp	r3, #16
 8006094:	d006      	beq.n	80060a4 <UART_SetConfig+0x168>
 8006096:	e00b      	b.n	80060b0 <UART_SetConfig+0x174>
 8006098:	2300      	movs	r3, #0
 800609a:	77fb      	strb	r3, [r7, #31]
 800609c:	e0f1      	b.n	8006282 <UART_SetConfig+0x346>
 800609e:	2302      	movs	r3, #2
 80060a0:	77fb      	strb	r3, [r7, #31]
 80060a2:	e0ee      	b.n	8006282 <UART_SetConfig+0x346>
 80060a4:	2304      	movs	r3, #4
 80060a6:	77fb      	strb	r3, [r7, #31]
 80060a8:	e0eb      	b.n	8006282 <UART_SetConfig+0x346>
 80060aa:	2308      	movs	r3, #8
 80060ac:	77fb      	strb	r3, [r7, #31]
 80060ae:	e0e8      	b.n	8006282 <UART_SetConfig+0x346>
 80060b0:	2310      	movs	r3, #16
 80060b2:	77fb      	strb	r3, [r7, #31]
 80060b4:	e0e5      	b.n	8006282 <UART_SetConfig+0x346>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a57      	ldr	r2, [pc, #348]	; (8006218 <UART_SetConfig+0x2dc>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d120      	bne.n	8006102 <UART_SetConfig+0x1c6>
 80060c0:	4b52      	ldr	r3, [pc, #328]	; (800620c <UART_SetConfig+0x2d0>)
 80060c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80060ca:	2bc0      	cmp	r3, #192	; 0xc0
 80060cc:	d013      	beq.n	80060f6 <UART_SetConfig+0x1ba>
 80060ce:	2bc0      	cmp	r3, #192	; 0xc0
 80060d0:	d814      	bhi.n	80060fc <UART_SetConfig+0x1c0>
 80060d2:	2b80      	cmp	r3, #128	; 0x80
 80060d4:	d009      	beq.n	80060ea <UART_SetConfig+0x1ae>
 80060d6:	2b80      	cmp	r3, #128	; 0x80
 80060d8:	d810      	bhi.n	80060fc <UART_SetConfig+0x1c0>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d002      	beq.n	80060e4 <UART_SetConfig+0x1a8>
 80060de:	2b40      	cmp	r3, #64	; 0x40
 80060e0:	d006      	beq.n	80060f0 <UART_SetConfig+0x1b4>
 80060e2:	e00b      	b.n	80060fc <UART_SetConfig+0x1c0>
 80060e4:	2300      	movs	r3, #0
 80060e6:	77fb      	strb	r3, [r7, #31]
 80060e8:	e0cb      	b.n	8006282 <UART_SetConfig+0x346>
 80060ea:	2302      	movs	r3, #2
 80060ec:	77fb      	strb	r3, [r7, #31]
 80060ee:	e0c8      	b.n	8006282 <UART_SetConfig+0x346>
 80060f0:	2304      	movs	r3, #4
 80060f2:	77fb      	strb	r3, [r7, #31]
 80060f4:	e0c5      	b.n	8006282 <UART_SetConfig+0x346>
 80060f6:	2308      	movs	r3, #8
 80060f8:	77fb      	strb	r3, [r7, #31]
 80060fa:	e0c2      	b.n	8006282 <UART_SetConfig+0x346>
 80060fc:	2310      	movs	r3, #16
 80060fe:	77fb      	strb	r3, [r7, #31]
 8006100:	e0bf      	b.n	8006282 <UART_SetConfig+0x346>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a45      	ldr	r2, [pc, #276]	; (800621c <UART_SetConfig+0x2e0>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d125      	bne.n	8006158 <UART_SetConfig+0x21c>
 800610c:	4b3f      	ldr	r3, [pc, #252]	; (800620c <UART_SetConfig+0x2d0>)
 800610e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800611a:	d017      	beq.n	800614c <UART_SetConfig+0x210>
 800611c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006120:	d817      	bhi.n	8006152 <UART_SetConfig+0x216>
 8006122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006126:	d00b      	beq.n	8006140 <UART_SetConfig+0x204>
 8006128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800612c:	d811      	bhi.n	8006152 <UART_SetConfig+0x216>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <UART_SetConfig+0x1fe>
 8006132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006136:	d006      	beq.n	8006146 <UART_SetConfig+0x20a>
 8006138:	e00b      	b.n	8006152 <UART_SetConfig+0x216>
 800613a:	2300      	movs	r3, #0
 800613c:	77fb      	strb	r3, [r7, #31]
 800613e:	e0a0      	b.n	8006282 <UART_SetConfig+0x346>
 8006140:	2302      	movs	r3, #2
 8006142:	77fb      	strb	r3, [r7, #31]
 8006144:	e09d      	b.n	8006282 <UART_SetConfig+0x346>
 8006146:	2304      	movs	r3, #4
 8006148:	77fb      	strb	r3, [r7, #31]
 800614a:	e09a      	b.n	8006282 <UART_SetConfig+0x346>
 800614c:	2308      	movs	r3, #8
 800614e:	77fb      	strb	r3, [r7, #31]
 8006150:	e097      	b.n	8006282 <UART_SetConfig+0x346>
 8006152:	2310      	movs	r3, #16
 8006154:	77fb      	strb	r3, [r7, #31]
 8006156:	e094      	b.n	8006282 <UART_SetConfig+0x346>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a30      	ldr	r2, [pc, #192]	; (8006220 <UART_SetConfig+0x2e4>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d125      	bne.n	80061ae <UART_SetConfig+0x272>
 8006162:	4b2a      	ldr	r3, [pc, #168]	; (800620c <UART_SetConfig+0x2d0>)
 8006164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006168:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800616c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006170:	d017      	beq.n	80061a2 <UART_SetConfig+0x266>
 8006172:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006176:	d817      	bhi.n	80061a8 <UART_SetConfig+0x26c>
 8006178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800617c:	d00b      	beq.n	8006196 <UART_SetConfig+0x25a>
 800617e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006182:	d811      	bhi.n	80061a8 <UART_SetConfig+0x26c>
 8006184:	2b00      	cmp	r3, #0
 8006186:	d003      	beq.n	8006190 <UART_SetConfig+0x254>
 8006188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800618c:	d006      	beq.n	800619c <UART_SetConfig+0x260>
 800618e:	e00b      	b.n	80061a8 <UART_SetConfig+0x26c>
 8006190:	2301      	movs	r3, #1
 8006192:	77fb      	strb	r3, [r7, #31]
 8006194:	e075      	b.n	8006282 <UART_SetConfig+0x346>
 8006196:	2302      	movs	r3, #2
 8006198:	77fb      	strb	r3, [r7, #31]
 800619a:	e072      	b.n	8006282 <UART_SetConfig+0x346>
 800619c:	2304      	movs	r3, #4
 800619e:	77fb      	strb	r3, [r7, #31]
 80061a0:	e06f      	b.n	8006282 <UART_SetConfig+0x346>
 80061a2:	2308      	movs	r3, #8
 80061a4:	77fb      	strb	r3, [r7, #31]
 80061a6:	e06c      	b.n	8006282 <UART_SetConfig+0x346>
 80061a8:	2310      	movs	r3, #16
 80061aa:	77fb      	strb	r3, [r7, #31]
 80061ac:	e069      	b.n	8006282 <UART_SetConfig+0x346>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a1c      	ldr	r2, [pc, #112]	; (8006224 <UART_SetConfig+0x2e8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d137      	bne.n	8006228 <UART_SetConfig+0x2ec>
 80061b8:	4b14      	ldr	r3, [pc, #80]	; (800620c <UART_SetConfig+0x2d0>)
 80061ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061be:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80061c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061c6:	d017      	beq.n	80061f8 <UART_SetConfig+0x2bc>
 80061c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061cc:	d817      	bhi.n	80061fe <UART_SetConfig+0x2c2>
 80061ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061d2:	d00b      	beq.n	80061ec <UART_SetConfig+0x2b0>
 80061d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061d8:	d811      	bhi.n	80061fe <UART_SetConfig+0x2c2>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <UART_SetConfig+0x2aa>
 80061de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e2:	d006      	beq.n	80061f2 <UART_SetConfig+0x2b6>
 80061e4:	e00b      	b.n	80061fe <UART_SetConfig+0x2c2>
 80061e6:	2300      	movs	r3, #0
 80061e8:	77fb      	strb	r3, [r7, #31]
 80061ea:	e04a      	b.n	8006282 <UART_SetConfig+0x346>
 80061ec:	2302      	movs	r3, #2
 80061ee:	77fb      	strb	r3, [r7, #31]
 80061f0:	e047      	b.n	8006282 <UART_SetConfig+0x346>
 80061f2:	2304      	movs	r3, #4
 80061f4:	77fb      	strb	r3, [r7, #31]
 80061f6:	e044      	b.n	8006282 <UART_SetConfig+0x346>
 80061f8:	2308      	movs	r3, #8
 80061fa:	77fb      	strb	r3, [r7, #31]
 80061fc:	e041      	b.n	8006282 <UART_SetConfig+0x346>
 80061fe:	2310      	movs	r3, #16
 8006200:	77fb      	strb	r3, [r7, #31]
 8006202:	e03e      	b.n	8006282 <UART_SetConfig+0x346>
 8006204:	efff69f3 	.word	0xefff69f3
 8006208:	40011000 	.word	0x40011000
 800620c:	40023800 	.word	0x40023800
 8006210:	40004400 	.word	0x40004400
 8006214:	40004800 	.word	0x40004800
 8006218:	40004c00 	.word	0x40004c00
 800621c:	40005000 	.word	0x40005000
 8006220:	40011400 	.word	0x40011400
 8006224:	40007800 	.word	0x40007800
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a71      	ldr	r2, [pc, #452]	; (80063f4 <UART_SetConfig+0x4b8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d125      	bne.n	800627e <UART_SetConfig+0x342>
 8006232:	4b71      	ldr	r3, [pc, #452]	; (80063f8 <UART_SetConfig+0x4bc>)
 8006234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006238:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800623c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006240:	d017      	beq.n	8006272 <UART_SetConfig+0x336>
 8006242:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006246:	d817      	bhi.n	8006278 <UART_SetConfig+0x33c>
 8006248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800624c:	d00b      	beq.n	8006266 <UART_SetConfig+0x32a>
 800624e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006252:	d811      	bhi.n	8006278 <UART_SetConfig+0x33c>
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <UART_SetConfig+0x324>
 8006258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800625c:	d006      	beq.n	800626c <UART_SetConfig+0x330>
 800625e:	e00b      	b.n	8006278 <UART_SetConfig+0x33c>
 8006260:	2300      	movs	r3, #0
 8006262:	77fb      	strb	r3, [r7, #31]
 8006264:	e00d      	b.n	8006282 <UART_SetConfig+0x346>
 8006266:	2302      	movs	r3, #2
 8006268:	77fb      	strb	r3, [r7, #31]
 800626a:	e00a      	b.n	8006282 <UART_SetConfig+0x346>
 800626c:	2304      	movs	r3, #4
 800626e:	77fb      	strb	r3, [r7, #31]
 8006270:	e007      	b.n	8006282 <UART_SetConfig+0x346>
 8006272:	2308      	movs	r3, #8
 8006274:	77fb      	strb	r3, [r7, #31]
 8006276:	e004      	b.n	8006282 <UART_SetConfig+0x346>
 8006278:	2310      	movs	r3, #16
 800627a:	77fb      	strb	r3, [r7, #31]
 800627c:	e001      	b.n	8006282 <UART_SetConfig+0x346>
 800627e:	2310      	movs	r3, #16
 8006280:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800628a:	d15a      	bne.n	8006342 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800628c:	7ffb      	ldrb	r3, [r7, #31]
 800628e:	2b08      	cmp	r3, #8
 8006290:	d827      	bhi.n	80062e2 <UART_SetConfig+0x3a6>
 8006292:	a201      	add	r2, pc, #4	; (adr r2, 8006298 <UART_SetConfig+0x35c>)
 8006294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006298:	080062bd 	.word	0x080062bd
 800629c:	080062c5 	.word	0x080062c5
 80062a0:	080062cd 	.word	0x080062cd
 80062a4:	080062e3 	.word	0x080062e3
 80062a8:	080062d3 	.word	0x080062d3
 80062ac:	080062e3 	.word	0x080062e3
 80062b0:	080062e3 	.word	0x080062e3
 80062b4:	080062e3 	.word	0x080062e3
 80062b8:	080062db 	.word	0x080062db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062bc:	f7fd fb0a 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 80062c0:	61b8      	str	r0, [r7, #24]
        break;
 80062c2:	e013      	b.n	80062ec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062c4:	f7fd fb1a 	bl	80038fc <HAL_RCC_GetPCLK2Freq>
 80062c8:	61b8      	str	r0, [r7, #24]
        break;
 80062ca:	e00f      	b.n	80062ec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062cc:	4b4b      	ldr	r3, [pc, #300]	; (80063fc <UART_SetConfig+0x4c0>)
 80062ce:	61bb      	str	r3, [r7, #24]
        break;
 80062d0:	e00c      	b.n	80062ec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062d2:	f7fd fa11 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 80062d6:	61b8      	str	r0, [r7, #24]
        break;
 80062d8:	e008      	b.n	80062ec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062de:	61bb      	str	r3, [r7, #24]
        break;
 80062e0:	e004      	b.n	80062ec <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	77bb      	strb	r3, [r7, #30]
        break;
 80062ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d074      	beq.n	80063dc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	005a      	lsls	r2, r3, #1
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	085b      	lsrs	r3, r3, #1
 80062fc:	441a      	add	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	fbb2 f3f3 	udiv	r3, r2, r3
 8006306:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	2b0f      	cmp	r3, #15
 800630c:	d916      	bls.n	800633c <UART_SetConfig+0x400>
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006314:	d212      	bcs.n	800633c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	b29b      	uxth	r3, r3
 800631a:	f023 030f 	bic.w	r3, r3, #15
 800631e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	085b      	lsrs	r3, r3, #1
 8006324:	b29b      	uxth	r3, r3
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	b29a      	uxth	r2, r3
 800632c:	89fb      	ldrh	r3, [r7, #14]
 800632e:	4313      	orrs	r3, r2
 8006330:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	89fa      	ldrh	r2, [r7, #14]
 8006338:	60da      	str	r2, [r3, #12]
 800633a:	e04f      	b.n	80063dc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	77bb      	strb	r3, [r7, #30]
 8006340:	e04c      	b.n	80063dc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006342:	7ffb      	ldrb	r3, [r7, #31]
 8006344:	2b08      	cmp	r3, #8
 8006346:	d828      	bhi.n	800639a <UART_SetConfig+0x45e>
 8006348:	a201      	add	r2, pc, #4	; (adr r2, 8006350 <UART_SetConfig+0x414>)
 800634a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634e:	bf00      	nop
 8006350:	08006375 	.word	0x08006375
 8006354:	0800637d 	.word	0x0800637d
 8006358:	08006385 	.word	0x08006385
 800635c:	0800639b 	.word	0x0800639b
 8006360:	0800638b 	.word	0x0800638b
 8006364:	0800639b 	.word	0x0800639b
 8006368:	0800639b 	.word	0x0800639b
 800636c:	0800639b 	.word	0x0800639b
 8006370:	08006393 	.word	0x08006393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006374:	f7fd faae 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 8006378:	61b8      	str	r0, [r7, #24]
        break;
 800637a:	e013      	b.n	80063a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800637c:	f7fd fabe 	bl	80038fc <HAL_RCC_GetPCLK2Freq>
 8006380:	61b8      	str	r0, [r7, #24]
        break;
 8006382:	e00f      	b.n	80063a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006384:	4b1d      	ldr	r3, [pc, #116]	; (80063fc <UART_SetConfig+0x4c0>)
 8006386:	61bb      	str	r3, [r7, #24]
        break;
 8006388:	e00c      	b.n	80063a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800638a:	f7fd f9b5 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 800638e:	61b8      	str	r0, [r7, #24]
        break;
 8006390:	e008      	b.n	80063a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006396:	61bb      	str	r3, [r7, #24]
        break;
 8006398:	e004      	b.n	80063a4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	77bb      	strb	r3, [r7, #30]
        break;
 80063a2:	bf00      	nop
    }

    if (pclk != 0U)
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d018      	beq.n	80063dc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	085a      	lsrs	r2, r3, #1
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	441a      	add	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	2b0f      	cmp	r3, #15
 80063c2:	d909      	bls.n	80063d8 <UART_SetConfig+0x49c>
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ca:	d205      	bcs.n	80063d8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	60da      	str	r2, [r3, #12]
 80063d6:	e001      	b.n	80063dc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80063e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3720      	adds	r7, #32
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	40007c00 	.word	0x40007c00
 80063f8:	40023800 	.word	0x40023800
 80063fc:	00f42400 	.word	0x00f42400

08006400 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00a      	beq.n	800642a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00a      	beq.n	800644c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00a      	beq.n	800646e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	f003 0308 	and.w	r3, r3, #8
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	f003 0310 	and.w	r3, r3, #16
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00a      	beq.n	80064b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b6:	f003 0320 	and.w	r3, r3, #32
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d01a      	beq.n	8006516 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064fe:	d10a      	bne.n	8006516 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00a      	beq.n	8006538 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	605a      	str	r2, [r3, #4]
  }
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af02      	add	r7, sp, #8
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006554:	f7fc f8b2 	bl	80026bc <HAL_GetTick>
 8006558:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0308 	and.w	r3, r3, #8
 8006564:	2b08      	cmp	r3, #8
 8006566:	d10e      	bne.n	8006586 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f82d 	bl	80065d6 <UART_WaitOnFlagUntilTimeout>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e023      	b.n	80065ce <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b04      	cmp	r3, #4
 8006592:	d10e      	bne.n	80065b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f817 	bl	80065d6 <UART_WaitOnFlagUntilTimeout>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e00d      	b.n	80065ce <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2220      	movs	r2, #32
 80065b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b09c      	sub	sp, #112	; 0x70
 80065da:	af00      	add	r7, sp, #0
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	60b9      	str	r1, [r7, #8]
 80065e0:	603b      	str	r3, [r7, #0]
 80065e2:	4613      	mov	r3, r2
 80065e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065e6:	e0a5      	b.n	8006734 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065ee:	f000 80a1 	beq.w	8006734 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065f2:	f7fc f863 	bl	80026bc <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065fe:	429a      	cmp	r2, r3
 8006600:	d302      	bcc.n	8006608 <UART_WaitOnFlagUntilTimeout+0x32>
 8006602:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006604:	2b00      	cmp	r3, #0
 8006606:	d13e      	bne.n	8006686 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006618:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800661c:	667b      	str	r3, [r7, #100]	; 0x64
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006626:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006628:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800662c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e6      	bne.n	8006608 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3308      	adds	r3, #8
 8006640:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800664a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664c:	f023 0301 	bic.w	r3, r3, #1
 8006650:	663b      	str	r3, [r7, #96]	; 0x60
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3308      	adds	r3, #8
 8006658:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800665a:	64ba      	str	r2, [r7, #72]	; 0x48
 800665c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006662:	e841 2300 	strex	r3, r2, [r1]
 8006666:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1e5      	bne.n	800663a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2220      	movs	r2, #32
 8006672:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2220      	movs	r2, #32
 8006678:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e067      	b.n	8006756 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	2b00      	cmp	r3, #0
 8006692:	d04f      	beq.n	8006734 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800669e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066a2:	d147      	bne.n	8006734 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b6:	e853 3f00 	ldrex	r3, [r3]
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	461a      	mov	r2, r3
 80066ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066cc:	637b      	str	r3, [r7, #52]	; 0x34
 80066ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066d4:	e841 2300 	strex	r3, r2, [r1]
 80066d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e6      	bne.n	80066ae <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3308      	adds	r3, #8
 80066e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	e853 3f00 	ldrex	r3, [r3]
 80066ee:	613b      	str	r3, [r7, #16]
   return(result);
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f023 0301 	bic.w	r3, r3, #1
 80066f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3308      	adds	r3, #8
 80066fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006700:	623a      	str	r2, [r7, #32]
 8006702:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006704:	69f9      	ldr	r1, [r7, #28]
 8006706:	6a3a      	ldr	r2, [r7, #32]
 8006708:	e841 2300 	strex	r3, r2, [r1]
 800670c:	61bb      	str	r3, [r7, #24]
   return(result);
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1e5      	bne.n	80066e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2220      	movs	r2, #32
 8006718:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2220      	movs	r2, #32
 800671e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2220      	movs	r2, #32
 8006724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e010      	b.n	8006756 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	69da      	ldr	r2, [r3, #28]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	4013      	ands	r3, r2
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	429a      	cmp	r2, r3
 8006742:	bf0c      	ite	eq
 8006744:	2301      	moveq	r3, #1
 8006746:	2300      	movne	r3, #0
 8006748:	b2db      	uxtb	r3, r3
 800674a:	461a      	mov	r2, r3
 800674c:	79fb      	ldrb	r3, [r7, #7]
 800674e:	429a      	cmp	r2, r3
 8006750:	f43f af4a 	beq.w	80065e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3770      	adds	r7, #112	; 0x70
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006760:	b084      	sub	sp, #16
 8006762:	b580      	push	{r7, lr}
 8006764:	b084      	sub	sp, #16
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	f107 001c 	add.w	r0, r7, #28
 800676e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006774:	2b01      	cmp	r3, #1
 8006776:	d120      	bne.n	80067ba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	4b20      	ldr	r3, [pc, #128]	; (800680c <USB_CoreInit+0xac>)
 800678a:	4013      	ands	r3, r2
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800679c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d105      	bne.n	80067ae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fa92 	bl	8006cd8 <USB_CoreReset>
 80067b4:	4603      	mov	r3, r0
 80067b6:	73fb      	strb	r3, [r7, #15]
 80067b8:	e010      	b.n	80067dc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fa86 	bl	8006cd8 <USB_CoreReset>
 80067cc:	4603      	mov	r3, r0
 80067ce:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80067dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d10b      	bne.n	80067fa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f043 0206 	orr.w	r2, r3, #6
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f043 0220 	orr.w	r2, r3, #32
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006806:	b004      	add	sp, #16
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	ffbdffbf 	.word	0xffbdffbf

08006810 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f023 0201 	bic.w	r2, r3, #1
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	460b      	mov	r3, r1
 800683c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800684e:	78fb      	ldrb	r3, [r7, #3]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d115      	bne.n	8006880 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006860:	2001      	movs	r0, #1
 8006862:	f7fb ff37 	bl	80026d4 <HAL_Delay>
      ms++;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3301      	adds	r3, #1
 800686a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fa25 	bl	8006cbc <USB_GetMode>
 8006872:	4603      	mov	r3, r0
 8006874:	2b01      	cmp	r3, #1
 8006876:	d01e      	beq.n	80068b6 <USB_SetCurrentMode+0x84>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b31      	cmp	r3, #49	; 0x31
 800687c:	d9f0      	bls.n	8006860 <USB_SetCurrentMode+0x2e>
 800687e:	e01a      	b.n	80068b6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d115      	bne.n	80068b2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006892:	2001      	movs	r0, #1
 8006894:	f7fb ff1e 	bl	80026d4 <HAL_Delay>
      ms++;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3301      	adds	r3, #1
 800689c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fa0c 	bl	8006cbc <USB_GetMode>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d005      	beq.n	80068b6 <USB_SetCurrentMode+0x84>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b31      	cmp	r3, #49	; 0x31
 80068ae:	d9f0      	bls.n	8006892 <USB_SetCurrentMode+0x60>
 80068b0:	e001      	b.n	80068b6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e005      	b.n	80068c2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2b32      	cmp	r3, #50	; 0x32
 80068ba:	d101      	bne.n	80068c0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e000      	b.n	80068c2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068cc:	b084      	sub	sp, #16
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b086      	sub	sp, #24
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80068da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80068e6:	2300      	movs	r3, #0
 80068e8:	613b      	str	r3, [r7, #16]
 80068ea:	e009      	b.n	8006900 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	3340      	adds	r3, #64	; 0x40
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	2200      	movs	r2, #0
 80068f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	3301      	adds	r3, #1
 80068fe:	613b      	str	r3, [r7, #16]
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	2b0e      	cmp	r3, #14
 8006904:	d9f2      	bls.n	80068ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006908:	2b00      	cmp	r3, #0
 800690a:	d11c      	bne.n	8006946 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800691a:	f043 0302 	orr.w	r3, r3, #2
 800691e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006924:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	e005      	b.n	8006952 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006958:	461a      	mov	r2, r3
 800695a:	2300      	movs	r3, #0
 800695c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006964:	4619      	mov	r1, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696c:	461a      	mov	r2, r3
 800696e:	680b      	ldr	r3, [r1, #0]
 8006970:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006974:	2b01      	cmp	r3, #1
 8006976:	d10c      	bne.n	8006992 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697a:	2b00      	cmp	r3, #0
 800697c:	d104      	bne.n	8006988 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800697e:	2100      	movs	r1, #0
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f961 	bl	8006c48 <USB_SetDevSpeed>
 8006986:	e008      	b.n	800699a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006988:	2101      	movs	r1, #1
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f95c 	bl	8006c48 <USB_SetDevSpeed>
 8006990:	e003      	b.n	800699a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006992:	2103      	movs	r1, #3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f957 	bl	8006c48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800699a:	2110      	movs	r1, #16
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f8f3 	bl	8006b88 <USB_FlushTxFifo>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f91d 	bl	8006bec <USB_FlushRxFifo>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d001      	beq.n	80069bc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c2:	461a      	mov	r2, r3
 80069c4:	2300      	movs	r3, #0
 80069c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ce:	461a      	mov	r2, r3
 80069d0:	2300      	movs	r3, #0
 80069d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069da:	461a      	mov	r2, r3
 80069dc:	2300      	movs	r3, #0
 80069de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069e0:	2300      	movs	r3, #0
 80069e2:	613b      	str	r3, [r7, #16]
 80069e4:	e043      	b.n	8006a6e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069fc:	d118      	bne.n	8006a30 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10a      	bne.n	8006a1a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a10:	461a      	mov	r2, r3
 8006a12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	e013      	b.n	8006a42 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a26:	461a      	mov	r2, r3
 8006a28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a2c:	6013      	str	r3, [r2, #0]
 8006a2e:	e008      	b.n	8006a42 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	2300      	movs	r3, #0
 8006a40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4e:	461a      	mov	r2, r3
 8006a50:	2300      	movs	r3, #0
 8006a52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a60:	461a      	mov	r2, r3
 8006a62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	613b      	str	r3, [r7, #16]
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d3b7      	bcc.n	80069e6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a76:	2300      	movs	r3, #0
 8006a78:	613b      	str	r3, [r7, #16]
 8006a7a:	e043      	b.n	8006b04 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a92:	d118      	bne.n	8006ac6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10a      	bne.n	8006ab0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006aac:	6013      	str	r3, [r2, #0]
 8006aae:	e013      	b.n	8006ad8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006abc:	461a      	mov	r2, r3
 8006abe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ac2:	6013      	str	r3, [r2, #0]
 8006ac4:	e008      	b.n	8006ad8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af6:	461a      	mov	r2, r3
 8006af8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006afc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	3301      	adds	r3, #1
 8006b02:	613b      	str	r3, [r7, #16]
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d3b7      	bcc.n	8006a7c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d105      	bne.n	8006b40 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	f043 0210 	orr.w	r2, r3, #16
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	699a      	ldr	r2, [r3, #24]
 8006b44:	4b0e      	ldr	r3, [pc, #56]	; (8006b80 <USB_DevInit+0x2b4>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d005      	beq.n	8006b5e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	f043 0208 	orr.w	r2, r3, #8
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d105      	bne.n	8006b70 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	699a      	ldr	r2, [r3, #24]
 8006b68:	4b06      	ldr	r3, [pc, #24]	; (8006b84 <USB_DevInit+0x2b8>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b7c:	b004      	add	sp, #16
 8006b7e:	4770      	bx	lr
 8006b80:	803c3800 	.word	0x803c3800
 8006b84:	40000004 	.word	0x40000004

08006b88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	60fb      	str	r3, [r7, #12]
 8006b9c:	4a12      	ldr	r2, [pc, #72]	; (8006be8 <USB_FlushTxFifo+0x60>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d901      	bls.n	8006ba6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e01a      	b.n	8006bdc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	daf3      	bge.n	8006b96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	019b      	lsls	r3, r3, #6
 8006bb6:	f043 0220 	orr.w	r2, r3, #32
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	60fb      	str	r3, [r7, #12]
 8006bc4:	4a08      	ldr	r2, [pc, #32]	; (8006be8 <USB_FlushTxFifo+0x60>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d901      	bls.n	8006bce <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e006      	b.n	8006bdc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	f003 0320 	and.w	r3, r3, #32
 8006bd6:	2b20      	cmp	r3, #32
 8006bd8:	d0f1      	beq.n	8006bbe <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	00030d40 	.word	0x00030d40

08006bec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	4a11      	ldr	r2, [pc, #68]	; (8006c44 <USB_FlushRxFifo+0x58>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d901      	bls.n	8006c08 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e017      	b.n	8006c38 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	daf3      	bge.n	8006bf8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2210      	movs	r2, #16
 8006c18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	4a08      	ldr	r2, [pc, #32]	; (8006c44 <USB_FlushRxFifo+0x58>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d901      	bls.n	8006c2a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e006      	b.n	8006c38 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f003 0310 	and.w	r3, r3, #16
 8006c32:	2b10      	cmp	r3, #16
 8006c34:	d0f1      	beq.n	8006c1a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	00030d40 	.word	0x00030d40

08006c48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	78fb      	ldrb	r3, [r7, #3]
 8006c62:	68f9      	ldr	r1, [r7, #12]
 8006c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b085      	sub	sp, #20
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c94:	f023 0303 	bic.w	r3, r3, #3
 8006c98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ca8:	f043 0302 	orr.w	r3, r3, #2
 8006cac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	f003 0301 	and.w	r3, r3, #1
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	4a13      	ldr	r2, [pc, #76]	; (8006d38 <USB_CoreReset+0x60>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d901      	bls.n	8006cf4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e01a      	b.n	8006d2a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	daf3      	bge.n	8006ce4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	f043 0201 	orr.w	r2, r3, #1
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	4a09      	ldr	r2, [pc, #36]	; (8006d38 <USB_CoreReset+0x60>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d901      	bls.n	8006d1c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e006      	b.n	8006d2a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d0f1      	beq.n	8006d0c <USB_CoreReset+0x34>

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	00030d40 	.word	0x00030d40

08006d3c <__errno>:
 8006d3c:	4b01      	ldr	r3, [pc, #4]	; (8006d44 <__errno+0x8>)
 8006d3e:	6818      	ldr	r0, [r3, #0]
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	2000005c 	.word	0x2000005c

08006d48 <__libc_init_array>:
 8006d48:	b570      	push	{r4, r5, r6, lr}
 8006d4a:	4d0d      	ldr	r5, [pc, #52]	; (8006d80 <__libc_init_array+0x38>)
 8006d4c:	4c0d      	ldr	r4, [pc, #52]	; (8006d84 <__libc_init_array+0x3c>)
 8006d4e:	1b64      	subs	r4, r4, r5
 8006d50:	10a4      	asrs	r4, r4, #2
 8006d52:	2600      	movs	r6, #0
 8006d54:	42a6      	cmp	r6, r4
 8006d56:	d109      	bne.n	8006d6c <__libc_init_array+0x24>
 8006d58:	4d0b      	ldr	r5, [pc, #44]	; (8006d88 <__libc_init_array+0x40>)
 8006d5a:	4c0c      	ldr	r4, [pc, #48]	; (8006d8c <__libc_init_array+0x44>)
 8006d5c:	f002 fe26 	bl	80099ac <_init>
 8006d60:	1b64      	subs	r4, r4, r5
 8006d62:	10a4      	asrs	r4, r4, #2
 8006d64:	2600      	movs	r6, #0
 8006d66:	42a6      	cmp	r6, r4
 8006d68:	d105      	bne.n	8006d76 <__libc_init_array+0x2e>
 8006d6a:	bd70      	pop	{r4, r5, r6, pc}
 8006d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d70:	4798      	blx	r3
 8006d72:	3601      	adds	r6, #1
 8006d74:	e7ee      	b.n	8006d54 <__libc_init_array+0xc>
 8006d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d7a:	4798      	blx	r3
 8006d7c:	3601      	adds	r6, #1
 8006d7e:	e7f2      	b.n	8006d66 <__libc_init_array+0x1e>
 8006d80:	08009e34 	.word	0x08009e34
 8006d84:	08009e34 	.word	0x08009e34
 8006d88:	08009e34 	.word	0x08009e34
 8006d8c:	08009e38 	.word	0x08009e38

08006d90 <memcpy>:
 8006d90:	440a      	add	r2, r1
 8006d92:	4291      	cmp	r1, r2
 8006d94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006d98:	d100      	bne.n	8006d9c <memcpy+0xc>
 8006d9a:	4770      	bx	lr
 8006d9c:	b510      	push	{r4, lr}
 8006d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006da2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006da6:	4291      	cmp	r1, r2
 8006da8:	d1f9      	bne.n	8006d9e <memcpy+0xe>
 8006daa:	bd10      	pop	{r4, pc}

08006dac <memset>:
 8006dac:	4402      	add	r2, r0
 8006dae:	4603      	mov	r3, r0
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d100      	bne.n	8006db6 <memset+0xa>
 8006db4:	4770      	bx	lr
 8006db6:	f803 1b01 	strb.w	r1, [r3], #1
 8006dba:	e7f9      	b.n	8006db0 <memset+0x4>

08006dbc <__cvt>:
 8006dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dbe:	ed2d 8b02 	vpush	{d8}
 8006dc2:	eeb0 8b40 	vmov.f64	d8, d0
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	4617      	mov	r7, r2
 8006dca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006dcc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006dce:	ee18 2a90 	vmov	r2, s17
 8006dd2:	f025 0520 	bic.w	r5, r5, #32
 8006dd6:	2a00      	cmp	r2, #0
 8006dd8:	bfb6      	itet	lt
 8006dda:	222d      	movlt	r2, #45	; 0x2d
 8006ddc:	2200      	movge	r2, #0
 8006dde:	eeb1 8b40 	vneglt.f64	d8, d0
 8006de2:	2d46      	cmp	r5, #70	; 0x46
 8006de4:	460c      	mov	r4, r1
 8006de6:	701a      	strb	r2, [r3, #0]
 8006de8:	d004      	beq.n	8006df4 <__cvt+0x38>
 8006dea:	2d45      	cmp	r5, #69	; 0x45
 8006dec:	d100      	bne.n	8006df0 <__cvt+0x34>
 8006dee:	3401      	adds	r4, #1
 8006df0:	2102      	movs	r1, #2
 8006df2:	e000      	b.n	8006df6 <__cvt+0x3a>
 8006df4:	2103      	movs	r1, #3
 8006df6:	ab03      	add	r3, sp, #12
 8006df8:	9301      	str	r3, [sp, #4]
 8006dfa:	ab02      	add	r3, sp, #8
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	4622      	mov	r2, r4
 8006e00:	4633      	mov	r3, r6
 8006e02:	eeb0 0b48 	vmov.f64	d0, d8
 8006e06:	f000 fccb 	bl	80077a0 <_dtoa_r>
 8006e0a:	2d47      	cmp	r5, #71	; 0x47
 8006e0c:	d109      	bne.n	8006e22 <__cvt+0x66>
 8006e0e:	07fb      	lsls	r3, r7, #31
 8006e10:	d407      	bmi.n	8006e22 <__cvt+0x66>
 8006e12:	9b03      	ldr	r3, [sp, #12]
 8006e14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e16:	1a1b      	subs	r3, r3, r0
 8006e18:	6013      	str	r3, [r2, #0]
 8006e1a:	b005      	add	sp, #20
 8006e1c:	ecbd 8b02 	vpop	{d8}
 8006e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e22:	2d46      	cmp	r5, #70	; 0x46
 8006e24:	eb00 0204 	add.w	r2, r0, r4
 8006e28:	d10c      	bne.n	8006e44 <__cvt+0x88>
 8006e2a:	7803      	ldrb	r3, [r0, #0]
 8006e2c:	2b30      	cmp	r3, #48	; 0x30
 8006e2e:	d107      	bne.n	8006e40 <__cvt+0x84>
 8006e30:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e38:	bf1c      	itt	ne
 8006e3a:	f1c4 0401 	rsbne	r4, r4, #1
 8006e3e:	6034      	strne	r4, [r6, #0]
 8006e40:	6833      	ldr	r3, [r6, #0]
 8006e42:	441a      	add	r2, r3
 8006e44:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e4c:	bf08      	it	eq
 8006e4e:	9203      	streq	r2, [sp, #12]
 8006e50:	2130      	movs	r1, #48	; 0x30
 8006e52:	9b03      	ldr	r3, [sp, #12]
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d2dc      	bcs.n	8006e12 <__cvt+0x56>
 8006e58:	1c5c      	adds	r4, r3, #1
 8006e5a:	9403      	str	r4, [sp, #12]
 8006e5c:	7019      	strb	r1, [r3, #0]
 8006e5e:	e7f8      	b.n	8006e52 <__cvt+0x96>

08006e60 <__exponent>:
 8006e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e62:	4603      	mov	r3, r0
 8006e64:	2900      	cmp	r1, #0
 8006e66:	bfb8      	it	lt
 8006e68:	4249      	neglt	r1, r1
 8006e6a:	f803 2b02 	strb.w	r2, [r3], #2
 8006e6e:	bfb4      	ite	lt
 8006e70:	222d      	movlt	r2, #45	; 0x2d
 8006e72:	222b      	movge	r2, #43	; 0x2b
 8006e74:	2909      	cmp	r1, #9
 8006e76:	7042      	strb	r2, [r0, #1]
 8006e78:	dd2a      	ble.n	8006ed0 <__exponent+0x70>
 8006e7a:	f10d 0407 	add.w	r4, sp, #7
 8006e7e:	46a4      	mov	ip, r4
 8006e80:	270a      	movs	r7, #10
 8006e82:	46a6      	mov	lr, r4
 8006e84:	460a      	mov	r2, r1
 8006e86:	fb91 f6f7 	sdiv	r6, r1, r7
 8006e8a:	fb07 1516 	mls	r5, r7, r6, r1
 8006e8e:	3530      	adds	r5, #48	; 0x30
 8006e90:	2a63      	cmp	r2, #99	; 0x63
 8006e92:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006e96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	dcf1      	bgt.n	8006e82 <__exponent+0x22>
 8006e9e:	3130      	adds	r1, #48	; 0x30
 8006ea0:	f1ae 0502 	sub.w	r5, lr, #2
 8006ea4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ea8:	1c44      	adds	r4, r0, #1
 8006eaa:	4629      	mov	r1, r5
 8006eac:	4561      	cmp	r1, ip
 8006eae:	d30a      	bcc.n	8006ec6 <__exponent+0x66>
 8006eb0:	f10d 0209 	add.w	r2, sp, #9
 8006eb4:	eba2 020e 	sub.w	r2, r2, lr
 8006eb8:	4565      	cmp	r5, ip
 8006eba:	bf88      	it	hi
 8006ebc:	2200      	movhi	r2, #0
 8006ebe:	4413      	add	r3, r2
 8006ec0:	1a18      	subs	r0, r3, r0
 8006ec2:	b003      	add	sp, #12
 8006ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006eca:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006ece:	e7ed      	b.n	8006eac <__exponent+0x4c>
 8006ed0:	2330      	movs	r3, #48	; 0x30
 8006ed2:	3130      	adds	r1, #48	; 0x30
 8006ed4:	7083      	strb	r3, [r0, #2]
 8006ed6:	70c1      	strb	r1, [r0, #3]
 8006ed8:	1d03      	adds	r3, r0, #4
 8006eda:	e7f1      	b.n	8006ec0 <__exponent+0x60>
 8006edc:	0000      	movs	r0, r0
	...

08006ee0 <_printf_float>:
 8006ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee4:	b08b      	sub	sp, #44	; 0x2c
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006eec:	4616      	mov	r6, r2
 8006eee:	461f      	mov	r7, r3
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	f001 f9d7 	bl	80082a4 <_localeconv_r>
 8006ef6:	f8d0 b000 	ldr.w	fp, [r0]
 8006efa:	4658      	mov	r0, fp
 8006efc:	f7f9 f9a0 	bl	8000240 <strlen>
 8006f00:	2300      	movs	r3, #0
 8006f02:	9308      	str	r3, [sp, #32]
 8006f04:	f8d8 3000 	ldr.w	r3, [r8]
 8006f08:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006f0c:	6822      	ldr	r2, [r4, #0]
 8006f0e:	3307      	adds	r3, #7
 8006f10:	f023 0307 	bic.w	r3, r3, #7
 8006f14:	f103 0108 	add.w	r1, r3, #8
 8006f18:	f8c8 1000 	str.w	r1, [r8]
 8006f1c:	4682      	mov	sl, r0
 8006f1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f22:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006f26:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007188 <_printf_float+0x2a8>
 8006f2a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8006f2e:	eeb0 6bc0 	vabs.f64	d6, d0
 8006f32:	eeb4 6b47 	vcmp.f64	d6, d7
 8006f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f3a:	dd24      	ble.n	8006f86 <_printf_float+0xa6>
 8006f3c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f44:	d502      	bpl.n	8006f4c <_printf_float+0x6c>
 8006f46:	232d      	movs	r3, #45	; 0x2d
 8006f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f4c:	4b90      	ldr	r3, [pc, #576]	; (8007190 <_printf_float+0x2b0>)
 8006f4e:	4891      	ldr	r0, [pc, #580]	; (8007194 <_printf_float+0x2b4>)
 8006f50:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006f54:	bf94      	ite	ls
 8006f56:	4698      	movls	r8, r3
 8006f58:	4680      	movhi	r8, r0
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	6123      	str	r3, [r4, #16]
 8006f5e:	f022 0204 	bic.w	r2, r2, #4
 8006f62:	2300      	movs	r3, #0
 8006f64:	6022      	str	r2, [r4, #0]
 8006f66:	9304      	str	r3, [sp, #16]
 8006f68:	9700      	str	r7, [sp, #0]
 8006f6a:	4633      	mov	r3, r6
 8006f6c:	aa09      	add	r2, sp, #36	; 0x24
 8006f6e:	4621      	mov	r1, r4
 8006f70:	4628      	mov	r0, r5
 8006f72:	f000 f9d3 	bl	800731c <_printf_common>
 8006f76:	3001      	adds	r0, #1
 8006f78:	f040 808a 	bne.w	8007090 <_printf_float+0x1b0>
 8006f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f80:	b00b      	add	sp, #44	; 0x2c
 8006f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f86:	eeb4 0b40 	vcmp.f64	d0, d0
 8006f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f8e:	d709      	bvc.n	8006fa4 <_printf_float+0xc4>
 8006f90:	ee10 3a90 	vmov	r3, s1
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	bfbc      	itt	lt
 8006f98:	232d      	movlt	r3, #45	; 0x2d
 8006f9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f9e:	487e      	ldr	r0, [pc, #504]	; (8007198 <_printf_float+0x2b8>)
 8006fa0:	4b7e      	ldr	r3, [pc, #504]	; (800719c <_printf_float+0x2bc>)
 8006fa2:	e7d5      	b.n	8006f50 <_printf_float+0x70>
 8006fa4:	6863      	ldr	r3, [r4, #4]
 8006fa6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006faa:	9104      	str	r1, [sp, #16]
 8006fac:	1c59      	adds	r1, r3, #1
 8006fae:	d13c      	bne.n	800702a <_printf_float+0x14a>
 8006fb0:	2306      	movs	r3, #6
 8006fb2:	6063      	str	r3, [r4, #4]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	9303      	str	r3, [sp, #12]
 8006fb8:	ab08      	add	r3, sp, #32
 8006fba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006fbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fc2:	ab07      	add	r3, sp, #28
 8006fc4:	6861      	ldr	r1, [r4, #4]
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	6022      	str	r2, [r4, #0]
 8006fca:	f10d 031b 	add.w	r3, sp, #27
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f7ff fef4 	bl	8006dbc <__cvt>
 8006fd4:	9b04      	ldr	r3, [sp, #16]
 8006fd6:	9907      	ldr	r1, [sp, #28]
 8006fd8:	2b47      	cmp	r3, #71	; 0x47
 8006fda:	4680      	mov	r8, r0
 8006fdc:	d108      	bne.n	8006ff0 <_printf_float+0x110>
 8006fde:	1cc8      	adds	r0, r1, #3
 8006fe0:	db02      	blt.n	8006fe8 <_printf_float+0x108>
 8006fe2:	6863      	ldr	r3, [r4, #4]
 8006fe4:	4299      	cmp	r1, r3
 8006fe6:	dd41      	ble.n	800706c <_printf_float+0x18c>
 8006fe8:	f1a9 0902 	sub.w	r9, r9, #2
 8006fec:	fa5f f989 	uxtb.w	r9, r9
 8006ff0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006ff4:	d820      	bhi.n	8007038 <_printf_float+0x158>
 8006ff6:	3901      	subs	r1, #1
 8006ff8:	464a      	mov	r2, r9
 8006ffa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ffe:	9107      	str	r1, [sp, #28]
 8007000:	f7ff ff2e 	bl	8006e60 <__exponent>
 8007004:	9a08      	ldr	r2, [sp, #32]
 8007006:	9004      	str	r0, [sp, #16]
 8007008:	1813      	adds	r3, r2, r0
 800700a:	2a01      	cmp	r2, #1
 800700c:	6123      	str	r3, [r4, #16]
 800700e:	dc02      	bgt.n	8007016 <_printf_float+0x136>
 8007010:	6822      	ldr	r2, [r4, #0]
 8007012:	07d2      	lsls	r2, r2, #31
 8007014:	d501      	bpl.n	800701a <_printf_float+0x13a>
 8007016:	3301      	adds	r3, #1
 8007018:	6123      	str	r3, [r4, #16]
 800701a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d0a2      	beq.n	8006f68 <_printf_float+0x88>
 8007022:	232d      	movs	r3, #45	; 0x2d
 8007024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007028:	e79e      	b.n	8006f68 <_printf_float+0x88>
 800702a:	9904      	ldr	r1, [sp, #16]
 800702c:	2947      	cmp	r1, #71	; 0x47
 800702e:	d1c1      	bne.n	8006fb4 <_printf_float+0xd4>
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1bf      	bne.n	8006fb4 <_printf_float+0xd4>
 8007034:	2301      	movs	r3, #1
 8007036:	e7bc      	b.n	8006fb2 <_printf_float+0xd2>
 8007038:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800703c:	d118      	bne.n	8007070 <_printf_float+0x190>
 800703e:	2900      	cmp	r1, #0
 8007040:	6863      	ldr	r3, [r4, #4]
 8007042:	dd0b      	ble.n	800705c <_printf_float+0x17c>
 8007044:	6121      	str	r1, [r4, #16]
 8007046:	b913      	cbnz	r3, 800704e <_printf_float+0x16e>
 8007048:	6822      	ldr	r2, [r4, #0]
 800704a:	07d0      	lsls	r0, r2, #31
 800704c:	d502      	bpl.n	8007054 <_printf_float+0x174>
 800704e:	3301      	adds	r3, #1
 8007050:	440b      	add	r3, r1
 8007052:	6123      	str	r3, [r4, #16]
 8007054:	2300      	movs	r3, #0
 8007056:	65a1      	str	r1, [r4, #88]	; 0x58
 8007058:	9304      	str	r3, [sp, #16]
 800705a:	e7de      	b.n	800701a <_printf_float+0x13a>
 800705c:	b913      	cbnz	r3, 8007064 <_printf_float+0x184>
 800705e:	6822      	ldr	r2, [r4, #0]
 8007060:	07d2      	lsls	r2, r2, #31
 8007062:	d501      	bpl.n	8007068 <_printf_float+0x188>
 8007064:	3302      	adds	r3, #2
 8007066:	e7f4      	b.n	8007052 <_printf_float+0x172>
 8007068:	2301      	movs	r3, #1
 800706a:	e7f2      	b.n	8007052 <_printf_float+0x172>
 800706c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007070:	9b08      	ldr	r3, [sp, #32]
 8007072:	4299      	cmp	r1, r3
 8007074:	db05      	blt.n	8007082 <_printf_float+0x1a2>
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	6121      	str	r1, [r4, #16]
 800707a:	07d8      	lsls	r0, r3, #31
 800707c:	d5ea      	bpl.n	8007054 <_printf_float+0x174>
 800707e:	1c4b      	adds	r3, r1, #1
 8007080:	e7e7      	b.n	8007052 <_printf_float+0x172>
 8007082:	2900      	cmp	r1, #0
 8007084:	bfd4      	ite	le
 8007086:	f1c1 0202 	rsble	r2, r1, #2
 800708a:	2201      	movgt	r2, #1
 800708c:	4413      	add	r3, r2
 800708e:	e7e0      	b.n	8007052 <_printf_float+0x172>
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	055a      	lsls	r2, r3, #21
 8007094:	d407      	bmi.n	80070a6 <_printf_float+0x1c6>
 8007096:	6923      	ldr	r3, [r4, #16]
 8007098:	4642      	mov	r2, r8
 800709a:	4631      	mov	r1, r6
 800709c:	4628      	mov	r0, r5
 800709e:	47b8      	blx	r7
 80070a0:	3001      	adds	r0, #1
 80070a2:	d12a      	bne.n	80070fa <_printf_float+0x21a>
 80070a4:	e76a      	b.n	8006f7c <_printf_float+0x9c>
 80070a6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80070aa:	f240 80e2 	bls.w	8007272 <_printf_float+0x392>
 80070ae:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80070b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80070b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ba:	d133      	bne.n	8007124 <_printf_float+0x244>
 80070bc:	4a38      	ldr	r2, [pc, #224]	; (80071a0 <_printf_float+0x2c0>)
 80070be:	2301      	movs	r3, #1
 80070c0:	4631      	mov	r1, r6
 80070c2:	4628      	mov	r0, r5
 80070c4:	47b8      	blx	r7
 80070c6:	3001      	adds	r0, #1
 80070c8:	f43f af58 	beq.w	8006f7c <_printf_float+0x9c>
 80070cc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	db02      	blt.n	80070da <_printf_float+0x1fa>
 80070d4:	6823      	ldr	r3, [r4, #0]
 80070d6:	07d8      	lsls	r0, r3, #31
 80070d8:	d50f      	bpl.n	80070fa <_printf_float+0x21a>
 80070da:	4653      	mov	r3, sl
 80070dc:	465a      	mov	r2, fp
 80070de:	4631      	mov	r1, r6
 80070e0:	4628      	mov	r0, r5
 80070e2:	47b8      	blx	r7
 80070e4:	3001      	adds	r0, #1
 80070e6:	f43f af49 	beq.w	8006f7c <_printf_float+0x9c>
 80070ea:	f04f 0800 	mov.w	r8, #0
 80070ee:	f104 091a 	add.w	r9, r4, #26
 80070f2:	9b08      	ldr	r3, [sp, #32]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	4543      	cmp	r3, r8
 80070f8:	dc09      	bgt.n	800710e <_printf_float+0x22e>
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	079b      	lsls	r3, r3, #30
 80070fe:	f100 8108 	bmi.w	8007312 <_printf_float+0x432>
 8007102:	68e0      	ldr	r0, [r4, #12]
 8007104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007106:	4298      	cmp	r0, r3
 8007108:	bfb8      	it	lt
 800710a:	4618      	movlt	r0, r3
 800710c:	e738      	b.n	8006f80 <_printf_float+0xa0>
 800710e:	2301      	movs	r3, #1
 8007110:	464a      	mov	r2, r9
 8007112:	4631      	mov	r1, r6
 8007114:	4628      	mov	r0, r5
 8007116:	47b8      	blx	r7
 8007118:	3001      	adds	r0, #1
 800711a:	f43f af2f 	beq.w	8006f7c <_printf_float+0x9c>
 800711e:	f108 0801 	add.w	r8, r8, #1
 8007122:	e7e6      	b.n	80070f2 <_printf_float+0x212>
 8007124:	9b07      	ldr	r3, [sp, #28]
 8007126:	2b00      	cmp	r3, #0
 8007128:	dc3c      	bgt.n	80071a4 <_printf_float+0x2c4>
 800712a:	4a1d      	ldr	r2, [pc, #116]	; (80071a0 <_printf_float+0x2c0>)
 800712c:	2301      	movs	r3, #1
 800712e:	4631      	mov	r1, r6
 8007130:	4628      	mov	r0, r5
 8007132:	47b8      	blx	r7
 8007134:	3001      	adds	r0, #1
 8007136:	f43f af21 	beq.w	8006f7c <_printf_float+0x9c>
 800713a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800713e:	4313      	orrs	r3, r2
 8007140:	d102      	bne.n	8007148 <_printf_float+0x268>
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	07d9      	lsls	r1, r3, #31
 8007146:	d5d8      	bpl.n	80070fa <_printf_float+0x21a>
 8007148:	4653      	mov	r3, sl
 800714a:	465a      	mov	r2, fp
 800714c:	4631      	mov	r1, r6
 800714e:	4628      	mov	r0, r5
 8007150:	47b8      	blx	r7
 8007152:	3001      	adds	r0, #1
 8007154:	f43f af12 	beq.w	8006f7c <_printf_float+0x9c>
 8007158:	f04f 0900 	mov.w	r9, #0
 800715c:	f104 0a1a 	add.w	sl, r4, #26
 8007160:	9b07      	ldr	r3, [sp, #28]
 8007162:	425b      	negs	r3, r3
 8007164:	454b      	cmp	r3, r9
 8007166:	dc01      	bgt.n	800716c <_printf_float+0x28c>
 8007168:	9b08      	ldr	r3, [sp, #32]
 800716a:	e795      	b.n	8007098 <_printf_float+0x1b8>
 800716c:	2301      	movs	r3, #1
 800716e:	4652      	mov	r2, sl
 8007170:	4631      	mov	r1, r6
 8007172:	4628      	mov	r0, r5
 8007174:	47b8      	blx	r7
 8007176:	3001      	adds	r0, #1
 8007178:	f43f af00 	beq.w	8006f7c <_printf_float+0x9c>
 800717c:	f109 0901 	add.w	r9, r9, #1
 8007180:	e7ee      	b.n	8007160 <_printf_float+0x280>
 8007182:	bf00      	nop
 8007184:	f3af 8000 	nop.w
 8007188:	ffffffff 	.word	0xffffffff
 800718c:	7fefffff 	.word	0x7fefffff
 8007190:	08009a50 	.word	0x08009a50
 8007194:	08009a54 	.word	0x08009a54
 8007198:	08009a5c 	.word	0x08009a5c
 800719c:	08009a58 	.word	0x08009a58
 80071a0:	08009a60 	.word	0x08009a60
 80071a4:	9a08      	ldr	r2, [sp, #32]
 80071a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071a8:	429a      	cmp	r2, r3
 80071aa:	bfa8      	it	ge
 80071ac:	461a      	movge	r2, r3
 80071ae:	2a00      	cmp	r2, #0
 80071b0:	4691      	mov	r9, r2
 80071b2:	dc38      	bgt.n	8007226 <_printf_float+0x346>
 80071b4:	2300      	movs	r3, #0
 80071b6:	9305      	str	r3, [sp, #20]
 80071b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071bc:	f104 021a 	add.w	r2, r4, #26
 80071c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071c2:	9905      	ldr	r1, [sp, #20]
 80071c4:	9304      	str	r3, [sp, #16]
 80071c6:	eba3 0309 	sub.w	r3, r3, r9
 80071ca:	428b      	cmp	r3, r1
 80071cc:	dc33      	bgt.n	8007236 <_printf_float+0x356>
 80071ce:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	db3c      	blt.n	8007250 <_printf_float+0x370>
 80071d6:	6823      	ldr	r3, [r4, #0]
 80071d8:	07da      	lsls	r2, r3, #31
 80071da:	d439      	bmi.n	8007250 <_printf_float+0x370>
 80071dc:	9a08      	ldr	r2, [sp, #32]
 80071de:	9b04      	ldr	r3, [sp, #16]
 80071e0:	9907      	ldr	r1, [sp, #28]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	eba2 0901 	sub.w	r9, r2, r1
 80071e8:	4599      	cmp	r9, r3
 80071ea:	bfa8      	it	ge
 80071ec:	4699      	movge	r9, r3
 80071ee:	f1b9 0f00 	cmp.w	r9, #0
 80071f2:	dc35      	bgt.n	8007260 <_printf_float+0x380>
 80071f4:	f04f 0800 	mov.w	r8, #0
 80071f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071fc:	f104 0a1a 	add.w	sl, r4, #26
 8007200:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007204:	1a9b      	subs	r3, r3, r2
 8007206:	eba3 0309 	sub.w	r3, r3, r9
 800720a:	4543      	cmp	r3, r8
 800720c:	f77f af75 	ble.w	80070fa <_printf_float+0x21a>
 8007210:	2301      	movs	r3, #1
 8007212:	4652      	mov	r2, sl
 8007214:	4631      	mov	r1, r6
 8007216:	4628      	mov	r0, r5
 8007218:	47b8      	blx	r7
 800721a:	3001      	adds	r0, #1
 800721c:	f43f aeae 	beq.w	8006f7c <_printf_float+0x9c>
 8007220:	f108 0801 	add.w	r8, r8, #1
 8007224:	e7ec      	b.n	8007200 <_printf_float+0x320>
 8007226:	4613      	mov	r3, r2
 8007228:	4631      	mov	r1, r6
 800722a:	4642      	mov	r2, r8
 800722c:	4628      	mov	r0, r5
 800722e:	47b8      	blx	r7
 8007230:	3001      	adds	r0, #1
 8007232:	d1bf      	bne.n	80071b4 <_printf_float+0x2d4>
 8007234:	e6a2      	b.n	8006f7c <_printf_float+0x9c>
 8007236:	2301      	movs	r3, #1
 8007238:	4631      	mov	r1, r6
 800723a:	4628      	mov	r0, r5
 800723c:	9204      	str	r2, [sp, #16]
 800723e:	47b8      	blx	r7
 8007240:	3001      	adds	r0, #1
 8007242:	f43f ae9b 	beq.w	8006f7c <_printf_float+0x9c>
 8007246:	9b05      	ldr	r3, [sp, #20]
 8007248:	9a04      	ldr	r2, [sp, #16]
 800724a:	3301      	adds	r3, #1
 800724c:	9305      	str	r3, [sp, #20]
 800724e:	e7b7      	b.n	80071c0 <_printf_float+0x2e0>
 8007250:	4653      	mov	r3, sl
 8007252:	465a      	mov	r2, fp
 8007254:	4631      	mov	r1, r6
 8007256:	4628      	mov	r0, r5
 8007258:	47b8      	blx	r7
 800725a:	3001      	adds	r0, #1
 800725c:	d1be      	bne.n	80071dc <_printf_float+0x2fc>
 800725e:	e68d      	b.n	8006f7c <_printf_float+0x9c>
 8007260:	9a04      	ldr	r2, [sp, #16]
 8007262:	464b      	mov	r3, r9
 8007264:	4442      	add	r2, r8
 8007266:	4631      	mov	r1, r6
 8007268:	4628      	mov	r0, r5
 800726a:	47b8      	blx	r7
 800726c:	3001      	adds	r0, #1
 800726e:	d1c1      	bne.n	80071f4 <_printf_float+0x314>
 8007270:	e684      	b.n	8006f7c <_printf_float+0x9c>
 8007272:	9a08      	ldr	r2, [sp, #32]
 8007274:	2a01      	cmp	r2, #1
 8007276:	dc01      	bgt.n	800727c <_printf_float+0x39c>
 8007278:	07db      	lsls	r3, r3, #31
 800727a:	d537      	bpl.n	80072ec <_printf_float+0x40c>
 800727c:	2301      	movs	r3, #1
 800727e:	4642      	mov	r2, r8
 8007280:	4631      	mov	r1, r6
 8007282:	4628      	mov	r0, r5
 8007284:	47b8      	blx	r7
 8007286:	3001      	adds	r0, #1
 8007288:	f43f ae78 	beq.w	8006f7c <_printf_float+0x9c>
 800728c:	4653      	mov	r3, sl
 800728e:	465a      	mov	r2, fp
 8007290:	4631      	mov	r1, r6
 8007292:	4628      	mov	r0, r5
 8007294:	47b8      	blx	r7
 8007296:	3001      	adds	r0, #1
 8007298:	f43f ae70 	beq.w	8006f7c <_printf_float+0x9c>
 800729c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80072a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80072a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a8:	d01b      	beq.n	80072e2 <_printf_float+0x402>
 80072aa:	9b08      	ldr	r3, [sp, #32]
 80072ac:	f108 0201 	add.w	r2, r8, #1
 80072b0:	3b01      	subs	r3, #1
 80072b2:	4631      	mov	r1, r6
 80072b4:	4628      	mov	r0, r5
 80072b6:	47b8      	blx	r7
 80072b8:	3001      	adds	r0, #1
 80072ba:	d10e      	bne.n	80072da <_printf_float+0x3fa>
 80072bc:	e65e      	b.n	8006f7c <_printf_float+0x9c>
 80072be:	2301      	movs	r3, #1
 80072c0:	464a      	mov	r2, r9
 80072c2:	4631      	mov	r1, r6
 80072c4:	4628      	mov	r0, r5
 80072c6:	47b8      	blx	r7
 80072c8:	3001      	adds	r0, #1
 80072ca:	f43f ae57 	beq.w	8006f7c <_printf_float+0x9c>
 80072ce:	f108 0801 	add.w	r8, r8, #1
 80072d2:	9b08      	ldr	r3, [sp, #32]
 80072d4:	3b01      	subs	r3, #1
 80072d6:	4543      	cmp	r3, r8
 80072d8:	dcf1      	bgt.n	80072be <_printf_float+0x3de>
 80072da:	9b04      	ldr	r3, [sp, #16]
 80072dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072e0:	e6db      	b.n	800709a <_printf_float+0x1ba>
 80072e2:	f04f 0800 	mov.w	r8, #0
 80072e6:	f104 091a 	add.w	r9, r4, #26
 80072ea:	e7f2      	b.n	80072d2 <_printf_float+0x3f2>
 80072ec:	2301      	movs	r3, #1
 80072ee:	4642      	mov	r2, r8
 80072f0:	e7df      	b.n	80072b2 <_printf_float+0x3d2>
 80072f2:	2301      	movs	r3, #1
 80072f4:	464a      	mov	r2, r9
 80072f6:	4631      	mov	r1, r6
 80072f8:	4628      	mov	r0, r5
 80072fa:	47b8      	blx	r7
 80072fc:	3001      	adds	r0, #1
 80072fe:	f43f ae3d 	beq.w	8006f7c <_printf_float+0x9c>
 8007302:	f108 0801 	add.w	r8, r8, #1
 8007306:	68e3      	ldr	r3, [r4, #12]
 8007308:	9909      	ldr	r1, [sp, #36]	; 0x24
 800730a:	1a5b      	subs	r3, r3, r1
 800730c:	4543      	cmp	r3, r8
 800730e:	dcf0      	bgt.n	80072f2 <_printf_float+0x412>
 8007310:	e6f7      	b.n	8007102 <_printf_float+0x222>
 8007312:	f04f 0800 	mov.w	r8, #0
 8007316:	f104 0919 	add.w	r9, r4, #25
 800731a:	e7f4      	b.n	8007306 <_printf_float+0x426>

0800731c <_printf_common>:
 800731c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007320:	4616      	mov	r6, r2
 8007322:	4699      	mov	r9, r3
 8007324:	688a      	ldr	r2, [r1, #8]
 8007326:	690b      	ldr	r3, [r1, #16]
 8007328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800732c:	4293      	cmp	r3, r2
 800732e:	bfb8      	it	lt
 8007330:	4613      	movlt	r3, r2
 8007332:	6033      	str	r3, [r6, #0]
 8007334:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007338:	4607      	mov	r7, r0
 800733a:	460c      	mov	r4, r1
 800733c:	b10a      	cbz	r2, 8007342 <_printf_common+0x26>
 800733e:	3301      	adds	r3, #1
 8007340:	6033      	str	r3, [r6, #0]
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	0699      	lsls	r1, r3, #26
 8007346:	bf42      	ittt	mi
 8007348:	6833      	ldrmi	r3, [r6, #0]
 800734a:	3302      	addmi	r3, #2
 800734c:	6033      	strmi	r3, [r6, #0]
 800734e:	6825      	ldr	r5, [r4, #0]
 8007350:	f015 0506 	ands.w	r5, r5, #6
 8007354:	d106      	bne.n	8007364 <_printf_common+0x48>
 8007356:	f104 0a19 	add.w	sl, r4, #25
 800735a:	68e3      	ldr	r3, [r4, #12]
 800735c:	6832      	ldr	r2, [r6, #0]
 800735e:	1a9b      	subs	r3, r3, r2
 8007360:	42ab      	cmp	r3, r5
 8007362:	dc26      	bgt.n	80073b2 <_printf_common+0x96>
 8007364:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007368:	1e13      	subs	r3, r2, #0
 800736a:	6822      	ldr	r2, [r4, #0]
 800736c:	bf18      	it	ne
 800736e:	2301      	movne	r3, #1
 8007370:	0692      	lsls	r2, r2, #26
 8007372:	d42b      	bmi.n	80073cc <_printf_common+0xb0>
 8007374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007378:	4649      	mov	r1, r9
 800737a:	4638      	mov	r0, r7
 800737c:	47c0      	blx	r8
 800737e:	3001      	adds	r0, #1
 8007380:	d01e      	beq.n	80073c0 <_printf_common+0xa4>
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	68e5      	ldr	r5, [r4, #12]
 8007386:	6832      	ldr	r2, [r6, #0]
 8007388:	f003 0306 	and.w	r3, r3, #6
 800738c:	2b04      	cmp	r3, #4
 800738e:	bf08      	it	eq
 8007390:	1aad      	subeq	r5, r5, r2
 8007392:	68a3      	ldr	r3, [r4, #8]
 8007394:	6922      	ldr	r2, [r4, #16]
 8007396:	bf0c      	ite	eq
 8007398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800739c:	2500      	movne	r5, #0
 800739e:	4293      	cmp	r3, r2
 80073a0:	bfc4      	itt	gt
 80073a2:	1a9b      	subgt	r3, r3, r2
 80073a4:	18ed      	addgt	r5, r5, r3
 80073a6:	2600      	movs	r6, #0
 80073a8:	341a      	adds	r4, #26
 80073aa:	42b5      	cmp	r5, r6
 80073ac:	d11a      	bne.n	80073e4 <_printf_common+0xc8>
 80073ae:	2000      	movs	r0, #0
 80073b0:	e008      	b.n	80073c4 <_printf_common+0xa8>
 80073b2:	2301      	movs	r3, #1
 80073b4:	4652      	mov	r2, sl
 80073b6:	4649      	mov	r1, r9
 80073b8:	4638      	mov	r0, r7
 80073ba:	47c0      	blx	r8
 80073bc:	3001      	adds	r0, #1
 80073be:	d103      	bne.n	80073c8 <_printf_common+0xac>
 80073c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c8:	3501      	adds	r5, #1
 80073ca:	e7c6      	b.n	800735a <_printf_common+0x3e>
 80073cc:	18e1      	adds	r1, r4, r3
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	2030      	movs	r0, #48	; 0x30
 80073d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073d6:	4422      	add	r2, r4
 80073d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073e0:	3302      	adds	r3, #2
 80073e2:	e7c7      	b.n	8007374 <_printf_common+0x58>
 80073e4:	2301      	movs	r3, #1
 80073e6:	4622      	mov	r2, r4
 80073e8:	4649      	mov	r1, r9
 80073ea:	4638      	mov	r0, r7
 80073ec:	47c0      	blx	r8
 80073ee:	3001      	adds	r0, #1
 80073f0:	d0e6      	beq.n	80073c0 <_printf_common+0xa4>
 80073f2:	3601      	adds	r6, #1
 80073f4:	e7d9      	b.n	80073aa <_printf_common+0x8e>
	...

080073f8 <_printf_i>:
 80073f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073fc:	460c      	mov	r4, r1
 80073fe:	4691      	mov	r9, r2
 8007400:	7e27      	ldrb	r7, [r4, #24]
 8007402:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007404:	2f78      	cmp	r7, #120	; 0x78
 8007406:	4680      	mov	r8, r0
 8007408:	469a      	mov	sl, r3
 800740a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800740e:	d807      	bhi.n	8007420 <_printf_i+0x28>
 8007410:	2f62      	cmp	r7, #98	; 0x62
 8007412:	d80a      	bhi.n	800742a <_printf_i+0x32>
 8007414:	2f00      	cmp	r7, #0
 8007416:	f000 80d8 	beq.w	80075ca <_printf_i+0x1d2>
 800741a:	2f58      	cmp	r7, #88	; 0x58
 800741c:	f000 80a3 	beq.w	8007566 <_printf_i+0x16e>
 8007420:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007428:	e03a      	b.n	80074a0 <_printf_i+0xa8>
 800742a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800742e:	2b15      	cmp	r3, #21
 8007430:	d8f6      	bhi.n	8007420 <_printf_i+0x28>
 8007432:	a001      	add	r0, pc, #4	; (adr r0, 8007438 <_printf_i+0x40>)
 8007434:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007438:	08007491 	.word	0x08007491
 800743c:	080074a5 	.word	0x080074a5
 8007440:	08007421 	.word	0x08007421
 8007444:	08007421 	.word	0x08007421
 8007448:	08007421 	.word	0x08007421
 800744c:	08007421 	.word	0x08007421
 8007450:	080074a5 	.word	0x080074a5
 8007454:	08007421 	.word	0x08007421
 8007458:	08007421 	.word	0x08007421
 800745c:	08007421 	.word	0x08007421
 8007460:	08007421 	.word	0x08007421
 8007464:	080075b1 	.word	0x080075b1
 8007468:	080074d5 	.word	0x080074d5
 800746c:	08007593 	.word	0x08007593
 8007470:	08007421 	.word	0x08007421
 8007474:	08007421 	.word	0x08007421
 8007478:	080075d3 	.word	0x080075d3
 800747c:	08007421 	.word	0x08007421
 8007480:	080074d5 	.word	0x080074d5
 8007484:	08007421 	.word	0x08007421
 8007488:	08007421 	.word	0x08007421
 800748c:	0800759b 	.word	0x0800759b
 8007490:	680b      	ldr	r3, [r1, #0]
 8007492:	1d1a      	adds	r2, r3, #4
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	600a      	str	r2, [r1, #0]
 8007498:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800749c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074a0:	2301      	movs	r3, #1
 80074a2:	e0a3      	b.n	80075ec <_printf_i+0x1f4>
 80074a4:	6825      	ldr	r5, [r4, #0]
 80074a6:	6808      	ldr	r0, [r1, #0]
 80074a8:	062e      	lsls	r6, r5, #24
 80074aa:	f100 0304 	add.w	r3, r0, #4
 80074ae:	d50a      	bpl.n	80074c6 <_printf_i+0xce>
 80074b0:	6805      	ldr	r5, [r0, #0]
 80074b2:	600b      	str	r3, [r1, #0]
 80074b4:	2d00      	cmp	r5, #0
 80074b6:	da03      	bge.n	80074c0 <_printf_i+0xc8>
 80074b8:	232d      	movs	r3, #45	; 0x2d
 80074ba:	426d      	negs	r5, r5
 80074bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074c0:	485e      	ldr	r0, [pc, #376]	; (800763c <_printf_i+0x244>)
 80074c2:	230a      	movs	r3, #10
 80074c4:	e019      	b.n	80074fa <_printf_i+0x102>
 80074c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80074ca:	6805      	ldr	r5, [r0, #0]
 80074cc:	600b      	str	r3, [r1, #0]
 80074ce:	bf18      	it	ne
 80074d0:	b22d      	sxthne	r5, r5
 80074d2:	e7ef      	b.n	80074b4 <_printf_i+0xbc>
 80074d4:	680b      	ldr	r3, [r1, #0]
 80074d6:	6825      	ldr	r5, [r4, #0]
 80074d8:	1d18      	adds	r0, r3, #4
 80074da:	6008      	str	r0, [r1, #0]
 80074dc:	0628      	lsls	r0, r5, #24
 80074de:	d501      	bpl.n	80074e4 <_printf_i+0xec>
 80074e0:	681d      	ldr	r5, [r3, #0]
 80074e2:	e002      	b.n	80074ea <_printf_i+0xf2>
 80074e4:	0669      	lsls	r1, r5, #25
 80074e6:	d5fb      	bpl.n	80074e0 <_printf_i+0xe8>
 80074e8:	881d      	ldrh	r5, [r3, #0]
 80074ea:	4854      	ldr	r0, [pc, #336]	; (800763c <_printf_i+0x244>)
 80074ec:	2f6f      	cmp	r7, #111	; 0x6f
 80074ee:	bf0c      	ite	eq
 80074f0:	2308      	moveq	r3, #8
 80074f2:	230a      	movne	r3, #10
 80074f4:	2100      	movs	r1, #0
 80074f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074fa:	6866      	ldr	r6, [r4, #4]
 80074fc:	60a6      	str	r6, [r4, #8]
 80074fe:	2e00      	cmp	r6, #0
 8007500:	bfa2      	ittt	ge
 8007502:	6821      	ldrge	r1, [r4, #0]
 8007504:	f021 0104 	bicge.w	r1, r1, #4
 8007508:	6021      	strge	r1, [r4, #0]
 800750a:	b90d      	cbnz	r5, 8007510 <_printf_i+0x118>
 800750c:	2e00      	cmp	r6, #0
 800750e:	d04d      	beq.n	80075ac <_printf_i+0x1b4>
 8007510:	4616      	mov	r6, r2
 8007512:	fbb5 f1f3 	udiv	r1, r5, r3
 8007516:	fb03 5711 	mls	r7, r3, r1, r5
 800751a:	5dc7      	ldrb	r7, [r0, r7]
 800751c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007520:	462f      	mov	r7, r5
 8007522:	42bb      	cmp	r3, r7
 8007524:	460d      	mov	r5, r1
 8007526:	d9f4      	bls.n	8007512 <_printf_i+0x11a>
 8007528:	2b08      	cmp	r3, #8
 800752a:	d10b      	bne.n	8007544 <_printf_i+0x14c>
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	07df      	lsls	r7, r3, #31
 8007530:	d508      	bpl.n	8007544 <_printf_i+0x14c>
 8007532:	6923      	ldr	r3, [r4, #16]
 8007534:	6861      	ldr	r1, [r4, #4]
 8007536:	4299      	cmp	r1, r3
 8007538:	bfde      	ittt	le
 800753a:	2330      	movle	r3, #48	; 0x30
 800753c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007540:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007544:	1b92      	subs	r2, r2, r6
 8007546:	6122      	str	r2, [r4, #16]
 8007548:	f8cd a000 	str.w	sl, [sp]
 800754c:	464b      	mov	r3, r9
 800754e:	aa03      	add	r2, sp, #12
 8007550:	4621      	mov	r1, r4
 8007552:	4640      	mov	r0, r8
 8007554:	f7ff fee2 	bl	800731c <_printf_common>
 8007558:	3001      	adds	r0, #1
 800755a:	d14c      	bne.n	80075f6 <_printf_i+0x1fe>
 800755c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007560:	b004      	add	sp, #16
 8007562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007566:	4835      	ldr	r0, [pc, #212]	; (800763c <_printf_i+0x244>)
 8007568:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800756c:	6823      	ldr	r3, [r4, #0]
 800756e:	680e      	ldr	r6, [r1, #0]
 8007570:	061f      	lsls	r7, r3, #24
 8007572:	f856 5b04 	ldr.w	r5, [r6], #4
 8007576:	600e      	str	r6, [r1, #0]
 8007578:	d514      	bpl.n	80075a4 <_printf_i+0x1ac>
 800757a:	07d9      	lsls	r1, r3, #31
 800757c:	bf44      	itt	mi
 800757e:	f043 0320 	orrmi.w	r3, r3, #32
 8007582:	6023      	strmi	r3, [r4, #0]
 8007584:	b91d      	cbnz	r5, 800758e <_printf_i+0x196>
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	f023 0320 	bic.w	r3, r3, #32
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	2310      	movs	r3, #16
 8007590:	e7b0      	b.n	80074f4 <_printf_i+0xfc>
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	f043 0320 	orr.w	r3, r3, #32
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	2378      	movs	r3, #120	; 0x78
 800759c:	4828      	ldr	r0, [pc, #160]	; (8007640 <_printf_i+0x248>)
 800759e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075a2:	e7e3      	b.n	800756c <_printf_i+0x174>
 80075a4:	065e      	lsls	r6, r3, #25
 80075a6:	bf48      	it	mi
 80075a8:	b2ad      	uxthmi	r5, r5
 80075aa:	e7e6      	b.n	800757a <_printf_i+0x182>
 80075ac:	4616      	mov	r6, r2
 80075ae:	e7bb      	b.n	8007528 <_printf_i+0x130>
 80075b0:	680b      	ldr	r3, [r1, #0]
 80075b2:	6826      	ldr	r6, [r4, #0]
 80075b4:	6960      	ldr	r0, [r4, #20]
 80075b6:	1d1d      	adds	r5, r3, #4
 80075b8:	600d      	str	r5, [r1, #0]
 80075ba:	0635      	lsls	r5, r6, #24
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	d501      	bpl.n	80075c4 <_printf_i+0x1cc>
 80075c0:	6018      	str	r0, [r3, #0]
 80075c2:	e002      	b.n	80075ca <_printf_i+0x1d2>
 80075c4:	0671      	lsls	r1, r6, #25
 80075c6:	d5fb      	bpl.n	80075c0 <_printf_i+0x1c8>
 80075c8:	8018      	strh	r0, [r3, #0]
 80075ca:	2300      	movs	r3, #0
 80075cc:	6123      	str	r3, [r4, #16]
 80075ce:	4616      	mov	r6, r2
 80075d0:	e7ba      	b.n	8007548 <_printf_i+0x150>
 80075d2:	680b      	ldr	r3, [r1, #0]
 80075d4:	1d1a      	adds	r2, r3, #4
 80075d6:	600a      	str	r2, [r1, #0]
 80075d8:	681e      	ldr	r6, [r3, #0]
 80075da:	6862      	ldr	r2, [r4, #4]
 80075dc:	2100      	movs	r1, #0
 80075de:	4630      	mov	r0, r6
 80075e0:	f7f8 fe36 	bl	8000250 <memchr>
 80075e4:	b108      	cbz	r0, 80075ea <_printf_i+0x1f2>
 80075e6:	1b80      	subs	r0, r0, r6
 80075e8:	6060      	str	r0, [r4, #4]
 80075ea:	6863      	ldr	r3, [r4, #4]
 80075ec:	6123      	str	r3, [r4, #16]
 80075ee:	2300      	movs	r3, #0
 80075f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075f4:	e7a8      	b.n	8007548 <_printf_i+0x150>
 80075f6:	6923      	ldr	r3, [r4, #16]
 80075f8:	4632      	mov	r2, r6
 80075fa:	4649      	mov	r1, r9
 80075fc:	4640      	mov	r0, r8
 80075fe:	47d0      	blx	sl
 8007600:	3001      	adds	r0, #1
 8007602:	d0ab      	beq.n	800755c <_printf_i+0x164>
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	079b      	lsls	r3, r3, #30
 8007608:	d413      	bmi.n	8007632 <_printf_i+0x23a>
 800760a:	68e0      	ldr	r0, [r4, #12]
 800760c:	9b03      	ldr	r3, [sp, #12]
 800760e:	4298      	cmp	r0, r3
 8007610:	bfb8      	it	lt
 8007612:	4618      	movlt	r0, r3
 8007614:	e7a4      	b.n	8007560 <_printf_i+0x168>
 8007616:	2301      	movs	r3, #1
 8007618:	4632      	mov	r2, r6
 800761a:	4649      	mov	r1, r9
 800761c:	4640      	mov	r0, r8
 800761e:	47d0      	blx	sl
 8007620:	3001      	adds	r0, #1
 8007622:	d09b      	beq.n	800755c <_printf_i+0x164>
 8007624:	3501      	adds	r5, #1
 8007626:	68e3      	ldr	r3, [r4, #12]
 8007628:	9903      	ldr	r1, [sp, #12]
 800762a:	1a5b      	subs	r3, r3, r1
 800762c:	42ab      	cmp	r3, r5
 800762e:	dcf2      	bgt.n	8007616 <_printf_i+0x21e>
 8007630:	e7eb      	b.n	800760a <_printf_i+0x212>
 8007632:	2500      	movs	r5, #0
 8007634:	f104 0619 	add.w	r6, r4, #25
 8007638:	e7f5      	b.n	8007626 <_printf_i+0x22e>
 800763a:	bf00      	nop
 800763c:	08009a62 	.word	0x08009a62
 8007640:	08009a73 	.word	0x08009a73

08007644 <siprintf>:
 8007644:	b40e      	push	{r1, r2, r3}
 8007646:	b500      	push	{lr}
 8007648:	b09c      	sub	sp, #112	; 0x70
 800764a:	ab1d      	add	r3, sp, #116	; 0x74
 800764c:	9002      	str	r0, [sp, #8]
 800764e:	9006      	str	r0, [sp, #24]
 8007650:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007654:	4809      	ldr	r0, [pc, #36]	; (800767c <siprintf+0x38>)
 8007656:	9107      	str	r1, [sp, #28]
 8007658:	9104      	str	r1, [sp, #16]
 800765a:	4909      	ldr	r1, [pc, #36]	; (8007680 <siprintf+0x3c>)
 800765c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007660:	9105      	str	r1, [sp, #20]
 8007662:	6800      	ldr	r0, [r0, #0]
 8007664:	9301      	str	r3, [sp, #4]
 8007666:	a902      	add	r1, sp, #8
 8007668:	f001 fabc 	bl	8008be4 <_svfiprintf_r>
 800766c:	9b02      	ldr	r3, [sp, #8]
 800766e:	2200      	movs	r2, #0
 8007670:	701a      	strb	r2, [r3, #0]
 8007672:	b01c      	add	sp, #112	; 0x70
 8007674:	f85d eb04 	ldr.w	lr, [sp], #4
 8007678:	b003      	add	sp, #12
 800767a:	4770      	bx	lr
 800767c:	2000005c 	.word	0x2000005c
 8007680:	ffff0208 	.word	0xffff0208

08007684 <quorem>:
 8007684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007688:	6903      	ldr	r3, [r0, #16]
 800768a:	690c      	ldr	r4, [r1, #16]
 800768c:	42a3      	cmp	r3, r4
 800768e:	4607      	mov	r7, r0
 8007690:	f2c0 8081 	blt.w	8007796 <quorem+0x112>
 8007694:	3c01      	subs	r4, #1
 8007696:	f101 0814 	add.w	r8, r1, #20
 800769a:	f100 0514 	add.w	r5, r0, #20
 800769e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076a2:	9301      	str	r3, [sp, #4]
 80076a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076ac:	3301      	adds	r3, #1
 80076ae:	429a      	cmp	r2, r3
 80076b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80076b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80076bc:	d331      	bcc.n	8007722 <quorem+0x9e>
 80076be:	f04f 0e00 	mov.w	lr, #0
 80076c2:	4640      	mov	r0, r8
 80076c4:	46ac      	mov	ip, r5
 80076c6:	46f2      	mov	sl, lr
 80076c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80076cc:	b293      	uxth	r3, r2
 80076ce:	fb06 e303 	mla	r3, r6, r3, lr
 80076d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	ebaa 0303 	sub.w	r3, sl, r3
 80076dc:	0c12      	lsrs	r2, r2, #16
 80076de:	f8dc a000 	ldr.w	sl, [ip]
 80076e2:	fb06 e202 	mla	r2, r6, r2, lr
 80076e6:	fa13 f38a 	uxtah	r3, r3, sl
 80076ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076ee:	fa1f fa82 	uxth.w	sl, r2
 80076f2:	f8dc 2000 	ldr.w	r2, [ip]
 80076f6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80076fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076fe:	b29b      	uxth	r3, r3
 8007700:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007704:	4581      	cmp	r9, r0
 8007706:	f84c 3b04 	str.w	r3, [ip], #4
 800770a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800770e:	d2db      	bcs.n	80076c8 <quorem+0x44>
 8007710:	f855 300b 	ldr.w	r3, [r5, fp]
 8007714:	b92b      	cbnz	r3, 8007722 <quorem+0x9e>
 8007716:	9b01      	ldr	r3, [sp, #4]
 8007718:	3b04      	subs	r3, #4
 800771a:	429d      	cmp	r5, r3
 800771c:	461a      	mov	r2, r3
 800771e:	d32e      	bcc.n	800777e <quorem+0xfa>
 8007720:	613c      	str	r4, [r7, #16]
 8007722:	4638      	mov	r0, r7
 8007724:	f001 f848 	bl	80087b8 <__mcmp>
 8007728:	2800      	cmp	r0, #0
 800772a:	db24      	blt.n	8007776 <quorem+0xf2>
 800772c:	3601      	adds	r6, #1
 800772e:	4628      	mov	r0, r5
 8007730:	f04f 0c00 	mov.w	ip, #0
 8007734:	f858 2b04 	ldr.w	r2, [r8], #4
 8007738:	f8d0 e000 	ldr.w	lr, [r0]
 800773c:	b293      	uxth	r3, r2
 800773e:	ebac 0303 	sub.w	r3, ip, r3
 8007742:	0c12      	lsrs	r2, r2, #16
 8007744:	fa13 f38e 	uxtah	r3, r3, lr
 8007748:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800774c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007750:	b29b      	uxth	r3, r3
 8007752:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007756:	45c1      	cmp	r9, r8
 8007758:	f840 3b04 	str.w	r3, [r0], #4
 800775c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007760:	d2e8      	bcs.n	8007734 <quorem+0xb0>
 8007762:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007766:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800776a:	b922      	cbnz	r2, 8007776 <quorem+0xf2>
 800776c:	3b04      	subs	r3, #4
 800776e:	429d      	cmp	r5, r3
 8007770:	461a      	mov	r2, r3
 8007772:	d30a      	bcc.n	800778a <quorem+0x106>
 8007774:	613c      	str	r4, [r7, #16]
 8007776:	4630      	mov	r0, r6
 8007778:	b003      	add	sp, #12
 800777a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777e:	6812      	ldr	r2, [r2, #0]
 8007780:	3b04      	subs	r3, #4
 8007782:	2a00      	cmp	r2, #0
 8007784:	d1cc      	bne.n	8007720 <quorem+0x9c>
 8007786:	3c01      	subs	r4, #1
 8007788:	e7c7      	b.n	800771a <quorem+0x96>
 800778a:	6812      	ldr	r2, [r2, #0]
 800778c:	3b04      	subs	r3, #4
 800778e:	2a00      	cmp	r2, #0
 8007790:	d1f0      	bne.n	8007774 <quorem+0xf0>
 8007792:	3c01      	subs	r4, #1
 8007794:	e7eb      	b.n	800776e <quorem+0xea>
 8007796:	2000      	movs	r0, #0
 8007798:	e7ee      	b.n	8007778 <quorem+0xf4>
 800779a:	0000      	movs	r0, r0
 800779c:	0000      	movs	r0, r0
	...

080077a0 <_dtoa_r>:
 80077a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a4:	ec59 8b10 	vmov	r8, r9, d0
 80077a8:	b095      	sub	sp, #84	; 0x54
 80077aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80077ac:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80077ae:	9107      	str	r1, [sp, #28]
 80077b0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80077b4:	4606      	mov	r6, r0
 80077b6:	9209      	str	r2, [sp, #36]	; 0x24
 80077b8:	9310      	str	r3, [sp, #64]	; 0x40
 80077ba:	b975      	cbnz	r5, 80077da <_dtoa_r+0x3a>
 80077bc:	2010      	movs	r0, #16
 80077be:	f000 fd75 	bl	80082ac <malloc>
 80077c2:	4602      	mov	r2, r0
 80077c4:	6270      	str	r0, [r6, #36]	; 0x24
 80077c6:	b920      	cbnz	r0, 80077d2 <_dtoa_r+0x32>
 80077c8:	4bab      	ldr	r3, [pc, #684]	; (8007a78 <_dtoa_r+0x2d8>)
 80077ca:	21ea      	movs	r1, #234	; 0xea
 80077cc:	48ab      	ldr	r0, [pc, #684]	; (8007a7c <_dtoa_r+0x2dc>)
 80077ce:	f001 fb19 	bl	8008e04 <__assert_func>
 80077d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80077d6:	6005      	str	r5, [r0, #0]
 80077d8:	60c5      	str	r5, [r0, #12]
 80077da:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80077dc:	6819      	ldr	r1, [r3, #0]
 80077de:	b151      	cbz	r1, 80077f6 <_dtoa_r+0x56>
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	604a      	str	r2, [r1, #4]
 80077e4:	2301      	movs	r3, #1
 80077e6:	4093      	lsls	r3, r2
 80077e8:	608b      	str	r3, [r1, #8]
 80077ea:	4630      	mov	r0, r6
 80077ec:	f000 fda6 	bl	800833c <_Bfree>
 80077f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80077f2:	2200      	movs	r2, #0
 80077f4:	601a      	str	r2, [r3, #0]
 80077f6:	f1b9 0300 	subs.w	r3, r9, #0
 80077fa:	bfbb      	ittet	lt
 80077fc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007800:	9303      	strlt	r3, [sp, #12]
 8007802:	2300      	movge	r3, #0
 8007804:	2201      	movlt	r2, #1
 8007806:	bfac      	ite	ge
 8007808:	6023      	strge	r3, [r4, #0]
 800780a:	6022      	strlt	r2, [r4, #0]
 800780c:	4b9c      	ldr	r3, [pc, #624]	; (8007a80 <_dtoa_r+0x2e0>)
 800780e:	9c03      	ldr	r4, [sp, #12]
 8007810:	43a3      	bics	r3, r4
 8007812:	d11a      	bne.n	800784a <_dtoa_r+0xaa>
 8007814:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007816:	f242 730f 	movw	r3, #9999	; 0x270f
 800781a:	6013      	str	r3, [r2, #0]
 800781c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007820:	ea53 0308 	orrs.w	r3, r3, r8
 8007824:	f000 8512 	beq.w	800824c <_dtoa_r+0xaac>
 8007828:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800782a:	b953      	cbnz	r3, 8007842 <_dtoa_r+0xa2>
 800782c:	4b95      	ldr	r3, [pc, #596]	; (8007a84 <_dtoa_r+0x2e4>)
 800782e:	e01f      	b.n	8007870 <_dtoa_r+0xd0>
 8007830:	4b95      	ldr	r3, [pc, #596]	; (8007a88 <_dtoa_r+0x2e8>)
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	3308      	adds	r3, #8
 8007836:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007838:	6013      	str	r3, [r2, #0]
 800783a:	9800      	ldr	r0, [sp, #0]
 800783c:	b015      	add	sp, #84	; 0x54
 800783e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007842:	4b90      	ldr	r3, [pc, #576]	; (8007a84 <_dtoa_r+0x2e4>)
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	3303      	adds	r3, #3
 8007848:	e7f5      	b.n	8007836 <_dtoa_r+0x96>
 800784a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800784e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007856:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800785a:	d10b      	bne.n	8007874 <_dtoa_r+0xd4>
 800785c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800785e:	2301      	movs	r3, #1
 8007860:	6013      	str	r3, [r2, #0]
 8007862:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007864:	2b00      	cmp	r3, #0
 8007866:	f000 84ee 	beq.w	8008246 <_dtoa_r+0xaa6>
 800786a:	4888      	ldr	r0, [pc, #544]	; (8007a8c <_dtoa_r+0x2ec>)
 800786c:	6018      	str	r0, [r3, #0]
 800786e:	1e43      	subs	r3, r0, #1
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	e7e2      	b.n	800783a <_dtoa_r+0x9a>
 8007874:	a913      	add	r1, sp, #76	; 0x4c
 8007876:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800787a:	aa12      	add	r2, sp, #72	; 0x48
 800787c:	4630      	mov	r0, r6
 800787e:	f001 f83f 	bl	8008900 <__d2b>
 8007882:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8007886:	4605      	mov	r5, r0
 8007888:	9812      	ldr	r0, [sp, #72]	; 0x48
 800788a:	2900      	cmp	r1, #0
 800788c:	d047      	beq.n	800791e <_dtoa_r+0x17e>
 800788e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007890:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007894:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007898:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800789c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80078a0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80078a4:	2400      	movs	r4, #0
 80078a6:	ec43 2b16 	vmov	d6, r2, r3
 80078aa:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80078ae:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8007a60 <_dtoa_r+0x2c0>
 80078b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80078b6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8007a68 <_dtoa_r+0x2c8>
 80078ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 80078be:	eeb0 7b46 	vmov.f64	d7, d6
 80078c2:	ee06 1a90 	vmov	s13, r1
 80078c6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80078ca:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8007a70 <_dtoa_r+0x2d0>
 80078ce:	eea5 7b06 	vfma.f64	d7, d5, d6
 80078d2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80078d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80078da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078de:	ee16 ba90 	vmov	fp, s13
 80078e2:	9411      	str	r4, [sp, #68]	; 0x44
 80078e4:	d508      	bpl.n	80078f8 <_dtoa_r+0x158>
 80078e6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80078ea:	eeb4 6b47 	vcmp.f64	d6, d7
 80078ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f2:	bf18      	it	ne
 80078f4:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 80078f8:	f1bb 0f16 	cmp.w	fp, #22
 80078fc:	d832      	bhi.n	8007964 <_dtoa_r+0x1c4>
 80078fe:	4b64      	ldr	r3, [pc, #400]	; (8007a90 <_dtoa_r+0x2f0>)
 8007900:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007904:	ed93 7b00 	vldr	d7, [r3]
 8007908:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800790c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007914:	d501      	bpl.n	800791a <_dtoa_r+0x17a>
 8007916:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800791a:	2300      	movs	r3, #0
 800791c:	e023      	b.n	8007966 <_dtoa_r+0x1c6>
 800791e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007920:	4401      	add	r1, r0
 8007922:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007926:	2b20      	cmp	r3, #32
 8007928:	bfc3      	ittte	gt
 800792a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800792e:	fa04 f303 	lslgt.w	r3, r4, r3
 8007932:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007936:	f1c3 0320 	rsble	r3, r3, #32
 800793a:	bfc6      	itte	gt
 800793c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007940:	ea43 0308 	orrgt.w	r3, r3, r8
 8007944:	fa08 f303 	lslle.w	r3, r8, r3
 8007948:	ee07 3a90 	vmov	s15, r3
 800794c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007950:	3901      	subs	r1, #1
 8007952:	ed8d 7b00 	vstr	d7, [sp]
 8007956:	9c01      	ldr	r4, [sp, #4]
 8007958:	e9dd 2300 	ldrd	r2, r3, [sp]
 800795c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007960:	2401      	movs	r4, #1
 8007962:	e7a0      	b.n	80078a6 <_dtoa_r+0x106>
 8007964:	2301      	movs	r3, #1
 8007966:	930f      	str	r3, [sp, #60]	; 0x3c
 8007968:	1a43      	subs	r3, r0, r1
 800796a:	1e5a      	subs	r2, r3, #1
 800796c:	bf45      	ittet	mi
 800796e:	f1c3 0301 	rsbmi	r3, r3, #1
 8007972:	9305      	strmi	r3, [sp, #20]
 8007974:	2300      	movpl	r3, #0
 8007976:	2300      	movmi	r3, #0
 8007978:	9206      	str	r2, [sp, #24]
 800797a:	bf54      	ite	pl
 800797c:	9305      	strpl	r3, [sp, #20]
 800797e:	9306      	strmi	r3, [sp, #24]
 8007980:	f1bb 0f00 	cmp.w	fp, #0
 8007984:	db18      	blt.n	80079b8 <_dtoa_r+0x218>
 8007986:	9b06      	ldr	r3, [sp, #24]
 8007988:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800798c:	445b      	add	r3, fp
 800798e:	9306      	str	r3, [sp, #24]
 8007990:	2300      	movs	r3, #0
 8007992:	9a07      	ldr	r2, [sp, #28]
 8007994:	2a09      	cmp	r2, #9
 8007996:	d849      	bhi.n	8007a2c <_dtoa_r+0x28c>
 8007998:	2a05      	cmp	r2, #5
 800799a:	bfc4      	itt	gt
 800799c:	3a04      	subgt	r2, #4
 800799e:	9207      	strgt	r2, [sp, #28]
 80079a0:	9a07      	ldr	r2, [sp, #28]
 80079a2:	f1a2 0202 	sub.w	r2, r2, #2
 80079a6:	bfcc      	ite	gt
 80079a8:	2400      	movgt	r4, #0
 80079aa:	2401      	movle	r4, #1
 80079ac:	2a03      	cmp	r2, #3
 80079ae:	d848      	bhi.n	8007a42 <_dtoa_r+0x2a2>
 80079b0:	e8df f002 	tbb	[pc, r2]
 80079b4:	3a2c2e0b 	.word	0x3a2c2e0b
 80079b8:	9b05      	ldr	r3, [sp, #20]
 80079ba:	2200      	movs	r2, #0
 80079bc:	eba3 030b 	sub.w	r3, r3, fp
 80079c0:	9305      	str	r3, [sp, #20]
 80079c2:	920e      	str	r2, [sp, #56]	; 0x38
 80079c4:	f1cb 0300 	rsb	r3, fp, #0
 80079c8:	e7e3      	b.n	8007992 <_dtoa_r+0x1f2>
 80079ca:	2200      	movs	r2, #0
 80079cc:	9208      	str	r2, [sp, #32]
 80079ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079d0:	2a00      	cmp	r2, #0
 80079d2:	dc39      	bgt.n	8007a48 <_dtoa_r+0x2a8>
 80079d4:	f04f 0a01 	mov.w	sl, #1
 80079d8:	46d1      	mov	r9, sl
 80079da:	4652      	mov	r2, sl
 80079dc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80079e0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80079e2:	2100      	movs	r1, #0
 80079e4:	6079      	str	r1, [r7, #4]
 80079e6:	2004      	movs	r0, #4
 80079e8:	f100 0c14 	add.w	ip, r0, #20
 80079ec:	4594      	cmp	ip, r2
 80079ee:	6879      	ldr	r1, [r7, #4]
 80079f0:	d92f      	bls.n	8007a52 <_dtoa_r+0x2b2>
 80079f2:	4630      	mov	r0, r6
 80079f4:	930c      	str	r3, [sp, #48]	; 0x30
 80079f6:	f000 fc61 	bl	80082bc <_Balloc>
 80079fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079fc:	9000      	str	r0, [sp, #0]
 80079fe:	4602      	mov	r2, r0
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d149      	bne.n	8007a98 <_dtoa_r+0x2f8>
 8007a04:	4b23      	ldr	r3, [pc, #140]	; (8007a94 <_dtoa_r+0x2f4>)
 8007a06:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007a0a:	e6df      	b.n	80077cc <_dtoa_r+0x2c>
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	e7dd      	b.n	80079cc <_dtoa_r+0x22c>
 8007a10:	2200      	movs	r2, #0
 8007a12:	9208      	str	r2, [sp, #32]
 8007a14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a16:	eb0b 0a02 	add.w	sl, fp, r2
 8007a1a:	f10a 0901 	add.w	r9, sl, #1
 8007a1e:	464a      	mov	r2, r9
 8007a20:	2a01      	cmp	r2, #1
 8007a22:	bfb8      	it	lt
 8007a24:	2201      	movlt	r2, #1
 8007a26:	e7db      	b.n	80079e0 <_dtoa_r+0x240>
 8007a28:	2201      	movs	r2, #1
 8007a2a:	e7f2      	b.n	8007a12 <_dtoa_r+0x272>
 8007a2c:	2401      	movs	r4, #1
 8007a2e:	2200      	movs	r2, #0
 8007a30:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007a34:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007a38:	2100      	movs	r1, #0
 8007a3a:	46d1      	mov	r9, sl
 8007a3c:	2212      	movs	r2, #18
 8007a3e:	9109      	str	r1, [sp, #36]	; 0x24
 8007a40:	e7ce      	b.n	80079e0 <_dtoa_r+0x240>
 8007a42:	2201      	movs	r2, #1
 8007a44:	9208      	str	r2, [sp, #32]
 8007a46:	e7f5      	b.n	8007a34 <_dtoa_r+0x294>
 8007a48:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8007a4c:	46d1      	mov	r9, sl
 8007a4e:	4652      	mov	r2, sl
 8007a50:	e7c6      	b.n	80079e0 <_dtoa_r+0x240>
 8007a52:	3101      	adds	r1, #1
 8007a54:	6079      	str	r1, [r7, #4]
 8007a56:	0040      	lsls	r0, r0, #1
 8007a58:	e7c6      	b.n	80079e8 <_dtoa_r+0x248>
 8007a5a:	bf00      	nop
 8007a5c:	f3af 8000 	nop.w
 8007a60:	636f4361 	.word	0x636f4361
 8007a64:	3fd287a7 	.word	0x3fd287a7
 8007a68:	8b60c8b3 	.word	0x8b60c8b3
 8007a6c:	3fc68a28 	.word	0x3fc68a28
 8007a70:	509f79fb 	.word	0x509f79fb
 8007a74:	3fd34413 	.word	0x3fd34413
 8007a78:	08009a91 	.word	0x08009a91
 8007a7c:	08009aa8 	.word	0x08009aa8
 8007a80:	7ff00000 	.word	0x7ff00000
 8007a84:	08009a8d 	.word	0x08009a8d
 8007a88:	08009a84 	.word	0x08009a84
 8007a8c:	08009a61 	.word	0x08009a61
 8007a90:	08009ba0 	.word	0x08009ba0
 8007a94:	08009b07 	.word	0x08009b07
 8007a98:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8007a9a:	9900      	ldr	r1, [sp, #0]
 8007a9c:	6011      	str	r1, [r2, #0]
 8007a9e:	f1b9 0f0e 	cmp.w	r9, #14
 8007aa2:	d872      	bhi.n	8007b8a <_dtoa_r+0x3ea>
 8007aa4:	2c00      	cmp	r4, #0
 8007aa6:	d070      	beq.n	8007b8a <_dtoa_r+0x3ea>
 8007aa8:	f1bb 0f00 	cmp.w	fp, #0
 8007aac:	f340 80a6 	ble.w	8007bfc <_dtoa_r+0x45c>
 8007ab0:	49ca      	ldr	r1, [pc, #808]	; (8007ddc <_dtoa_r+0x63c>)
 8007ab2:	f00b 020f 	and.w	r2, fp, #15
 8007ab6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007aba:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007abe:	ed92 7b00 	vldr	d7, [r2]
 8007ac2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007ac6:	f000 808d 	beq.w	8007be4 <_dtoa_r+0x444>
 8007aca:	4ac5      	ldr	r2, [pc, #788]	; (8007de0 <_dtoa_r+0x640>)
 8007acc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8007ad0:	ed92 6b08 	vldr	d6, [r2, #32]
 8007ad4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8007ad8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007adc:	f001 010f 	and.w	r1, r1, #15
 8007ae0:	2203      	movs	r2, #3
 8007ae2:	48bf      	ldr	r0, [pc, #764]	; (8007de0 <_dtoa_r+0x640>)
 8007ae4:	2900      	cmp	r1, #0
 8007ae6:	d17f      	bne.n	8007be8 <_dtoa_r+0x448>
 8007ae8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007aec:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007af0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007af4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007af6:	2900      	cmp	r1, #0
 8007af8:	f000 80b2 	beq.w	8007c60 <_dtoa_r+0x4c0>
 8007afc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007b00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b04:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b0c:	f140 80a8 	bpl.w	8007c60 <_dtoa_r+0x4c0>
 8007b10:	f1b9 0f00 	cmp.w	r9, #0
 8007b14:	f000 80a4 	beq.w	8007c60 <_dtoa_r+0x4c0>
 8007b18:	f1ba 0f00 	cmp.w	sl, #0
 8007b1c:	dd31      	ble.n	8007b82 <_dtoa_r+0x3e2>
 8007b1e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007b22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007b26:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b2a:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8007b2e:	3201      	adds	r2, #1
 8007b30:	4650      	mov	r0, sl
 8007b32:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007b36:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007b3a:	ee07 2a90 	vmov	s15, r2
 8007b3e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007b42:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007b46:	ed8d 5b02 	vstr	d5, [sp, #8]
 8007b4a:	9c03      	ldr	r4, [sp, #12]
 8007b4c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007b50:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8007b54:	2800      	cmp	r0, #0
 8007b56:	f040 8086 	bne.w	8007c66 <_dtoa_r+0x4c6>
 8007b5a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007b5e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007b62:	ec42 1b17 	vmov	d7, r1, r2
 8007b66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b6e:	f300 8272 	bgt.w	8008056 <_dtoa_r+0x8b6>
 8007b72:	eeb1 7b47 	vneg.f64	d7, d7
 8007b76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b7e:	f100 8267 	bmi.w	8008050 <_dtoa_r+0x8b0>
 8007b82:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8007b86:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007b8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b8c:	2a00      	cmp	r2, #0
 8007b8e:	f2c0 8129 	blt.w	8007de4 <_dtoa_r+0x644>
 8007b92:	f1bb 0f0e 	cmp.w	fp, #14
 8007b96:	f300 8125 	bgt.w	8007de4 <_dtoa_r+0x644>
 8007b9a:	4b90      	ldr	r3, [pc, #576]	; (8007ddc <_dtoa_r+0x63c>)
 8007b9c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007ba0:	ed93 6b00 	vldr	d6, [r3]
 8007ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f280 80c3 	bge.w	8007d32 <_dtoa_r+0x592>
 8007bac:	f1b9 0f00 	cmp.w	r9, #0
 8007bb0:	f300 80bf 	bgt.w	8007d32 <_dtoa_r+0x592>
 8007bb4:	f040 824c 	bne.w	8008050 <_dtoa_r+0x8b0>
 8007bb8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007bbc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007bc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bc4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bcc:	464c      	mov	r4, r9
 8007bce:	464f      	mov	r7, r9
 8007bd0:	f280 8222 	bge.w	8008018 <_dtoa_r+0x878>
 8007bd4:	f8dd 8000 	ldr.w	r8, [sp]
 8007bd8:	2331      	movs	r3, #49	; 0x31
 8007bda:	f808 3b01 	strb.w	r3, [r8], #1
 8007bde:	f10b 0b01 	add.w	fp, fp, #1
 8007be2:	e21e      	b.n	8008022 <_dtoa_r+0x882>
 8007be4:	2202      	movs	r2, #2
 8007be6:	e77c      	b.n	8007ae2 <_dtoa_r+0x342>
 8007be8:	07cc      	lsls	r4, r1, #31
 8007bea:	d504      	bpl.n	8007bf6 <_dtoa_r+0x456>
 8007bec:	ed90 6b00 	vldr	d6, [r0]
 8007bf0:	3201      	adds	r2, #1
 8007bf2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007bf6:	1049      	asrs	r1, r1, #1
 8007bf8:	3008      	adds	r0, #8
 8007bfa:	e773      	b.n	8007ae4 <_dtoa_r+0x344>
 8007bfc:	d02e      	beq.n	8007c5c <_dtoa_r+0x4bc>
 8007bfe:	f1cb 0100 	rsb	r1, fp, #0
 8007c02:	4a76      	ldr	r2, [pc, #472]	; (8007ddc <_dtoa_r+0x63c>)
 8007c04:	f001 000f 	and.w	r0, r1, #15
 8007c08:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007c0c:	ed92 7b00 	vldr	d7, [r2]
 8007c10:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8007c14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007c18:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007c1c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8007c20:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8007c24:	486e      	ldr	r0, [pc, #440]	; (8007de0 <_dtoa_r+0x640>)
 8007c26:	1109      	asrs	r1, r1, #4
 8007c28:	2400      	movs	r4, #0
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	b939      	cbnz	r1, 8007c3e <_dtoa_r+0x49e>
 8007c2e:	2c00      	cmp	r4, #0
 8007c30:	f43f af60 	beq.w	8007af4 <_dtoa_r+0x354>
 8007c34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c3c:	e75a      	b.n	8007af4 <_dtoa_r+0x354>
 8007c3e:	07cf      	lsls	r7, r1, #31
 8007c40:	d509      	bpl.n	8007c56 <_dtoa_r+0x4b6>
 8007c42:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8007c46:	ed90 7b00 	vldr	d7, [r0]
 8007c4a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007c4e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007c52:	3201      	adds	r2, #1
 8007c54:	2401      	movs	r4, #1
 8007c56:	1049      	asrs	r1, r1, #1
 8007c58:	3008      	adds	r0, #8
 8007c5a:	e7e7      	b.n	8007c2c <_dtoa_r+0x48c>
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	e749      	b.n	8007af4 <_dtoa_r+0x354>
 8007c60:	465f      	mov	r7, fp
 8007c62:	4648      	mov	r0, r9
 8007c64:	e765      	b.n	8007b32 <_dtoa_r+0x392>
 8007c66:	ec42 1b17 	vmov	d7, r1, r2
 8007c6a:	4a5c      	ldr	r2, [pc, #368]	; (8007ddc <_dtoa_r+0x63c>)
 8007c6c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007c70:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007c74:	9a00      	ldr	r2, [sp, #0]
 8007c76:	1814      	adds	r4, r2, r0
 8007c78:	9a08      	ldr	r2, [sp, #32]
 8007c7a:	b352      	cbz	r2, 8007cd2 <_dtoa_r+0x532>
 8007c7c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007c80:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007c84:	f8dd 8000 	ldr.w	r8, [sp]
 8007c88:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007c8c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007c90:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007c94:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007c98:	ee14 2a90 	vmov	r2, s9
 8007c9c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007ca0:	3230      	adds	r2, #48	; 0x30
 8007ca2:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007ca6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cae:	f808 2b01 	strb.w	r2, [r8], #1
 8007cb2:	d439      	bmi.n	8007d28 <_dtoa_r+0x588>
 8007cb4:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007cb8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cc0:	d472      	bmi.n	8007da8 <_dtoa_r+0x608>
 8007cc2:	45a0      	cmp	r8, r4
 8007cc4:	f43f af5d 	beq.w	8007b82 <_dtoa_r+0x3e2>
 8007cc8:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007ccc:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007cd0:	e7e0      	b.n	8007c94 <_dtoa_r+0x4f4>
 8007cd2:	f8dd 8000 	ldr.w	r8, [sp]
 8007cd6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007cda:	4621      	mov	r1, r4
 8007cdc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007ce0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007ce4:	ee14 2a90 	vmov	r2, s9
 8007ce8:	3230      	adds	r2, #48	; 0x30
 8007cea:	f808 2b01 	strb.w	r2, [r8], #1
 8007cee:	45a0      	cmp	r8, r4
 8007cf0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007cf4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007cf8:	d118      	bne.n	8007d2c <_dtoa_r+0x58c>
 8007cfa:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007cfe:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007d02:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d0a:	dc4d      	bgt.n	8007da8 <_dtoa_r+0x608>
 8007d0c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007d10:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d18:	f57f af33 	bpl.w	8007b82 <_dtoa_r+0x3e2>
 8007d1c:	4688      	mov	r8, r1
 8007d1e:	3901      	subs	r1, #1
 8007d20:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007d24:	2b30      	cmp	r3, #48	; 0x30
 8007d26:	d0f9      	beq.n	8007d1c <_dtoa_r+0x57c>
 8007d28:	46bb      	mov	fp, r7
 8007d2a:	e02a      	b.n	8007d82 <_dtoa_r+0x5e2>
 8007d2c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007d30:	e7d6      	b.n	8007ce0 <_dtoa_r+0x540>
 8007d32:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d36:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007d3a:	f8dd 8000 	ldr.w	r8, [sp]
 8007d3e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007d42:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007d46:	ee15 3a10 	vmov	r3, s10
 8007d4a:	3330      	adds	r3, #48	; 0x30
 8007d4c:	f808 3b01 	strb.w	r3, [r8], #1
 8007d50:	9b00      	ldr	r3, [sp, #0]
 8007d52:	eba8 0303 	sub.w	r3, r8, r3
 8007d56:	4599      	cmp	r9, r3
 8007d58:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007d5c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007d60:	d133      	bne.n	8007dca <_dtoa_r+0x62a>
 8007d62:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007d66:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d6e:	dc1a      	bgt.n	8007da6 <_dtoa_r+0x606>
 8007d70:	eeb4 7b46 	vcmp.f64	d7, d6
 8007d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d78:	d103      	bne.n	8007d82 <_dtoa_r+0x5e2>
 8007d7a:	ee15 3a10 	vmov	r3, s10
 8007d7e:	07d9      	lsls	r1, r3, #31
 8007d80:	d411      	bmi.n	8007da6 <_dtoa_r+0x606>
 8007d82:	4629      	mov	r1, r5
 8007d84:	4630      	mov	r0, r6
 8007d86:	f000 fad9 	bl	800833c <_Bfree>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d8e:	f888 3000 	strb.w	r3, [r8]
 8007d92:	f10b 0301 	add.w	r3, fp, #1
 8007d96:	6013      	str	r3, [r2, #0]
 8007d98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f43f ad4d 	beq.w	800783a <_dtoa_r+0x9a>
 8007da0:	f8c3 8000 	str.w	r8, [r3]
 8007da4:	e549      	b.n	800783a <_dtoa_r+0x9a>
 8007da6:	465f      	mov	r7, fp
 8007da8:	4643      	mov	r3, r8
 8007daa:	4698      	mov	r8, r3
 8007dac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007db0:	2a39      	cmp	r2, #57	; 0x39
 8007db2:	d106      	bne.n	8007dc2 <_dtoa_r+0x622>
 8007db4:	9a00      	ldr	r2, [sp, #0]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d1f7      	bne.n	8007daa <_dtoa_r+0x60a>
 8007dba:	9900      	ldr	r1, [sp, #0]
 8007dbc:	2230      	movs	r2, #48	; 0x30
 8007dbe:	3701      	adds	r7, #1
 8007dc0:	700a      	strb	r2, [r1, #0]
 8007dc2:	781a      	ldrb	r2, [r3, #0]
 8007dc4:	3201      	adds	r2, #1
 8007dc6:	701a      	strb	r2, [r3, #0]
 8007dc8:	e7ae      	b.n	8007d28 <_dtoa_r+0x588>
 8007dca:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007dce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dd6:	d1b2      	bne.n	8007d3e <_dtoa_r+0x59e>
 8007dd8:	e7d3      	b.n	8007d82 <_dtoa_r+0x5e2>
 8007dda:	bf00      	nop
 8007ddc:	08009ba0 	.word	0x08009ba0
 8007de0:	08009b78 	.word	0x08009b78
 8007de4:	9908      	ldr	r1, [sp, #32]
 8007de6:	2900      	cmp	r1, #0
 8007de8:	f000 80d1 	beq.w	8007f8e <_dtoa_r+0x7ee>
 8007dec:	9907      	ldr	r1, [sp, #28]
 8007dee:	2901      	cmp	r1, #1
 8007df0:	f300 80b4 	bgt.w	8007f5c <_dtoa_r+0x7bc>
 8007df4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007df6:	2900      	cmp	r1, #0
 8007df8:	f000 80ac 	beq.w	8007f54 <_dtoa_r+0x7b4>
 8007dfc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007e00:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007e04:	461c      	mov	r4, r3
 8007e06:	930a      	str	r3, [sp, #40]	; 0x28
 8007e08:	9b05      	ldr	r3, [sp, #20]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	9305      	str	r3, [sp, #20]
 8007e0e:	9b06      	ldr	r3, [sp, #24]
 8007e10:	2101      	movs	r1, #1
 8007e12:	4413      	add	r3, r2
 8007e14:	4630      	mov	r0, r6
 8007e16:	9306      	str	r3, [sp, #24]
 8007e18:	f000 fb4c 	bl	80084b4 <__i2b>
 8007e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e1e:	4607      	mov	r7, r0
 8007e20:	f1b8 0f00 	cmp.w	r8, #0
 8007e24:	dd0d      	ble.n	8007e42 <_dtoa_r+0x6a2>
 8007e26:	9a06      	ldr	r2, [sp, #24]
 8007e28:	2a00      	cmp	r2, #0
 8007e2a:	dd0a      	ble.n	8007e42 <_dtoa_r+0x6a2>
 8007e2c:	4542      	cmp	r2, r8
 8007e2e:	9905      	ldr	r1, [sp, #20]
 8007e30:	bfa8      	it	ge
 8007e32:	4642      	movge	r2, r8
 8007e34:	1a89      	subs	r1, r1, r2
 8007e36:	9105      	str	r1, [sp, #20]
 8007e38:	9906      	ldr	r1, [sp, #24]
 8007e3a:	eba8 0802 	sub.w	r8, r8, r2
 8007e3e:	1a8a      	subs	r2, r1, r2
 8007e40:	9206      	str	r2, [sp, #24]
 8007e42:	b303      	cbz	r3, 8007e86 <_dtoa_r+0x6e6>
 8007e44:	9a08      	ldr	r2, [sp, #32]
 8007e46:	2a00      	cmp	r2, #0
 8007e48:	f000 80a6 	beq.w	8007f98 <_dtoa_r+0x7f8>
 8007e4c:	2c00      	cmp	r4, #0
 8007e4e:	dd13      	ble.n	8007e78 <_dtoa_r+0x6d8>
 8007e50:	4639      	mov	r1, r7
 8007e52:	4622      	mov	r2, r4
 8007e54:	4630      	mov	r0, r6
 8007e56:	930c      	str	r3, [sp, #48]	; 0x30
 8007e58:	f000 fbe8 	bl	800862c <__pow5mult>
 8007e5c:	462a      	mov	r2, r5
 8007e5e:	4601      	mov	r1, r0
 8007e60:	4607      	mov	r7, r0
 8007e62:	4630      	mov	r0, r6
 8007e64:	f000 fb3c 	bl	80084e0 <__multiply>
 8007e68:	4629      	mov	r1, r5
 8007e6a:	900a      	str	r0, [sp, #40]	; 0x28
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	f000 fa65 	bl	800833c <_Bfree>
 8007e72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e76:	4615      	mov	r5, r2
 8007e78:	1b1a      	subs	r2, r3, r4
 8007e7a:	d004      	beq.n	8007e86 <_dtoa_r+0x6e6>
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f000 fbd4 	bl	800862c <__pow5mult>
 8007e84:	4605      	mov	r5, r0
 8007e86:	2101      	movs	r1, #1
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f000 fb13 	bl	80084b4 <__i2b>
 8007e8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	4604      	mov	r4, r0
 8007e94:	f340 8082 	ble.w	8007f9c <_dtoa_r+0x7fc>
 8007e98:	461a      	mov	r2, r3
 8007e9a:	4601      	mov	r1, r0
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f000 fbc5 	bl	800862c <__pow5mult>
 8007ea2:	9b07      	ldr	r3, [sp, #28]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	dd7b      	ble.n	8007fa2 <_dtoa_r+0x802>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	930a      	str	r3, [sp, #40]	; 0x28
 8007eae:	6922      	ldr	r2, [r4, #16]
 8007eb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007eb4:	6910      	ldr	r0, [r2, #16]
 8007eb6:	f000 faad 	bl	8008414 <__hi0bits>
 8007eba:	f1c0 0020 	rsb	r0, r0, #32
 8007ebe:	9b06      	ldr	r3, [sp, #24]
 8007ec0:	4418      	add	r0, r3
 8007ec2:	f010 001f 	ands.w	r0, r0, #31
 8007ec6:	f000 808d 	beq.w	8007fe4 <_dtoa_r+0x844>
 8007eca:	f1c0 0220 	rsb	r2, r0, #32
 8007ece:	2a04      	cmp	r2, #4
 8007ed0:	f340 8086 	ble.w	8007fe0 <_dtoa_r+0x840>
 8007ed4:	f1c0 001c 	rsb	r0, r0, #28
 8007ed8:	9b05      	ldr	r3, [sp, #20]
 8007eda:	4403      	add	r3, r0
 8007edc:	9305      	str	r3, [sp, #20]
 8007ede:	9b06      	ldr	r3, [sp, #24]
 8007ee0:	4403      	add	r3, r0
 8007ee2:	4480      	add	r8, r0
 8007ee4:	9306      	str	r3, [sp, #24]
 8007ee6:	9b05      	ldr	r3, [sp, #20]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	dd05      	ble.n	8007ef8 <_dtoa_r+0x758>
 8007eec:	4629      	mov	r1, r5
 8007eee:	461a      	mov	r2, r3
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	f000 fbf5 	bl	80086e0 <__lshift>
 8007ef6:	4605      	mov	r5, r0
 8007ef8:	9b06      	ldr	r3, [sp, #24]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	dd05      	ble.n	8007f0a <_dtoa_r+0x76a>
 8007efe:	4621      	mov	r1, r4
 8007f00:	461a      	mov	r2, r3
 8007f02:	4630      	mov	r0, r6
 8007f04:	f000 fbec 	bl	80086e0 <__lshift>
 8007f08:	4604      	mov	r4, r0
 8007f0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d06b      	beq.n	8007fe8 <_dtoa_r+0x848>
 8007f10:	4621      	mov	r1, r4
 8007f12:	4628      	mov	r0, r5
 8007f14:	f000 fc50 	bl	80087b8 <__mcmp>
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	da65      	bge.n	8007fe8 <_dtoa_r+0x848>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	4629      	mov	r1, r5
 8007f20:	220a      	movs	r2, #10
 8007f22:	4630      	mov	r0, r6
 8007f24:	f000 fa2c 	bl	8008380 <__multadd>
 8007f28:	9b08      	ldr	r3, [sp, #32]
 8007f2a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007f2e:	4605      	mov	r5, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f000 8192 	beq.w	800825a <_dtoa_r+0xaba>
 8007f36:	4639      	mov	r1, r7
 8007f38:	2300      	movs	r3, #0
 8007f3a:	220a      	movs	r2, #10
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	f000 fa1f 	bl	8008380 <__multadd>
 8007f42:	f1ba 0f00 	cmp.w	sl, #0
 8007f46:	4607      	mov	r7, r0
 8007f48:	f300 808e 	bgt.w	8008068 <_dtoa_r+0x8c8>
 8007f4c:	9b07      	ldr	r3, [sp, #28]
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	dc51      	bgt.n	8007ff6 <_dtoa_r+0x856>
 8007f52:	e089      	b.n	8008068 <_dtoa_r+0x8c8>
 8007f54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007f5a:	e751      	b.n	8007e00 <_dtoa_r+0x660>
 8007f5c:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8007f60:	42a3      	cmp	r3, r4
 8007f62:	bfbf      	itttt	lt
 8007f64:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007f66:	1ae3      	sublt	r3, r4, r3
 8007f68:	18d2      	addlt	r2, r2, r3
 8007f6a:	4613      	movlt	r3, r2
 8007f6c:	bfb7      	itett	lt
 8007f6e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007f70:	1b1c      	subge	r4, r3, r4
 8007f72:	4623      	movlt	r3, r4
 8007f74:	2400      	movlt	r4, #0
 8007f76:	f1b9 0f00 	cmp.w	r9, #0
 8007f7a:	bfb5      	itete	lt
 8007f7c:	9a05      	ldrlt	r2, [sp, #20]
 8007f7e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8007f82:	eba2 0809 	sublt.w	r8, r2, r9
 8007f86:	464a      	movge	r2, r9
 8007f88:	bfb8      	it	lt
 8007f8a:	2200      	movlt	r2, #0
 8007f8c:	e73b      	b.n	8007e06 <_dtoa_r+0x666>
 8007f8e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007f92:	9f08      	ldr	r7, [sp, #32]
 8007f94:	461c      	mov	r4, r3
 8007f96:	e743      	b.n	8007e20 <_dtoa_r+0x680>
 8007f98:	461a      	mov	r2, r3
 8007f9a:	e76f      	b.n	8007e7c <_dtoa_r+0x6dc>
 8007f9c:	9b07      	ldr	r3, [sp, #28]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	dc18      	bgt.n	8007fd4 <_dtoa_r+0x834>
 8007fa2:	9b02      	ldr	r3, [sp, #8]
 8007fa4:	b9b3      	cbnz	r3, 8007fd4 <_dtoa_r+0x834>
 8007fa6:	9b03      	ldr	r3, [sp, #12]
 8007fa8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007fac:	b9a2      	cbnz	r2, 8007fd8 <_dtoa_r+0x838>
 8007fae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007fb2:	0d12      	lsrs	r2, r2, #20
 8007fb4:	0512      	lsls	r2, r2, #20
 8007fb6:	b18a      	cbz	r2, 8007fdc <_dtoa_r+0x83c>
 8007fb8:	9b05      	ldr	r3, [sp, #20]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	9305      	str	r3, [sp, #20]
 8007fbe:	9b06      	ldr	r3, [sp, #24]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	9306      	str	r3, [sp, #24]
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	930a      	str	r3, [sp, #40]	; 0x28
 8007fc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f47f af6f 	bne.w	8007eae <_dtoa_r+0x70e>
 8007fd0:	2001      	movs	r0, #1
 8007fd2:	e774      	b.n	8007ebe <_dtoa_r+0x71e>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	e7f6      	b.n	8007fc6 <_dtoa_r+0x826>
 8007fd8:	9b02      	ldr	r3, [sp, #8]
 8007fda:	e7f4      	b.n	8007fc6 <_dtoa_r+0x826>
 8007fdc:	920a      	str	r2, [sp, #40]	; 0x28
 8007fde:	e7f3      	b.n	8007fc8 <_dtoa_r+0x828>
 8007fe0:	d081      	beq.n	8007ee6 <_dtoa_r+0x746>
 8007fe2:	4610      	mov	r0, r2
 8007fe4:	301c      	adds	r0, #28
 8007fe6:	e777      	b.n	8007ed8 <_dtoa_r+0x738>
 8007fe8:	f1b9 0f00 	cmp.w	r9, #0
 8007fec:	dc37      	bgt.n	800805e <_dtoa_r+0x8be>
 8007fee:	9b07      	ldr	r3, [sp, #28]
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	dd34      	ble.n	800805e <_dtoa_r+0x8be>
 8007ff4:	46ca      	mov	sl, r9
 8007ff6:	f1ba 0f00 	cmp.w	sl, #0
 8007ffa:	d10d      	bne.n	8008018 <_dtoa_r+0x878>
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	4653      	mov	r3, sl
 8008000:	2205      	movs	r2, #5
 8008002:	4630      	mov	r0, r6
 8008004:	f000 f9bc 	bl	8008380 <__multadd>
 8008008:	4601      	mov	r1, r0
 800800a:	4604      	mov	r4, r0
 800800c:	4628      	mov	r0, r5
 800800e:	f000 fbd3 	bl	80087b8 <__mcmp>
 8008012:	2800      	cmp	r0, #0
 8008014:	f73f adde 	bgt.w	8007bd4 <_dtoa_r+0x434>
 8008018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800801a:	f8dd 8000 	ldr.w	r8, [sp]
 800801e:	ea6f 0b03 	mvn.w	fp, r3
 8008022:	f04f 0900 	mov.w	r9, #0
 8008026:	4621      	mov	r1, r4
 8008028:	4630      	mov	r0, r6
 800802a:	f000 f987 	bl	800833c <_Bfree>
 800802e:	2f00      	cmp	r7, #0
 8008030:	f43f aea7 	beq.w	8007d82 <_dtoa_r+0x5e2>
 8008034:	f1b9 0f00 	cmp.w	r9, #0
 8008038:	d005      	beq.n	8008046 <_dtoa_r+0x8a6>
 800803a:	45b9      	cmp	r9, r7
 800803c:	d003      	beq.n	8008046 <_dtoa_r+0x8a6>
 800803e:	4649      	mov	r1, r9
 8008040:	4630      	mov	r0, r6
 8008042:	f000 f97b 	bl	800833c <_Bfree>
 8008046:	4639      	mov	r1, r7
 8008048:	4630      	mov	r0, r6
 800804a:	f000 f977 	bl	800833c <_Bfree>
 800804e:	e698      	b.n	8007d82 <_dtoa_r+0x5e2>
 8008050:	2400      	movs	r4, #0
 8008052:	4627      	mov	r7, r4
 8008054:	e7e0      	b.n	8008018 <_dtoa_r+0x878>
 8008056:	46bb      	mov	fp, r7
 8008058:	4604      	mov	r4, r0
 800805a:	4607      	mov	r7, r0
 800805c:	e5ba      	b.n	8007bd4 <_dtoa_r+0x434>
 800805e:	9b08      	ldr	r3, [sp, #32]
 8008060:	46ca      	mov	sl, r9
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 8100 	beq.w	8008268 <_dtoa_r+0xac8>
 8008068:	f1b8 0f00 	cmp.w	r8, #0
 800806c:	dd05      	ble.n	800807a <_dtoa_r+0x8da>
 800806e:	4639      	mov	r1, r7
 8008070:	4642      	mov	r2, r8
 8008072:	4630      	mov	r0, r6
 8008074:	f000 fb34 	bl	80086e0 <__lshift>
 8008078:	4607      	mov	r7, r0
 800807a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800807c:	2b00      	cmp	r3, #0
 800807e:	d05d      	beq.n	800813c <_dtoa_r+0x99c>
 8008080:	6879      	ldr	r1, [r7, #4]
 8008082:	4630      	mov	r0, r6
 8008084:	f000 f91a 	bl	80082bc <_Balloc>
 8008088:	4680      	mov	r8, r0
 800808a:	b928      	cbnz	r0, 8008098 <_dtoa_r+0x8f8>
 800808c:	4b82      	ldr	r3, [pc, #520]	; (8008298 <_dtoa_r+0xaf8>)
 800808e:	4602      	mov	r2, r0
 8008090:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008094:	f7ff bb9a 	b.w	80077cc <_dtoa_r+0x2c>
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	3202      	adds	r2, #2
 800809c:	0092      	lsls	r2, r2, #2
 800809e:	f107 010c 	add.w	r1, r7, #12
 80080a2:	300c      	adds	r0, #12
 80080a4:	f7fe fe74 	bl	8006d90 <memcpy>
 80080a8:	2201      	movs	r2, #1
 80080aa:	4641      	mov	r1, r8
 80080ac:	4630      	mov	r0, r6
 80080ae:	f000 fb17 	bl	80086e0 <__lshift>
 80080b2:	9b00      	ldr	r3, [sp, #0]
 80080b4:	3301      	adds	r3, #1
 80080b6:	9305      	str	r3, [sp, #20]
 80080b8:	9b00      	ldr	r3, [sp, #0]
 80080ba:	4453      	add	r3, sl
 80080bc:	9309      	str	r3, [sp, #36]	; 0x24
 80080be:	9b02      	ldr	r3, [sp, #8]
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	46b9      	mov	r9, r7
 80080c6:	9308      	str	r3, [sp, #32]
 80080c8:	4607      	mov	r7, r0
 80080ca:	9b05      	ldr	r3, [sp, #20]
 80080cc:	4621      	mov	r1, r4
 80080ce:	3b01      	subs	r3, #1
 80080d0:	4628      	mov	r0, r5
 80080d2:	9302      	str	r3, [sp, #8]
 80080d4:	f7ff fad6 	bl	8007684 <quorem>
 80080d8:	4603      	mov	r3, r0
 80080da:	3330      	adds	r3, #48	; 0x30
 80080dc:	9006      	str	r0, [sp, #24]
 80080de:	4649      	mov	r1, r9
 80080e0:	4628      	mov	r0, r5
 80080e2:	930a      	str	r3, [sp, #40]	; 0x28
 80080e4:	f000 fb68 	bl	80087b8 <__mcmp>
 80080e8:	463a      	mov	r2, r7
 80080ea:	4682      	mov	sl, r0
 80080ec:	4621      	mov	r1, r4
 80080ee:	4630      	mov	r0, r6
 80080f0:	f000 fb7e 	bl	80087f0 <__mdiff>
 80080f4:	68c2      	ldr	r2, [r0, #12]
 80080f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080f8:	4680      	mov	r8, r0
 80080fa:	bb0a      	cbnz	r2, 8008140 <_dtoa_r+0x9a0>
 80080fc:	4601      	mov	r1, r0
 80080fe:	4628      	mov	r0, r5
 8008100:	f000 fb5a 	bl	80087b8 <__mcmp>
 8008104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008106:	4602      	mov	r2, r0
 8008108:	4641      	mov	r1, r8
 800810a:	4630      	mov	r0, r6
 800810c:	920e      	str	r2, [sp, #56]	; 0x38
 800810e:	930a      	str	r3, [sp, #40]	; 0x28
 8008110:	f000 f914 	bl	800833c <_Bfree>
 8008114:	9b07      	ldr	r3, [sp, #28]
 8008116:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008118:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800811c:	ea43 0102 	orr.w	r1, r3, r2
 8008120:	9b08      	ldr	r3, [sp, #32]
 8008122:	430b      	orrs	r3, r1
 8008124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008126:	d10d      	bne.n	8008144 <_dtoa_r+0x9a4>
 8008128:	2b39      	cmp	r3, #57	; 0x39
 800812a:	d029      	beq.n	8008180 <_dtoa_r+0x9e0>
 800812c:	f1ba 0f00 	cmp.w	sl, #0
 8008130:	dd01      	ble.n	8008136 <_dtoa_r+0x996>
 8008132:	9b06      	ldr	r3, [sp, #24]
 8008134:	3331      	adds	r3, #49	; 0x31
 8008136:	9a02      	ldr	r2, [sp, #8]
 8008138:	7013      	strb	r3, [r2, #0]
 800813a:	e774      	b.n	8008026 <_dtoa_r+0x886>
 800813c:	4638      	mov	r0, r7
 800813e:	e7b8      	b.n	80080b2 <_dtoa_r+0x912>
 8008140:	2201      	movs	r2, #1
 8008142:	e7e1      	b.n	8008108 <_dtoa_r+0x968>
 8008144:	f1ba 0f00 	cmp.w	sl, #0
 8008148:	db06      	blt.n	8008158 <_dtoa_r+0x9b8>
 800814a:	9907      	ldr	r1, [sp, #28]
 800814c:	ea41 0a0a 	orr.w	sl, r1, sl
 8008150:	9908      	ldr	r1, [sp, #32]
 8008152:	ea5a 0101 	orrs.w	r1, sl, r1
 8008156:	d120      	bne.n	800819a <_dtoa_r+0x9fa>
 8008158:	2a00      	cmp	r2, #0
 800815a:	ddec      	ble.n	8008136 <_dtoa_r+0x996>
 800815c:	4629      	mov	r1, r5
 800815e:	2201      	movs	r2, #1
 8008160:	4630      	mov	r0, r6
 8008162:	9305      	str	r3, [sp, #20]
 8008164:	f000 fabc 	bl	80086e0 <__lshift>
 8008168:	4621      	mov	r1, r4
 800816a:	4605      	mov	r5, r0
 800816c:	f000 fb24 	bl	80087b8 <__mcmp>
 8008170:	2800      	cmp	r0, #0
 8008172:	9b05      	ldr	r3, [sp, #20]
 8008174:	dc02      	bgt.n	800817c <_dtoa_r+0x9dc>
 8008176:	d1de      	bne.n	8008136 <_dtoa_r+0x996>
 8008178:	07da      	lsls	r2, r3, #31
 800817a:	d5dc      	bpl.n	8008136 <_dtoa_r+0x996>
 800817c:	2b39      	cmp	r3, #57	; 0x39
 800817e:	d1d8      	bne.n	8008132 <_dtoa_r+0x992>
 8008180:	9a02      	ldr	r2, [sp, #8]
 8008182:	2339      	movs	r3, #57	; 0x39
 8008184:	7013      	strb	r3, [r2, #0]
 8008186:	4643      	mov	r3, r8
 8008188:	4698      	mov	r8, r3
 800818a:	3b01      	subs	r3, #1
 800818c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008190:	2a39      	cmp	r2, #57	; 0x39
 8008192:	d051      	beq.n	8008238 <_dtoa_r+0xa98>
 8008194:	3201      	adds	r2, #1
 8008196:	701a      	strb	r2, [r3, #0]
 8008198:	e745      	b.n	8008026 <_dtoa_r+0x886>
 800819a:	2a00      	cmp	r2, #0
 800819c:	dd03      	ble.n	80081a6 <_dtoa_r+0xa06>
 800819e:	2b39      	cmp	r3, #57	; 0x39
 80081a0:	d0ee      	beq.n	8008180 <_dtoa_r+0x9e0>
 80081a2:	3301      	adds	r3, #1
 80081a4:	e7c7      	b.n	8008136 <_dtoa_r+0x996>
 80081a6:	9a05      	ldr	r2, [sp, #20]
 80081a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081aa:	f802 3c01 	strb.w	r3, [r2, #-1]
 80081ae:	428a      	cmp	r2, r1
 80081b0:	d02b      	beq.n	800820a <_dtoa_r+0xa6a>
 80081b2:	4629      	mov	r1, r5
 80081b4:	2300      	movs	r3, #0
 80081b6:	220a      	movs	r2, #10
 80081b8:	4630      	mov	r0, r6
 80081ba:	f000 f8e1 	bl	8008380 <__multadd>
 80081be:	45b9      	cmp	r9, r7
 80081c0:	4605      	mov	r5, r0
 80081c2:	f04f 0300 	mov.w	r3, #0
 80081c6:	f04f 020a 	mov.w	r2, #10
 80081ca:	4649      	mov	r1, r9
 80081cc:	4630      	mov	r0, r6
 80081ce:	d107      	bne.n	80081e0 <_dtoa_r+0xa40>
 80081d0:	f000 f8d6 	bl	8008380 <__multadd>
 80081d4:	4681      	mov	r9, r0
 80081d6:	4607      	mov	r7, r0
 80081d8:	9b05      	ldr	r3, [sp, #20]
 80081da:	3301      	adds	r3, #1
 80081dc:	9305      	str	r3, [sp, #20]
 80081de:	e774      	b.n	80080ca <_dtoa_r+0x92a>
 80081e0:	f000 f8ce 	bl	8008380 <__multadd>
 80081e4:	4639      	mov	r1, r7
 80081e6:	4681      	mov	r9, r0
 80081e8:	2300      	movs	r3, #0
 80081ea:	220a      	movs	r2, #10
 80081ec:	4630      	mov	r0, r6
 80081ee:	f000 f8c7 	bl	8008380 <__multadd>
 80081f2:	4607      	mov	r7, r0
 80081f4:	e7f0      	b.n	80081d8 <_dtoa_r+0xa38>
 80081f6:	f1ba 0f00 	cmp.w	sl, #0
 80081fa:	9a00      	ldr	r2, [sp, #0]
 80081fc:	bfcc      	ite	gt
 80081fe:	46d0      	movgt	r8, sl
 8008200:	f04f 0801 	movle.w	r8, #1
 8008204:	4490      	add	r8, r2
 8008206:	f04f 0900 	mov.w	r9, #0
 800820a:	4629      	mov	r1, r5
 800820c:	2201      	movs	r2, #1
 800820e:	4630      	mov	r0, r6
 8008210:	9302      	str	r3, [sp, #8]
 8008212:	f000 fa65 	bl	80086e0 <__lshift>
 8008216:	4621      	mov	r1, r4
 8008218:	4605      	mov	r5, r0
 800821a:	f000 facd 	bl	80087b8 <__mcmp>
 800821e:	2800      	cmp	r0, #0
 8008220:	dcb1      	bgt.n	8008186 <_dtoa_r+0x9e6>
 8008222:	d102      	bne.n	800822a <_dtoa_r+0xa8a>
 8008224:	9b02      	ldr	r3, [sp, #8]
 8008226:	07db      	lsls	r3, r3, #31
 8008228:	d4ad      	bmi.n	8008186 <_dtoa_r+0x9e6>
 800822a:	4643      	mov	r3, r8
 800822c:	4698      	mov	r8, r3
 800822e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008232:	2a30      	cmp	r2, #48	; 0x30
 8008234:	d0fa      	beq.n	800822c <_dtoa_r+0xa8c>
 8008236:	e6f6      	b.n	8008026 <_dtoa_r+0x886>
 8008238:	9a00      	ldr	r2, [sp, #0]
 800823a:	429a      	cmp	r2, r3
 800823c:	d1a4      	bne.n	8008188 <_dtoa_r+0x9e8>
 800823e:	f10b 0b01 	add.w	fp, fp, #1
 8008242:	2331      	movs	r3, #49	; 0x31
 8008244:	e778      	b.n	8008138 <_dtoa_r+0x998>
 8008246:	4b15      	ldr	r3, [pc, #84]	; (800829c <_dtoa_r+0xafc>)
 8008248:	f7ff bb12 	b.w	8007870 <_dtoa_r+0xd0>
 800824c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800824e:	2b00      	cmp	r3, #0
 8008250:	f47f aaee 	bne.w	8007830 <_dtoa_r+0x90>
 8008254:	4b12      	ldr	r3, [pc, #72]	; (80082a0 <_dtoa_r+0xb00>)
 8008256:	f7ff bb0b 	b.w	8007870 <_dtoa_r+0xd0>
 800825a:	f1ba 0f00 	cmp.w	sl, #0
 800825e:	dc03      	bgt.n	8008268 <_dtoa_r+0xac8>
 8008260:	9b07      	ldr	r3, [sp, #28]
 8008262:	2b02      	cmp	r3, #2
 8008264:	f73f aec7 	bgt.w	8007ff6 <_dtoa_r+0x856>
 8008268:	f8dd 8000 	ldr.w	r8, [sp]
 800826c:	4621      	mov	r1, r4
 800826e:	4628      	mov	r0, r5
 8008270:	f7ff fa08 	bl	8007684 <quorem>
 8008274:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008278:	f808 3b01 	strb.w	r3, [r8], #1
 800827c:	9a00      	ldr	r2, [sp, #0]
 800827e:	eba8 0202 	sub.w	r2, r8, r2
 8008282:	4592      	cmp	sl, r2
 8008284:	ddb7      	ble.n	80081f6 <_dtoa_r+0xa56>
 8008286:	4629      	mov	r1, r5
 8008288:	2300      	movs	r3, #0
 800828a:	220a      	movs	r2, #10
 800828c:	4630      	mov	r0, r6
 800828e:	f000 f877 	bl	8008380 <__multadd>
 8008292:	4605      	mov	r5, r0
 8008294:	e7ea      	b.n	800826c <_dtoa_r+0xacc>
 8008296:	bf00      	nop
 8008298:	08009b07 	.word	0x08009b07
 800829c:	08009a60 	.word	0x08009a60
 80082a0:	08009a84 	.word	0x08009a84

080082a4 <_localeconv_r>:
 80082a4:	4800      	ldr	r0, [pc, #0]	; (80082a8 <_localeconv_r+0x4>)
 80082a6:	4770      	bx	lr
 80082a8:	200001b0 	.word	0x200001b0

080082ac <malloc>:
 80082ac:	4b02      	ldr	r3, [pc, #8]	; (80082b8 <malloc+0xc>)
 80082ae:	4601      	mov	r1, r0
 80082b0:	6818      	ldr	r0, [r3, #0]
 80082b2:	f000 bbe1 	b.w	8008a78 <_malloc_r>
 80082b6:	bf00      	nop
 80082b8:	2000005c 	.word	0x2000005c

080082bc <_Balloc>:
 80082bc:	b570      	push	{r4, r5, r6, lr}
 80082be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082c0:	4604      	mov	r4, r0
 80082c2:	460d      	mov	r5, r1
 80082c4:	b976      	cbnz	r6, 80082e4 <_Balloc+0x28>
 80082c6:	2010      	movs	r0, #16
 80082c8:	f7ff fff0 	bl	80082ac <malloc>
 80082cc:	4602      	mov	r2, r0
 80082ce:	6260      	str	r0, [r4, #36]	; 0x24
 80082d0:	b920      	cbnz	r0, 80082dc <_Balloc+0x20>
 80082d2:	4b18      	ldr	r3, [pc, #96]	; (8008334 <_Balloc+0x78>)
 80082d4:	4818      	ldr	r0, [pc, #96]	; (8008338 <_Balloc+0x7c>)
 80082d6:	2166      	movs	r1, #102	; 0x66
 80082d8:	f000 fd94 	bl	8008e04 <__assert_func>
 80082dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082e0:	6006      	str	r6, [r0, #0]
 80082e2:	60c6      	str	r6, [r0, #12]
 80082e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80082e6:	68f3      	ldr	r3, [r6, #12]
 80082e8:	b183      	cbz	r3, 800830c <_Balloc+0x50>
 80082ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082f2:	b9b8      	cbnz	r0, 8008324 <_Balloc+0x68>
 80082f4:	2101      	movs	r1, #1
 80082f6:	fa01 f605 	lsl.w	r6, r1, r5
 80082fa:	1d72      	adds	r2, r6, #5
 80082fc:	0092      	lsls	r2, r2, #2
 80082fe:	4620      	mov	r0, r4
 8008300:	f000 fb5a 	bl	80089b8 <_calloc_r>
 8008304:	b160      	cbz	r0, 8008320 <_Balloc+0x64>
 8008306:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800830a:	e00e      	b.n	800832a <_Balloc+0x6e>
 800830c:	2221      	movs	r2, #33	; 0x21
 800830e:	2104      	movs	r1, #4
 8008310:	4620      	mov	r0, r4
 8008312:	f000 fb51 	bl	80089b8 <_calloc_r>
 8008316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008318:	60f0      	str	r0, [r6, #12]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1e4      	bne.n	80082ea <_Balloc+0x2e>
 8008320:	2000      	movs	r0, #0
 8008322:	bd70      	pop	{r4, r5, r6, pc}
 8008324:	6802      	ldr	r2, [r0, #0]
 8008326:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800832a:	2300      	movs	r3, #0
 800832c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008330:	e7f7      	b.n	8008322 <_Balloc+0x66>
 8008332:	bf00      	nop
 8008334:	08009a91 	.word	0x08009a91
 8008338:	08009b18 	.word	0x08009b18

0800833c <_Bfree>:
 800833c:	b570      	push	{r4, r5, r6, lr}
 800833e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008340:	4605      	mov	r5, r0
 8008342:	460c      	mov	r4, r1
 8008344:	b976      	cbnz	r6, 8008364 <_Bfree+0x28>
 8008346:	2010      	movs	r0, #16
 8008348:	f7ff ffb0 	bl	80082ac <malloc>
 800834c:	4602      	mov	r2, r0
 800834e:	6268      	str	r0, [r5, #36]	; 0x24
 8008350:	b920      	cbnz	r0, 800835c <_Bfree+0x20>
 8008352:	4b09      	ldr	r3, [pc, #36]	; (8008378 <_Bfree+0x3c>)
 8008354:	4809      	ldr	r0, [pc, #36]	; (800837c <_Bfree+0x40>)
 8008356:	218a      	movs	r1, #138	; 0x8a
 8008358:	f000 fd54 	bl	8008e04 <__assert_func>
 800835c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008360:	6006      	str	r6, [r0, #0]
 8008362:	60c6      	str	r6, [r0, #12]
 8008364:	b13c      	cbz	r4, 8008376 <_Bfree+0x3a>
 8008366:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008368:	6862      	ldr	r2, [r4, #4]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008370:	6021      	str	r1, [r4, #0]
 8008372:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008376:	bd70      	pop	{r4, r5, r6, pc}
 8008378:	08009a91 	.word	0x08009a91
 800837c:	08009b18 	.word	0x08009b18

08008380 <__multadd>:
 8008380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008384:	690e      	ldr	r6, [r1, #16]
 8008386:	4607      	mov	r7, r0
 8008388:	4698      	mov	r8, r3
 800838a:	460c      	mov	r4, r1
 800838c:	f101 0014 	add.w	r0, r1, #20
 8008390:	2300      	movs	r3, #0
 8008392:	6805      	ldr	r5, [r0, #0]
 8008394:	b2a9      	uxth	r1, r5
 8008396:	fb02 8101 	mla	r1, r2, r1, r8
 800839a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800839e:	0c2d      	lsrs	r5, r5, #16
 80083a0:	fb02 c505 	mla	r5, r2, r5, ip
 80083a4:	b289      	uxth	r1, r1
 80083a6:	3301      	adds	r3, #1
 80083a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80083ac:	429e      	cmp	r6, r3
 80083ae:	f840 1b04 	str.w	r1, [r0], #4
 80083b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80083b6:	dcec      	bgt.n	8008392 <__multadd+0x12>
 80083b8:	f1b8 0f00 	cmp.w	r8, #0
 80083bc:	d022      	beq.n	8008404 <__multadd+0x84>
 80083be:	68a3      	ldr	r3, [r4, #8]
 80083c0:	42b3      	cmp	r3, r6
 80083c2:	dc19      	bgt.n	80083f8 <__multadd+0x78>
 80083c4:	6861      	ldr	r1, [r4, #4]
 80083c6:	4638      	mov	r0, r7
 80083c8:	3101      	adds	r1, #1
 80083ca:	f7ff ff77 	bl	80082bc <_Balloc>
 80083ce:	4605      	mov	r5, r0
 80083d0:	b928      	cbnz	r0, 80083de <__multadd+0x5e>
 80083d2:	4602      	mov	r2, r0
 80083d4:	4b0d      	ldr	r3, [pc, #52]	; (800840c <__multadd+0x8c>)
 80083d6:	480e      	ldr	r0, [pc, #56]	; (8008410 <__multadd+0x90>)
 80083d8:	21b5      	movs	r1, #181	; 0xb5
 80083da:	f000 fd13 	bl	8008e04 <__assert_func>
 80083de:	6922      	ldr	r2, [r4, #16]
 80083e0:	3202      	adds	r2, #2
 80083e2:	f104 010c 	add.w	r1, r4, #12
 80083e6:	0092      	lsls	r2, r2, #2
 80083e8:	300c      	adds	r0, #12
 80083ea:	f7fe fcd1 	bl	8006d90 <memcpy>
 80083ee:	4621      	mov	r1, r4
 80083f0:	4638      	mov	r0, r7
 80083f2:	f7ff ffa3 	bl	800833c <_Bfree>
 80083f6:	462c      	mov	r4, r5
 80083f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80083fc:	3601      	adds	r6, #1
 80083fe:	f8c3 8014 	str.w	r8, [r3, #20]
 8008402:	6126      	str	r6, [r4, #16]
 8008404:	4620      	mov	r0, r4
 8008406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800840a:	bf00      	nop
 800840c:	08009b07 	.word	0x08009b07
 8008410:	08009b18 	.word	0x08009b18

08008414 <__hi0bits>:
 8008414:	0c03      	lsrs	r3, r0, #16
 8008416:	041b      	lsls	r3, r3, #16
 8008418:	b9d3      	cbnz	r3, 8008450 <__hi0bits+0x3c>
 800841a:	0400      	lsls	r0, r0, #16
 800841c:	2310      	movs	r3, #16
 800841e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008422:	bf04      	itt	eq
 8008424:	0200      	lsleq	r0, r0, #8
 8008426:	3308      	addeq	r3, #8
 8008428:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800842c:	bf04      	itt	eq
 800842e:	0100      	lsleq	r0, r0, #4
 8008430:	3304      	addeq	r3, #4
 8008432:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008436:	bf04      	itt	eq
 8008438:	0080      	lsleq	r0, r0, #2
 800843a:	3302      	addeq	r3, #2
 800843c:	2800      	cmp	r0, #0
 800843e:	db05      	blt.n	800844c <__hi0bits+0x38>
 8008440:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008444:	f103 0301 	add.w	r3, r3, #1
 8008448:	bf08      	it	eq
 800844a:	2320      	moveq	r3, #32
 800844c:	4618      	mov	r0, r3
 800844e:	4770      	bx	lr
 8008450:	2300      	movs	r3, #0
 8008452:	e7e4      	b.n	800841e <__hi0bits+0xa>

08008454 <__lo0bits>:
 8008454:	6803      	ldr	r3, [r0, #0]
 8008456:	f013 0207 	ands.w	r2, r3, #7
 800845a:	4601      	mov	r1, r0
 800845c:	d00b      	beq.n	8008476 <__lo0bits+0x22>
 800845e:	07da      	lsls	r2, r3, #31
 8008460:	d424      	bmi.n	80084ac <__lo0bits+0x58>
 8008462:	0798      	lsls	r0, r3, #30
 8008464:	bf49      	itett	mi
 8008466:	085b      	lsrmi	r3, r3, #1
 8008468:	089b      	lsrpl	r3, r3, #2
 800846a:	2001      	movmi	r0, #1
 800846c:	600b      	strmi	r3, [r1, #0]
 800846e:	bf5c      	itt	pl
 8008470:	600b      	strpl	r3, [r1, #0]
 8008472:	2002      	movpl	r0, #2
 8008474:	4770      	bx	lr
 8008476:	b298      	uxth	r0, r3
 8008478:	b9b0      	cbnz	r0, 80084a8 <__lo0bits+0x54>
 800847a:	0c1b      	lsrs	r3, r3, #16
 800847c:	2010      	movs	r0, #16
 800847e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008482:	bf04      	itt	eq
 8008484:	0a1b      	lsreq	r3, r3, #8
 8008486:	3008      	addeq	r0, #8
 8008488:	071a      	lsls	r2, r3, #28
 800848a:	bf04      	itt	eq
 800848c:	091b      	lsreq	r3, r3, #4
 800848e:	3004      	addeq	r0, #4
 8008490:	079a      	lsls	r2, r3, #30
 8008492:	bf04      	itt	eq
 8008494:	089b      	lsreq	r3, r3, #2
 8008496:	3002      	addeq	r0, #2
 8008498:	07da      	lsls	r2, r3, #31
 800849a:	d403      	bmi.n	80084a4 <__lo0bits+0x50>
 800849c:	085b      	lsrs	r3, r3, #1
 800849e:	f100 0001 	add.w	r0, r0, #1
 80084a2:	d005      	beq.n	80084b0 <__lo0bits+0x5c>
 80084a4:	600b      	str	r3, [r1, #0]
 80084a6:	4770      	bx	lr
 80084a8:	4610      	mov	r0, r2
 80084aa:	e7e8      	b.n	800847e <__lo0bits+0x2a>
 80084ac:	2000      	movs	r0, #0
 80084ae:	4770      	bx	lr
 80084b0:	2020      	movs	r0, #32
 80084b2:	4770      	bx	lr

080084b4 <__i2b>:
 80084b4:	b510      	push	{r4, lr}
 80084b6:	460c      	mov	r4, r1
 80084b8:	2101      	movs	r1, #1
 80084ba:	f7ff feff 	bl	80082bc <_Balloc>
 80084be:	4602      	mov	r2, r0
 80084c0:	b928      	cbnz	r0, 80084ce <__i2b+0x1a>
 80084c2:	4b05      	ldr	r3, [pc, #20]	; (80084d8 <__i2b+0x24>)
 80084c4:	4805      	ldr	r0, [pc, #20]	; (80084dc <__i2b+0x28>)
 80084c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80084ca:	f000 fc9b 	bl	8008e04 <__assert_func>
 80084ce:	2301      	movs	r3, #1
 80084d0:	6144      	str	r4, [r0, #20]
 80084d2:	6103      	str	r3, [r0, #16]
 80084d4:	bd10      	pop	{r4, pc}
 80084d6:	bf00      	nop
 80084d8:	08009b07 	.word	0x08009b07
 80084dc:	08009b18 	.word	0x08009b18

080084e0 <__multiply>:
 80084e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	4614      	mov	r4, r2
 80084e6:	690a      	ldr	r2, [r1, #16]
 80084e8:	6923      	ldr	r3, [r4, #16]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	bfb8      	it	lt
 80084ee:	460b      	movlt	r3, r1
 80084f0:	460d      	mov	r5, r1
 80084f2:	bfbc      	itt	lt
 80084f4:	4625      	movlt	r5, r4
 80084f6:	461c      	movlt	r4, r3
 80084f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80084fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008500:	68ab      	ldr	r3, [r5, #8]
 8008502:	6869      	ldr	r1, [r5, #4]
 8008504:	eb0a 0709 	add.w	r7, sl, r9
 8008508:	42bb      	cmp	r3, r7
 800850a:	b085      	sub	sp, #20
 800850c:	bfb8      	it	lt
 800850e:	3101      	addlt	r1, #1
 8008510:	f7ff fed4 	bl	80082bc <_Balloc>
 8008514:	b930      	cbnz	r0, 8008524 <__multiply+0x44>
 8008516:	4602      	mov	r2, r0
 8008518:	4b42      	ldr	r3, [pc, #264]	; (8008624 <__multiply+0x144>)
 800851a:	4843      	ldr	r0, [pc, #268]	; (8008628 <__multiply+0x148>)
 800851c:	f240 115d 	movw	r1, #349	; 0x15d
 8008520:	f000 fc70 	bl	8008e04 <__assert_func>
 8008524:	f100 0614 	add.w	r6, r0, #20
 8008528:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800852c:	4633      	mov	r3, r6
 800852e:	2200      	movs	r2, #0
 8008530:	4543      	cmp	r3, r8
 8008532:	d31e      	bcc.n	8008572 <__multiply+0x92>
 8008534:	f105 0c14 	add.w	ip, r5, #20
 8008538:	f104 0314 	add.w	r3, r4, #20
 800853c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008540:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008544:	9202      	str	r2, [sp, #8]
 8008546:	ebac 0205 	sub.w	r2, ip, r5
 800854a:	3a15      	subs	r2, #21
 800854c:	f022 0203 	bic.w	r2, r2, #3
 8008550:	3204      	adds	r2, #4
 8008552:	f105 0115 	add.w	r1, r5, #21
 8008556:	458c      	cmp	ip, r1
 8008558:	bf38      	it	cc
 800855a:	2204      	movcc	r2, #4
 800855c:	9201      	str	r2, [sp, #4]
 800855e:	9a02      	ldr	r2, [sp, #8]
 8008560:	9303      	str	r3, [sp, #12]
 8008562:	429a      	cmp	r2, r3
 8008564:	d808      	bhi.n	8008578 <__multiply+0x98>
 8008566:	2f00      	cmp	r7, #0
 8008568:	dc55      	bgt.n	8008616 <__multiply+0x136>
 800856a:	6107      	str	r7, [r0, #16]
 800856c:	b005      	add	sp, #20
 800856e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008572:	f843 2b04 	str.w	r2, [r3], #4
 8008576:	e7db      	b.n	8008530 <__multiply+0x50>
 8008578:	f8b3 a000 	ldrh.w	sl, [r3]
 800857c:	f1ba 0f00 	cmp.w	sl, #0
 8008580:	d020      	beq.n	80085c4 <__multiply+0xe4>
 8008582:	f105 0e14 	add.w	lr, r5, #20
 8008586:	46b1      	mov	r9, r6
 8008588:	2200      	movs	r2, #0
 800858a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800858e:	f8d9 b000 	ldr.w	fp, [r9]
 8008592:	b2a1      	uxth	r1, r4
 8008594:	fa1f fb8b 	uxth.w	fp, fp
 8008598:	fb0a b101 	mla	r1, sl, r1, fp
 800859c:	4411      	add	r1, r2
 800859e:	f8d9 2000 	ldr.w	r2, [r9]
 80085a2:	0c24      	lsrs	r4, r4, #16
 80085a4:	0c12      	lsrs	r2, r2, #16
 80085a6:	fb0a 2404 	mla	r4, sl, r4, r2
 80085aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80085ae:	b289      	uxth	r1, r1
 80085b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80085b4:	45f4      	cmp	ip, lr
 80085b6:	f849 1b04 	str.w	r1, [r9], #4
 80085ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80085be:	d8e4      	bhi.n	800858a <__multiply+0xaa>
 80085c0:	9901      	ldr	r1, [sp, #4]
 80085c2:	5072      	str	r2, [r6, r1]
 80085c4:	9a03      	ldr	r2, [sp, #12]
 80085c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80085ca:	3304      	adds	r3, #4
 80085cc:	f1b9 0f00 	cmp.w	r9, #0
 80085d0:	d01f      	beq.n	8008612 <__multiply+0x132>
 80085d2:	6834      	ldr	r4, [r6, #0]
 80085d4:	f105 0114 	add.w	r1, r5, #20
 80085d8:	46b6      	mov	lr, r6
 80085da:	f04f 0a00 	mov.w	sl, #0
 80085de:	880a      	ldrh	r2, [r1, #0]
 80085e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80085e4:	fb09 b202 	mla	r2, r9, r2, fp
 80085e8:	4492      	add	sl, r2
 80085ea:	b2a4      	uxth	r4, r4
 80085ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80085f0:	f84e 4b04 	str.w	r4, [lr], #4
 80085f4:	f851 4b04 	ldr.w	r4, [r1], #4
 80085f8:	f8be 2000 	ldrh.w	r2, [lr]
 80085fc:	0c24      	lsrs	r4, r4, #16
 80085fe:	fb09 2404 	mla	r4, r9, r4, r2
 8008602:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008606:	458c      	cmp	ip, r1
 8008608:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800860c:	d8e7      	bhi.n	80085de <__multiply+0xfe>
 800860e:	9a01      	ldr	r2, [sp, #4]
 8008610:	50b4      	str	r4, [r6, r2]
 8008612:	3604      	adds	r6, #4
 8008614:	e7a3      	b.n	800855e <__multiply+0x7e>
 8008616:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1a5      	bne.n	800856a <__multiply+0x8a>
 800861e:	3f01      	subs	r7, #1
 8008620:	e7a1      	b.n	8008566 <__multiply+0x86>
 8008622:	bf00      	nop
 8008624:	08009b07 	.word	0x08009b07
 8008628:	08009b18 	.word	0x08009b18

0800862c <__pow5mult>:
 800862c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008630:	4615      	mov	r5, r2
 8008632:	f012 0203 	ands.w	r2, r2, #3
 8008636:	4606      	mov	r6, r0
 8008638:	460f      	mov	r7, r1
 800863a:	d007      	beq.n	800864c <__pow5mult+0x20>
 800863c:	4c25      	ldr	r4, [pc, #148]	; (80086d4 <__pow5mult+0xa8>)
 800863e:	3a01      	subs	r2, #1
 8008640:	2300      	movs	r3, #0
 8008642:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008646:	f7ff fe9b 	bl	8008380 <__multadd>
 800864a:	4607      	mov	r7, r0
 800864c:	10ad      	asrs	r5, r5, #2
 800864e:	d03d      	beq.n	80086cc <__pow5mult+0xa0>
 8008650:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008652:	b97c      	cbnz	r4, 8008674 <__pow5mult+0x48>
 8008654:	2010      	movs	r0, #16
 8008656:	f7ff fe29 	bl	80082ac <malloc>
 800865a:	4602      	mov	r2, r0
 800865c:	6270      	str	r0, [r6, #36]	; 0x24
 800865e:	b928      	cbnz	r0, 800866c <__pow5mult+0x40>
 8008660:	4b1d      	ldr	r3, [pc, #116]	; (80086d8 <__pow5mult+0xac>)
 8008662:	481e      	ldr	r0, [pc, #120]	; (80086dc <__pow5mult+0xb0>)
 8008664:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008668:	f000 fbcc 	bl	8008e04 <__assert_func>
 800866c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008670:	6004      	str	r4, [r0, #0]
 8008672:	60c4      	str	r4, [r0, #12]
 8008674:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008678:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800867c:	b94c      	cbnz	r4, 8008692 <__pow5mult+0x66>
 800867e:	f240 2171 	movw	r1, #625	; 0x271
 8008682:	4630      	mov	r0, r6
 8008684:	f7ff ff16 	bl	80084b4 <__i2b>
 8008688:	2300      	movs	r3, #0
 800868a:	f8c8 0008 	str.w	r0, [r8, #8]
 800868e:	4604      	mov	r4, r0
 8008690:	6003      	str	r3, [r0, #0]
 8008692:	f04f 0900 	mov.w	r9, #0
 8008696:	07eb      	lsls	r3, r5, #31
 8008698:	d50a      	bpl.n	80086b0 <__pow5mult+0x84>
 800869a:	4639      	mov	r1, r7
 800869c:	4622      	mov	r2, r4
 800869e:	4630      	mov	r0, r6
 80086a0:	f7ff ff1e 	bl	80084e0 <__multiply>
 80086a4:	4639      	mov	r1, r7
 80086a6:	4680      	mov	r8, r0
 80086a8:	4630      	mov	r0, r6
 80086aa:	f7ff fe47 	bl	800833c <_Bfree>
 80086ae:	4647      	mov	r7, r8
 80086b0:	106d      	asrs	r5, r5, #1
 80086b2:	d00b      	beq.n	80086cc <__pow5mult+0xa0>
 80086b4:	6820      	ldr	r0, [r4, #0]
 80086b6:	b938      	cbnz	r0, 80086c8 <__pow5mult+0x9c>
 80086b8:	4622      	mov	r2, r4
 80086ba:	4621      	mov	r1, r4
 80086bc:	4630      	mov	r0, r6
 80086be:	f7ff ff0f 	bl	80084e0 <__multiply>
 80086c2:	6020      	str	r0, [r4, #0]
 80086c4:	f8c0 9000 	str.w	r9, [r0]
 80086c8:	4604      	mov	r4, r0
 80086ca:	e7e4      	b.n	8008696 <__pow5mult+0x6a>
 80086cc:	4638      	mov	r0, r7
 80086ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086d2:	bf00      	nop
 80086d4:	08009c68 	.word	0x08009c68
 80086d8:	08009a91 	.word	0x08009a91
 80086dc:	08009b18 	.word	0x08009b18

080086e0 <__lshift>:
 80086e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086e4:	460c      	mov	r4, r1
 80086e6:	6849      	ldr	r1, [r1, #4]
 80086e8:	6923      	ldr	r3, [r4, #16]
 80086ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086ee:	68a3      	ldr	r3, [r4, #8]
 80086f0:	4607      	mov	r7, r0
 80086f2:	4691      	mov	r9, r2
 80086f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086f8:	f108 0601 	add.w	r6, r8, #1
 80086fc:	42b3      	cmp	r3, r6
 80086fe:	db0b      	blt.n	8008718 <__lshift+0x38>
 8008700:	4638      	mov	r0, r7
 8008702:	f7ff fddb 	bl	80082bc <_Balloc>
 8008706:	4605      	mov	r5, r0
 8008708:	b948      	cbnz	r0, 800871e <__lshift+0x3e>
 800870a:	4602      	mov	r2, r0
 800870c:	4b28      	ldr	r3, [pc, #160]	; (80087b0 <__lshift+0xd0>)
 800870e:	4829      	ldr	r0, [pc, #164]	; (80087b4 <__lshift+0xd4>)
 8008710:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008714:	f000 fb76 	bl	8008e04 <__assert_func>
 8008718:	3101      	adds	r1, #1
 800871a:	005b      	lsls	r3, r3, #1
 800871c:	e7ee      	b.n	80086fc <__lshift+0x1c>
 800871e:	2300      	movs	r3, #0
 8008720:	f100 0114 	add.w	r1, r0, #20
 8008724:	f100 0210 	add.w	r2, r0, #16
 8008728:	4618      	mov	r0, r3
 800872a:	4553      	cmp	r3, sl
 800872c:	db33      	blt.n	8008796 <__lshift+0xb6>
 800872e:	6920      	ldr	r0, [r4, #16]
 8008730:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008734:	f104 0314 	add.w	r3, r4, #20
 8008738:	f019 091f 	ands.w	r9, r9, #31
 800873c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008740:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008744:	d02b      	beq.n	800879e <__lshift+0xbe>
 8008746:	f1c9 0e20 	rsb	lr, r9, #32
 800874a:	468a      	mov	sl, r1
 800874c:	2200      	movs	r2, #0
 800874e:	6818      	ldr	r0, [r3, #0]
 8008750:	fa00 f009 	lsl.w	r0, r0, r9
 8008754:	4302      	orrs	r2, r0
 8008756:	f84a 2b04 	str.w	r2, [sl], #4
 800875a:	f853 2b04 	ldr.w	r2, [r3], #4
 800875e:	459c      	cmp	ip, r3
 8008760:	fa22 f20e 	lsr.w	r2, r2, lr
 8008764:	d8f3      	bhi.n	800874e <__lshift+0x6e>
 8008766:	ebac 0304 	sub.w	r3, ip, r4
 800876a:	3b15      	subs	r3, #21
 800876c:	f023 0303 	bic.w	r3, r3, #3
 8008770:	3304      	adds	r3, #4
 8008772:	f104 0015 	add.w	r0, r4, #21
 8008776:	4584      	cmp	ip, r0
 8008778:	bf38      	it	cc
 800877a:	2304      	movcc	r3, #4
 800877c:	50ca      	str	r2, [r1, r3]
 800877e:	b10a      	cbz	r2, 8008784 <__lshift+0xa4>
 8008780:	f108 0602 	add.w	r6, r8, #2
 8008784:	3e01      	subs	r6, #1
 8008786:	4638      	mov	r0, r7
 8008788:	612e      	str	r6, [r5, #16]
 800878a:	4621      	mov	r1, r4
 800878c:	f7ff fdd6 	bl	800833c <_Bfree>
 8008790:	4628      	mov	r0, r5
 8008792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008796:	f842 0f04 	str.w	r0, [r2, #4]!
 800879a:	3301      	adds	r3, #1
 800879c:	e7c5      	b.n	800872a <__lshift+0x4a>
 800879e:	3904      	subs	r1, #4
 80087a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80087a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80087a8:	459c      	cmp	ip, r3
 80087aa:	d8f9      	bhi.n	80087a0 <__lshift+0xc0>
 80087ac:	e7ea      	b.n	8008784 <__lshift+0xa4>
 80087ae:	bf00      	nop
 80087b0:	08009b07 	.word	0x08009b07
 80087b4:	08009b18 	.word	0x08009b18

080087b8 <__mcmp>:
 80087b8:	b530      	push	{r4, r5, lr}
 80087ba:	6902      	ldr	r2, [r0, #16]
 80087bc:	690c      	ldr	r4, [r1, #16]
 80087be:	1b12      	subs	r2, r2, r4
 80087c0:	d10e      	bne.n	80087e0 <__mcmp+0x28>
 80087c2:	f100 0314 	add.w	r3, r0, #20
 80087c6:	3114      	adds	r1, #20
 80087c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80087cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80087d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80087d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80087d8:	42a5      	cmp	r5, r4
 80087da:	d003      	beq.n	80087e4 <__mcmp+0x2c>
 80087dc:	d305      	bcc.n	80087ea <__mcmp+0x32>
 80087de:	2201      	movs	r2, #1
 80087e0:	4610      	mov	r0, r2
 80087e2:	bd30      	pop	{r4, r5, pc}
 80087e4:	4283      	cmp	r3, r0
 80087e6:	d3f3      	bcc.n	80087d0 <__mcmp+0x18>
 80087e8:	e7fa      	b.n	80087e0 <__mcmp+0x28>
 80087ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087ee:	e7f7      	b.n	80087e0 <__mcmp+0x28>

080087f0 <__mdiff>:
 80087f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f4:	460c      	mov	r4, r1
 80087f6:	4606      	mov	r6, r0
 80087f8:	4611      	mov	r1, r2
 80087fa:	4620      	mov	r0, r4
 80087fc:	4617      	mov	r7, r2
 80087fe:	f7ff ffdb 	bl	80087b8 <__mcmp>
 8008802:	1e05      	subs	r5, r0, #0
 8008804:	d110      	bne.n	8008828 <__mdiff+0x38>
 8008806:	4629      	mov	r1, r5
 8008808:	4630      	mov	r0, r6
 800880a:	f7ff fd57 	bl	80082bc <_Balloc>
 800880e:	b930      	cbnz	r0, 800881e <__mdiff+0x2e>
 8008810:	4b39      	ldr	r3, [pc, #228]	; (80088f8 <__mdiff+0x108>)
 8008812:	4602      	mov	r2, r0
 8008814:	f240 2132 	movw	r1, #562	; 0x232
 8008818:	4838      	ldr	r0, [pc, #224]	; (80088fc <__mdiff+0x10c>)
 800881a:	f000 faf3 	bl	8008e04 <__assert_func>
 800881e:	2301      	movs	r3, #1
 8008820:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008824:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008828:	bfa4      	itt	ge
 800882a:	463b      	movge	r3, r7
 800882c:	4627      	movge	r7, r4
 800882e:	4630      	mov	r0, r6
 8008830:	6879      	ldr	r1, [r7, #4]
 8008832:	bfa6      	itte	ge
 8008834:	461c      	movge	r4, r3
 8008836:	2500      	movge	r5, #0
 8008838:	2501      	movlt	r5, #1
 800883a:	f7ff fd3f 	bl	80082bc <_Balloc>
 800883e:	b920      	cbnz	r0, 800884a <__mdiff+0x5a>
 8008840:	4b2d      	ldr	r3, [pc, #180]	; (80088f8 <__mdiff+0x108>)
 8008842:	4602      	mov	r2, r0
 8008844:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008848:	e7e6      	b.n	8008818 <__mdiff+0x28>
 800884a:	693e      	ldr	r6, [r7, #16]
 800884c:	60c5      	str	r5, [r0, #12]
 800884e:	6925      	ldr	r5, [r4, #16]
 8008850:	f107 0114 	add.w	r1, r7, #20
 8008854:	f104 0914 	add.w	r9, r4, #20
 8008858:	f100 0e14 	add.w	lr, r0, #20
 800885c:	f107 0210 	add.w	r2, r7, #16
 8008860:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008864:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008868:	46f2      	mov	sl, lr
 800886a:	2700      	movs	r7, #0
 800886c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008870:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008874:	fa1f f883 	uxth.w	r8, r3
 8008878:	fa17 f78b 	uxtah	r7, r7, fp
 800887c:	0c1b      	lsrs	r3, r3, #16
 800887e:	eba7 0808 	sub.w	r8, r7, r8
 8008882:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008886:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800888a:	fa1f f888 	uxth.w	r8, r8
 800888e:	141f      	asrs	r7, r3, #16
 8008890:	454d      	cmp	r5, r9
 8008892:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008896:	f84a 3b04 	str.w	r3, [sl], #4
 800889a:	d8e7      	bhi.n	800886c <__mdiff+0x7c>
 800889c:	1b2b      	subs	r3, r5, r4
 800889e:	3b15      	subs	r3, #21
 80088a0:	f023 0303 	bic.w	r3, r3, #3
 80088a4:	3304      	adds	r3, #4
 80088a6:	3415      	adds	r4, #21
 80088a8:	42a5      	cmp	r5, r4
 80088aa:	bf38      	it	cc
 80088ac:	2304      	movcc	r3, #4
 80088ae:	4419      	add	r1, r3
 80088b0:	4473      	add	r3, lr
 80088b2:	469e      	mov	lr, r3
 80088b4:	460d      	mov	r5, r1
 80088b6:	4565      	cmp	r5, ip
 80088b8:	d30e      	bcc.n	80088d8 <__mdiff+0xe8>
 80088ba:	f10c 0203 	add.w	r2, ip, #3
 80088be:	1a52      	subs	r2, r2, r1
 80088c0:	f022 0203 	bic.w	r2, r2, #3
 80088c4:	3903      	subs	r1, #3
 80088c6:	458c      	cmp	ip, r1
 80088c8:	bf38      	it	cc
 80088ca:	2200      	movcc	r2, #0
 80088cc:	441a      	add	r2, r3
 80088ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80088d2:	b17b      	cbz	r3, 80088f4 <__mdiff+0x104>
 80088d4:	6106      	str	r6, [r0, #16]
 80088d6:	e7a5      	b.n	8008824 <__mdiff+0x34>
 80088d8:	f855 8b04 	ldr.w	r8, [r5], #4
 80088dc:	fa17 f488 	uxtah	r4, r7, r8
 80088e0:	1422      	asrs	r2, r4, #16
 80088e2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80088e6:	b2a4      	uxth	r4, r4
 80088e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80088ec:	f84e 4b04 	str.w	r4, [lr], #4
 80088f0:	1417      	asrs	r7, r2, #16
 80088f2:	e7e0      	b.n	80088b6 <__mdiff+0xc6>
 80088f4:	3e01      	subs	r6, #1
 80088f6:	e7ea      	b.n	80088ce <__mdiff+0xde>
 80088f8:	08009b07 	.word	0x08009b07
 80088fc:	08009b18 	.word	0x08009b18

08008900 <__d2b>:
 8008900:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008904:	4689      	mov	r9, r1
 8008906:	2101      	movs	r1, #1
 8008908:	ec57 6b10 	vmov	r6, r7, d0
 800890c:	4690      	mov	r8, r2
 800890e:	f7ff fcd5 	bl	80082bc <_Balloc>
 8008912:	4604      	mov	r4, r0
 8008914:	b930      	cbnz	r0, 8008924 <__d2b+0x24>
 8008916:	4602      	mov	r2, r0
 8008918:	4b25      	ldr	r3, [pc, #148]	; (80089b0 <__d2b+0xb0>)
 800891a:	4826      	ldr	r0, [pc, #152]	; (80089b4 <__d2b+0xb4>)
 800891c:	f240 310a 	movw	r1, #778	; 0x30a
 8008920:	f000 fa70 	bl	8008e04 <__assert_func>
 8008924:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008928:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800892c:	bb35      	cbnz	r5, 800897c <__d2b+0x7c>
 800892e:	2e00      	cmp	r6, #0
 8008930:	9301      	str	r3, [sp, #4]
 8008932:	d028      	beq.n	8008986 <__d2b+0x86>
 8008934:	4668      	mov	r0, sp
 8008936:	9600      	str	r6, [sp, #0]
 8008938:	f7ff fd8c 	bl	8008454 <__lo0bits>
 800893c:	9900      	ldr	r1, [sp, #0]
 800893e:	b300      	cbz	r0, 8008982 <__d2b+0x82>
 8008940:	9a01      	ldr	r2, [sp, #4]
 8008942:	f1c0 0320 	rsb	r3, r0, #32
 8008946:	fa02 f303 	lsl.w	r3, r2, r3
 800894a:	430b      	orrs	r3, r1
 800894c:	40c2      	lsrs	r2, r0
 800894e:	6163      	str	r3, [r4, #20]
 8008950:	9201      	str	r2, [sp, #4]
 8008952:	9b01      	ldr	r3, [sp, #4]
 8008954:	61a3      	str	r3, [r4, #24]
 8008956:	2b00      	cmp	r3, #0
 8008958:	bf14      	ite	ne
 800895a:	2202      	movne	r2, #2
 800895c:	2201      	moveq	r2, #1
 800895e:	6122      	str	r2, [r4, #16]
 8008960:	b1d5      	cbz	r5, 8008998 <__d2b+0x98>
 8008962:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008966:	4405      	add	r5, r0
 8008968:	f8c9 5000 	str.w	r5, [r9]
 800896c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008970:	f8c8 0000 	str.w	r0, [r8]
 8008974:	4620      	mov	r0, r4
 8008976:	b003      	add	sp, #12
 8008978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800897c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008980:	e7d5      	b.n	800892e <__d2b+0x2e>
 8008982:	6161      	str	r1, [r4, #20]
 8008984:	e7e5      	b.n	8008952 <__d2b+0x52>
 8008986:	a801      	add	r0, sp, #4
 8008988:	f7ff fd64 	bl	8008454 <__lo0bits>
 800898c:	9b01      	ldr	r3, [sp, #4]
 800898e:	6163      	str	r3, [r4, #20]
 8008990:	2201      	movs	r2, #1
 8008992:	6122      	str	r2, [r4, #16]
 8008994:	3020      	adds	r0, #32
 8008996:	e7e3      	b.n	8008960 <__d2b+0x60>
 8008998:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800899c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80089a0:	f8c9 0000 	str.w	r0, [r9]
 80089a4:	6918      	ldr	r0, [r3, #16]
 80089a6:	f7ff fd35 	bl	8008414 <__hi0bits>
 80089aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089ae:	e7df      	b.n	8008970 <__d2b+0x70>
 80089b0:	08009b07 	.word	0x08009b07
 80089b4:	08009b18 	.word	0x08009b18

080089b8 <_calloc_r>:
 80089b8:	b513      	push	{r0, r1, r4, lr}
 80089ba:	434a      	muls	r2, r1
 80089bc:	4611      	mov	r1, r2
 80089be:	9201      	str	r2, [sp, #4]
 80089c0:	f000 f85a 	bl	8008a78 <_malloc_r>
 80089c4:	4604      	mov	r4, r0
 80089c6:	b118      	cbz	r0, 80089d0 <_calloc_r+0x18>
 80089c8:	9a01      	ldr	r2, [sp, #4]
 80089ca:	2100      	movs	r1, #0
 80089cc:	f7fe f9ee 	bl	8006dac <memset>
 80089d0:	4620      	mov	r0, r4
 80089d2:	b002      	add	sp, #8
 80089d4:	bd10      	pop	{r4, pc}
	...

080089d8 <_free_r>:
 80089d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089da:	2900      	cmp	r1, #0
 80089dc:	d048      	beq.n	8008a70 <_free_r+0x98>
 80089de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089e2:	9001      	str	r0, [sp, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f1a1 0404 	sub.w	r4, r1, #4
 80089ea:	bfb8      	it	lt
 80089ec:	18e4      	addlt	r4, r4, r3
 80089ee:	f000 fa65 	bl	8008ebc <__malloc_lock>
 80089f2:	4a20      	ldr	r2, [pc, #128]	; (8008a74 <_free_r+0x9c>)
 80089f4:	9801      	ldr	r0, [sp, #4]
 80089f6:	6813      	ldr	r3, [r2, #0]
 80089f8:	4615      	mov	r5, r2
 80089fa:	b933      	cbnz	r3, 8008a0a <_free_r+0x32>
 80089fc:	6063      	str	r3, [r4, #4]
 80089fe:	6014      	str	r4, [r2, #0]
 8008a00:	b003      	add	sp, #12
 8008a02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a06:	f000 ba5f 	b.w	8008ec8 <__malloc_unlock>
 8008a0a:	42a3      	cmp	r3, r4
 8008a0c:	d90b      	bls.n	8008a26 <_free_r+0x4e>
 8008a0e:	6821      	ldr	r1, [r4, #0]
 8008a10:	1862      	adds	r2, r4, r1
 8008a12:	4293      	cmp	r3, r2
 8008a14:	bf04      	itt	eq
 8008a16:	681a      	ldreq	r2, [r3, #0]
 8008a18:	685b      	ldreq	r3, [r3, #4]
 8008a1a:	6063      	str	r3, [r4, #4]
 8008a1c:	bf04      	itt	eq
 8008a1e:	1852      	addeq	r2, r2, r1
 8008a20:	6022      	streq	r2, [r4, #0]
 8008a22:	602c      	str	r4, [r5, #0]
 8008a24:	e7ec      	b.n	8008a00 <_free_r+0x28>
 8008a26:	461a      	mov	r2, r3
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	b10b      	cbz	r3, 8008a30 <_free_r+0x58>
 8008a2c:	42a3      	cmp	r3, r4
 8008a2e:	d9fa      	bls.n	8008a26 <_free_r+0x4e>
 8008a30:	6811      	ldr	r1, [r2, #0]
 8008a32:	1855      	adds	r5, r2, r1
 8008a34:	42a5      	cmp	r5, r4
 8008a36:	d10b      	bne.n	8008a50 <_free_r+0x78>
 8008a38:	6824      	ldr	r4, [r4, #0]
 8008a3a:	4421      	add	r1, r4
 8008a3c:	1854      	adds	r4, r2, r1
 8008a3e:	42a3      	cmp	r3, r4
 8008a40:	6011      	str	r1, [r2, #0]
 8008a42:	d1dd      	bne.n	8008a00 <_free_r+0x28>
 8008a44:	681c      	ldr	r4, [r3, #0]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	6053      	str	r3, [r2, #4]
 8008a4a:	4421      	add	r1, r4
 8008a4c:	6011      	str	r1, [r2, #0]
 8008a4e:	e7d7      	b.n	8008a00 <_free_r+0x28>
 8008a50:	d902      	bls.n	8008a58 <_free_r+0x80>
 8008a52:	230c      	movs	r3, #12
 8008a54:	6003      	str	r3, [r0, #0]
 8008a56:	e7d3      	b.n	8008a00 <_free_r+0x28>
 8008a58:	6825      	ldr	r5, [r4, #0]
 8008a5a:	1961      	adds	r1, r4, r5
 8008a5c:	428b      	cmp	r3, r1
 8008a5e:	bf04      	itt	eq
 8008a60:	6819      	ldreq	r1, [r3, #0]
 8008a62:	685b      	ldreq	r3, [r3, #4]
 8008a64:	6063      	str	r3, [r4, #4]
 8008a66:	bf04      	itt	eq
 8008a68:	1949      	addeq	r1, r1, r5
 8008a6a:	6021      	streq	r1, [r4, #0]
 8008a6c:	6054      	str	r4, [r2, #4]
 8008a6e:	e7c7      	b.n	8008a00 <_free_r+0x28>
 8008a70:	b003      	add	sp, #12
 8008a72:	bd30      	pop	{r4, r5, pc}
 8008a74:	20000250 	.word	0x20000250

08008a78 <_malloc_r>:
 8008a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7a:	1ccd      	adds	r5, r1, #3
 8008a7c:	f025 0503 	bic.w	r5, r5, #3
 8008a80:	3508      	adds	r5, #8
 8008a82:	2d0c      	cmp	r5, #12
 8008a84:	bf38      	it	cc
 8008a86:	250c      	movcc	r5, #12
 8008a88:	2d00      	cmp	r5, #0
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	db01      	blt.n	8008a92 <_malloc_r+0x1a>
 8008a8e:	42a9      	cmp	r1, r5
 8008a90:	d903      	bls.n	8008a9a <_malloc_r+0x22>
 8008a92:	230c      	movs	r3, #12
 8008a94:	6033      	str	r3, [r6, #0]
 8008a96:	2000      	movs	r0, #0
 8008a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a9a:	f000 fa0f 	bl	8008ebc <__malloc_lock>
 8008a9e:	4921      	ldr	r1, [pc, #132]	; (8008b24 <_malloc_r+0xac>)
 8008aa0:	680a      	ldr	r2, [r1, #0]
 8008aa2:	4614      	mov	r4, r2
 8008aa4:	b99c      	cbnz	r4, 8008ace <_malloc_r+0x56>
 8008aa6:	4f20      	ldr	r7, [pc, #128]	; (8008b28 <_malloc_r+0xb0>)
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	b923      	cbnz	r3, 8008ab6 <_malloc_r+0x3e>
 8008aac:	4621      	mov	r1, r4
 8008aae:	4630      	mov	r0, r6
 8008ab0:	f000 f998 	bl	8008de4 <_sbrk_r>
 8008ab4:	6038      	str	r0, [r7, #0]
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f000 f993 	bl	8008de4 <_sbrk_r>
 8008abe:	1c43      	adds	r3, r0, #1
 8008ac0:	d123      	bne.n	8008b0a <_malloc_r+0x92>
 8008ac2:	230c      	movs	r3, #12
 8008ac4:	6033      	str	r3, [r6, #0]
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	f000 f9fe 	bl	8008ec8 <__malloc_unlock>
 8008acc:	e7e3      	b.n	8008a96 <_malloc_r+0x1e>
 8008ace:	6823      	ldr	r3, [r4, #0]
 8008ad0:	1b5b      	subs	r3, r3, r5
 8008ad2:	d417      	bmi.n	8008b04 <_malloc_r+0x8c>
 8008ad4:	2b0b      	cmp	r3, #11
 8008ad6:	d903      	bls.n	8008ae0 <_malloc_r+0x68>
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	441c      	add	r4, r3
 8008adc:	6025      	str	r5, [r4, #0]
 8008ade:	e004      	b.n	8008aea <_malloc_r+0x72>
 8008ae0:	6863      	ldr	r3, [r4, #4]
 8008ae2:	42a2      	cmp	r2, r4
 8008ae4:	bf0c      	ite	eq
 8008ae6:	600b      	streq	r3, [r1, #0]
 8008ae8:	6053      	strne	r3, [r2, #4]
 8008aea:	4630      	mov	r0, r6
 8008aec:	f000 f9ec 	bl	8008ec8 <__malloc_unlock>
 8008af0:	f104 000b 	add.w	r0, r4, #11
 8008af4:	1d23      	adds	r3, r4, #4
 8008af6:	f020 0007 	bic.w	r0, r0, #7
 8008afa:	1ac2      	subs	r2, r0, r3
 8008afc:	d0cc      	beq.n	8008a98 <_malloc_r+0x20>
 8008afe:	1a1b      	subs	r3, r3, r0
 8008b00:	50a3      	str	r3, [r4, r2]
 8008b02:	e7c9      	b.n	8008a98 <_malloc_r+0x20>
 8008b04:	4622      	mov	r2, r4
 8008b06:	6864      	ldr	r4, [r4, #4]
 8008b08:	e7cc      	b.n	8008aa4 <_malloc_r+0x2c>
 8008b0a:	1cc4      	adds	r4, r0, #3
 8008b0c:	f024 0403 	bic.w	r4, r4, #3
 8008b10:	42a0      	cmp	r0, r4
 8008b12:	d0e3      	beq.n	8008adc <_malloc_r+0x64>
 8008b14:	1a21      	subs	r1, r4, r0
 8008b16:	4630      	mov	r0, r6
 8008b18:	f000 f964 	bl	8008de4 <_sbrk_r>
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	d1dd      	bne.n	8008adc <_malloc_r+0x64>
 8008b20:	e7cf      	b.n	8008ac2 <_malloc_r+0x4a>
 8008b22:	bf00      	nop
 8008b24:	20000250 	.word	0x20000250
 8008b28:	20000254 	.word	0x20000254

08008b2c <__ssputs_r>:
 8008b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b30:	688e      	ldr	r6, [r1, #8]
 8008b32:	429e      	cmp	r6, r3
 8008b34:	4682      	mov	sl, r0
 8008b36:	460c      	mov	r4, r1
 8008b38:	4690      	mov	r8, r2
 8008b3a:	461f      	mov	r7, r3
 8008b3c:	d838      	bhi.n	8008bb0 <__ssputs_r+0x84>
 8008b3e:	898a      	ldrh	r2, [r1, #12]
 8008b40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b44:	d032      	beq.n	8008bac <__ssputs_r+0x80>
 8008b46:	6825      	ldr	r5, [r4, #0]
 8008b48:	6909      	ldr	r1, [r1, #16]
 8008b4a:	eba5 0901 	sub.w	r9, r5, r1
 8008b4e:	6965      	ldr	r5, [r4, #20]
 8008b50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b58:	3301      	adds	r3, #1
 8008b5a:	444b      	add	r3, r9
 8008b5c:	106d      	asrs	r5, r5, #1
 8008b5e:	429d      	cmp	r5, r3
 8008b60:	bf38      	it	cc
 8008b62:	461d      	movcc	r5, r3
 8008b64:	0553      	lsls	r3, r2, #21
 8008b66:	d531      	bpl.n	8008bcc <__ssputs_r+0xa0>
 8008b68:	4629      	mov	r1, r5
 8008b6a:	f7ff ff85 	bl	8008a78 <_malloc_r>
 8008b6e:	4606      	mov	r6, r0
 8008b70:	b950      	cbnz	r0, 8008b88 <__ssputs_r+0x5c>
 8008b72:	230c      	movs	r3, #12
 8008b74:	f8ca 3000 	str.w	r3, [sl]
 8008b78:	89a3      	ldrh	r3, [r4, #12]
 8008b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b7e:	81a3      	strh	r3, [r4, #12]
 8008b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b88:	6921      	ldr	r1, [r4, #16]
 8008b8a:	464a      	mov	r2, r9
 8008b8c:	f7fe f900 	bl	8006d90 <memcpy>
 8008b90:	89a3      	ldrh	r3, [r4, #12]
 8008b92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b9a:	81a3      	strh	r3, [r4, #12]
 8008b9c:	6126      	str	r6, [r4, #16]
 8008b9e:	6165      	str	r5, [r4, #20]
 8008ba0:	444e      	add	r6, r9
 8008ba2:	eba5 0509 	sub.w	r5, r5, r9
 8008ba6:	6026      	str	r6, [r4, #0]
 8008ba8:	60a5      	str	r5, [r4, #8]
 8008baa:	463e      	mov	r6, r7
 8008bac:	42be      	cmp	r6, r7
 8008bae:	d900      	bls.n	8008bb2 <__ssputs_r+0x86>
 8008bb0:	463e      	mov	r6, r7
 8008bb2:	4632      	mov	r2, r6
 8008bb4:	6820      	ldr	r0, [r4, #0]
 8008bb6:	4641      	mov	r1, r8
 8008bb8:	f000 f966 	bl	8008e88 <memmove>
 8008bbc:	68a3      	ldr	r3, [r4, #8]
 8008bbe:	6822      	ldr	r2, [r4, #0]
 8008bc0:	1b9b      	subs	r3, r3, r6
 8008bc2:	4432      	add	r2, r6
 8008bc4:	60a3      	str	r3, [r4, #8]
 8008bc6:	6022      	str	r2, [r4, #0]
 8008bc8:	2000      	movs	r0, #0
 8008bca:	e7db      	b.n	8008b84 <__ssputs_r+0x58>
 8008bcc:	462a      	mov	r2, r5
 8008bce:	f000 f981 	bl	8008ed4 <_realloc_r>
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d1e1      	bne.n	8008b9c <__ssputs_r+0x70>
 8008bd8:	6921      	ldr	r1, [r4, #16]
 8008bda:	4650      	mov	r0, sl
 8008bdc:	f7ff fefc 	bl	80089d8 <_free_r>
 8008be0:	e7c7      	b.n	8008b72 <__ssputs_r+0x46>
	...

08008be4 <_svfiprintf_r>:
 8008be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be8:	4698      	mov	r8, r3
 8008bea:	898b      	ldrh	r3, [r1, #12]
 8008bec:	061b      	lsls	r3, r3, #24
 8008bee:	b09d      	sub	sp, #116	; 0x74
 8008bf0:	4607      	mov	r7, r0
 8008bf2:	460d      	mov	r5, r1
 8008bf4:	4614      	mov	r4, r2
 8008bf6:	d50e      	bpl.n	8008c16 <_svfiprintf_r+0x32>
 8008bf8:	690b      	ldr	r3, [r1, #16]
 8008bfa:	b963      	cbnz	r3, 8008c16 <_svfiprintf_r+0x32>
 8008bfc:	2140      	movs	r1, #64	; 0x40
 8008bfe:	f7ff ff3b 	bl	8008a78 <_malloc_r>
 8008c02:	6028      	str	r0, [r5, #0]
 8008c04:	6128      	str	r0, [r5, #16]
 8008c06:	b920      	cbnz	r0, 8008c12 <_svfiprintf_r+0x2e>
 8008c08:	230c      	movs	r3, #12
 8008c0a:	603b      	str	r3, [r7, #0]
 8008c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c10:	e0d1      	b.n	8008db6 <_svfiprintf_r+0x1d2>
 8008c12:	2340      	movs	r3, #64	; 0x40
 8008c14:	616b      	str	r3, [r5, #20]
 8008c16:	2300      	movs	r3, #0
 8008c18:	9309      	str	r3, [sp, #36]	; 0x24
 8008c1a:	2320      	movs	r3, #32
 8008c1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c20:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c24:	2330      	movs	r3, #48	; 0x30
 8008c26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008dd0 <_svfiprintf_r+0x1ec>
 8008c2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c2e:	f04f 0901 	mov.w	r9, #1
 8008c32:	4623      	mov	r3, r4
 8008c34:	469a      	mov	sl, r3
 8008c36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c3a:	b10a      	cbz	r2, 8008c40 <_svfiprintf_r+0x5c>
 8008c3c:	2a25      	cmp	r2, #37	; 0x25
 8008c3e:	d1f9      	bne.n	8008c34 <_svfiprintf_r+0x50>
 8008c40:	ebba 0b04 	subs.w	fp, sl, r4
 8008c44:	d00b      	beq.n	8008c5e <_svfiprintf_r+0x7a>
 8008c46:	465b      	mov	r3, fp
 8008c48:	4622      	mov	r2, r4
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	4638      	mov	r0, r7
 8008c4e:	f7ff ff6d 	bl	8008b2c <__ssputs_r>
 8008c52:	3001      	adds	r0, #1
 8008c54:	f000 80aa 	beq.w	8008dac <_svfiprintf_r+0x1c8>
 8008c58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c5a:	445a      	add	r2, fp
 8008c5c:	9209      	str	r2, [sp, #36]	; 0x24
 8008c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f000 80a2 	beq.w	8008dac <_svfiprintf_r+0x1c8>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c72:	f10a 0a01 	add.w	sl, sl, #1
 8008c76:	9304      	str	r3, [sp, #16]
 8008c78:	9307      	str	r3, [sp, #28]
 8008c7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c7e:	931a      	str	r3, [sp, #104]	; 0x68
 8008c80:	4654      	mov	r4, sl
 8008c82:	2205      	movs	r2, #5
 8008c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c88:	4851      	ldr	r0, [pc, #324]	; (8008dd0 <_svfiprintf_r+0x1ec>)
 8008c8a:	f7f7 fae1 	bl	8000250 <memchr>
 8008c8e:	9a04      	ldr	r2, [sp, #16]
 8008c90:	b9d8      	cbnz	r0, 8008cca <_svfiprintf_r+0xe6>
 8008c92:	06d0      	lsls	r0, r2, #27
 8008c94:	bf44      	itt	mi
 8008c96:	2320      	movmi	r3, #32
 8008c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c9c:	0711      	lsls	r1, r2, #28
 8008c9e:	bf44      	itt	mi
 8008ca0:	232b      	movmi	r3, #43	; 0x2b
 8008ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8008caa:	2b2a      	cmp	r3, #42	; 0x2a
 8008cac:	d015      	beq.n	8008cda <_svfiprintf_r+0xf6>
 8008cae:	9a07      	ldr	r2, [sp, #28]
 8008cb0:	4654      	mov	r4, sl
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	f04f 0c0a 	mov.w	ip, #10
 8008cb8:	4621      	mov	r1, r4
 8008cba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cbe:	3b30      	subs	r3, #48	; 0x30
 8008cc0:	2b09      	cmp	r3, #9
 8008cc2:	d94e      	bls.n	8008d62 <_svfiprintf_r+0x17e>
 8008cc4:	b1b0      	cbz	r0, 8008cf4 <_svfiprintf_r+0x110>
 8008cc6:	9207      	str	r2, [sp, #28]
 8008cc8:	e014      	b.n	8008cf4 <_svfiprintf_r+0x110>
 8008cca:	eba0 0308 	sub.w	r3, r0, r8
 8008cce:	fa09 f303 	lsl.w	r3, r9, r3
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	9304      	str	r3, [sp, #16]
 8008cd6:	46a2      	mov	sl, r4
 8008cd8:	e7d2      	b.n	8008c80 <_svfiprintf_r+0x9c>
 8008cda:	9b03      	ldr	r3, [sp, #12]
 8008cdc:	1d19      	adds	r1, r3, #4
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	9103      	str	r1, [sp, #12]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	bfbb      	ittet	lt
 8008ce6:	425b      	neglt	r3, r3
 8008ce8:	f042 0202 	orrlt.w	r2, r2, #2
 8008cec:	9307      	strge	r3, [sp, #28]
 8008cee:	9307      	strlt	r3, [sp, #28]
 8008cf0:	bfb8      	it	lt
 8008cf2:	9204      	strlt	r2, [sp, #16]
 8008cf4:	7823      	ldrb	r3, [r4, #0]
 8008cf6:	2b2e      	cmp	r3, #46	; 0x2e
 8008cf8:	d10c      	bne.n	8008d14 <_svfiprintf_r+0x130>
 8008cfa:	7863      	ldrb	r3, [r4, #1]
 8008cfc:	2b2a      	cmp	r3, #42	; 0x2a
 8008cfe:	d135      	bne.n	8008d6c <_svfiprintf_r+0x188>
 8008d00:	9b03      	ldr	r3, [sp, #12]
 8008d02:	1d1a      	adds	r2, r3, #4
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	9203      	str	r2, [sp, #12]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	bfb8      	it	lt
 8008d0c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008d10:	3402      	adds	r4, #2
 8008d12:	9305      	str	r3, [sp, #20]
 8008d14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008de0 <_svfiprintf_r+0x1fc>
 8008d18:	7821      	ldrb	r1, [r4, #0]
 8008d1a:	2203      	movs	r2, #3
 8008d1c:	4650      	mov	r0, sl
 8008d1e:	f7f7 fa97 	bl	8000250 <memchr>
 8008d22:	b140      	cbz	r0, 8008d36 <_svfiprintf_r+0x152>
 8008d24:	2340      	movs	r3, #64	; 0x40
 8008d26:	eba0 000a 	sub.w	r0, r0, sl
 8008d2a:	fa03 f000 	lsl.w	r0, r3, r0
 8008d2e:	9b04      	ldr	r3, [sp, #16]
 8008d30:	4303      	orrs	r3, r0
 8008d32:	3401      	adds	r4, #1
 8008d34:	9304      	str	r3, [sp, #16]
 8008d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d3a:	4826      	ldr	r0, [pc, #152]	; (8008dd4 <_svfiprintf_r+0x1f0>)
 8008d3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d40:	2206      	movs	r2, #6
 8008d42:	f7f7 fa85 	bl	8000250 <memchr>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	d038      	beq.n	8008dbc <_svfiprintf_r+0x1d8>
 8008d4a:	4b23      	ldr	r3, [pc, #140]	; (8008dd8 <_svfiprintf_r+0x1f4>)
 8008d4c:	bb1b      	cbnz	r3, 8008d96 <_svfiprintf_r+0x1b2>
 8008d4e:	9b03      	ldr	r3, [sp, #12]
 8008d50:	3307      	adds	r3, #7
 8008d52:	f023 0307 	bic.w	r3, r3, #7
 8008d56:	3308      	adds	r3, #8
 8008d58:	9303      	str	r3, [sp, #12]
 8008d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d5c:	4433      	add	r3, r6
 8008d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d60:	e767      	b.n	8008c32 <_svfiprintf_r+0x4e>
 8008d62:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d66:	460c      	mov	r4, r1
 8008d68:	2001      	movs	r0, #1
 8008d6a:	e7a5      	b.n	8008cb8 <_svfiprintf_r+0xd4>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	3401      	adds	r4, #1
 8008d70:	9305      	str	r3, [sp, #20]
 8008d72:	4619      	mov	r1, r3
 8008d74:	f04f 0c0a 	mov.w	ip, #10
 8008d78:	4620      	mov	r0, r4
 8008d7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d7e:	3a30      	subs	r2, #48	; 0x30
 8008d80:	2a09      	cmp	r2, #9
 8008d82:	d903      	bls.n	8008d8c <_svfiprintf_r+0x1a8>
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d0c5      	beq.n	8008d14 <_svfiprintf_r+0x130>
 8008d88:	9105      	str	r1, [sp, #20]
 8008d8a:	e7c3      	b.n	8008d14 <_svfiprintf_r+0x130>
 8008d8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d90:	4604      	mov	r4, r0
 8008d92:	2301      	movs	r3, #1
 8008d94:	e7f0      	b.n	8008d78 <_svfiprintf_r+0x194>
 8008d96:	ab03      	add	r3, sp, #12
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	462a      	mov	r2, r5
 8008d9c:	4b0f      	ldr	r3, [pc, #60]	; (8008ddc <_svfiprintf_r+0x1f8>)
 8008d9e:	a904      	add	r1, sp, #16
 8008da0:	4638      	mov	r0, r7
 8008da2:	f7fe f89d 	bl	8006ee0 <_printf_float>
 8008da6:	1c42      	adds	r2, r0, #1
 8008da8:	4606      	mov	r6, r0
 8008daa:	d1d6      	bne.n	8008d5a <_svfiprintf_r+0x176>
 8008dac:	89ab      	ldrh	r3, [r5, #12]
 8008dae:	065b      	lsls	r3, r3, #25
 8008db0:	f53f af2c 	bmi.w	8008c0c <_svfiprintf_r+0x28>
 8008db4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008db6:	b01d      	add	sp, #116	; 0x74
 8008db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dbc:	ab03      	add	r3, sp, #12
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	462a      	mov	r2, r5
 8008dc2:	4b06      	ldr	r3, [pc, #24]	; (8008ddc <_svfiprintf_r+0x1f8>)
 8008dc4:	a904      	add	r1, sp, #16
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	f7fe fb16 	bl	80073f8 <_printf_i>
 8008dcc:	e7eb      	b.n	8008da6 <_svfiprintf_r+0x1c2>
 8008dce:	bf00      	nop
 8008dd0:	08009c74 	.word	0x08009c74
 8008dd4:	08009c7e 	.word	0x08009c7e
 8008dd8:	08006ee1 	.word	0x08006ee1
 8008ddc:	08008b2d 	.word	0x08008b2d
 8008de0:	08009c7a 	.word	0x08009c7a

08008de4 <_sbrk_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	4d06      	ldr	r5, [pc, #24]	; (8008e00 <_sbrk_r+0x1c>)
 8008de8:	2300      	movs	r3, #0
 8008dea:	4604      	mov	r4, r0
 8008dec:	4608      	mov	r0, r1
 8008dee:	602b      	str	r3, [r5, #0]
 8008df0:	f7f9 fba2 	bl	8002538 <_sbrk>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	d102      	bne.n	8008dfe <_sbrk_r+0x1a>
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	b103      	cbz	r3, 8008dfe <_sbrk_r+0x1a>
 8008dfc:	6023      	str	r3, [r4, #0]
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	20000838 	.word	0x20000838

08008e04 <__assert_func>:
 8008e04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e06:	4614      	mov	r4, r2
 8008e08:	461a      	mov	r2, r3
 8008e0a:	4b09      	ldr	r3, [pc, #36]	; (8008e30 <__assert_func+0x2c>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4605      	mov	r5, r0
 8008e10:	68d8      	ldr	r0, [r3, #12]
 8008e12:	b14c      	cbz	r4, 8008e28 <__assert_func+0x24>
 8008e14:	4b07      	ldr	r3, [pc, #28]	; (8008e34 <__assert_func+0x30>)
 8008e16:	9100      	str	r1, [sp, #0]
 8008e18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e1c:	4906      	ldr	r1, [pc, #24]	; (8008e38 <__assert_func+0x34>)
 8008e1e:	462b      	mov	r3, r5
 8008e20:	f000 f80e 	bl	8008e40 <fiprintf>
 8008e24:	f000 faa4 	bl	8009370 <abort>
 8008e28:	4b04      	ldr	r3, [pc, #16]	; (8008e3c <__assert_func+0x38>)
 8008e2a:	461c      	mov	r4, r3
 8008e2c:	e7f3      	b.n	8008e16 <__assert_func+0x12>
 8008e2e:	bf00      	nop
 8008e30:	2000005c 	.word	0x2000005c
 8008e34:	08009c85 	.word	0x08009c85
 8008e38:	08009c92 	.word	0x08009c92
 8008e3c:	08009cc0 	.word	0x08009cc0

08008e40 <fiprintf>:
 8008e40:	b40e      	push	{r1, r2, r3}
 8008e42:	b503      	push	{r0, r1, lr}
 8008e44:	4601      	mov	r1, r0
 8008e46:	ab03      	add	r3, sp, #12
 8008e48:	4805      	ldr	r0, [pc, #20]	; (8008e60 <fiprintf+0x20>)
 8008e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e4e:	6800      	ldr	r0, [r0, #0]
 8008e50:	9301      	str	r3, [sp, #4]
 8008e52:	f000 f88f 	bl	8008f74 <_vfiprintf_r>
 8008e56:	b002      	add	sp, #8
 8008e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e5c:	b003      	add	sp, #12
 8008e5e:	4770      	bx	lr
 8008e60:	2000005c 	.word	0x2000005c

08008e64 <__ascii_mbtowc>:
 8008e64:	b082      	sub	sp, #8
 8008e66:	b901      	cbnz	r1, 8008e6a <__ascii_mbtowc+0x6>
 8008e68:	a901      	add	r1, sp, #4
 8008e6a:	b142      	cbz	r2, 8008e7e <__ascii_mbtowc+0x1a>
 8008e6c:	b14b      	cbz	r3, 8008e82 <__ascii_mbtowc+0x1e>
 8008e6e:	7813      	ldrb	r3, [r2, #0]
 8008e70:	600b      	str	r3, [r1, #0]
 8008e72:	7812      	ldrb	r2, [r2, #0]
 8008e74:	1e10      	subs	r0, r2, #0
 8008e76:	bf18      	it	ne
 8008e78:	2001      	movne	r0, #1
 8008e7a:	b002      	add	sp, #8
 8008e7c:	4770      	bx	lr
 8008e7e:	4610      	mov	r0, r2
 8008e80:	e7fb      	b.n	8008e7a <__ascii_mbtowc+0x16>
 8008e82:	f06f 0001 	mvn.w	r0, #1
 8008e86:	e7f8      	b.n	8008e7a <__ascii_mbtowc+0x16>

08008e88 <memmove>:
 8008e88:	4288      	cmp	r0, r1
 8008e8a:	b510      	push	{r4, lr}
 8008e8c:	eb01 0402 	add.w	r4, r1, r2
 8008e90:	d902      	bls.n	8008e98 <memmove+0x10>
 8008e92:	4284      	cmp	r4, r0
 8008e94:	4623      	mov	r3, r4
 8008e96:	d807      	bhi.n	8008ea8 <memmove+0x20>
 8008e98:	1e43      	subs	r3, r0, #1
 8008e9a:	42a1      	cmp	r1, r4
 8008e9c:	d008      	beq.n	8008eb0 <memmove+0x28>
 8008e9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ea2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ea6:	e7f8      	b.n	8008e9a <memmove+0x12>
 8008ea8:	4402      	add	r2, r0
 8008eaa:	4601      	mov	r1, r0
 8008eac:	428a      	cmp	r2, r1
 8008eae:	d100      	bne.n	8008eb2 <memmove+0x2a>
 8008eb0:	bd10      	pop	{r4, pc}
 8008eb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008eb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008eba:	e7f7      	b.n	8008eac <memmove+0x24>

08008ebc <__malloc_lock>:
 8008ebc:	4801      	ldr	r0, [pc, #4]	; (8008ec4 <__malloc_lock+0x8>)
 8008ebe:	f000 bc17 	b.w	80096f0 <__retarget_lock_acquire_recursive>
 8008ec2:	bf00      	nop
 8008ec4:	20000840 	.word	0x20000840

08008ec8 <__malloc_unlock>:
 8008ec8:	4801      	ldr	r0, [pc, #4]	; (8008ed0 <__malloc_unlock+0x8>)
 8008eca:	f000 bc12 	b.w	80096f2 <__retarget_lock_release_recursive>
 8008ece:	bf00      	nop
 8008ed0:	20000840 	.word	0x20000840

08008ed4 <_realloc_r>:
 8008ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed6:	4607      	mov	r7, r0
 8008ed8:	4614      	mov	r4, r2
 8008eda:	460e      	mov	r6, r1
 8008edc:	b921      	cbnz	r1, 8008ee8 <_realloc_r+0x14>
 8008ede:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	f7ff bdc8 	b.w	8008a78 <_malloc_r>
 8008ee8:	b922      	cbnz	r2, 8008ef4 <_realloc_r+0x20>
 8008eea:	f7ff fd75 	bl	80089d8 <_free_r>
 8008eee:	4625      	mov	r5, r4
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ef4:	f000 fc62 	bl	80097bc <_malloc_usable_size_r>
 8008ef8:	42a0      	cmp	r0, r4
 8008efa:	d20f      	bcs.n	8008f1c <_realloc_r+0x48>
 8008efc:	4621      	mov	r1, r4
 8008efe:	4638      	mov	r0, r7
 8008f00:	f7ff fdba 	bl	8008a78 <_malloc_r>
 8008f04:	4605      	mov	r5, r0
 8008f06:	2800      	cmp	r0, #0
 8008f08:	d0f2      	beq.n	8008ef0 <_realloc_r+0x1c>
 8008f0a:	4631      	mov	r1, r6
 8008f0c:	4622      	mov	r2, r4
 8008f0e:	f7fd ff3f 	bl	8006d90 <memcpy>
 8008f12:	4631      	mov	r1, r6
 8008f14:	4638      	mov	r0, r7
 8008f16:	f7ff fd5f 	bl	80089d8 <_free_r>
 8008f1a:	e7e9      	b.n	8008ef0 <_realloc_r+0x1c>
 8008f1c:	4635      	mov	r5, r6
 8008f1e:	e7e7      	b.n	8008ef0 <_realloc_r+0x1c>

08008f20 <__sfputc_r>:
 8008f20:	6893      	ldr	r3, [r2, #8]
 8008f22:	3b01      	subs	r3, #1
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	b410      	push	{r4}
 8008f28:	6093      	str	r3, [r2, #8]
 8008f2a:	da08      	bge.n	8008f3e <__sfputc_r+0x1e>
 8008f2c:	6994      	ldr	r4, [r2, #24]
 8008f2e:	42a3      	cmp	r3, r4
 8008f30:	db01      	blt.n	8008f36 <__sfputc_r+0x16>
 8008f32:	290a      	cmp	r1, #10
 8008f34:	d103      	bne.n	8008f3e <__sfputc_r+0x1e>
 8008f36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f3a:	f000 b94b 	b.w	80091d4 <__swbuf_r>
 8008f3e:	6813      	ldr	r3, [r2, #0]
 8008f40:	1c58      	adds	r0, r3, #1
 8008f42:	6010      	str	r0, [r2, #0]
 8008f44:	7019      	strb	r1, [r3, #0]
 8008f46:	4608      	mov	r0, r1
 8008f48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f4c:	4770      	bx	lr

08008f4e <__sfputs_r>:
 8008f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f50:	4606      	mov	r6, r0
 8008f52:	460f      	mov	r7, r1
 8008f54:	4614      	mov	r4, r2
 8008f56:	18d5      	adds	r5, r2, r3
 8008f58:	42ac      	cmp	r4, r5
 8008f5a:	d101      	bne.n	8008f60 <__sfputs_r+0x12>
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	e007      	b.n	8008f70 <__sfputs_r+0x22>
 8008f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f64:	463a      	mov	r2, r7
 8008f66:	4630      	mov	r0, r6
 8008f68:	f7ff ffda 	bl	8008f20 <__sfputc_r>
 8008f6c:	1c43      	adds	r3, r0, #1
 8008f6e:	d1f3      	bne.n	8008f58 <__sfputs_r+0xa>
 8008f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f74 <_vfiprintf_r>:
 8008f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f78:	460d      	mov	r5, r1
 8008f7a:	b09d      	sub	sp, #116	; 0x74
 8008f7c:	4614      	mov	r4, r2
 8008f7e:	4698      	mov	r8, r3
 8008f80:	4606      	mov	r6, r0
 8008f82:	b118      	cbz	r0, 8008f8c <_vfiprintf_r+0x18>
 8008f84:	6983      	ldr	r3, [r0, #24]
 8008f86:	b90b      	cbnz	r3, 8008f8c <_vfiprintf_r+0x18>
 8008f88:	f000 fb14 	bl	80095b4 <__sinit>
 8008f8c:	4b89      	ldr	r3, [pc, #548]	; (80091b4 <_vfiprintf_r+0x240>)
 8008f8e:	429d      	cmp	r5, r3
 8008f90:	d11b      	bne.n	8008fca <_vfiprintf_r+0x56>
 8008f92:	6875      	ldr	r5, [r6, #4]
 8008f94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f96:	07d9      	lsls	r1, r3, #31
 8008f98:	d405      	bmi.n	8008fa6 <_vfiprintf_r+0x32>
 8008f9a:	89ab      	ldrh	r3, [r5, #12]
 8008f9c:	059a      	lsls	r2, r3, #22
 8008f9e:	d402      	bmi.n	8008fa6 <_vfiprintf_r+0x32>
 8008fa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fa2:	f000 fba5 	bl	80096f0 <__retarget_lock_acquire_recursive>
 8008fa6:	89ab      	ldrh	r3, [r5, #12]
 8008fa8:	071b      	lsls	r3, r3, #28
 8008faa:	d501      	bpl.n	8008fb0 <_vfiprintf_r+0x3c>
 8008fac:	692b      	ldr	r3, [r5, #16]
 8008fae:	b9eb      	cbnz	r3, 8008fec <_vfiprintf_r+0x78>
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	f000 f96e 	bl	8009294 <__swsetup_r>
 8008fb8:	b1c0      	cbz	r0, 8008fec <_vfiprintf_r+0x78>
 8008fba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fbc:	07dc      	lsls	r4, r3, #31
 8008fbe:	d50e      	bpl.n	8008fde <_vfiprintf_r+0x6a>
 8008fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fc4:	b01d      	add	sp, #116	; 0x74
 8008fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fca:	4b7b      	ldr	r3, [pc, #492]	; (80091b8 <_vfiprintf_r+0x244>)
 8008fcc:	429d      	cmp	r5, r3
 8008fce:	d101      	bne.n	8008fd4 <_vfiprintf_r+0x60>
 8008fd0:	68b5      	ldr	r5, [r6, #8]
 8008fd2:	e7df      	b.n	8008f94 <_vfiprintf_r+0x20>
 8008fd4:	4b79      	ldr	r3, [pc, #484]	; (80091bc <_vfiprintf_r+0x248>)
 8008fd6:	429d      	cmp	r5, r3
 8008fd8:	bf08      	it	eq
 8008fda:	68f5      	ldreq	r5, [r6, #12]
 8008fdc:	e7da      	b.n	8008f94 <_vfiprintf_r+0x20>
 8008fde:	89ab      	ldrh	r3, [r5, #12]
 8008fe0:	0598      	lsls	r0, r3, #22
 8008fe2:	d4ed      	bmi.n	8008fc0 <_vfiprintf_r+0x4c>
 8008fe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fe6:	f000 fb84 	bl	80096f2 <__retarget_lock_release_recursive>
 8008fea:	e7e9      	b.n	8008fc0 <_vfiprintf_r+0x4c>
 8008fec:	2300      	movs	r3, #0
 8008fee:	9309      	str	r3, [sp, #36]	; 0x24
 8008ff0:	2320      	movs	r3, #32
 8008ff2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ff6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ffa:	2330      	movs	r3, #48	; 0x30
 8008ffc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80091c0 <_vfiprintf_r+0x24c>
 8009000:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009004:	f04f 0901 	mov.w	r9, #1
 8009008:	4623      	mov	r3, r4
 800900a:	469a      	mov	sl, r3
 800900c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009010:	b10a      	cbz	r2, 8009016 <_vfiprintf_r+0xa2>
 8009012:	2a25      	cmp	r2, #37	; 0x25
 8009014:	d1f9      	bne.n	800900a <_vfiprintf_r+0x96>
 8009016:	ebba 0b04 	subs.w	fp, sl, r4
 800901a:	d00b      	beq.n	8009034 <_vfiprintf_r+0xc0>
 800901c:	465b      	mov	r3, fp
 800901e:	4622      	mov	r2, r4
 8009020:	4629      	mov	r1, r5
 8009022:	4630      	mov	r0, r6
 8009024:	f7ff ff93 	bl	8008f4e <__sfputs_r>
 8009028:	3001      	adds	r0, #1
 800902a:	f000 80aa 	beq.w	8009182 <_vfiprintf_r+0x20e>
 800902e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009030:	445a      	add	r2, fp
 8009032:	9209      	str	r2, [sp, #36]	; 0x24
 8009034:	f89a 3000 	ldrb.w	r3, [sl]
 8009038:	2b00      	cmp	r3, #0
 800903a:	f000 80a2 	beq.w	8009182 <_vfiprintf_r+0x20e>
 800903e:	2300      	movs	r3, #0
 8009040:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009044:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009048:	f10a 0a01 	add.w	sl, sl, #1
 800904c:	9304      	str	r3, [sp, #16]
 800904e:	9307      	str	r3, [sp, #28]
 8009050:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009054:	931a      	str	r3, [sp, #104]	; 0x68
 8009056:	4654      	mov	r4, sl
 8009058:	2205      	movs	r2, #5
 800905a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800905e:	4858      	ldr	r0, [pc, #352]	; (80091c0 <_vfiprintf_r+0x24c>)
 8009060:	f7f7 f8f6 	bl	8000250 <memchr>
 8009064:	9a04      	ldr	r2, [sp, #16]
 8009066:	b9d8      	cbnz	r0, 80090a0 <_vfiprintf_r+0x12c>
 8009068:	06d1      	lsls	r1, r2, #27
 800906a:	bf44      	itt	mi
 800906c:	2320      	movmi	r3, #32
 800906e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009072:	0713      	lsls	r3, r2, #28
 8009074:	bf44      	itt	mi
 8009076:	232b      	movmi	r3, #43	; 0x2b
 8009078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800907c:	f89a 3000 	ldrb.w	r3, [sl]
 8009080:	2b2a      	cmp	r3, #42	; 0x2a
 8009082:	d015      	beq.n	80090b0 <_vfiprintf_r+0x13c>
 8009084:	9a07      	ldr	r2, [sp, #28]
 8009086:	4654      	mov	r4, sl
 8009088:	2000      	movs	r0, #0
 800908a:	f04f 0c0a 	mov.w	ip, #10
 800908e:	4621      	mov	r1, r4
 8009090:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009094:	3b30      	subs	r3, #48	; 0x30
 8009096:	2b09      	cmp	r3, #9
 8009098:	d94e      	bls.n	8009138 <_vfiprintf_r+0x1c4>
 800909a:	b1b0      	cbz	r0, 80090ca <_vfiprintf_r+0x156>
 800909c:	9207      	str	r2, [sp, #28]
 800909e:	e014      	b.n	80090ca <_vfiprintf_r+0x156>
 80090a0:	eba0 0308 	sub.w	r3, r0, r8
 80090a4:	fa09 f303 	lsl.w	r3, r9, r3
 80090a8:	4313      	orrs	r3, r2
 80090aa:	9304      	str	r3, [sp, #16]
 80090ac:	46a2      	mov	sl, r4
 80090ae:	e7d2      	b.n	8009056 <_vfiprintf_r+0xe2>
 80090b0:	9b03      	ldr	r3, [sp, #12]
 80090b2:	1d19      	adds	r1, r3, #4
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	9103      	str	r1, [sp, #12]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	bfbb      	ittet	lt
 80090bc:	425b      	neglt	r3, r3
 80090be:	f042 0202 	orrlt.w	r2, r2, #2
 80090c2:	9307      	strge	r3, [sp, #28]
 80090c4:	9307      	strlt	r3, [sp, #28]
 80090c6:	bfb8      	it	lt
 80090c8:	9204      	strlt	r2, [sp, #16]
 80090ca:	7823      	ldrb	r3, [r4, #0]
 80090cc:	2b2e      	cmp	r3, #46	; 0x2e
 80090ce:	d10c      	bne.n	80090ea <_vfiprintf_r+0x176>
 80090d0:	7863      	ldrb	r3, [r4, #1]
 80090d2:	2b2a      	cmp	r3, #42	; 0x2a
 80090d4:	d135      	bne.n	8009142 <_vfiprintf_r+0x1ce>
 80090d6:	9b03      	ldr	r3, [sp, #12]
 80090d8:	1d1a      	adds	r2, r3, #4
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	9203      	str	r2, [sp, #12]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	bfb8      	it	lt
 80090e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80090e6:	3402      	adds	r4, #2
 80090e8:	9305      	str	r3, [sp, #20]
 80090ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80091d0 <_vfiprintf_r+0x25c>
 80090ee:	7821      	ldrb	r1, [r4, #0]
 80090f0:	2203      	movs	r2, #3
 80090f2:	4650      	mov	r0, sl
 80090f4:	f7f7 f8ac 	bl	8000250 <memchr>
 80090f8:	b140      	cbz	r0, 800910c <_vfiprintf_r+0x198>
 80090fa:	2340      	movs	r3, #64	; 0x40
 80090fc:	eba0 000a 	sub.w	r0, r0, sl
 8009100:	fa03 f000 	lsl.w	r0, r3, r0
 8009104:	9b04      	ldr	r3, [sp, #16]
 8009106:	4303      	orrs	r3, r0
 8009108:	3401      	adds	r4, #1
 800910a:	9304      	str	r3, [sp, #16]
 800910c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009110:	482c      	ldr	r0, [pc, #176]	; (80091c4 <_vfiprintf_r+0x250>)
 8009112:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009116:	2206      	movs	r2, #6
 8009118:	f7f7 f89a 	bl	8000250 <memchr>
 800911c:	2800      	cmp	r0, #0
 800911e:	d03f      	beq.n	80091a0 <_vfiprintf_r+0x22c>
 8009120:	4b29      	ldr	r3, [pc, #164]	; (80091c8 <_vfiprintf_r+0x254>)
 8009122:	bb1b      	cbnz	r3, 800916c <_vfiprintf_r+0x1f8>
 8009124:	9b03      	ldr	r3, [sp, #12]
 8009126:	3307      	adds	r3, #7
 8009128:	f023 0307 	bic.w	r3, r3, #7
 800912c:	3308      	adds	r3, #8
 800912e:	9303      	str	r3, [sp, #12]
 8009130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009132:	443b      	add	r3, r7
 8009134:	9309      	str	r3, [sp, #36]	; 0x24
 8009136:	e767      	b.n	8009008 <_vfiprintf_r+0x94>
 8009138:	fb0c 3202 	mla	r2, ip, r2, r3
 800913c:	460c      	mov	r4, r1
 800913e:	2001      	movs	r0, #1
 8009140:	e7a5      	b.n	800908e <_vfiprintf_r+0x11a>
 8009142:	2300      	movs	r3, #0
 8009144:	3401      	adds	r4, #1
 8009146:	9305      	str	r3, [sp, #20]
 8009148:	4619      	mov	r1, r3
 800914a:	f04f 0c0a 	mov.w	ip, #10
 800914e:	4620      	mov	r0, r4
 8009150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009154:	3a30      	subs	r2, #48	; 0x30
 8009156:	2a09      	cmp	r2, #9
 8009158:	d903      	bls.n	8009162 <_vfiprintf_r+0x1ee>
 800915a:	2b00      	cmp	r3, #0
 800915c:	d0c5      	beq.n	80090ea <_vfiprintf_r+0x176>
 800915e:	9105      	str	r1, [sp, #20]
 8009160:	e7c3      	b.n	80090ea <_vfiprintf_r+0x176>
 8009162:	fb0c 2101 	mla	r1, ip, r1, r2
 8009166:	4604      	mov	r4, r0
 8009168:	2301      	movs	r3, #1
 800916a:	e7f0      	b.n	800914e <_vfiprintf_r+0x1da>
 800916c:	ab03      	add	r3, sp, #12
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	462a      	mov	r2, r5
 8009172:	4b16      	ldr	r3, [pc, #88]	; (80091cc <_vfiprintf_r+0x258>)
 8009174:	a904      	add	r1, sp, #16
 8009176:	4630      	mov	r0, r6
 8009178:	f7fd feb2 	bl	8006ee0 <_printf_float>
 800917c:	4607      	mov	r7, r0
 800917e:	1c78      	adds	r0, r7, #1
 8009180:	d1d6      	bne.n	8009130 <_vfiprintf_r+0x1bc>
 8009182:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009184:	07d9      	lsls	r1, r3, #31
 8009186:	d405      	bmi.n	8009194 <_vfiprintf_r+0x220>
 8009188:	89ab      	ldrh	r3, [r5, #12]
 800918a:	059a      	lsls	r2, r3, #22
 800918c:	d402      	bmi.n	8009194 <_vfiprintf_r+0x220>
 800918e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009190:	f000 faaf 	bl	80096f2 <__retarget_lock_release_recursive>
 8009194:	89ab      	ldrh	r3, [r5, #12]
 8009196:	065b      	lsls	r3, r3, #25
 8009198:	f53f af12 	bmi.w	8008fc0 <_vfiprintf_r+0x4c>
 800919c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800919e:	e711      	b.n	8008fc4 <_vfiprintf_r+0x50>
 80091a0:	ab03      	add	r3, sp, #12
 80091a2:	9300      	str	r3, [sp, #0]
 80091a4:	462a      	mov	r2, r5
 80091a6:	4b09      	ldr	r3, [pc, #36]	; (80091cc <_vfiprintf_r+0x258>)
 80091a8:	a904      	add	r1, sp, #16
 80091aa:	4630      	mov	r0, r6
 80091ac:	f7fe f924 	bl	80073f8 <_printf_i>
 80091b0:	e7e4      	b.n	800917c <_vfiprintf_r+0x208>
 80091b2:	bf00      	nop
 80091b4:	08009dec 	.word	0x08009dec
 80091b8:	08009e0c 	.word	0x08009e0c
 80091bc:	08009dcc 	.word	0x08009dcc
 80091c0:	08009c74 	.word	0x08009c74
 80091c4:	08009c7e 	.word	0x08009c7e
 80091c8:	08006ee1 	.word	0x08006ee1
 80091cc:	08008f4f 	.word	0x08008f4f
 80091d0:	08009c7a 	.word	0x08009c7a

080091d4 <__swbuf_r>:
 80091d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d6:	460e      	mov	r6, r1
 80091d8:	4614      	mov	r4, r2
 80091da:	4605      	mov	r5, r0
 80091dc:	b118      	cbz	r0, 80091e6 <__swbuf_r+0x12>
 80091de:	6983      	ldr	r3, [r0, #24]
 80091e0:	b90b      	cbnz	r3, 80091e6 <__swbuf_r+0x12>
 80091e2:	f000 f9e7 	bl	80095b4 <__sinit>
 80091e6:	4b21      	ldr	r3, [pc, #132]	; (800926c <__swbuf_r+0x98>)
 80091e8:	429c      	cmp	r4, r3
 80091ea:	d12b      	bne.n	8009244 <__swbuf_r+0x70>
 80091ec:	686c      	ldr	r4, [r5, #4]
 80091ee:	69a3      	ldr	r3, [r4, #24]
 80091f0:	60a3      	str	r3, [r4, #8]
 80091f2:	89a3      	ldrh	r3, [r4, #12]
 80091f4:	071a      	lsls	r2, r3, #28
 80091f6:	d52f      	bpl.n	8009258 <__swbuf_r+0x84>
 80091f8:	6923      	ldr	r3, [r4, #16]
 80091fa:	b36b      	cbz	r3, 8009258 <__swbuf_r+0x84>
 80091fc:	6923      	ldr	r3, [r4, #16]
 80091fe:	6820      	ldr	r0, [r4, #0]
 8009200:	1ac0      	subs	r0, r0, r3
 8009202:	6963      	ldr	r3, [r4, #20]
 8009204:	b2f6      	uxtb	r6, r6
 8009206:	4283      	cmp	r3, r0
 8009208:	4637      	mov	r7, r6
 800920a:	dc04      	bgt.n	8009216 <__swbuf_r+0x42>
 800920c:	4621      	mov	r1, r4
 800920e:	4628      	mov	r0, r5
 8009210:	f000 f93c 	bl	800948c <_fflush_r>
 8009214:	bb30      	cbnz	r0, 8009264 <__swbuf_r+0x90>
 8009216:	68a3      	ldr	r3, [r4, #8]
 8009218:	3b01      	subs	r3, #1
 800921a:	60a3      	str	r3, [r4, #8]
 800921c:	6823      	ldr	r3, [r4, #0]
 800921e:	1c5a      	adds	r2, r3, #1
 8009220:	6022      	str	r2, [r4, #0]
 8009222:	701e      	strb	r6, [r3, #0]
 8009224:	6963      	ldr	r3, [r4, #20]
 8009226:	3001      	adds	r0, #1
 8009228:	4283      	cmp	r3, r0
 800922a:	d004      	beq.n	8009236 <__swbuf_r+0x62>
 800922c:	89a3      	ldrh	r3, [r4, #12]
 800922e:	07db      	lsls	r3, r3, #31
 8009230:	d506      	bpl.n	8009240 <__swbuf_r+0x6c>
 8009232:	2e0a      	cmp	r6, #10
 8009234:	d104      	bne.n	8009240 <__swbuf_r+0x6c>
 8009236:	4621      	mov	r1, r4
 8009238:	4628      	mov	r0, r5
 800923a:	f000 f927 	bl	800948c <_fflush_r>
 800923e:	b988      	cbnz	r0, 8009264 <__swbuf_r+0x90>
 8009240:	4638      	mov	r0, r7
 8009242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009244:	4b0a      	ldr	r3, [pc, #40]	; (8009270 <__swbuf_r+0x9c>)
 8009246:	429c      	cmp	r4, r3
 8009248:	d101      	bne.n	800924e <__swbuf_r+0x7a>
 800924a:	68ac      	ldr	r4, [r5, #8]
 800924c:	e7cf      	b.n	80091ee <__swbuf_r+0x1a>
 800924e:	4b09      	ldr	r3, [pc, #36]	; (8009274 <__swbuf_r+0xa0>)
 8009250:	429c      	cmp	r4, r3
 8009252:	bf08      	it	eq
 8009254:	68ec      	ldreq	r4, [r5, #12]
 8009256:	e7ca      	b.n	80091ee <__swbuf_r+0x1a>
 8009258:	4621      	mov	r1, r4
 800925a:	4628      	mov	r0, r5
 800925c:	f000 f81a 	bl	8009294 <__swsetup_r>
 8009260:	2800      	cmp	r0, #0
 8009262:	d0cb      	beq.n	80091fc <__swbuf_r+0x28>
 8009264:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009268:	e7ea      	b.n	8009240 <__swbuf_r+0x6c>
 800926a:	bf00      	nop
 800926c:	08009dec 	.word	0x08009dec
 8009270:	08009e0c 	.word	0x08009e0c
 8009274:	08009dcc 	.word	0x08009dcc

08009278 <__ascii_wctomb>:
 8009278:	b149      	cbz	r1, 800928e <__ascii_wctomb+0x16>
 800927a:	2aff      	cmp	r2, #255	; 0xff
 800927c:	bf85      	ittet	hi
 800927e:	238a      	movhi	r3, #138	; 0x8a
 8009280:	6003      	strhi	r3, [r0, #0]
 8009282:	700a      	strbls	r2, [r1, #0]
 8009284:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009288:	bf98      	it	ls
 800928a:	2001      	movls	r0, #1
 800928c:	4770      	bx	lr
 800928e:	4608      	mov	r0, r1
 8009290:	4770      	bx	lr
	...

08009294 <__swsetup_r>:
 8009294:	4b32      	ldr	r3, [pc, #200]	; (8009360 <__swsetup_r+0xcc>)
 8009296:	b570      	push	{r4, r5, r6, lr}
 8009298:	681d      	ldr	r5, [r3, #0]
 800929a:	4606      	mov	r6, r0
 800929c:	460c      	mov	r4, r1
 800929e:	b125      	cbz	r5, 80092aa <__swsetup_r+0x16>
 80092a0:	69ab      	ldr	r3, [r5, #24]
 80092a2:	b913      	cbnz	r3, 80092aa <__swsetup_r+0x16>
 80092a4:	4628      	mov	r0, r5
 80092a6:	f000 f985 	bl	80095b4 <__sinit>
 80092aa:	4b2e      	ldr	r3, [pc, #184]	; (8009364 <__swsetup_r+0xd0>)
 80092ac:	429c      	cmp	r4, r3
 80092ae:	d10f      	bne.n	80092d0 <__swsetup_r+0x3c>
 80092b0:	686c      	ldr	r4, [r5, #4]
 80092b2:	89a3      	ldrh	r3, [r4, #12]
 80092b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092b8:	0719      	lsls	r1, r3, #28
 80092ba:	d42c      	bmi.n	8009316 <__swsetup_r+0x82>
 80092bc:	06dd      	lsls	r5, r3, #27
 80092be:	d411      	bmi.n	80092e4 <__swsetup_r+0x50>
 80092c0:	2309      	movs	r3, #9
 80092c2:	6033      	str	r3, [r6, #0]
 80092c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092c8:	81a3      	strh	r3, [r4, #12]
 80092ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092ce:	e03e      	b.n	800934e <__swsetup_r+0xba>
 80092d0:	4b25      	ldr	r3, [pc, #148]	; (8009368 <__swsetup_r+0xd4>)
 80092d2:	429c      	cmp	r4, r3
 80092d4:	d101      	bne.n	80092da <__swsetup_r+0x46>
 80092d6:	68ac      	ldr	r4, [r5, #8]
 80092d8:	e7eb      	b.n	80092b2 <__swsetup_r+0x1e>
 80092da:	4b24      	ldr	r3, [pc, #144]	; (800936c <__swsetup_r+0xd8>)
 80092dc:	429c      	cmp	r4, r3
 80092de:	bf08      	it	eq
 80092e0:	68ec      	ldreq	r4, [r5, #12]
 80092e2:	e7e6      	b.n	80092b2 <__swsetup_r+0x1e>
 80092e4:	0758      	lsls	r0, r3, #29
 80092e6:	d512      	bpl.n	800930e <__swsetup_r+0x7a>
 80092e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092ea:	b141      	cbz	r1, 80092fe <__swsetup_r+0x6a>
 80092ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092f0:	4299      	cmp	r1, r3
 80092f2:	d002      	beq.n	80092fa <__swsetup_r+0x66>
 80092f4:	4630      	mov	r0, r6
 80092f6:	f7ff fb6f 	bl	80089d8 <_free_r>
 80092fa:	2300      	movs	r3, #0
 80092fc:	6363      	str	r3, [r4, #52]	; 0x34
 80092fe:	89a3      	ldrh	r3, [r4, #12]
 8009300:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009304:	81a3      	strh	r3, [r4, #12]
 8009306:	2300      	movs	r3, #0
 8009308:	6063      	str	r3, [r4, #4]
 800930a:	6923      	ldr	r3, [r4, #16]
 800930c:	6023      	str	r3, [r4, #0]
 800930e:	89a3      	ldrh	r3, [r4, #12]
 8009310:	f043 0308 	orr.w	r3, r3, #8
 8009314:	81a3      	strh	r3, [r4, #12]
 8009316:	6923      	ldr	r3, [r4, #16]
 8009318:	b94b      	cbnz	r3, 800932e <__swsetup_r+0x9a>
 800931a:	89a3      	ldrh	r3, [r4, #12]
 800931c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009324:	d003      	beq.n	800932e <__swsetup_r+0x9a>
 8009326:	4621      	mov	r1, r4
 8009328:	4630      	mov	r0, r6
 800932a:	f000 fa07 	bl	800973c <__smakebuf_r>
 800932e:	89a0      	ldrh	r0, [r4, #12]
 8009330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009334:	f010 0301 	ands.w	r3, r0, #1
 8009338:	d00a      	beq.n	8009350 <__swsetup_r+0xbc>
 800933a:	2300      	movs	r3, #0
 800933c:	60a3      	str	r3, [r4, #8]
 800933e:	6963      	ldr	r3, [r4, #20]
 8009340:	425b      	negs	r3, r3
 8009342:	61a3      	str	r3, [r4, #24]
 8009344:	6923      	ldr	r3, [r4, #16]
 8009346:	b943      	cbnz	r3, 800935a <__swsetup_r+0xc6>
 8009348:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800934c:	d1ba      	bne.n	80092c4 <__swsetup_r+0x30>
 800934e:	bd70      	pop	{r4, r5, r6, pc}
 8009350:	0781      	lsls	r1, r0, #30
 8009352:	bf58      	it	pl
 8009354:	6963      	ldrpl	r3, [r4, #20]
 8009356:	60a3      	str	r3, [r4, #8]
 8009358:	e7f4      	b.n	8009344 <__swsetup_r+0xb0>
 800935a:	2000      	movs	r0, #0
 800935c:	e7f7      	b.n	800934e <__swsetup_r+0xba>
 800935e:	bf00      	nop
 8009360:	2000005c 	.word	0x2000005c
 8009364:	08009dec 	.word	0x08009dec
 8009368:	08009e0c 	.word	0x08009e0c
 800936c:	08009dcc 	.word	0x08009dcc

08009370 <abort>:
 8009370:	b508      	push	{r3, lr}
 8009372:	2006      	movs	r0, #6
 8009374:	f000 fa52 	bl	800981c <raise>
 8009378:	2001      	movs	r0, #1
 800937a:	f7f9 f865 	bl	8002448 <_exit>
	...

08009380 <__sflush_r>:
 8009380:	898a      	ldrh	r2, [r1, #12]
 8009382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009386:	4605      	mov	r5, r0
 8009388:	0710      	lsls	r0, r2, #28
 800938a:	460c      	mov	r4, r1
 800938c:	d458      	bmi.n	8009440 <__sflush_r+0xc0>
 800938e:	684b      	ldr	r3, [r1, #4]
 8009390:	2b00      	cmp	r3, #0
 8009392:	dc05      	bgt.n	80093a0 <__sflush_r+0x20>
 8009394:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009396:	2b00      	cmp	r3, #0
 8009398:	dc02      	bgt.n	80093a0 <__sflush_r+0x20>
 800939a:	2000      	movs	r0, #0
 800939c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093a2:	2e00      	cmp	r6, #0
 80093a4:	d0f9      	beq.n	800939a <__sflush_r+0x1a>
 80093a6:	2300      	movs	r3, #0
 80093a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093ac:	682f      	ldr	r7, [r5, #0]
 80093ae:	602b      	str	r3, [r5, #0]
 80093b0:	d032      	beq.n	8009418 <__sflush_r+0x98>
 80093b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093b4:	89a3      	ldrh	r3, [r4, #12]
 80093b6:	075a      	lsls	r2, r3, #29
 80093b8:	d505      	bpl.n	80093c6 <__sflush_r+0x46>
 80093ba:	6863      	ldr	r3, [r4, #4]
 80093bc:	1ac0      	subs	r0, r0, r3
 80093be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093c0:	b10b      	cbz	r3, 80093c6 <__sflush_r+0x46>
 80093c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093c4:	1ac0      	subs	r0, r0, r3
 80093c6:	2300      	movs	r3, #0
 80093c8:	4602      	mov	r2, r0
 80093ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093cc:	6a21      	ldr	r1, [r4, #32]
 80093ce:	4628      	mov	r0, r5
 80093d0:	47b0      	blx	r6
 80093d2:	1c43      	adds	r3, r0, #1
 80093d4:	89a3      	ldrh	r3, [r4, #12]
 80093d6:	d106      	bne.n	80093e6 <__sflush_r+0x66>
 80093d8:	6829      	ldr	r1, [r5, #0]
 80093da:	291d      	cmp	r1, #29
 80093dc:	d82c      	bhi.n	8009438 <__sflush_r+0xb8>
 80093de:	4a2a      	ldr	r2, [pc, #168]	; (8009488 <__sflush_r+0x108>)
 80093e0:	40ca      	lsrs	r2, r1
 80093e2:	07d6      	lsls	r6, r2, #31
 80093e4:	d528      	bpl.n	8009438 <__sflush_r+0xb8>
 80093e6:	2200      	movs	r2, #0
 80093e8:	6062      	str	r2, [r4, #4]
 80093ea:	04d9      	lsls	r1, r3, #19
 80093ec:	6922      	ldr	r2, [r4, #16]
 80093ee:	6022      	str	r2, [r4, #0]
 80093f0:	d504      	bpl.n	80093fc <__sflush_r+0x7c>
 80093f2:	1c42      	adds	r2, r0, #1
 80093f4:	d101      	bne.n	80093fa <__sflush_r+0x7a>
 80093f6:	682b      	ldr	r3, [r5, #0]
 80093f8:	b903      	cbnz	r3, 80093fc <__sflush_r+0x7c>
 80093fa:	6560      	str	r0, [r4, #84]	; 0x54
 80093fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093fe:	602f      	str	r7, [r5, #0]
 8009400:	2900      	cmp	r1, #0
 8009402:	d0ca      	beq.n	800939a <__sflush_r+0x1a>
 8009404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009408:	4299      	cmp	r1, r3
 800940a:	d002      	beq.n	8009412 <__sflush_r+0x92>
 800940c:	4628      	mov	r0, r5
 800940e:	f7ff fae3 	bl	80089d8 <_free_r>
 8009412:	2000      	movs	r0, #0
 8009414:	6360      	str	r0, [r4, #52]	; 0x34
 8009416:	e7c1      	b.n	800939c <__sflush_r+0x1c>
 8009418:	6a21      	ldr	r1, [r4, #32]
 800941a:	2301      	movs	r3, #1
 800941c:	4628      	mov	r0, r5
 800941e:	47b0      	blx	r6
 8009420:	1c41      	adds	r1, r0, #1
 8009422:	d1c7      	bne.n	80093b4 <__sflush_r+0x34>
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d0c4      	beq.n	80093b4 <__sflush_r+0x34>
 800942a:	2b1d      	cmp	r3, #29
 800942c:	d001      	beq.n	8009432 <__sflush_r+0xb2>
 800942e:	2b16      	cmp	r3, #22
 8009430:	d101      	bne.n	8009436 <__sflush_r+0xb6>
 8009432:	602f      	str	r7, [r5, #0]
 8009434:	e7b1      	b.n	800939a <__sflush_r+0x1a>
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800943c:	81a3      	strh	r3, [r4, #12]
 800943e:	e7ad      	b.n	800939c <__sflush_r+0x1c>
 8009440:	690f      	ldr	r7, [r1, #16]
 8009442:	2f00      	cmp	r7, #0
 8009444:	d0a9      	beq.n	800939a <__sflush_r+0x1a>
 8009446:	0793      	lsls	r3, r2, #30
 8009448:	680e      	ldr	r6, [r1, #0]
 800944a:	bf08      	it	eq
 800944c:	694b      	ldreq	r3, [r1, #20]
 800944e:	600f      	str	r7, [r1, #0]
 8009450:	bf18      	it	ne
 8009452:	2300      	movne	r3, #0
 8009454:	eba6 0807 	sub.w	r8, r6, r7
 8009458:	608b      	str	r3, [r1, #8]
 800945a:	f1b8 0f00 	cmp.w	r8, #0
 800945e:	dd9c      	ble.n	800939a <__sflush_r+0x1a>
 8009460:	6a21      	ldr	r1, [r4, #32]
 8009462:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009464:	4643      	mov	r3, r8
 8009466:	463a      	mov	r2, r7
 8009468:	4628      	mov	r0, r5
 800946a:	47b0      	blx	r6
 800946c:	2800      	cmp	r0, #0
 800946e:	dc06      	bgt.n	800947e <__sflush_r+0xfe>
 8009470:	89a3      	ldrh	r3, [r4, #12]
 8009472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009476:	81a3      	strh	r3, [r4, #12]
 8009478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800947c:	e78e      	b.n	800939c <__sflush_r+0x1c>
 800947e:	4407      	add	r7, r0
 8009480:	eba8 0800 	sub.w	r8, r8, r0
 8009484:	e7e9      	b.n	800945a <__sflush_r+0xda>
 8009486:	bf00      	nop
 8009488:	20400001 	.word	0x20400001

0800948c <_fflush_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	690b      	ldr	r3, [r1, #16]
 8009490:	4605      	mov	r5, r0
 8009492:	460c      	mov	r4, r1
 8009494:	b913      	cbnz	r3, 800949c <_fflush_r+0x10>
 8009496:	2500      	movs	r5, #0
 8009498:	4628      	mov	r0, r5
 800949a:	bd38      	pop	{r3, r4, r5, pc}
 800949c:	b118      	cbz	r0, 80094a6 <_fflush_r+0x1a>
 800949e:	6983      	ldr	r3, [r0, #24]
 80094a0:	b90b      	cbnz	r3, 80094a6 <_fflush_r+0x1a>
 80094a2:	f000 f887 	bl	80095b4 <__sinit>
 80094a6:	4b14      	ldr	r3, [pc, #80]	; (80094f8 <_fflush_r+0x6c>)
 80094a8:	429c      	cmp	r4, r3
 80094aa:	d11b      	bne.n	80094e4 <_fflush_r+0x58>
 80094ac:	686c      	ldr	r4, [r5, #4]
 80094ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d0ef      	beq.n	8009496 <_fflush_r+0xa>
 80094b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80094b8:	07d0      	lsls	r0, r2, #31
 80094ba:	d404      	bmi.n	80094c6 <_fflush_r+0x3a>
 80094bc:	0599      	lsls	r1, r3, #22
 80094be:	d402      	bmi.n	80094c6 <_fflush_r+0x3a>
 80094c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094c2:	f000 f915 	bl	80096f0 <__retarget_lock_acquire_recursive>
 80094c6:	4628      	mov	r0, r5
 80094c8:	4621      	mov	r1, r4
 80094ca:	f7ff ff59 	bl	8009380 <__sflush_r>
 80094ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094d0:	07da      	lsls	r2, r3, #31
 80094d2:	4605      	mov	r5, r0
 80094d4:	d4e0      	bmi.n	8009498 <_fflush_r+0xc>
 80094d6:	89a3      	ldrh	r3, [r4, #12]
 80094d8:	059b      	lsls	r3, r3, #22
 80094da:	d4dd      	bmi.n	8009498 <_fflush_r+0xc>
 80094dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094de:	f000 f908 	bl	80096f2 <__retarget_lock_release_recursive>
 80094e2:	e7d9      	b.n	8009498 <_fflush_r+0xc>
 80094e4:	4b05      	ldr	r3, [pc, #20]	; (80094fc <_fflush_r+0x70>)
 80094e6:	429c      	cmp	r4, r3
 80094e8:	d101      	bne.n	80094ee <_fflush_r+0x62>
 80094ea:	68ac      	ldr	r4, [r5, #8]
 80094ec:	e7df      	b.n	80094ae <_fflush_r+0x22>
 80094ee:	4b04      	ldr	r3, [pc, #16]	; (8009500 <_fflush_r+0x74>)
 80094f0:	429c      	cmp	r4, r3
 80094f2:	bf08      	it	eq
 80094f4:	68ec      	ldreq	r4, [r5, #12]
 80094f6:	e7da      	b.n	80094ae <_fflush_r+0x22>
 80094f8:	08009dec 	.word	0x08009dec
 80094fc:	08009e0c 	.word	0x08009e0c
 8009500:	08009dcc 	.word	0x08009dcc

08009504 <std>:
 8009504:	2300      	movs	r3, #0
 8009506:	b510      	push	{r4, lr}
 8009508:	4604      	mov	r4, r0
 800950a:	e9c0 3300 	strd	r3, r3, [r0]
 800950e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009512:	6083      	str	r3, [r0, #8]
 8009514:	8181      	strh	r1, [r0, #12]
 8009516:	6643      	str	r3, [r0, #100]	; 0x64
 8009518:	81c2      	strh	r2, [r0, #14]
 800951a:	6183      	str	r3, [r0, #24]
 800951c:	4619      	mov	r1, r3
 800951e:	2208      	movs	r2, #8
 8009520:	305c      	adds	r0, #92	; 0x5c
 8009522:	f7fd fc43 	bl	8006dac <memset>
 8009526:	4b05      	ldr	r3, [pc, #20]	; (800953c <std+0x38>)
 8009528:	6263      	str	r3, [r4, #36]	; 0x24
 800952a:	4b05      	ldr	r3, [pc, #20]	; (8009540 <std+0x3c>)
 800952c:	62a3      	str	r3, [r4, #40]	; 0x28
 800952e:	4b05      	ldr	r3, [pc, #20]	; (8009544 <std+0x40>)
 8009530:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009532:	4b05      	ldr	r3, [pc, #20]	; (8009548 <std+0x44>)
 8009534:	6224      	str	r4, [r4, #32]
 8009536:	6323      	str	r3, [r4, #48]	; 0x30
 8009538:	bd10      	pop	{r4, pc}
 800953a:	bf00      	nop
 800953c:	08009855 	.word	0x08009855
 8009540:	08009877 	.word	0x08009877
 8009544:	080098af 	.word	0x080098af
 8009548:	080098d3 	.word	0x080098d3

0800954c <_cleanup_r>:
 800954c:	4901      	ldr	r1, [pc, #4]	; (8009554 <_cleanup_r+0x8>)
 800954e:	f000 b8af 	b.w	80096b0 <_fwalk_reent>
 8009552:	bf00      	nop
 8009554:	0800948d 	.word	0x0800948d

08009558 <__sfmoreglue>:
 8009558:	b570      	push	{r4, r5, r6, lr}
 800955a:	1e4a      	subs	r2, r1, #1
 800955c:	2568      	movs	r5, #104	; 0x68
 800955e:	4355      	muls	r5, r2
 8009560:	460e      	mov	r6, r1
 8009562:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009566:	f7ff fa87 	bl	8008a78 <_malloc_r>
 800956a:	4604      	mov	r4, r0
 800956c:	b140      	cbz	r0, 8009580 <__sfmoreglue+0x28>
 800956e:	2100      	movs	r1, #0
 8009570:	e9c0 1600 	strd	r1, r6, [r0]
 8009574:	300c      	adds	r0, #12
 8009576:	60a0      	str	r0, [r4, #8]
 8009578:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800957c:	f7fd fc16 	bl	8006dac <memset>
 8009580:	4620      	mov	r0, r4
 8009582:	bd70      	pop	{r4, r5, r6, pc}

08009584 <__sfp_lock_acquire>:
 8009584:	4801      	ldr	r0, [pc, #4]	; (800958c <__sfp_lock_acquire+0x8>)
 8009586:	f000 b8b3 	b.w	80096f0 <__retarget_lock_acquire_recursive>
 800958a:	bf00      	nop
 800958c:	20000844 	.word	0x20000844

08009590 <__sfp_lock_release>:
 8009590:	4801      	ldr	r0, [pc, #4]	; (8009598 <__sfp_lock_release+0x8>)
 8009592:	f000 b8ae 	b.w	80096f2 <__retarget_lock_release_recursive>
 8009596:	bf00      	nop
 8009598:	20000844 	.word	0x20000844

0800959c <__sinit_lock_acquire>:
 800959c:	4801      	ldr	r0, [pc, #4]	; (80095a4 <__sinit_lock_acquire+0x8>)
 800959e:	f000 b8a7 	b.w	80096f0 <__retarget_lock_acquire_recursive>
 80095a2:	bf00      	nop
 80095a4:	2000083f 	.word	0x2000083f

080095a8 <__sinit_lock_release>:
 80095a8:	4801      	ldr	r0, [pc, #4]	; (80095b0 <__sinit_lock_release+0x8>)
 80095aa:	f000 b8a2 	b.w	80096f2 <__retarget_lock_release_recursive>
 80095ae:	bf00      	nop
 80095b0:	2000083f 	.word	0x2000083f

080095b4 <__sinit>:
 80095b4:	b510      	push	{r4, lr}
 80095b6:	4604      	mov	r4, r0
 80095b8:	f7ff fff0 	bl	800959c <__sinit_lock_acquire>
 80095bc:	69a3      	ldr	r3, [r4, #24]
 80095be:	b11b      	cbz	r3, 80095c8 <__sinit+0x14>
 80095c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095c4:	f7ff bff0 	b.w	80095a8 <__sinit_lock_release>
 80095c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80095cc:	6523      	str	r3, [r4, #80]	; 0x50
 80095ce:	4b13      	ldr	r3, [pc, #76]	; (800961c <__sinit+0x68>)
 80095d0:	4a13      	ldr	r2, [pc, #76]	; (8009620 <__sinit+0x6c>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80095d6:	42a3      	cmp	r3, r4
 80095d8:	bf04      	itt	eq
 80095da:	2301      	moveq	r3, #1
 80095dc:	61a3      	streq	r3, [r4, #24]
 80095de:	4620      	mov	r0, r4
 80095e0:	f000 f820 	bl	8009624 <__sfp>
 80095e4:	6060      	str	r0, [r4, #4]
 80095e6:	4620      	mov	r0, r4
 80095e8:	f000 f81c 	bl	8009624 <__sfp>
 80095ec:	60a0      	str	r0, [r4, #8]
 80095ee:	4620      	mov	r0, r4
 80095f0:	f000 f818 	bl	8009624 <__sfp>
 80095f4:	2200      	movs	r2, #0
 80095f6:	60e0      	str	r0, [r4, #12]
 80095f8:	2104      	movs	r1, #4
 80095fa:	6860      	ldr	r0, [r4, #4]
 80095fc:	f7ff ff82 	bl	8009504 <std>
 8009600:	68a0      	ldr	r0, [r4, #8]
 8009602:	2201      	movs	r2, #1
 8009604:	2109      	movs	r1, #9
 8009606:	f7ff ff7d 	bl	8009504 <std>
 800960a:	68e0      	ldr	r0, [r4, #12]
 800960c:	2202      	movs	r2, #2
 800960e:	2112      	movs	r1, #18
 8009610:	f7ff ff78 	bl	8009504 <std>
 8009614:	2301      	movs	r3, #1
 8009616:	61a3      	str	r3, [r4, #24]
 8009618:	e7d2      	b.n	80095c0 <__sinit+0xc>
 800961a:	bf00      	nop
 800961c:	08009a4c 	.word	0x08009a4c
 8009620:	0800954d 	.word	0x0800954d

08009624 <__sfp>:
 8009624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009626:	4607      	mov	r7, r0
 8009628:	f7ff ffac 	bl	8009584 <__sfp_lock_acquire>
 800962c:	4b1e      	ldr	r3, [pc, #120]	; (80096a8 <__sfp+0x84>)
 800962e:	681e      	ldr	r6, [r3, #0]
 8009630:	69b3      	ldr	r3, [r6, #24]
 8009632:	b913      	cbnz	r3, 800963a <__sfp+0x16>
 8009634:	4630      	mov	r0, r6
 8009636:	f7ff ffbd 	bl	80095b4 <__sinit>
 800963a:	3648      	adds	r6, #72	; 0x48
 800963c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009640:	3b01      	subs	r3, #1
 8009642:	d503      	bpl.n	800964c <__sfp+0x28>
 8009644:	6833      	ldr	r3, [r6, #0]
 8009646:	b30b      	cbz	r3, 800968c <__sfp+0x68>
 8009648:	6836      	ldr	r6, [r6, #0]
 800964a:	e7f7      	b.n	800963c <__sfp+0x18>
 800964c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009650:	b9d5      	cbnz	r5, 8009688 <__sfp+0x64>
 8009652:	4b16      	ldr	r3, [pc, #88]	; (80096ac <__sfp+0x88>)
 8009654:	60e3      	str	r3, [r4, #12]
 8009656:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800965a:	6665      	str	r5, [r4, #100]	; 0x64
 800965c:	f000 f847 	bl	80096ee <__retarget_lock_init_recursive>
 8009660:	f7ff ff96 	bl	8009590 <__sfp_lock_release>
 8009664:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009668:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800966c:	6025      	str	r5, [r4, #0]
 800966e:	61a5      	str	r5, [r4, #24]
 8009670:	2208      	movs	r2, #8
 8009672:	4629      	mov	r1, r5
 8009674:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009678:	f7fd fb98 	bl	8006dac <memset>
 800967c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009680:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009684:	4620      	mov	r0, r4
 8009686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009688:	3468      	adds	r4, #104	; 0x68
 800968a:	e7d9      	b.n	8009640 <__sfp+0x1c>
 800968c:	2104      	movs	r1, #4
 800968e:	4638      	mov	r0, r7
 8009690:	f7ff ff62 	bl	8009558 <__sfmoreglue>
 8009694:	4604      	mov	r4, r0
 8009696:	6030      	str	r0, [r6, #0]
 8009698:	2800      	cmp	r0, #0
 800969a:	d1d5      	bne.n	8009648 <__sfp+0x24>
 800969c:	f7ff ff78 	bl	8009590 <__sfp_lock_release>
 80096a0:	230c      	movs	r3, #12
 80096a2:	603b      	str	r3, [r7, #0]
 80096a4:	e7ee      	b.n	8009684 <__sfp+0x60>
 80096a6:	bf00      	nop
 80096a8:	08009a4c 	.word	0x08009a4c
 80096ac:	ffff0001 	.word	0xffff0001

080096b0 <_fwalk_reent>:
 80096b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096b4:	4606      	mov	r6, r0
 80096b6:	4688      	mov	r8, r1
 80096b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80096bc:	2700      	movs	r7, #0
 80096be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096c2:	f1b9 0901 	subs.w	r9, r9, #1
 80096c6:	d505      	bpl.n	80096d4 <_fwalk_reent+0x24>
 80096c8:	6824      	ldr	r4, [r4, #0]
 80096ca:	2c00      	cmp	r4, #0
 80096cc:	d1f7      	bne.n	80096be <_fwalk_reent+0xe>
 80096ce:	4638      	mov	r0, r7
 80096d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096d4:	89ab      	ldrh	r3, [r5, #12]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d907      	bls.n	80096ea <_fwalk_reent+0x3a>
 80096da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096de:	3301      	adds	r3, #1
 80096e0:	d003      	beq.n	80096ea <_fwalk_reent+0x3a>
 80096e2:	4629      	mov	r1, r5
 80096e4:	4630      	mov	r0, r6
 80096e6:	47c0      	blx	r8
 80096e8:	4307      	orrs	r7, r0
 80096ea:	3568      	adds	r5, #104	; 0x68
 80096ec:	e7e9      	b.n	80096c2 <_fwalk_reent+0x12>

080096ee <__retarget_lock_init_recursive>:
 80096ee:	4770      	bx	lr

080096f0 <__retarget_lock_acquire_recursive>:
 80096f0:	4770      	bx	lr

080096f2 <__retarget_lock_release_recursive>:
 80096f2:	4770      	bx	lr

080096f4 <__swhatbuf_r>:
 80096f4:	b570      	push	{r4, r5, r6, lr}
 80096f6:	460e      	mov	r6, r1
 80096f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096fc:	2900      	cmp	r1, #0
 80096fe:	b096      	sub	sp, #88	; 0x58
 8009700:	4614      	mov	r4, r2
 8009702:	461d      	mov	r5, r3
 8009704:	da07      	bge.n	8009716 <__swhatbuf_r+0x22>
 8009706:	2300      	movs	r3, #0
 8009708:	602b      	str	r3, [r5, #0]
 800970a:	89b3      	ldrh	r3, [r6, #12]
 800970c:	061a      	lsls	r2, r3, #24
 800970e:	d410      	bmi.n	8009732 <__swhatbuf_r+0x3e>
 8009710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009714:	e00e      	b.n	8009734 <__swhatbuf_r+0x40>
 8009716:	466a      	mov	r2, sp
 8009718:	f000 f902 	bl	8009920 <_fstat_r>
 800971c:	2800      	cmp	r0, #0
 800971e:	dbf2      	blt.n	8009706 <__swhatbuf_r+0x12>
 8009720:	9a01      	ldr	r2, [sp, #4]
 8009722:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009726:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800972a:	425a      	negs	r2, r3
 800972c:	415a      	adcs	r2, r3
 800972e:	602a      	str	r2, [r5, #0]
 8009730:	e7ee      	b.n	8009710 <__swhatbuf_r+0x1c>
 8009732:	2340      	movs	r3, #64	; 0x40
 8009734:	2000      	movs	r0, #0
 8009736:	6023      	str	r3, [r4, #0]
 8009738:	b016      	add	sp, #88	; 0x58
 800973a:	bd70      	pop	{r4, r5, r6, pc}

0800973c <__smakebuf_r>:
 800973c:	898b      	ldrh	r3, [r1, #12]
 800973e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009740:	079d      	lsls	r5, r3, #30
 8009742:	4606      	mov	r6, r0
 8009744:	460c      	mov	r4, r1
 8009746:	d507      	bpl.n	8009758 <__smakebuf_r+0x1c>
 8009748:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800974c:	6023      	str	r3, [r4, #0]
 800974e:	6123      	str	r3, [r4, #16]
 8009750:	2301      	movs	r3, #1
 8009752:	6163      	str	r3, [r4, #20]
 8009754:	b002      	add	sp, #8
 8009756:	bd70      	pop	{r4, r5, r6, pc}
 8009758:	ab01      	add	r3, sp, #4
 800975a:	466a      	mov	r2, sp
 800975c:	f7ff ffca 	bl	80096f4 <__swhatbuf_r>
 8009760:	9900      	ldr	r1, [sp, #0]
 8009762:	4605      	mov	r5, r0
 8009764:	4630      	mov	r0, r6
 8009766:	f7ff f987 	bl	8008a78 <_malloc_r>
 800976a:	b948      	cbnz	r0, 8009780 <__smakebuf_r+0x44>
 800976c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009770:	059a      	lsls	r2, r3, #22
 8009772:	d4ef      	bmi.n	8009754 <__smakebuf_r+0x18>
 8009774:	f023 0303 	bic.w	r3, r3, #3
 8009778:	f043 0302 	orr.w	r3, r3, #2
 800977c:	81a3      	strh	r3, [r4, #12]
 800977e:	e7e3      	b.n	8009748 <__smakebuf_r+0xc>
 8009780:	4b0d      	ldr	r3, [pc, #52]	; (80097b8 <__smakebuf_r+0x7c>)
 8009782:	62b3      	str	r3, [r6, #40]	; 0x28
 8009784:	89a3      	ldrh	r3, [r4, #12]
 8009786:	6020      	str	r0, [r4, #0]
 8009788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800978c:	81a3      	strh	r3, [r4, #12]
 800978e:	9b00      	ldr	r3, [sp, #0]
 8009790:	6163      	str	r3, [r4, #20]
 8009792:	9b01      	ldr	r3, [sp, #4]
 8009794:	6120      	str	r0, [r4, #16]
 8009796:	b15b      	cbz	r3, 80097b0 <__smakebuf_r+0x74>
 8009798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800979c:	4630      	mov	r0, r6
 800979e:	f000 f8d1 	bl	8009944 <_isatty_r>
 80097a2:	b128      	cbz	r0, 80097b0 <__smakebuf_r+0x74>
 80097a4:	89a3      	ldrh	r3, [r4, #12]
 80097a6:	f023 0303 	bic.w	r3, r3, #3
 80097aa:	f043 0301 	orr.w	r3, r3, #1
 80097ae:	81a3      	strh	r3, [r4, #12]
 80097b0:	89a0      	ldrh	r0, [r4, #12]
 80097b2:	4305      	orrs	r5, r0
 80097b4:	81a5      	strh	r5, [r4, #12]
 80097b6:	e7cd      	b.n	8009754 <__smakebuf_r+0x18>
 80097b8:	0800954d 	.word	0x0800954d

080097bc <_malloc_usable_size_r>:
 80097bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097c0:	1f18      	subs	r0, r3, #4
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	bfbc      	itt	lt
 80097c6:	580b      	ldrlt	r3, [r1, r0]
 80097c8:	18c0      	addlt	r0, r0, r3
 80097ca:	4770      	bx	lr

080097cc <_raise_r>:
 80097cc:	291f      	cmp	r1, #31
 80097ce:	b538      	push	{r3, r4, r5, lr}
 80097d0:	4604      	mov	r4, r0
 80097d2:	460d      	mov	r5, r1
 80097d4:	d904      	bls.n	80097e0 <_raise_r+0x14>
 80097d6:	2316      	movs	r3, #22
 80097d8:	6003      	str	r3, [r0, #0]
 80097da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097de:	bd38      	pop	{r3, r4, r5, pc}
 80097e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80097e2:	b112      	cbz	r2, 80097ea <_raise_r+0x1e>
 80097e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097e8:	b94b      	cbnz	r3, 80097fe <_raise_r+0x32>
 80097ea:	4620      	mov	r0, r4
 80097ec:	f000 f830 	bl	8009850 <_getpid_r>
 80097f0:	462a      	mov	r2, r5
 80097f2:	4601      	mov	r1, r0
 80097f4:	4620      	mov	r0, r4
 80097f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097fa:	f000 b817 	b.w	800982c <_kill_r>
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d00a      	beq.n	8009818 <_raise_r+0x4c>
 8009802:	1c59      	adds	r1, r3, #1
 8009804:	d103      	bne.n	800980e <_raise_r+0x42>
 8009806:	2316      	movs	r3, #22
 8009808:	6003      	str	r3, [r0, #0]
 800980a:	2001      	movs	r0, #1
 800980c:	e7e7      	b.n	80097de <_raise_r+0x12>
 800980e:	2400      	movs	r4, #0
 8009810:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009814:	4628      	mov	r0, r5
 8009816:	4798      	blx	r3
 8009818:	2000      	movs	r0, #0
 800981a:	e7e0      	b.n	80097de <_raise_r+0x12>

0800981c <raise>:
 800981c:	4b02      	ldr	r3, [pc, #8]	; (8009828 <raise+0xc>)
 800981e:	4601      	mov	r1, r0
 8009820:	6818      	ldr	r0, [r3, #0]
 8009822:	f7ff bfd3 	b.w	80097cc <_raise_r>
 8009826:	bf00      	nop
 8009828:	2000005c 	.word	0x2000005c

0800982c <_kill_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4d07      	ldr	r5, [pc, #28]	; (800984c <_kill_r+0x20>)
 8009830:	2300      	movs	r3, #0
 8009832:	4604      	mov	r4, r0
 8009834:	4608      	mov	r0, r1
 8009836:	4611      	mov	r1, r2
 8009838:	602b      	str	r3, [r5, #0]
 800983a:	f7f8 fdf5 	bl	8002428 <_kill>
 800983e:	1c43      	adds	r3, r0, #1
 8009840:	d102      	bne.n	8009848 <_kill_r+0x1c>
 8009842:	682b      	ldr	r3, [r5, #0]
 8009844:	b103      	cbz	r3, 8009848 <_kill_r+0x1c>
 8009846:	6023      	str	r3, [r4, #0]
 8009848:	bd38      	pop	{r3, r4, r5, pc}
 800984a:	bf00      	nop
 800984c:	20000838 	.word	0x20000838

08009850 <_getpid_r>:
 8009850:	f7f8 bde2 	b.w	8002418 <_getpid>

08009854 <__sread>:
 8009854:	b510      	push	{r4, lr}
 8009856:	460c      	mov	r4, r1
 8009858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800985c:	f000 f894 	bl	8009988 <_read_r>
 8009860:	2800      	cmp	r0, #0
 8009862:	bfab      	itete	ge
 8009864:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009866:	89a3      	ldrhlt	r3, [r4, #12]
 8009868:	181b      	addge	r3, r3, r0
 800986a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800986e:	bfac      	ite	ge
 8009870:	6563      	strge	r3, [r4, #84]	; 0x54
 8009872:	81a3      	strhlt	r3, [r4, #12]
 8009874:	bd10      	pop	{r4, pc}

08009876 <__swrite>:
 8009876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800987a:	461f      	mov	r7, r3
 800987c:	898b      	ldrh	r3, [r1, #12]
 800987e:	05db      	lsls	r3, r3, #23
 8009880:	4605      	mov	r5, r0
 8009882:	460c      	mov	r4, r1
 8009884:	4616      	mov	r6, r2
 8009886:	d505      	bpl.n	8009894 <__swrite+0x1e>
 8009888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800988c:	2302      	movs	r3, #2
 800988e:	2200      	movs	r2, #0
 8009890:	f000 f868 	bl	8009964 <_lseek_r>
 8009894:	89a3      	ldrh	r3, [r4, #12]
 8009896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800989a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800989e:	81a3      	strh	r3, [r4, #12]
 80098a0:	4632      	mov	r2, r6
 80098a2:	463b      	mov	r3, r7
 80098a4:	4628      	mov	r0, r5
 80098a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098aa:	f000 b817 	b.w	80098dc <_write_r>

080098ae <__sseek>:
 80098ae:	b510      	push	{r4, lr}
 80098b0:	460c      	mov	r4, r1
 80098b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098b6:	f000 f855 	bl	8009964 <_lseek_r>
 80098ba:	1c43      	adds	r3, r0, #1
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	bf15      	itete	ne
 80098c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80098c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098ca:	81a3      	strheq	r3, [r4, #12]
 80098cc:	bf18      	it	ne
 80098ce:	81a3      	strhne	r3, [r4, #12]
 80098d0:	bd10      	pop	{r4, pc}

080098d2 <__sclose>:
 80098d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d6:	f000 b813 	b.w	8009900 <_close_r>
	...

080098dc <_write_r>:
 80098dc:	b538      	push	{r3, r4, r5, lr}
 80098de:	4d07      	ldr	r5, [pc, #28]	; (80098fc <_write_r+0x20>)
 80098e0:	4604      	mov	r4, r0
 80098e2:	4608      	mov	r0, r1
 80098e4:	4611      	mov	r1, r2
 80098e6:	2200      	movs	r2, #0
 80098e8:	602a      	str	r2, [r5, #0]
 80098ea:	461a      	mov	r2, r3
 80098ec:	f7f8 fdd3 	bl	8002496 <_write>
 80098f0:	1c43      	adds	r3, r0, #1
 80098f2:	d102      	bne.n	80098fa <_write_r+0x1e>
 80098f4:	682b      	ldr	r3, [r5, #0]
 80098f6:	b103      	cbz	r3, 80098fa <_write_r+0x1e>
 80098f8:	6023      	str	r3, [r4, #0]
 80098fa:	bd38      	pop	{r3, r4, r5, pc}
 80098fc:	20000838 	.word	0x20000838

08009900 <_close_r>:
 8009900:	b538      	push	{r3, r4, r5, lr}
 8009902:	4d06      	ldr	r5, [pc, #24]	; (800991c <_close_r+0x1c>)
 8009904:	2300      	movs	r3, #0
 8009906:	4604      	mov	r4, r0
 8009908:	4608      	mov	r0, r1
 800990a:	602b      	str	r3, [r5, #0]
 800990c:	f7f8 fddf 	bl	80024ce <_close>
 8009910:	1c43      	adds	r3, r0, #1
 8009912:	d102      	bne.n	800991a <_close_r+0x1a>
 8009914:	682b      	ldr	r3, [r5, #0]
 8009916:	b103      	cbz	r3, 800991a <_close_r+0x1a>
 8009918:	6023      	str	r3, [r4, #0]
 800991a:	bd38      	pop	{r3, r4, r5, pc}
 800991c:	20000838 	.word	0x20000838

08009920 <_fstat_r>:
 8009920:	b538      	push	{r3, r4, r5, lr}
 8009922:	4d07      	ldr	r5, [pc, #28]	; (8009940 <_fstat_r+0x20>)
 8009924:	2300      	movs	r3, #0
 8009926:	4604      	mov	r4, r0
 8009928:	4608      	mov	r0, r1
 800992a:	4611      	mov	r1, r2
 800992c:	602b      	str	r3, [r5, #0]
 800992e:	f7f8 fdda 	bl	80024e6 <_fstat>
 8009932:	1c43      	adds	r3, r0, #1
 8009934:	d102      	bne.n	800993c <_fstat_r+0x1c>
 8009936:	682b      	ldr	r3, [r5, #0]
 8009938:	b103      	cbz	r3, 800993c <_fstat_r+0x1c>
 800993a:	6023      	str	r3, [r4, #0]
 800993c:	bd38      	pop	{r3, r4, r5, pc}
 800993e:	bf00      	nop
 8009940:	20000838 	.word	0x20000838

08009944 <_isatty_r>:
 8009944:	b538      	push	{r3, r4, r5, lr}
 8009946:	4d06      	ldr	r5, [pc, #24]	; (8009960 <_isatty_r+0x1c>)
 8009948:	2300      	movs	r3, #0
 800994a:	4604      	mov	r4, r0
 800994c:	4608      	mov	r0, r1
 800994e:	602b      	str	r3, [r5, #0]
 8009950:	f7f8 fdd9 	bl	8002506 <_isatty>
 8009954:	1c43      	adds	r3, r0, #1
 8009956:	d102      	bne.n	800995e <_isatty_r+0x1a>
 8009958:	682b      	ldr	r3, [r5, #0]
 800995a:	b103      	cbz	r3, 800995e <_isatty_r+0x1a>
 800995c:	6023      	str	r3, [r4, #0]
 800995e:	bd38      	pop	{r3, r4, r5, pc}
 8009960:	20000838 	.word	0x20000838

08009964 <_lseek_r>:
 8009964:	b538      	push	{r3, r4, r5, lr}
 8009966:	4d07      	ldr	r5, [pc, #28]	; (8009984 <_lseek_r+0x20>)
 8009968:	4604      	mov	r4, r0
 800996a:	4608      	mov	r0, r1
 800996c:	4611      	mov	r1, r2
 800996e:	2200      	movs	r2, #0
 8009970:	602a      	str	r2, [r5, #0]
 8009972:	461a      	mov	r2, r3
 8009974:	f7f8 fdd2 	bl	800251c <_lseek>
 8009978:	1c43      	adds	r3, r0, #1
 800997a:	d102      	bne.n	8009982 <_lseek_r+0x1e>
 800997c:	682b      	ldr	r3, [r5, #0]
 800997e:	b103      	cbz	r3, 8009982 <_lseek_r+0x1e>
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	bd38      	pop	{r3, r4, r5, pc}
 8009984:	20000838 	.word	0x20000838

08009988 <_read_r>:
 8009988:	b538      	push	{r3, r4, r5, lr}
 800998a:	4d07      	ldr	r5, [pc, #28]	; (80099a8 <_read_r+0x20>)
 800998c:	4604      	mov	r4, r0
 800998e:	4608      	mov	r0, r1
 8009990:	4611      	mov	r1, r2
 8009992:	2200      	movs	r2, #0
 8009994:	602a      	str	r2, [r5, #0]
 8009996:	461a      	mov	r2, r3
 8009998:	f7f8 fd60 	bl	800245c <_read>
 800999c:	1c43      	adds	r3, r0, #1
 800999e:	d102      	bne.n	80099a6 <_read_r+0x1e>
 80099a0:	682b      	ldr	r3, [r5, #0]
 80099a2:	b103      	cbz	r3, 80099a6 <_read_r+0x1e>
 80099a4:	6023      	str	r3, [r4, #0]
 80099a6:	bd38      	pop	{r3, r4, r5, pc}
 80099a8:	20000838 	.word	0x20000838

080099ac <_init>:
 80099ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ae:	bf00      	nop
 80099b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099b2:	bc08      	pop	{r3}
 80099b4:	469e      	mov	lr, r3
 80099b6:	4770      	bx	lr

080099b8 <_fini>:
 80099b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ba:	bf00      	nop
 80099bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099be:	bc08      	pop	{r3}
 80099c0:	469e      	mov	lr, r3
 80099c2:	4770      	bx	lr

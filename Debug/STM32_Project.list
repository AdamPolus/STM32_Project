
STM32_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd48  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800cf48  0800cf48  0001cf48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4a4  0800d4a4  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4a4  0800d4a4  0001d4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4ac  0800d4ac  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4ac  0800d4ac  0001d4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4b0  0800d4b0  0001d4b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0800d4b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  2000022c  0800d6e0  0002022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000858  0800d6e0  00020858  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cdaf  00000000  00000000  0002025a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003652  00000000  00000000  0003d009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  00040660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f8  00000000  00000000  00041bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aba4  00000000  00000000  00042fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001968d  00000000  00000000  0006db4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105575  00000000  00000000  000871d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018c74e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007020  00000000  00000000  0018c7a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000022c 	.word	0x2000022c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800cf30 	.word	0x0800cf30

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000230 	.word	0x20000230
 800023c:	0800cf30 	.word	0x0800cf30

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000678:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <delay>:
#define timer htim3


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <delay+0x30>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 80009e2:	bf00      	nop
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <delay+0x30>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009ea:	88fb      	ldrh	r3, [r7, #6]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d3f9      	bcc.n	80009e4 <delay+0x14>
}
 80009f0:	bf00      	nop
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	2000073c 	.word	0x2000073c

08000a04 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	461a      	mov	r2, r3
 8000a16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a1a:	4820      	ldr	r0, [pc, #128]	; (8000a9c <send_to_lcd+0x98>)
 8000a1c:	f002 fc28 	bl	8003270 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000a20:	2201      	movs	r2, #1
 8000a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a26:	481e      	ldr	r0, [pc, #120]	; (8000aa0 <send_to_lcd+0x9c>)
 8000a28:	f002 fc22 	bl	8003270 <HAL_GPIO_WritePin>
//	delay (0.05);
	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	08db      	lsrs	r3, r3, #3
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	461a      	mov	r2, r3
 8000a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a3e:	4819      	ldr	r0, [pc, #100]	; (8000aa4 <send_to_lcd+0xa0>)
 8000a40:	f002 fc16 	bl	8003270 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	089b      	lsrs	r3, r3, #2
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	461a      	mov	r2, r3
 8000a52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a56:	4812      	ldr	r0, [pc, #72]	; (8000aa0 <send_to_lcd+0x9c>)
 8000a58:	f002 fc0a 	bl	8003270 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	085b      	lsrs	r3, r3, #1
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	461a      	mov	r2, r3
 8000a6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a6e:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <send_to_lcd+0x9c>)
 8000a70:	f002 fbfe 	bl	8003270 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a82:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <send_to_lcd+0xa0>)
 8000a84:	f002 fbf4 	bl	8003270 <HAL_GPIO_WritePin>
	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8e:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <send_to_lcd+0x9c>)
 8000a90:	f002 fbee 	bl	8003270 <HAL_GPIO_WritePin>
//	delay (200);
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40021800 	.word	0x40021800
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40021400 	.word	0x40021400

08000aa8 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	091b      	lsrs	r3, r3, #4
 8000ab6:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ffa1 	bl	8000a04 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f003 030f 	and.w	r3, r3, #15
 8000ac8:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff ff98 	bl	8000a04 <send_to_lcd>
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <lcd_send_data>:

void lcd_send_data (char data)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	091b      	lsrs	r3, r3, #4
 8000aea:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
 8000aee:	2101      	movs	r1, #1
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff87 	bl	8000a04 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	f003 030f 	and.w	r3, r3, #15
 8000afc:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	2101      	movs	r1, #1
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff7e 	bl	8000a04 <send_to_lcd>
}
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <Lcd_clear>:

void Lcd_clear (void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000b14:	2001      	movs	r0, #1
 8000b16:	f7ff ffc7 	bl	8000aa8 <lcd_send_cmd>
	HAL_Delay(2);
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f002 f834 	bl	8002b88 <HAL_Delay>
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <Lcd_put_cur>:

void Lcd_put_cur(int row, int col)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
	switch(row)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <Lcd_put_cur+0x18>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d005      	beq.n	8000b46 <Lcd_put_cur+0x22>
 8000b3a:	e009      	b.n	8000b50 <Lcd_put_cur+0x2c>
	{
	case 0:
		col |=0x80;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b42:	603b      	str	r3, [r7, #0]
		break;
 8000b44:	e004      	b.n	8000b50 <Lcd_put_cur+0x2c>
	case 1:
		col |= 0xC0;
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000b4c:	603b      	str	r3, [r7, #0]
		break;
 8000b4e:	bf00      	nop
	}
    lcd_send_cmd (col);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ffa7 	bl	8000aa8 <lcd_send_cmd>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <Lcd_init>:


void Lcd_init (void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000b66:	2032      	movs	r0, #50	; 0x32
 8000b68:	f002 f80e 	bl	8002b88 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000b6c:	2030      	movs	r0, #48	; 0x30
 8000b6e:	f7ff ff9b 	bl	8000aa8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000b72:	2005      	movs	r0, #5
 8000b74:	f002 f808 	bl	8002b88 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000b78:	2030      	movs	r0, #48	; 0x30
 8000b7a:	f7ff ff95 	bl	8000aa8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f002 f802 	bl	8002b88 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000b84:	2030      	movs	r0, #48	; 0x30
 8000b86:	f7ff ff8f 	bl	8000aa8 <lcd_send_cmd>
	HAL_Delay(10);
 8000b8a:	200a      	movs	r0, #10
 8000b8c:	f001 fffc 	bl	8002b88 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000b90:	2020      	movs	r0, #32
 8000b92:	f7ff ff89 	bl	8000aa8 <lcd_send_cmd>
	HAL_Delay(10);
 8000b96:	200a      	movs	r0, #10
 8000b98:	f001 fff6 	bl	8002b88 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000b9c:	2028      	movs	r0, #40	; 0x28
 8000b9e:	f7ff ff83 	bl	8000aa8 <lcd_send_cmd>
	HAL_Delay(1);
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f001 fff0 	bl	8002b88 <HAL_Delay>

	lcd_send_cmd (0x08);  // clear display
 8000ba8:	2008      	movs	r0, #8
 8000baa:	f7ff ff7d 	bl	8000aa8 <lcd_send_cmd>
	HAL_Delay(1);
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f001 ffea 	bl	8002b88 <HAL_Delay>
	HAL_Delay(1);
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f001 ffe7 	bl	8002b88 <HAL_Delay>
	lcd_send_cmd (0x01); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f7ff ff74 	bl	8000aa8 <lcd_send_cmd>
	HAL_Delay(1);
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f001 ffe1 	bl	8002b88 <HAL_Delay>
	lcd_send_cmd (0x0C); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000bc6:	200c      	movs	r0, #12
 8000bc8:	f7ff ff6e 	bl	8000aa8 <lcd_send_cmd>



	HAL_Delay(1);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f001 ffdb 	bl	8002b88 <HAL_Delay>
	HAL_Delay(1);
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f001 ffd8 	bl	8002b88 <HAL_Delay>
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <Lcd_send_string>:

void Lcd_send_string (char *str)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(str); i++){
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]
 8000be8:	e00c      	b.n	8000c04 <Lcd_send_string+0x28>
		lcd_send_data( str[i]);
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	4413      	add	r3, r2
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ff72 	bl	8000adc <lcd_send_data>
		delay(100);
 8000bf8:	2064      	movs	r0, #100	; 0x64
 8000bfa:	f7ff fee9 	bl	80009d0 <delay>
	for(uint8_t i = 0; i < strlen(str); i++){
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	3301      	adds	r3, #1
 8000c02:	73fb      	strb	r3, [r7, #15]
 8000c04:	7bfc      	ldrb	r4, [r7, #15]
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff fb1a 	bl	8000240 <strlen>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	429c      	cmp	r4, r3
 8000c10:	d3eb      	bcc.n	8000bea <Lcd_send_string+0xe>
	}

}
 8000c12:	bf00      	nop
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd90      	pop	{r4, r7, pc}

08000c1c <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f000 fa4b 	bl	80010c0 <null_ptr_check>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d117      	bne.n	8000c66 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	20d0      	movs	r0, #208	; 0xd0
 8000c3e:	f000 f818 	bl	8000c72 <bmp2_get_regs>
 8000c42:	4603      	mov	r3, r0
 8000c44:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10b      	bne.n	8000c66 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b58      	cmp	r3, #88	; 0x58
 8000c54:	d105      	bne.n	8000c62 <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f000 fa7d 	bl	8001156 <get_calib_param>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	73fb      	strb	r3, [r7, #15]
 8000c60:	e001      	b.n	8000c66 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8000c62:	23fc      	movs	r3, #252	; 0xfc
 8000c64:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000c72:	b590      	push	{r4, r7, lr}
 8000c74:	b087      	sub	sp, #28
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4603      	mov	r3, r0
 8000c80:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000c82:	6838      	ldr	r0, [r7, #0]
 8000c84:	f000 fa1c 	bl	80010c0 <null_ptr_check>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8000c8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d11e      	bne.n	8000cd2 <bmp2_get_regs+0x60>
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d01b      	beq.n	8000cd2 <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	785b      	ldrb	r3, [r3, #1]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d103      	bne.n	8000caa <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ca8:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	68dc      	ldr	r4, [r3, #12]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	7bf8      	ldrb	r0, [r7, #15]
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	68b9      	ldr	r1, [r7, #8]
 8000cb8:	47a0      	blx	r4
 8000cba:	4603      	mov	r3, r0
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d004      	beq.n	8000cd6 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8000ccc:	23fe      	movs	r3, #254	; 0xfe
 8000cce:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000cd0:	e001      	b.n	8000cd6 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000cd2:	23ff      	movs	r3, #255	; 0xff
 8000cd4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000cd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	371c      	adds	r7, #28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd90      	pop	{r4, r7, pc}

08000ce2 <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000ce2:	b590      	push	{r4, r7, lr}
 8000ce4:	b08b      	sub	sp, #44	; 0x2c
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	60f8      	str	r0, [r7, #12]
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	d901      	bls.n	8000cfa <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8000cfa:	6838      	ldr	r0, [r7, #0]
 8000cfc:	f000 f9e0 	bl	80010c0 <null_ptr_check>
 8000d00:	4603      	mov	r3, r0
 8000d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000d06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d150      	bne.n	8000db0 <bmp2_set_regs+0xce>
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d04d      	beq.n	8000db0 <bmp2_set_regs+0xce>
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d04a      	beq.n	8000db0 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d043      	beq.n	8000da8 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	785b      	ldrb	r3, [r3, #1]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d114      	bne.n	8000d58 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	77fb      	strb	r3, [r7, #31]
 8000d32:	e00d      	b.n	8000d50 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8000d34:	7ffb      	ldrb	r3, [r7, #31]
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	4413      	add	r3, r2
 8000d3a:	781a      	ldrb	r2, [r3, #0]
 8000d3c:	7ffb      	ldrb	r3, [r7, #31]
 8000d3e:	68f9      	ldr	r1, [r7, #12]
 8000d40:	440b      	add	r3, r1
 8000d42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000d4a:	7ffb      	ldrb	r3, [r7, #31]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	77fb      	strb	r3, [r7, #31]
 8000d50:	7ffb      	ldrb	r3, [r7, #31]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d8ed      	bhi.n	8000d34 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d90b      	bls.n	8000d76 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8000d5e:	f107 0114 	add.w	r1, r7, #20
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68ba      	ldr	r2, [r7, #8]
 8000d66:	68f8      	ldr	r0, [r7, #12]
 8000d68:	f000 f9ca 	bl	8001100 <interleave_data>
                temp_len = ((len * 2) - 1);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	3b01      	subs	r3, #1
 8000d72:	623b      	str	r3, [r7, #32]
 8000d74:	e001      	b.n	8000d7a <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	691c      	ldr	r4, [r3, #16]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	7818      	ldrb	r0, [r3, #0]
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f107 0114 	add.w	r1, r7, #20
 8000d8a:	6a3a      	ldr	r2, [r7, #32]
 8000d8c:	47a0      	blx	r4
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00b      	beq.n	8000db8 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 8000da0:	23fe      	movs	r3, #254	; 0xfe
 8000da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8000da6:	e007      	b.n	8000db8 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8000da8:	23fd      	movs	r3, #253	; 0xfd
 8000daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8000dae:	e003      	b.n	8000db8 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000db0:	23ff      	movs	r3, #255	; 0xff
 8000db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000db6:	e000      	b.n	8000dba <bmp2_set_regs+0xd8>
        if (len > 0)
 8000db8:	bf00      	nop
    }

    return rslt;
 8000dba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	372c      	adds	r7, #44	; 0x2c
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd90      	pop	{r4, r7, pc}

08000dc6 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b084      	sub	sp, #16
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 8000dce:	23e0      	movs	r3, #224	; 0xe0
 8000dd0:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 8000dd2:	23b6      	movs	r3, #182	; 0xb6
 8000dd4:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000dd6:	f107 010d 	add.w	r1, r7, #13
 8000dda:	f107 000e 	add.w	r0, r7, #14
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2201      	movs	r2, #1
 8000de2:	f7ff ff7e 	bl	8000ce2 <bmp2_set_regs>
 8000de6:	4603      	mov	r3, r0
 8000de8:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b084      	sub	sp, #16
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8000e00:	2300      	movs	r3, #0
 8000e02:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d02d      	beq.n	8000e66 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8000e0a:	f107 010c 	add.w	r1, r7, #12
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	2202      	movs	r2, #2
 8000e12:	20f4      	movs	r0, #244	; 0xf4
 8000e14:	f7ff ff2d 	bl	8000c72 <bmp2_get_regs>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8000e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d122      	bne.n	8000e6a <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8000e24:	7b3b      	ldrb	r3, [r7, #12]
 8000e26:	095b      	lsrs	r3, r3, #5
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 8000e2e:	7b3b      	ldrb	r3, [r7, #12]
 8000e30:	109b      	asrs	r3, r3, #2
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	f003 0307 	and.w	r3, r3, #7
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 8000e3e:	7b7b      	ldrb	r3, [r7, #13]
 8000e40:	095b      	lsrs	r3, r3, #5
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 8000e48:	7b7b      	ldrb	r3, [r7, #13]
 8000e4a:	109b      	asrs	r3, r3, #2
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 8000e58:	7b7b      	ldrb	r3, [r7, #13]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	715a      	strb	r2, [r3, #5]
 8000e64:	e001      	b.n	8000e6a <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000e66:	23ff      	movs	r3, #255	; 0xff
 8000e68:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 8000e80:	683a      	ldr	r2, [r7, #0]
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	2000      	movs	r0, #0
 8000e86:	f000 fa01 	bl	800128c <conf_sensor>
 8000e8a:	4603      	mov	r3, r0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d01b      	beq.n	8000edc <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 8000ea4:	f107 010e 	add.w	r1, r7, #14
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	20f3      	movs	r0, #243	; 0xf3
 8000eae:	f7ff fee0 	bl	8000c72 <bmp2_get_regs>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d110      	bne.n	8000ee0 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 8000ebe:	7bbb      	ldrb	r3, [r7, #14]
 8000ec0:	10db      	asrs	r3, r3, #3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 8000ece:	7bbb      	ldrb	r3, [r7, #14]
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	705a      	strb	r2, [r3, #1]
 8000eda:	e001      	b.n	8000ee0 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000edc:	23ff      	movs	r3, #255	; 0xff
 8000ede:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	68b9      	ldr	r1, [r7, #8]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f9c3 	bl	800128c <conf_sensor>
 8000f06:	4603      	mov	r3, r0
 8000f08:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8000f0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 8000f20:	2300      	movs	r3, #0
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	2300      	movs	r3, #0
 8000f26:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d024      	beq.n	8000f82 <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8000f38:	f107 0110 	add.w	r1, r7, #16
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	2206      	movs	r2, #6
 8000f40:	20f7      	movs	r0, #247	; 0xf7
 8000f42:	f7ff fe96 	bl	8000c72 <bmp2_get_regs>
 8000f46:	4603      	mov	r3, r0
 8000f48:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8000f4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d119      	bne.n	8000f86 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 8000f52:	f107 0208 	add.w	r2, r7, #8
 8000f56:	f107 0310 	add.w	r3, r7, #16
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fabd 	bl	80014dc <parse_sensor_data>
 8000f62:	4603      	mov	r3, r0
 8000f64:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8000f66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10b      	bne.n	8000f86 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 8000f6e:	f107 0308 	add.w	r3, r7, #8
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f80b 	bl	8000f92 <bmp2_compensate_data>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	75fb      	strb	r3, [r7, #23]
 8000f80:	e001      	b.n	8000f86 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000f82:	23ff      	movs	r3, #255	; 0xff
 8000f84:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000f86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f88e 	bl	80010c0 <null_ptr_check>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8000fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d129      	bne.n	8001004 <bmp2_compensate_data+0x72>
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d026      	beq.n	8001004 <bmp2_compensate_data+0x72>
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d023      	beq.n	8001004 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	f04f 0300 	mov.w	r3, #0
 8000fc6:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8000fca:	68b9      	ldr	r1, [r7, #8]
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	3308      	adds	r3, #8
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	68f9      	ldr	r1, [r7, #12]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fac1 	bl	8001568 <compensate_temperature>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8000fea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10a      	bne.n	8001008 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	68f9      	ldr	r1, [r7, #12]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 fb81 	bl	8001700 <compensate_pressure>
 8000ffe:	4603      	mov	r3, r0
 8001000:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 8001002:	e001      	b.n	8001008 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001004:	23ff      	movs	r3, #255	; 0xff
 8001006:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001008:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001014:	b5b0      	push	{r4, r5, r7, lr}
 8001016:	b092      	sub	sp, #72	; 0x48
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <bmp2_compute_meas_time+0xa4>)
 8001022:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001026:	461d      	mov	r5, r3
 8001028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102c:	682b      	ldr	r3, [r5, #0]
 800102e:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <bmp2_compute_meas_time+0xa8>)
 8001032:	f107 0410 	add.w	r4, r7, #16
 8001036:	461d      	mov	r5, r3
 8001038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 f83b 	bl	80010c0 <null_ptr_check>
 800104a:	4603      	mov	r3, r0
 800104c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 8001050:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001054:	2b00      	cmp	r3, #0
 8001056:	d125      	bne.n	80010a4 <bmp2_compute_meas_time+0x90>
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d022      	beq.n	80010a4 <bmp2_compute_meas_time+0x90>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	7e1b      	ldrb	r3, [r3, #24]
 8001062:	2b03      	cmp	r3, #3
 8001064:	d113      	bne.n	800108e <bmp2_compute_meas_time+0x7a>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	78db      	ldrb	r3, [r3, #3]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001070:	4413      	add	r3, r2
 8001072:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	789b      	ldrb	r3, [r3, #2]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001080:	440b      	add	r3, r1
 8001082:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001086:	441a      	add	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 800108c:	e00d      	b.n	80010aa <bmp2_compute_meas_time+0x96>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	78db      	ldrb	r3, [r3, #3]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001098:	4413      	add	r3, r2
 800109a:	f853 2c18 	ldr.w	r2, [r3, #-24]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80010a2:	e002      	b.n	80010aa <bmp2_compute_meas_time+0x96>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80010a4:	23ff      	movs	r3, #255	; 0xff
 80010a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 80010aa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3748      	adds	r7, #72	; 0x48
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bdb0      	pop	{r4, r5, r7, pc}
 80010b6:	bf00      	nop
 80010b8:	0800cf48 	.word	0x0800cf48
 80010bc:	0800cf5c 	.word	0x0800cf5c

080010c0 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00b      	beq.n	80010e6 <null_ptr_check+0x26>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d007      	beq.n	80010e6 <null_ptr_check+0x26>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <null_ptr_check+0x26>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d102      	bne.n	80010ec <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 80010e6:	23ff      	movs	r3, #255	; 0xff
 80010e8:	73fb      	strb	r3, [r7, #15]
 80010ea:	e001      	b.n	80010f0 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80010f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001100:	b480      	push	{r7}
 8001102:	b087      	sub	sp, #28
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 800110e:	2301      	movs	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	e015      	b.n	8001140 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	441a      	add	r2, r3
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	3b01      	subs	r3, #1
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	440b      	add	r3, r1
 8001124:	7812      	ldrb	r2, [r2, #0]
 8001126:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	441a      	add	r2, r3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	68b9      	ldr	r1, [r7, #8]
 8001134:	440b      	add	r3, r1
 8001136:	7812      	ldrb	r2, [r2, #0]
 8001138:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d3e5      	bcc.n	8001114 <interleave_data+0x14>
    }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	371c      	adds	r7, #28
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b08a      	sub	sp, #40	; 0x28
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]
 8001172:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 8001174:	f107 010c 	add.w	r1, r7, #12
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2219      	movs	r2, #25
 800117c:	2088      	movs	r0, #136	; 0x88
 800117e:	f7ff fd78 	bl	8000c72 <bmp2_get_regs>
 8001182:	4603      	mov	r3, r0
 8001184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 8001188:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800118c:	2b00      	cmp	r3, #0
 800118e:	d177      	bne.n	8001280 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 8001190:	7b7b      	ldrb	r3, [r7, #13]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b21a      	sxth	r2, r3
 8001196:	7b3b      	ldrb	r3, [r7, #12]
 8001198:	b21b      	sxth	r3, r3
 800119a:	4313      	orrs	r3, r2
 800119c:	b21b      	sxth	r3, r3
 800119e:	b29a      	uxth	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	7bbb      	ldrb	r3, [r7, #14]
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	4313      	orrs	r3, r2
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 80011b6:	7c7b      	ldrb	r3, [r7, #17]
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	7c3b      	ldrb	r3, [r7, #16]
 80011be:	b21b      	sxth	r3, r3
 80011c0:	4313      	orrs	r3, r2
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 80011c8:	7cfb      	ldrb	r3, [r7, #19]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	7cbb      	ldrb	r3, [r7, #18]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 80011dc:	7d7b      	ldrb	r3, [r7, #21]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	7d3b      	ldrb	r3, [r7, #20]
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 80011ee:	7dfb      	ldrb	r3, [r7, #23]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	7dbb      	ldrb	r3, [r7, #22]
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	4313      	orrs	r3, r2
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001200:	7e7b      	ldrb	r3, [r7, #25]
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	b21a      	sxth	r2, r3
 8001206:	7e3b      	ldrb	r3, [r7, #24]
 8001208:	b21b      	sxth	r3, r3
 800120a:	4313      	orrs	r3, r2
 800120c:	b21a      	sxth	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8001212:	7efb      	ldrb	r3, [r7, #27]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b21a      	sxth	r2, r3
 8001218:	7ebb      	ldrb	r3, [r7, #26]
 800121a:	b21b      	sxth	r3, r3
 800121c:	4313      	orrs	r3, r2
 800121e:	b21a      	sxth	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001224:	7f7b      	ldrb	r3, [r7, #29]
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b21a      	sxth	r2, r3
 800122a:	7f3b      	ldrb	r3, [r7, #28]
 800122c:	b21b      	sxth	r3, r3
 800122e:	4313      	orrs	r3, r2
 8001230:	b21a      	sxth	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 8001236:	7ffb      	ldrb	r3, [r7, #31]
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	b21a      	sxth	r2, r3
 800123c:	7fbb      	ldrb	r3, [r7, #30]
 800123e:	b21b      	sxth	r3, r3
 8001240:	4313      	orrs	r3, r2
 8001242:	b21a      	sxth	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8001248:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001254:	b21b      	sxth	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	b21a      	sxth	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 800125e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	b21a      	sxth	r2, r3
 8001266:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21a      	sxth	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 8001274:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001278:	b25a      	sxtb	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 8001280:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001284:	4618      	mov	r0, r3
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800129a:	2300      	movs	r3, #0
 800129c:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 800129e:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 80012a2:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d074      	beq.n	8001394 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80012aa:	f107 0114 	add.w	r1, r7, #20
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2202      	movs	r2, #2
 80012b2:	20f4      	movs	r0, #244	; 0xf4
 80012b4:	f7ff fcdd 	bl	8000c72 <bmp2_get_regs>
 80012b8:	4603      	mov	r3, r0
 80012ba:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80012bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d169      	bne.n	8001398 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff fd7e 	bl	8000dc6 <bmp2_soft_reset>
 80012ca:	4603      	mov	r3, r0
 80012cc:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80012ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d160      	bne.n	8001398 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	68b9      	ldr	r1, [r7, #8]
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 f861 	bl	80013a4 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 80012e2:	7d7b      	ldrb	r3, [r7, #21]
 80012e4:	b25b      	sxtb	r3, r3
 80012e6:	f003 031f 	and.w	r3, r3, #31
 80012ea:	b25a      	sxtb	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	789b      	ldrb	r3, [r3, #2]
 80012f0:	015b      	lsls	r3, r3, #5
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 80012fc:	7d7b      	ldrb	r3, [r7, #21]
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	f023 031c 	bic.w	r3, r3, #28
 8001304:	b25a      	sxtb	r2, r3
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	791b      	ldrb	r3, [r3, #4]
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	b25b      	sxtb	r3, r3
 800130e:	f003 031c 	and.w	r3, r3, #28
 8001312:	b25b      	sxtb	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b25b      	sxtb	r3, r3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 800131c:	7d7b      	ldrb	r3, [r7, #21]
 800131e:	b25b      	sxtb	r3, r3
 8001320:	f023 0301 	bic.w	r3, r3, #1
 8001324:	b25a      	sxtb	r2, r3
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	795b      	ldrb	r3, [r3, #5]
 800132a:	b25b      	sxtb	r3, r3
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	b25b      	sxtb	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	b25b      	sxtb	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 800133a:	f107 0114 	add.w	r1, r7, #20
 800133e:	f107 0010 	add.w	r0, r7, #16
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2202      	movs	r2, #2
 8001346:	f7ff fccc 	bl	8000ce2 <bmp2_set_regs>
 800134a:	4603      	mov	r3, r0
 800134c:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 800134e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d120      	bne.n	8001398 <conf_sensor+0x10c>
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d01d      	beq.n	8001398 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 8001362:	7d3b      	ldrb	r3, [r7, #20]
 8001364:	b25b      	sxtb	r3, r3
 8001366:	f023 0303 	bic.w	r3, r3, #3
 800136a:	b25a      	sxtb	r2, r3
 800136c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	b25b      	sxtb	r3, r3
 8001376:	4313      	orrs	r3, r2
 8001378:	b25b      	sxtb	r3, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 800137e:	f107 0114 	add.w	r1, r7, #20
 8001382:	f107 0010 	add.w	r0, r7, #16
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	f7ff fcaa 	bl	8000ce2 <bmp2_set_regs>
 800138e:	4603      	mov	r3, r0
 8001390:	75fb      	strb	r3, [r7, #23]
 8001392:	e001      	b.n	8001398 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001394:	23ff      	movs	r3, #255	; 0xff
 8001396:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001398:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	78db      	ldrb	r3, [r3, #3]
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	f200 808b 	bhi.w	80014ce <set_os_mode+0x12a>
 80013b8:	a201      	add	r2, pc, #4	; (adr r2, 80013c0 <set_os_mode+0x1c>)
 80013ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013be:	bf00      	nop
 80013c0:	080013d5 	.word	0x080013d5
 80013c4:	08001407 	.word	0x08001407
 80013c8:	08001439 	.word	0x08001439
 80013cc:	0800146b 	.word	0x0800146b
 80013d0:	0800149d 	.word	0x0800149d
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	f043 0320 	orr.w	r3, r3, #32
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b25b      	sxtb	r3, r3
 80013f2:	f023 031c 	bic.w	r3, r3, #28
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	b25b      	sxtb	r3, r3
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	701a      	strb	r2, [r3, #0]
            break;
 8001404:	e064      	b.n	80014d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b25b      	sxtb	r3, r3
 800140c:	f003 031f 	and.w	r3, r3, #31
 8001410:	b25b      	sxtb	r3, r3
 8001412:	f043 0320 	orr.w	r3, r3, #32
 8001416:	b25b      	sxtb	r3, r3
 8001418:	b2da      	uxtb	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b25b      	sxtb	r3, r3
 8001424:	f023 031c 	bic.w	r3, r3, #28
 8001428:	b25b      	sxtb	r3, r3
 800142a:	f043 0308 	orr.w	r3, r3, #8
 800142e:	b25b      	sxtb	r3, r3
 8001430:	b2da      	uxtb	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	701a      	strb	r2, [r3, #0]
            break;
 8001436:	e04b      	b.n	80014d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b25b      	sxtb	r3, r3
 800143e:	f003 031f 	and.w	r3, r3, #31
 8001442:	b25b      	sxtb	r3, r3
 8001444:	f043 0320 	orr.w	r3, r3, #32
 8001448:	b25b      	sxtb	r3, r3
 800144a:	b2da      	uxtb	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b25b      	sxtb	r3, r3
 8001456:	f023 031c 	bic.w	r3, r3, #28
 800145a:	b25b      	sxtb	r3, r3
 800145c:	f043 030c 	orr.w	r3, r3, #12
 8001460:	b25b      	sxtb	r3, r3
 8001462:	b2da      	uxtb	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	701a      	strb	r2, [r3, #0]
            break;
 8001468:	e032      	b.n	80014d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	b25b      	sxtb	r3, r3
 8001470:	f003 031f 	and.w	r3, r3, #31
 8001474:	b25b      	sxtb	r3, r3
 8001476:	f043 0320 	orr.w	r3, r3, #32
 800147a:	b25b      	sxtb	r3, r3
 800147c:	b2da      	uxtb	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	b25b      	sxtb	r3, r3
 8001488:	f023 031c 	bic.w	r3, r3, #28
 800148c:	b25b      	sxtb	r3, r3
 800148e:	f043 0310 	orr.w	r3, r3, #16
 8001492:	b25b      	sxtb	r3, r3
 8001494:	b2da      	uxtb	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	701a      	strb	r2, [r3, #0]
            break;
 800149a:	e019      	b.n	80014d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	f003 031f 	and.w	r3, r3, #31
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ac:	b25b      	sxtb	r3, r3
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	f023 031c 	bic.w	r3, r3, #28
 80014be:	b25b      	sxtb	r3, r3
 80014c0:	f043 0314 	orr.w	r3, r3, #20
 80014c4:	b25b      	sxtb	r3, r3
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	701a      	strb	r2, [r3, #0]
            break;
 80014cc:	e000      	b.n	80014d0 <set_os_mode+0x12c>
        default:
            break;
 80014ce:	bf00      	nop
    }
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	031b      	lsls	r3, r3, #12
 80014ec:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3301      	adds	r3, #1
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3302      	adds	r3, #2
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	b2db      	uxtb	r3, r3
 8001502:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	431a      	orrs	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	431a      	orrs	r2, r3
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3303      	adds	r3, #3
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	031b      	lsls	r3, r3, #12
 800151a:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3304      	adds	r3, #4
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3305      	adds	r3, #5
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	091b      	lsrs	r3, r3, #4
 800152e:	b2db      	uxtb	r3, r3
 8001530:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	431a      	orrs	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4313      	orrs	r3, r2
 800153c:	461a      	mov	r2, r3
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	4619      	mov	r1, r3
 800154c:	4610      	mov	r0, r2
 800154e:	f000 fa33 	bl	80019b8 <st_check_boundaries>
 8001552:	4603      	mov	r3, r0
 8001554:	72fb      	strb	r3, [r7, #11]

    return rslt;
 8001556:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	0000      	movs	r0, r0
 8001564:	0000      	movs	r0, r0
	...

08001568 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001568:	b480      	push	{r7}
 800156a:	b08d      	sub	sp, #52	; 0x34
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001586:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 80016c0 <compensate_temperature+0x158>
 800158a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	8b9b      	ldrh	r3, [r3, #28]
 8001592:	ee07 3a90 	vmov	s15, r3
 8001596:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 800159a:	ed9f 4b4b 	vldr	d4, [pc, #300]	; 80016c8 <compensate_temperature+0x160>
 800159e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80015a2:	ee36 6b47 	vsub.f64	d6, d6, d7
           ((double) dev->calib_param.dig_t2);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80015b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015b8:	ed87 7b06 	vstr	d7, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	ee07 3a90 	vmov	s15, r3
 80015c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80015c8:	ed9f 5b41 	vldr	d5, [pc, #260]	; 80016d0 <compensate_temperature+0x168>
 80015cc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	8b9b      	ldrh	r3, [r3, #28]
 80015d4:	ee07 3a90 	vmov	s15, r3
 80015d8:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 80015dc:	ed9f 4b3e 	vldr	d4, [pc, #248]	; 80016d8 <compensate_temperature+0x170>
 80015e0:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80015e4:	ee36 6b47 	vsub.f64	d6, d6, d7
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	ee07 3a90 	vmov	s15, r3
 80015f0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80015f4:	ed9f 4b36 	vldr	d4, [pc, #216]	; 80016d0 <compensate_temperature+0x168>
 80015f8:	ee87 5b04 	vdiv.f64	d5, d7, d4
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	8b9b      	ldrh	r3, [r3, #28]
 8001600:	ee07 3a90 	vmov	s15, r3
 8001604:	eeb8 4b67 	vcvt.f64.u32	d4, s15
 8001608:	ed9f 3b33 	vldr	d3, [pc, #204]	; 80016d8 <compensate_temperature+0x170>
 800160c:	ee84 7b03 	vdiv.f64	d7, d4, d3
 8001610:	ee35 7b47 	vsub.f64	d7, d5, d7
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001614:	ee26 6b07 	vmul.f64	d6, d6, d7
        ((double) dev->calib_param.dig_t3);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    var2 =
 8001626:	ee26 7b07 	vmul.f64	d7, d6, d7
 800162a:	ed87 7b04 	vstr	d7, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 800162e:	ed97 6b06 	vldr	d6, [r7, #24]
 8001632:	ed97 7b04 	vldr	d7, [r7, #16]
 8001636:	ee36 7b07 	vadd.f64	d7, d6, d7
 800163a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800163e:	ee17 2a90 	vmov	r2, s15
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 8001646:	ed97 6b06 	vldr	d6, [r7, #24]
 800164a:	ed97 7b04 	vldr	d7, [r7, #16]
 800164e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001652:	ed9f 5b23 	vldr	d5, [pc, #140]	; 80016e0 <compensate_temperature+0x178>
 8001656:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800165a:	ed87 7b08 	vstr	d7, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 800165e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001662:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80016e8 <compensate_temperature+0x180>
 8001666:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800166a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166e:	d507      	bpl.n	8001680 <compensate_temperature+0x118>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <compensate_temperature+0x190>)
 8001676:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 800167a:	2301      	movs	r3, #1
 800167c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001680:	ed97 7b08 	vldr	d7, [r7, #32]
 8001684:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80016f0 <compensate_temperature+0x188>
 8001688:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800168c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001690:	dd07      	ble.n	80016a2 <compensate_temperature+0x13a>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	4b19      	ldr	r3, [pc, #100]	; (80016fc <compensate_temperature+0x194>)
 8001698:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 800169c:	2302      	movs	r3, #2
 800169e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 80016a2:	68f9      	ldr	r1, [r7, #12]
 80016a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016a8:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 80016ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3734      	adds	r7, #52	; 0x34
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	f3af 8000 	nop.w
 80016c0:	00000000 	.word	0x00000000
 80016c4:	40d00000 	.word	0x40d00000
 80016c8:	00000000 	.word	0x00000000
 80016cc:	40900000 	.word	0x40900000
 80016d0:	00000000 	.word	0x00000000
 80016d4:	41000000 	.word	0x41000000
 80016d8:	00000000 	.word	0x00000000
 80016dc:	40c00000 	.word	0x40c00000
 80016e0:	00000000 	.word	0x00000000
 80016e4:	40b40000 	.word	0x40b40000
 80016e8:	00000000 	.word	0x00000000
 80016ec:	c0440000 	.word	0xc0440000
 80016f0:	00000000 	.word	0x00000000
 80016f4:	40554000 	.word	0x40554000
 80016f8:	c0440000 	.word	0xc0440000
 80016fc:	40554000 	.word	0x40554000

08001700 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001700:	b480      	push	{r7}
 8001702:	b08d      	sub	sp, #52	; 0x34
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001722:	ee07 3a90 	vmov	s15, r3
 8001726:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800172a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800172e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001732:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8001968 <compensate_pressure+0x268>
 8001736:	ee37 7b46 	vsub.f64	d7, d7, d6
 800173a:	ed87 7b06 	vstr	d7, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 800173e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001742:	ee27 6b07 	vmul.f64	d6, d7, d7
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001754:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001758:	ed9f 5b85 	vldr	d5, [pc, #532]	; 8001970 <compensate_pressure+0x270>
 800175c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001760:	ed87 7b04 	vstr	d7, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001772:	ed97 7b06 	vldr	d7, [r7, #24]
 8001776:	ee26 7b07 	vmul.f64	d7, d6, d7
 800177a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800177e:	ed97 6b04 	vldr	d6, [r7, #16]
 8001782:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001786:	ed87 7b04 	vstr	d7, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 800178a:	ed97 7b04 	vldr	d7, [r7, #16]
 800178e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001792:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800179c:	ee07 3a90 	vmov	s15, r3
 80017a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80017a4:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8001978 <compensate_pressure+0x278>
 80017a8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80017ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017b0:	ed87 7b04 	vstr	d7, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80017c2:	ed97 7b06 	vldr	d7, [r7, #24]
 80017c6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80017ca:	ed97 7b06 	vldr	d7, [r7, #24]
 80017ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017d2:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8001980 <compensate_pressure+0x280>
 80017d6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80017e0:	ee07 3a90 	vmov	s15, r3
 80017e4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80017e8:	ed97 7b06 	vldr	d7, [r7, #24]
 80017ec:	ee25 7b07 	vmul.f64	d7, d5, d7
 80017f0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80017f4:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8001980 <compensate_pressure+0x280>
 80017f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017fc:	ed87 7b06 	vstr	d7, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001800:	ed97 6b06 	vldr	d6, [r7, #24]
 8001804:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 8001970 <compensate_pressure+0x270>
 8001808:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800180c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001810:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001818:	ee07 3a90 	vmov	s15, r3
 800181c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001820:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001824:	ed87 7b06 	vstr	d7, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001828:	ed97 7b06 	vldr	d7, [r7, #24]
 800182c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001834:	d407      	bmi.n	8001846 <compensate_pressure+0x146>
 8001836:	ed97 7b06 	vldr	d7, [r7, #24]
 800183a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800183e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001842:	f340 8086 	ble.w	8001952 <compensate_pressure+0x252>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001852:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8001988 <compensate_pressure+0x288>
 8001856:	ee36 7b47 	vsub.f64	d7, d6, d7
 800185a:	ed87 7b08 	vstr	d7, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 800185e:	ed97 6b04 	vldr	d6, [r7, #16]
 8001862:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 8001990 <compensate_pressure+0x290>
 8001866:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800186a:	ed97 6b08 	vldr	d6, [r7, #32]
 800186e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001872:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8001998 <compensate_pressure+0x298>
 8001876:	ee27 5b06 	vmul.f64	d5, d7, d6
 800187a:	ed97 6b06 	vldr	d6, [r7, #24]
 800187e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001882:	ed87 7b08 	vstr	d7, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001894:	ed97 7b08 	vldr	d7, [r7, #32]
 8001898:	ee26 6b07 	vmul.f64	d6, d6, d7
 800189c:	ed97 7b08 	vldr	d7, [r7, #32]
 80018a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80018a4:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 80019a0 <compensate_pressure+0x2a0>
 80018a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018ac:	ed87 7b06 	vstr	d7, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80018b6:	ee07 3a90 	vmov	s15, r3
 80018ba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018be:	ed97 7b08 	vldr	d7, [r7, #32]
 80018c2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80018c6:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8001970 <compensate_pressure+0x270>
 80018ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018ce:	ed87 7b04 	vstr	d7, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 80018d2:	ed97 6b06 	vldr	d6, [r7, #24]
 80018d6:	ed97 7b04 	vldr	d7, [r7, #16]
 80018da:	ee36 6b07 	vadd.f64	d6, d6, d7
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80018e4:	ee07 3a90 	vmov	s15, r3
 80018e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80018ec:	ee36 6b07 	vadd.f64	d6, d6, d7
 80018f0:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 80018f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018f8:	ed97 6b08 	vldr	d6, [r7, #32]
 80018fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001900:	ed87 7b08 	vstr	d7, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001904:	ed97 7b08 	vldr	d7, [r7, #32]
 8001908:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80019a8 <compensate_pressure+0x2a8>
 800190c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001914:	d507      	bpl.n	8001926 <compensate_pressure+0x226>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001916:	a324      	add	r3, pc, #144	; (adr r3, 80019a8 <compensate_pressure+0x2a8>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001920:	2303      	movs	r3, #3
 8001922:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001926:	ed97 7b08 	vldr	d7, [r7, #32]
 800192a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80019b0 <compensate_pressure+0x2b0>
 800192e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001936:	dd07      	ble.n	8001948 <compensate_pressure+0x248>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001938:	a31d      	add	r3, pc, #116	; (adr r3, 80019b0 <compensate_pressure+0x2b0>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001942:	2304      	movs	r3, #4
 8001944:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 8001948:	68f9      	ldr	r1, [r7, #12]
 800194a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800194e:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001952:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001956:	4618      	mov	r0, r3
 8001958:	3734      	adds	r7, #52	; 0x34
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	f3af 8000 	nop.w
 8001968:	00000000 	.word	0x00000000
 800196c:	40ef4000 	.word	0x40ef4000
 8001970:	00000000 	.word	0x00000000
 8001974:	40e00000 	.word	0x40e00000
 8001978:	00000000 	.word	0x00000000
 800197c:	40f00000 	.word	0x40f00000
 8001980:	00000000 	.word	0x00000000
 8001984:	41200000 	.word	0x41200000
 8001988:	00000000 	.word	0x00000000
 800198c:	41300000 	.word	0x41300000
 8001990:	00000000 	.word	0x00000000
 8001994:	40b00000 	.word	0x40b00000
 8001998:	00000000 	.word	0x00000000
 800199c:	40b86a00 	.word	0x40b86a00
 80019a0:	00000000 	.word	0x00000000
 80019a4:	41e00000 	.word	0x41e00000
 80019a8:	00000000 	.word	0x00000000
 80019ac:	40dd4c00 	.word	0x40dd4c00
 80019b0:	00000000 	.word	0x00000000
 80019b4:	40fadb00 	.word	0x40fadb00

080019b8 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	db03      	blt.n	80019d4 <st_check_boundaries+0x1c>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	4a1c      	ldr	r2, [pc, #112]	; (8001a40 <st_check_boundaries+0x88>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	dd09      	ble.n	80019e8 <st_check_boundaries+0x30>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db06      	blt.n	80019e8 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a18      	ldr	r2, [pc, #96]	; (8001a40 <st_check_boundaries+0x88>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	dc02      	bgt.n	80019e8 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 80019e2:	23fa      	movs	r3, #250	; 0xfa
 80019e4:	73fb      	strb	r3, [r7, #15]
 80019e6:	e023      	b.n	8001a30 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db03      	blt.n	80019f6 <st_check_boundaries+0x3e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a13      	ldr	r2, [pc, #76]	; (8001a40 <st_check_boundaries+0x88>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	dd09      	ble.n	8001a0a <st_check_boundaries+0x52>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	db06      	blt.n	8001a0a <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <st_check_boundaries+0x88>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	dc02      	bgt.n	8001a0a <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001a04:	23fb      	movs	r3, #251	; 0xfb
 8001a06:	73fb      	strb	r3, [r7, #15]
 8001a08:	e012      	b.n	8001a30 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db03      	blt.n	8001a18 <st_check_boundaries+0x60>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	4a0b      	ldr	r2, [pc, #44]	; (8001a40 <st_check_boundaries+0x88>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	dd09      	ble.n	8001a2c <st_check_boundaries+0x74>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	db03      	blt.n	8001a26 <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <st_check_boundaries+0x88>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	dd02      	ble.n	8001a2c <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001a26:	23f9      	movs	r3, #249	; 0xf9
 8001a28:	73fb      	strb	r3, [r7, #15]
 8001a2a:	e001      	b.n	8001a30 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	000ffff0 	.word	0x000ffff0

08001a44 <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff f8e5 	bl	8000c1c <bmp2_init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff f9ca 	bl	8000df6 <bmp2_get_config>
 8001a62:	4603      	mov	r3, r0
 8001a64:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_OFF;
 8001a66:	2300      	movs	r3, #0
 8001a68:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001a72:	f107 0308 	add.w	r3, r7, #8
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff f9fc 	bl	8000e76 <bmp2_set_config>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	2003      	movs	r0, #3
 8001a8c:	f7ff fa2e 	bl	8000eec <bmp2_set_power_mode>
 8001a90:	4603      	mov	r3, r0
 8001a92:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001a94:	f107 0108 	add.w	r1, r7, #8
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fab8 	bl	8001014 <bmp2_compute_meas_time>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001aa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b096      	sub	sp, #88	; 0x58
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint8_t txarray[BMP2_SPI_BUFFER_LEN] = {0,};
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	633b      	str	r3, [r7, #48]	; 0x30
 8001ad4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
 8001ae4:	615a      	str	r2, [r3, #20]
  uint8_t rxarray[BMP2_SPI_BUFFER_LEN] = {0,};
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	f107 0318 	add.w	r3, r7, #24
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
 8001af8:	611a      	str	r2, [r3, #16]
 8001afa:	615a      	str	r2, [r3, #20]
  uint8_t cs = *(uint8_t*)intf_ptr;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8001b04:	7bfb      	ldrb	r3, [r7, #15]

  /* Copy selected register address to transmit buffer */
  memcpy(&txarray[BMP2_REG_ADDR_INDEX],  &reg_addr,  BMP2_REG_ADDR_LEN);
 8001b06:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(BMP2_CS_Ports[cs], BMP2_CS_Pins[cs], GPIO_PIN_RESET);
 8001b0a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001b0e:	4a26      	ldr	r2, [pc, #152]	; (8001ba8 <bmp2_spi_read+0xf4>)
 8001b10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b14:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001b18:	4a24      	ldr	r2, [pc, #144]	; (8001bac <bmp2_spi_read+0xf8>)
 8001b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	4619      	mov	r1, r3
 8001b22:	f001 fba5 	bl	8003270 <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_TransmitReceive(BMP2_SPI, (uint8_t*)(&txarray), (uint8_t*)(&rxarray), length+BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	f107 0214 	add.w	r2, r7, #20
 8001b32:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001b36:	2005      	movs	r0, #5
 8001b38:	9000      	str	r0, [sp, #0]
 8001b3a:	481d      	ldr	r0, [pc, #116]	; (8001bb0 <bmp2_spi_read+0xfc>)
 8001b3c:	f003 f84b 	bl	8004bd6 <HAL_SPI_TransmitReceive>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001b4c:	e012      	b.n	8001b74 <bmp2_spi_read+0xc0>
  {
    HAL_GPIO_WritePin(BMP2_CS_Ports[i], BMP2_CS_Pins[i], GPIO_PIN_SET);
 8001b4e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001b52:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <bmp2_spi_read+0xf4>)
 8001b54:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b58:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001b5c:	4a13      	ldr	r2, [pc, #76]	; (8001bac <bmp2_spi_read+0xf8>)
 8001b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b62:	2201      	movs	r2, #1
 8001b64:	4619      	mov	r1, r3
 8001b66:	f001 fb83 	bl	8003270 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001b6a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001b6e:	3301      	adds	r3, #1
 8001b70:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001b74:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d9e8      	bls.n	8001b4e <bmp2_spi_read+0x9a>
  }

  if (status != HAL_OK)
 8001b7c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <bmp2_spi_read+0xd6>
  {
    // The BME2xx API calls for 0 return value as a success, and -1 returned as failure
    iError = (-1);
 8001b84:	23ff      	movs	r3, #255	; 0xff
 8001b86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  /* Copy data content from receive buffer */
  memcpy(reg_data, &rxarray[BMP2_DATA_INDEX], length);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	3301      	adds	r3, #1
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	4619      	mov	r1, r3
 8001b94:	68b8      	ldr	r0, [r7, #8]
 8001b96:	f006 fa35 	bl	8008004 <memcpy>

  return iError;
 8001b9a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3750      	adds	r7, #80	; 0x50
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000004 	.word	0x20000004
 8001bac:	2000000c 	.word	0x2000000c
 8001bb0:	200007a4 	.word	0x200007a4

08001bb4 <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08c      	sub	sp, #48	; 0x30
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t txarray[BMP2_SPI_BUFFER_LEN] = {0,};
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
 8001be4:	615a      	str	r2, [r3, #20]
  uint8_t cs = *(uint8_t*)intf_ptr;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001bee:	7bfb      	ldrb	r3, [r7, #15]

  /* Copy selected register address and data content to transmit buffer */
  memcpy(&txarray[BMP2_REG_ADDR_INDEX],  &reg_addr,  BMP2_REG_ADDR_LEN);
 8001bf0:	743b      	strb	r3, [r7, #16]
  memcpy(&txarray[BMP2_DATA_INDEX],       reg_data,  length);
 8001bf2:	f107 0310 	add.w	r3, r7, #16
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	68b9      	ldr	r1, [r7, #8]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f006 fa01 	bl	8008004 <memcpy>

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(BMP2_CS_Ports[cs], BMP2_CS_Pins[cs], GPIO_PIN_RESET);
 8001c02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c06:	4a20      	ldr	r2, [pc, #128]	; (8001c88 <bmp2_spi_write+0xd4>)
 8001c08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c10:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <bmp2_spi_write+0xd8>)
 8001c12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c16:	2200      	movs	r2, #0
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f001 fb29 	bl	8003270 <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_Transmit(BMP2_SPI, (uint8_t*)(&txarray), length+BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3301      	adds	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	f107 0110 	add.w	r1, r7, #16
 8001c2a:	2305      	movs	r3, #5
 8001c2c:	4818      	ldr	r0, [pc, #96]	; (8001c90 <bmp2_spi_write+0xdc>)
 8001c2e:	f002 fe64 	bl	80048fa <HAL_SPI_Transmit>
 8001c32:	4603      	mov	r3, r0
 8001c34:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001c3e:	e012      	b.n	8001c66 <bmp2_spi_write+0xb2>
  {
    HAL_GPIO_WritePin(BMP2_CS_Ports[i], BMP2_CS_Pins[i], GPIO_PIN_SET);
 8001c40:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001c44:	4a10      	ldr	r2, [pc, #64]	; (8001c88 <bmp2_spi_write+0xd4>)
 8001c46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001c4e:	4a0f      	ldr	r2, [pc, #60]	; (8001c8c <bmp2_spi_write+0xd8>)
 8001c50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c54:	2201      	movs	r2, #1
 8001c56:	4619      	mov	r1, r3
 8001c58:	f001 fb0a 	bl	8003270 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001c5c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001c60:	3301      	adds	r3, #1
 8001c62:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001c66:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d9e8      	bls.n	8001c40 <bmp2_spi_write+0x8c>
  }

  if (status != HAL_OK)
 8001c6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <bmp2_spi_write+0xc8>
  {
    // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
    iError = (-1);
 8001c76:	23ff      	movs	r3, #255	; 0xff
 8001c78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return iError;
 8001c7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3730      	adds	r7, #48	; 0x30
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000004 	.word	0x20000004
 8001c8c:	2000000c 	.word	0x2000000c
 8001c90:	200007a4 	.word	0x200007a4

08001c94 <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <bmp2_delay_us+0x24>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	099b      	lsrs	r3, r3, #6
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 ff6d 	bl	8002b88 <HAL_Delay>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	10624dd3 	.word	0x10624dd3

08001cbc <BMP2_ReadTemperature_degC>:
 *  @param[in]  dev   : BMP2xx device structure
 *
 *  @return Temperature measurement [degC]
 */
double BMP2_ReadTemperature_degC(struct bmp2_dev *dev)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08c      	sub	sp, #48	; 0x30
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMP2_E_NULL_PTR;
 8001cc4:	23ff      	movs	r3, #255	; 0xff
 8001cc6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    struct bmp2_status status;
    struct bmp2_data comp_data;
    double temp = -1.0;
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <BMP2_ReadTemperature_degC+0x78>)
 8001cd0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int8_t try = 10;
 8001cd4:	230a      	movs	r3, #10
 8001cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    do {
      /* Read sensor status */
      rslt = bmp2_get_status(&status, dev);
 8001cda:	f107 031c 	add.w	r3, r7, #28
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff f8d7 	bl	8000e94 <bmp2_get_status>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      /* Read compensated data */
      rslt = bmp2_get_sensor_data(&comp_data, dev);
 8001cec:	f107 0308 	add.w	r3, r7, #8
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff f90f 	bl	8000f16 <bmp2_get_sensor_data>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      temp = comp_data.temperature;
 8001cfe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d02:	e9c7 2308 	strd	r2, r3, [r7, #32]
      try--;
 8001d06:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8001d14:	7f3b      	ldrb	r3, [r7, #28]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <BMP2_ReadTemperature_degC+0x66>
 8001d1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	dcdb      	bgt.n	8001cda <BMP2_ReadTemperature_degC+0x1e>

    return temp;
 8001d22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d26:	ec43 2b17 	vmov	d7, r2, r3
//
//	  /* Calculate measurement time in microseconds */
//	  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
//
//	  return rslt;
}
 8001d2a:	eeb0 0b47 	vmov.f64	d0, d7
 8001d2e:	3730      	adds	r7, #48	; 0x30
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	bff00000 	.word	0xbff00000

08001d38 <Steering__temp>:
int n;
char data_msg[32];

float test;

void Steering__temp (int duty_cycle){
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	if (duty_cycle >=0 && duty_cycle <101){
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db0b      	blt.n	8001d5e <Steering__temp+0x26>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b64      	cmp	r3, #100	; 0x64
 8001d4a:	dc08      	bgt.n	8001d5e <Steering__temp+0x26>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, duty_cycle*10);
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <Steering__temp+0x34>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000264 	.word	0x20000264

08001d70 <HAL_UART_RxCpltCallback>:


char received_message[5]="";
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

//HAL_UART_Transmit_IT(&huart3, (uint8_t*)received_message, 4);
HAL_UART_Receive_IT(&huart3, (uint8_t*)received_message, 5);
 8001d78:	2205      	movs	r2, #5
 8001d7a:	4906      	ldr	r1, [pc, #24]	; (8001d94 <HAL_UART_RxCpltCallback+0x24>)
 8001d7c:	4806      	ldr	r0, [pc, #24]	; (8001d98 <HAL_UART_RxCpltCallback+0x28>)
 8001d7e:	f004 fbf4 	bl	800656a <HAL_UART_Receive_IT>
sscanf(received_message, "%f", &stemp);
 8001d82:	4a06      	ldr	r2, [pc, #24]	; (8001d9c <HAL_UART_RxCpltCallback+0x2c>)
 8001d84:	4906      	ldr	r1, [pc, #24]	; (8001da0 <HAL_UART_RxCpltCallback+0x30>)
 8001d86:	4803      	ldr	r0, [pc, #12]	; (8001d94 <HAL_UART_RxCpltCallback+0x24>)
 8001d88:	f006 ffbe 	bl	8008d08 <siscanf>


}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	2000024c 	.word	0x2000024c
 8001d98:	200002b0 	.word	0x200002b0
 8001d9c:	20000820 	.word	0x20000820
 8001da0:	0800cf7c 	.word	0x0800cf7c

08001da4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001daa:	f000 fe90 	bl	8002ace <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dae:	f000 f8a1 	bl	8001ef4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001db2:	f000 faab 	bl	800230c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001db6:	f000 fa4b 	bl	8002250 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001dba:	f000 fa79 	bl	80022b0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8001dbe:	f000 f971 	bl	80020a4 <MX_TIM3_Init>
  MX_SPI4_Init();
 8001dc2:	f000 f931 	bl	8002028 <MX_SPI4_Init>
  MX_TIM4_Init();
 8001dc6:	f000 f9bb 	bl	8002140 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8001dca:	483c      	ldr	r0, [pc, #240]	; (8001ebc <main+0x118>)
 8001dcc:	f003 faf6 	bl	80053bc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8001dd0:	483b      	ldr	r0, [pc, #236]	; (8001ec0 <main+0x11c>)
 8001dd2:	f003 faf3 	bl	80053bc <HAL_TIM_Base_Start>
  Lcd_init();
 8001dd6:	f7fe fec4 	bl	8000b62 <Lcd_init>

  BMP2_Init(&hbmp2_1);
 8001dda:	483a      	ldr	r0, [pc, #232]	; (8001ec4 <main+0x120>)
 8001ddc:	f7ff fe32 	bl	8001a44 <BMP2_Init>

  HAL_UART_Receive_IT(&huart3, (uint8_t*)received_message, 5);
 8001de0:	2205      	movs	r2, #5
 8001de2:	4939      	ldr	r1, [pc, #228]	; (8001ec8 <main+0x124>)
 8001de4:	4839      	ldr	r0, [pc, #228]	; (8001ecc <main+0x128>)
 8001de6:	f004 fbc0 	bl	800656a <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8001dea:	2108      	movs	r1, #8
 8001dec:	4834      	ldr	r0, [pc, #208]	; (8001ec0 <main+0x11c>)
 8001dee:	f003 fbb7 	bl	8005560 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8001df2:	210c      	movs	r1, #12
 8001df4:	4832      	ldr	r0, [pc, #200]	; (8001ec0 <main+0x11c>)
 8001df6:	f003 fbb3 	bl	8005560 <HAL_TIM_PWM_Start>
  Steering__temp(0);
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f7ff ff9c 	bl	8001d38 <Steering__temp>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 800);
 8001e00:	4b2f      	ldr	r3, [pc, #188]	; (8001ec0 <main+0x11c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
  {

//	  temp =  BMP2_ReadTemperature_degC(&hbmp2_1);
//	  n = sprintf(data_msg, "Temp: %4.02f \r\n", (float)temp);

	  temp =  BMP2_ReadTemperature_degC(&hbmp2_1);
 8001e0a:	482e      	ldr	r0, [pc, #184]	; (8001ec4 <main+0x120>)
 8001e0c:	f7ff ff56 	bl	8001cbc <BMP2_ReadTemperature_degC>
 8001e10:	eeb0 7b40 	vmov.f64	d7, d0
 8001e14:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e18:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <main+0x12c>)
 8001e1a:	edc3 7a00 	vstr	s15, [r3]
	  char data_msg[32];
	  n = sprintf(data_msg, "Temp: %4.02f \r\n", (float)temp);
 8001e1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <main+0x12c>)
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e28:	4638      	mov	r0, r7
 8001e2a:	ec53 2b17 	vmov	r2, r3, d7
 8001e2e:	4929      	ldr	r1, [pc, #164]	; (8001ed4 <main+0x130>)
 8001e30:	f006 ff4a 	bl	8008cc8 <siprintf>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4a28      	ldr	r2, [pc, #160]	; (8001ed8 <main+0x134>)
 8001e38:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t*)data_msg, n, 0xffff);
 8001e3a:	4b27      	ldr	r3, [pc, #156]	; (8001ed8 <main+0x134>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4639      	mov	r1, r7
 8001e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e46:	4821      	ldr	r0, [pc, #132]	; (8001ecc <main+0x128>)
 8001e48:	f004 fafc 	bl	8006444 <HAL_UART_Transmit>

	  //sscanf(received_message, "%f", &test);

	  Lcd_clear();
 8001e4c:	f7fe fe60 	bl	8000b10 <Lcd_clear>
	  Lcd_put_cur(0, 0);
 8001e50:	2100      	movs	r1, #0
 8001e52:	2000      	movs	r0, #0
 8001e54:	f7fe fe66 	bl	8000b24 <Lcd_put_cur>

	  sprintf (buffer,"Set temp = %4.02f", stemp);
 8001e58:	4b20      	ldr	r3, [pc, #128]	; (8001edc <main+0x138>)
 8001e5a:	edd3 7a00 	vldr	s15, [r3]
 8001e5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e62:	ec53 2b17 	vmov	r2, r3, d7
 8001e66:	491e      	ldr	r1, [pc, #120]	; (8001ee0 <main+0x13c>)
 8001e68:	481e      	ldr	r0, [pc, #120]	; (8001ee4 <main+0x140>)
 8001e6a:	f006 ff2d 	bl	8008cc8 <siprintf>
	  Lcd_send_string(buffer);
 8001e6e:	481d      	ldr	r0, [pc, #116]	; (8001ee4 <main+0x140>)
 8001e70:	f7fe feb4 	bl	8000bdc <Lcd_send_string>

	  Lcd_put_cur(1, 0);
 8001e74:	2100      	movs	r1, #0
 8001e76:	2001      	movs	r0, #1
 8001e78:	f7fe fe54 	bl	8000b24 <Lcd_put_cur>
//	  else{
//		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
//	  }

//	  printed= a_temp[i];
	  sprintf (buffer1,"Act temp = %4.02f", (float)temp);
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <main+0x12c>)
 8001e7e:	edd3 7a00 	vldr	s15, [r3]
 8001e82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e86:	ec53 2b17 	vmov	r2, r3, d7
 8001e8a:	4917      	ldr	r1, [pc, #92]	; (8001ee8 <main+0x144>)
 8001e8c:	4817      	ldr	r0, [pc, #92]	; (8001eec <main+0x148>)
 8001e8e:	f006 ff1b 	bl	8008cc8 <siprintf>
	  i++;
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <main+0x14c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	3301      	adds	r3, #1
 8001e98:	4a15      	ldr	r2, [pc, #84]	; (8001ef0 <main+0x14c>)
 8001e9a:	6013      	str	r3, [r2, #0]
	  if (i >2){
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <main+0x14c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	dd02      	ble.n	8001eaa <main+0x106>
		  i =0;
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <main+0x14c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
	  }

	  Lcd_send_string(buffer1);
 8001eaa:	4810      	ldr	r0, [pc, #64]	; (8001eec <main+0x148>)
 8001eac:	f7fe fe96 	bl	8000bdc <Lcd_send_string>
	  HAL_Delay(400);
 8001eb0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001eb4:	f000 fe68 	bl	8002b88 <HAL_Delay>
  {
 8001eb8:	e7a7      	b.n	8001e0a <main+0x66>
 8001eba:	bf00      	nop
 8001ebc:	2000073c 	.word	0x2000073c
 8001ec0:	20000264 	.word	0x20000264
 8001ec4:	20000010 	.word	0x20000010
 8001ec8:	2000024c 	.word	0x2000024c
 8001ecc:	200002b0 	.word	0x200002b0
 8001ed0:	20000738 	.word	0x20000738
 8001ed4:	0800cf80 	.word	0x0800cf80
 8001ed8:	20000260 	.word	0x20000260
 8001edc:	20000820 	.word	0x20000820
 8001ee0:	0800cf90 	.word	0x0800cf90
 8001ee4:	20000790 	.word	0x20000790
 8001ee8:	0800cfa4 	.word	0x0800cfa4
 8001eec:	2000080c 	.word	0x2000080c
 8001ef0:	20000248 	.word	0x20000248

08001ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b0b8      	sub	sp, #224	; 0xe0
 8001ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001efa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001efe:	2234      	movs	r2, #52	; 0x34
 8001f00:	2100      	movs	r1, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f006 f88c 	bl	8008020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f08:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f18:	f107 0308 	add.w	r3, r7, #8
 8001f1c:	2290      	movs	r2, #144	; 0x90
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f006 f87d 	bl	8008020 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f26:	f001 fb05 	bl	8003534 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2a:	4b3c      	ldr	r3, [pc, #240]	; (800201c <SystemClock_Config+0x128>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	4a3b      	ldr	r2, [pc, #236]	; (800201c <SystemClock_Config+0x128>)
 8001f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f34:	6413      	str	r3, [r2, #64]	; 0x40
 8001f36:	4b39      	ldr	r3, [pc, #228]	; (800201c <SystemClock_Config+0x128>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f42:	4b37      	ldr	r3, [pc, #220]	; (8002020 <SystemClock_Config+0x12c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f4a:	4a35      	ldr	r2, [pc, #212]	; (8002020 <SystemClock_Config+0x12c>)
 8001f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	4b33      	ldr	r3, [pc, #204]	; (8002020 <SystemClock_Config+0x12c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001f64:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001f68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001f80:	2360      	movs	r3, #96	; 0x60
 8001f82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f86:	2302      	movs	r3, #2
 8001f88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f92:	2302      	movs	r3, #2
 8001f94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f98:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f001 fb29 	bl	80035f4 <HAL_RCC_OscConfig>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001fa8:	f000 fada 	bl	8002560 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001fac:	f001 fad2 	bl	8003554 <HAL_PWREx_EnableOverDrive>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001fb6:	f000 fad3 	bl	8002560 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fba:	230f      	movs	r3, #15
 8001fbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fdc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001fe0:	2103      	movs	r1, #3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f001 fdb4 	bl	8003b50 <HAL_RCC_ClockConfig>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8001fee:	f000 fab7 	bl	8002560 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <SystemClock_Config+0x130>)
 8001ff4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002000:	f107 0308 	add.w	r3, r7, #8
 8002004:	4618      	mov	r0, r3
 8002006:	f001 ffa5 	bl	8003f54 <HAL_RCCEx_PeriphCLKConfig>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8002010:	f000 faa6 	bl	8002560 <Error_Handler>
  }
}
 8002014:	bf00      	nop
 8002016:	37e0      	adds	r7, #224	; 0xe0
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40023800 	.word	0x40023800
 8002020:	40007000 	.word	0x40007000
 8002024:	00200100 	.word	0x00200100

08002028 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800202c:	4b1b      	ldr	r3, [pc, #108]	; (800209c <MX_SPI4_Init+0x74>)
 800202e:	4a1c      	ldr	r2, [pc, #112]	; (80020a0 <MX_SPI4_Init+0x78>)
 8002030:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002032:	4b1a      	ldr	r3, [pc, #104]	; (800209c <MX_SPI4_Init+0x74>)
 8002034:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002038:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800203a:	4b18      	ldr	r3, [pc, #96]	; (800209c <MX_SPI4_Init+0x74>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002040:	4b16      	ldr	r3, [pc, #88]	; (800209c <MX_SPI4_Init+0x74>)
 8002042:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002046:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002048:	4b14      	ldr	r3, [pc, #80]	; (800209c <MX_SPI4_Init+0x74>)
 800204a:	2202      	movs	r2, #2
 800204c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800204e:	4b13      	ldr	r3, [pc, #76]	; (800209c <MX_SPI4_Init+0x74>)
 8002050:	2201      	movs	r2, #1
 8002052:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <MX_SPI4_Init+0x74>)
 8002056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800205a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <MX_SPI4_Init+0x74>)
 800205e:	2210      	movs	r2, #16
 8002060:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <MX_SPI4_Init+0x74>)
 8002064:	2200      	movs	r2, #0
 8002066:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <MX_SPI4_Init+0x74>)
 800206a:	2200      	movs	r2, #0
 800206c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800206e:	4b0b      	ldr	r3, [pc, #44]	; (800209c <MX_SPI4_Init+0x74>)
 8002070:	2200      	movs	r2, #0
 8002072:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <MX_SPI4_Init+0x74>)
 8002076:	2207      	movs	r2, #7
 8002078:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800207a:	4b08      	ldr	r3, [pc, #32]	; (800209c <MX_SPI4_Init+0x74>)
 800207c:	2200      	movs	r2, #0
 800207e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <MX_SPI4_Init+0x74>)
 8002082:	2200      	movs	r2, #0
 8002084:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002086:	4805      	ldr	r0, [pc, #20]	; (800209c <MX_SPI4_Init+0x74>)
 8002088:	f002 fb8c 	bl	80047a4 <HAL_SPI_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002092:	f000 fa65 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200007a4 	.word	0x200007a4
 80020a0:	40013400 	.word	0x40013400

080020a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020aa:	f107 0310 	add.w	r3, r7, #16
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b8:	1d3b      	adds	r3, r7, #4
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <MX_TIM3_Init+0x94>)
 80020c4:	4a1d      	ldr	r2, [pc, #116]	; (800213c <MX_TIM3_Init+0x98>)
 80020c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 80020c8:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <MX_TIM3_Init+0x94>)
 80020ca:	225f      	movs	r2, #95	; 0x5f
 80020cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ce:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <MX_TIM3_Init+0x94>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65534;
 80020d4:	4b18      	ldr	r3, [pc, #96]	; (8002138 <MX_TIM3_Init+0x94>)
 80020d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80020da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020dc:	4b16      	ldr	r3, [pc, #88]	; (8002138 <MX_TIM3_Init+0x94>)
 80020de:	2200      	movs	r2, #0
 80020e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <MX_TIM3_Init+0x94>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020e8:	4813      	ldr	r0, [pc, #76]	; (8002138 <MX_TIM3_Init+0x94>)
 80020ea:	f003 f90f 	bl	800530c <HAL_TIM_Base_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80020f4:	f000 fa34 	bl	8002560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020fe:	f107 0310 	add.w	r3, r7, #16
 8002102:	4619      	mov	r1, r3
 8002104:	480c      	ldr	r0, [pc, #48]	; (8002138 <MX_TIM3_Init+0x94>)
 8002106:	f003 fc39 	bl	800597c <HAL_TIM_ConfigClockSource>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002110:	f000 fa26 	bl	8002560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002114:	2300      	movs	r3, #0
 8002116:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	4619      	mov	r1, r3
 8002120:	4805      	ldr	r0, [pc, #20]	; (8002138 <MX_TIM3_Init+0x94>)
 8002122:	f004 f8b3 	bl	800628c <HAL_TIMEx_MasterConfigSynchronization>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800212c:	f000 fa18 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002130:	bf00      	nop
 8002132:	3720      	adds	r7, #32
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	2000073c 	.word	0x2000073c
 800213c:	40000400 	.word	0x40000400

08002140 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08e      	sub	sp, #56	; 0x38
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002146:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	605a      	str	r2, [r3, #4]
 8002150:	609a      	str	r2, [r3, #8]
 8002152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002154:	f107 031c 	add.w	r3, r7, #28
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002160:	463b      	mov	r3, r7
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]
 800216c:	611a      	str	r2, [r3, #16]
 800216e:	615a      	str	r2, [r3, #20]
 8002170:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002172:	4b35      	ldr	r3, [pc, #212]	; (8002248 <MX_TIM4_Init+0x108>)
 8002174:	4a35      	ldr	r2, [pc, #212]	; (800224c <MX_TIM4_Init+0x10c>)
 8002176:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 95;
 8002178:	4b33      	ldr	r3, [pc, #204]	; (8002248 <MX_TIM4_Init+0x108>)
 800217a:	225f      	movs	r2, #95	; 0x5f
 800217c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217e:	4b32      	ldr	r3, [pc, #200]	; (8002248 <MX_TIM4_Init+0x108>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002184:	4b30      	ldr	r3, [pc, #192]	; (8002248 <MX_TIM4_Init+0x108>)
 8002186:	f240 32e7 	movw	r2, #999	; 0x3e7
 800218a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800218c:	4b2e      	ldr	r3, [pc, #184]	; (8002248 <MX_TIM4_Init+0x108>)
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002192:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <MX_TIM4_Init+0x108>)
 8002194:	2200      	movs	r2, #0
 8002196:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002198:	482b      	ldr	r0, [pc, #172]	; (8002248 <MX_TIM4_Init+0x108>)
 800219a:	f003 f8b7 	bl	800530c <HAL_TIM_Base_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80021a4:	f000 f9dc 	bl	8002560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021b2:	4619      	mov	r1, r3
 80021b4:	4824      	ldr	r0, [pc, #144]	; (8002248 <MX_TIM4_Init+0x108>)
 80021b6:	f003 fbe1 	bl	800597c <HAL_TIM_ConfigClockSource>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80021c0:	f000 f9ce 	bl	8002560 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021c4:	4820      	ldr	r0, [pc, #128]	; (8002248 <MX_TIM4_Init+0x108>)
 80021c6:	f003 f969 	bl	800549c <HAL_TIM_PWM_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80021d0:	f000 f9c6 	bl	8002560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	4619      	mov	r1, r3
 80021e2:	4819      	ldr	r0, [pc, #100]	; (8002248 <MX_TIM4_Init+0x108>)
 80021e4:	f004 f852 	bl	800628c <HAL_TIMEx_MasterConfigSynchronization>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80021ee:	f000 f9b7 	bl	8002560 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021f2:	2360      	movs	r3, #96	; 0x60
 80021f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80021f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80021fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80021fc:	2302      	movs	r3, #2
 80021fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002204:	463b      	mov	r3, r7
 8002206:	2208      	movs	r2, #8
 8002208:	4619      	mov	r1, r3
 800220a:	480f      	ldr	r0, [pc, #60]	; (8002248 <MX_TIM4_Init+0x108>)
 800220c:	f003 faa2 	bl	8005754 <HAL_TIM_PWM_ConfigChannel>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8002216:	f000 f9a3 	bl	8002560 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002222:	463b      	mov	r3, r7
 8002224:	220c      	movs	r2, #12
 8002226:	4619      	mov	r1, r3
 8002228:	4807      	ldr	r0, [pc, #28]	; (8002248 <MX_TIM4_Init+0x108>)
 800222a:	f003 fa93 	bl	8005754 <HAL_TIM_PWM_ConfigChannel>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM4_Init+0xf8>
  {
    Error_Handler();
 8002234:	f000 f994 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002238:	4803      	ldr	r0, [pc, #12]	; (8002248 <MX_TIM4_Init+0x108>)
 800223a:	f000 fa33 	bl	80026a4 <HAL_TIM_MspPostInit>

}
 800223e:	bf00      	nop
 8002240:	3738      	adds	r7, #56	; 0x38
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000264 	.word	0x20000264
 800224c:	40000800 	.word	0x40000800

08002250 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002254:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <MX_USART3_UART_Init+0x58>)
 8002256:	4a15      	ldr	r2, [pc, #84]	; (80022ac <MX_USART3_UART_Init+0x5c>)
 8002258:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800225a:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <MX_USART3_UART_Init+0x58>)
 800225c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002260:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002262:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <MX_USART3_UART_Init+0x58>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <MX_USART3_UART_Init+0x58>)
 800226a:	2200      	movs	r2, #0
 800226c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <MX_USART3_UART_Init+0x58>)
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <MX_USART3_UART_Init+0x58>)
 8002276:	220c      	movs	r2, #12
 8002278:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <MX_USART3_UART_Init+0x58>)
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <MX_USART3_UART_Init+0x58>)
 8002282:	2200      	movs	r2, #0
 8002284:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <MX_USART3_UART_Init+0x58>)
 8002288:	2200      	movs	r2, #0
 800228a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <MX_USART3_UART_Init+0x58>)
 800228e:	2200      	movs	r2, #0
 8002290:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002292:	4805      	ldr	r0, [pc, #20]	; (80022a8 <MX_USART3_UART_Init+0x58>)
 8002294:	f004 f888 	bl	80063a8 <HAL_UART_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800229e:	f000 f95f 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200002b0 	.word	0x200002b0
 80022ac:	40004800 	.word	0x40004800

080022b0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80022b4:	4b14      	ldr	r3, [pc, #80]	; (8002308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80022ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022be:	2206      	movs	r2, #6
 80022c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022c4:	2202      	movs	r2, #2
 80022c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022d0:	2202      	movs	r2, #2
 80022d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022dc:	2200      	movs	r2, #0
 80022de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80022f2:	4805      	ldr	r0, [pc, #20]	; (8002308 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022f4:	f000 ffd5 	bl	80032a2 <HAL_PCD_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80022fe:	f000 f92f 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000334 	.word	0x20000334

0800230c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08e      	sub	sp, #56	; 0x38
 8002310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	609a      	str	r2, [r3, #8]
 800231e:	60da      	str	r2, [r3, #12]
 8002320:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002322:	4b89      	ldr	r3, [pc, #548]	; (8002548 <MX_GPIO_Init+0x23c>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a88      	ldr	r2, [pc, #544]	; (8002548 <MX_GPIO_Init+0x23c>)
 8002328:	f043 0310 	orr.w	r3, r3, #16
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b86      	ldr	r3, [pc, #536]	; (8002548 <MX_GPIO_Init+0x23c>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	623b      	str	r3, [r7, #32]
 8002338:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800233a:	4b83      	ldr	r3, [pc, #524]	; (8002548 <MX_GPIO_Init+0x23c>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a82      	ldr	r2, [pc, #520]	; (8002548 <MX_GPIO_Init+0x23c>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b80      	ldr	r3, [pc, #512]	; (8002548 <MX_GPIO_Init+0x23c>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	61fb      	str	r3, [r7, #28]
 8002350:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002352:	4b7d      	ldr	r3, [pc, #500]	; (8002548 <MX_GPIO_Init+0x23c>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a7c      	ldr	r2, [pc, #496]	; (8002548 <MX_GPIO_Init+0x23c>)
 8002358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b7a      	ldr	r3, [pc, #488]	; (8002548 <MX_GPIO_Init+0x23c>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002366:	61bb      	str	r3, [r7, #24]
 8002368:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800236a:	4b77      	ldr	r3, [pc, #476]	; (8002548 <MX_GPIO_Init+0x23c>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	4a76      	ldr	r2, [pc, #472]	; (8002548 <MX_GPIO_Init+0x23c>)
 8002370:	f043 0302 	orr.w	r3, r3, #2
 8002374:	6313      	str	r3, [r2, #48]	; 0x30
 8002376:	4b74      	ldr	r3, [pc, #464]	; (8002548 <MX_GPIO_Init+0x23c>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002382:	4b71      	ldr	r3, [pc, #452]	; (8002548 <MX_GPIO_Init+0x23c>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a70      	ldr	r2, [pc, #448]	; (8002548 <MX_GPIO_Init+0x23c>)
 8002388:	f043 0320 	orr.w	r3, r3, #32
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b6e      	ldr	r3, [pc, #440]	; (8002548 <MX_GPIO_Init+0x23c>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f003 0320 	and.w	r3, r3, #32
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800239a:	4b6b      	ldr	r3, [pc, #428]	; (8002548 <MX_GPIO_Init+0x23c>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a6a      	ldr	r2, [pc, #424]	; (8002548 <MX_GPIO_Init+0x23c>)
 80023a0:	f043 0308 	orr.w	r3, r3, #8
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b68      	ldr	r3, [pc, #416]	; (8002548 <MX_GPIO_Init+0x23c>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80023b2:	4b65      	ldr	r3, [pc, #404]	; (8002548 <MX_GPIO_Init+0x23c>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a64      	ldr	r2, [pc, #400]	; (8002548 <MX_GPIO_Init+0x23c>)
 80023b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b62      	ldr	r3, [pc, #392]	; (8002548 <MX_GPIO_Init+0x23c>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ca:	4b5f      	ldr	r3, [pc, #380]	; (8002548 <MX_GPIO_Init+0x23c>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a5e      	ldr	r2, [pc, #376]	; (8002548 <MX_GPIO_Init+0x23c>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b5c      	ldr	r3, [pc, #368]	; (8002548 <MX_GPIO_Init+0x23c>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP280_CS2_Pin|BMP280_CS1_Pin|D6_Pin|D5_Pin
 80023e2:	2200      	movs	r2, #0
 80023e4:	f642 2118 	movw	r1, #10776	; 0x2a18
 80023e8:	4858      	ldr	r0, [pc, #352]	; (800254c <MX_GPIO_Init+0x240>)
 80023ea:	f000 ff41 	bl	8003270 <HAL_GPIO_WritePin>
                          |EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80023ee:	2200      	movs	r2, #0
 80023f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80023f4:	4856      	ldr	r0, [pc, #344]	; (8002550 <MX_GPIO_Init+0x244>)
 80023f6:	f000 ff3b 	bl	8003270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D7_Pin|D4_Pin|RW_Pin, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002400:	4854      	ldr	r0, [pc, #336]	; (8002554 <MX_GPIO_Init+0x248>)
 8002402:	f000 ff35 	bl	8003270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|RS_Pin, GPIO_PIN_RESET);
 8002406:	2200      	movs	r2, #0
 8002408:	f244 0140 	movw	r1, #16448	; 0x4040
 800240c:	4852      	ldr	r0, [pc, #328]	; (8002558 <MX_GPIO_Init+0x24c>)
 800240e:	f000 ff2f 	bl	8003270 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BMP280_CS2_Pin BMP280_CS1_Pin D6_Pin D5_Pin
                           EN_Pin */
  GPIO_InitStruct.Pin = BMP280_CS2_Pin|BMP280_CS1_Pin|D6_Pin|D5_Pin
 8002412:	f642 2318 	movw	r3, #10776	; 0x2a18
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
                          |EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002418:	2301      	movs	r3, #1
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002420:	2300      	movs	r3, #0
 8002422:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002428:	4619      	mov	r1, r3
 800242a:	4848      	ldr	r0, [pc, #288]	; (800254c <MX_GPIO_Init+0x240>)
 800242c:	f000 fd74 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002436:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002444:	4619      	mov	r1, r3
 8002446:	4845      	ldr	r0, [pc, #276]	; (800255c <MX_GPIO_Init+0x250>)
 8002448:	f000 fd66 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 800244c:	2302      	movs	r3, #2
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002458:	2303      	movs	r3, #3
 800245a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800245c:	230b      	movs	r3, #11
 800245e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 8002460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002464:	4619      	mov	r1, r3
 8002466:	483d      	ldr	r0, [pc, #244]	; (800255c <MX_GPIO_Init+0x250>)
 8002468:	f000 fd56 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800246c:	f244 0381 	movw	r3, #16513	; 0x4081
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002472:	2301      	movs	r3, #1
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002482:	4619      	mov	r1, r3
 8002484:	4832      	ldr	r0, [pc, #200]	; (8002550 <MX_GPIO_Init+0x244>)
 8002486:	f000 fd47 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin RW_Pin */
  GPIO_InitStruct.Pin = D7_Pin|RW_Pin;
 800248a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002490:	2301      	movs	r3, #1
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002498:	2300      	movs	r3, #0
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800249c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a0:	4619      	mov	r1, r3
 80024a2:	482c      	ldr	r0, [pc, #176]	; (8002554 <MX_GPIO_Init+0x248>)
 80024a4:	f000 fd38 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_Pin */
  GPIO_InitStruct.Pin = D4_Pin;
 80024a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ae:	2301      	movs	r3, #1
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80024b6:	2301      	movs	r3, #1
 80024b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 80024ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024be:	4619      	mov	r1, r3
 80024c0:	4824      	ldr	r0, [pc, #144]	; (8002554 <MX_GPIO_Init+0x248>)
 80024c2:	f000 fd29 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80024c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024cc:	2302      	movs	r3, #2
 80024ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d4:	2303      	movs	r3, #3
 80024d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024d8:	230b      	movs	r3, #11
 80024da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80024dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e0:	4619      	mov	r1, r3
 80024e2:	481b      	ldr	r0, [pc, #108]	; (8002550 <MX_GPIO_Init+0x244>)
 80024e4:	f000 fd18 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin RS_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|RS_Pin;
 80024e8:	f244 0340 	movw	r3, #16448	; 0x4040
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ee:	2301      	movs	r3, #1
 80024f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f6:	2300      	movs	r3, #0
 80024f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024fe:	4619      	mov	r1, r3
 8002500:	4815      	ldr	r0, [pc, #84]	; (8002558 <MX_GPIO_Init+0x24c>)
 8002502:	f000 fd09 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002506:	2380      	movs	r3, #128	; 0x80
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800250a:	2300      	movs	r3, #0
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002516:	4619      	mov	r1, r3
 8002518:	480f      	ldr	r0, [pc, #60]	; (8002558 <MX_GPIO_Init+0x24c>)
 800251a:	f000 fcfd 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800251e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002524:	2302      	movs	r3, #2
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252c:	2303      	movs	r3, #3
 800252e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002530:	230b      	movs	r3, #11
 8002532:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002538:	4619      	mov	r1, r3
 800253a:	4807      	ldr	r0, [pc, #28]	; (8002558 <MX_GPIO_Init+0x24c>)
 800253c:	f000 fcec 	bl	8002f18 <HAL_GPIO_Init>

}
 8002540:	bf00      	nop
 8002542:	3738      	adds	r7, #56	; 0x38
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40023800 	.word	0x40023800
 800254c:	40021000 	.word	0x40021000
 8002550:	40020400 	.word	0x40020400
 8002554:	40021400 	.word	0x40021400
 8002558:	40021800 	.word	0x40021800
 800255c:	40020800 	.word	0x40020800

08002560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002564:	b672      	cpsid	i
}
 8002566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002568:	e7fe      	b.n	8002568 <Error_Handler+0x8>
	...

0800256c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002572:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <HAL_MspInit+0x44>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	4a0e      	ldr	r2, [pc, #56]	; (80025b0 <HAL_MspInit+0x44>)
 8002578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257c:	6413      	str	r3, [r2, #64]	; 0x40
 800257e:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <HAL_MspInit+0x44>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002586:	607b      	str	r3, [r7, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_MspInit+0x44>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	4a08      	ldr	r2, [pc, #32]	; (80025b0 <HAL_MspInit+0x44>)
 8002590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002594:	6453      	str	r3, [r2, #68]	; 0x44
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_MspInit+0x44>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800

080025b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	; 0x28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a17      	ldr	r2, [pc, #92]	; (8002630 <HAL_SPI_MspInit+0x7c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d127      	bne.n	8002626 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80025d6:	4b17      	ldr	r3, [pc, #92]	; (8002634 <HAL_SPI_MspInit+0x80>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	4a16      	ldr	r2, [pc, #88]	; (8002634 <HAL_SPI_MspInit+0x80>)
 80025dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025e0:	6453      	str	r3, [r2, #68]	; 0x44
 80025e2:	4b14      	ldr	r3, [pc, #80]	; (8002634 <HAL_SPI_MspInit+0x80>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ee:	4b11      	ldr	r3, [pc, #68]	; (8002634 <HAL_SPI_MspInit+0x80>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	4a10      	ldr	r2, [pc, #64]	; (8002634 <HAL_SPI_MspInit+0x80>)
 80025f4:	f043 0310 	orr.w	r3, r3, #16
 80025f8:	6313      	str	r3, [r2, #48]	; 0x30
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <HAL_SPI_MspInit+0x80>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002606:	2364      	movs	r3, #100	; 0x64
 8002608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260a:	2302      	movs	r3, #2
 800260c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002612:	2303      	movs	r3, #3
 8002614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002616:	2305      	movs	r3, #5
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800261a:	f107 0314 	add.w	r3, r7, #20
 800261e:	4619      	mov	r1, r3
 8002620:	4805      	ldr	r0, [pc, #20]	; (8002638 <HAL_SPI_MspInit+0x84>)
 8002622:	f000 fc79 	bl	8002f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002626:	bf00      	nop
 8002628:	3728      	adds	r7, #40	; 0x28
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40013400 	.word	0x40013400
 8002634:	40023800 	.word	0x40023800
 8002638:	40021000 	.word	0x40021000

0800263c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a13      	ldr	r2, [pc, #76]	; (8002698 <HAL_TIM_Base_MspInit+0x5c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d10c      	bne.n	8002668 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800264e:	4b13      	ldr	r3, [pc, #76]	; (800269c <HAL_TIM_Base_MspInit+0x60>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	4a12      	ldr	r2, [pc, #72]	; (800269c <HAL_TIM_Base_MspInit+0x60>)
 8002654:	f043 0302 	orr.w	r3, r3, #2
 8002658:	6413      	str	r3, [r2, #64]	; 0x40
 800265a:	4b10      	ldr	r3, [pc, #64]	; (800269c <HAL_TIM_Base_MspInit+0x60>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002666:	e010      	b.n	800268a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a0c      	ldr	r2, [pc, #48]	; (80026a0 <HAL_TIM_Base_MspInit+0x64>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d10b      	bne.n	800268a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002672:	4b0a      	ldr	r3, [pc, #40]	; (800269c <HAL_TIM_Base_MspInit+0x60>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a09      	ldr	r2, [pc, #36]	; (800269c <HAL_TIM_Base_MspInit+0x60>)
 8002678:	f043 0304 	orr.w	r3, r3, #4
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
 800267e:	4b07      	ldr	r3, [pc, #28]	; (800269c <HAL_TIM_Base_MspInit+0x60>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
}
 800268a:	bf00      	nop
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40000400 	.word	0x40000400
 800269c:	40023800 	.word	0x40023800
 80026a0:	40000800 	.word	0x40000800

080026a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 030c 	add.w	r3, r7, #12
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a11      	ldr	r2, [pc, #68]	; (8002708 <HAL_TIM_MspPostInit+0x64>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d11c      	bne.n	8002700 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026c6:	4b11      	ldr	r3, [pc, #68]	; (800270c <HAL_TIM_MspPostInit+0x68>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a10      	ldr	r2, [pc, #64]	; (800270c <HAL_TIM_MspPostInit+0x68>)
 80026cc:	f043 0308 	orr.w	r3, r3, #8
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b0e      	ldr	r3, [pc, #56]	; (800270c <HAL_TIM_MspPostInit+0x68>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80026de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80026e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e4:	2302      	movs	r3, #2
 80026e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026f0:	2302      	movs	r3, #2
 80026f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026f4:	f107 030c 	add.w	r3, r7, #12
 80026f8:	4619      	mov	r1, r3
 80026fa:	4805      	ldr	r0, [pc, #20]	; (8002710 <HAL_TIM_MspPostInit+0x6c>)
 80026fc:	f000 fc0c 	bl	8002f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002700:	bf00      	nop
 8002702:	3720      	adds	r7, #32
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40000800 	.word	0x40000800
 800270c:	40023800 	.word	0x40023800
 8002710:	40020c00 	.word	0x40020c00

08002714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08a      	sub	sp, #40	; 0x28
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271c:	f107 0314 	add.w	r3, r7, #20
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a1b      	ldr	r2, [pc, #108]	; (80027a0 <HAL_UART_MspInit+0x8c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d130      	bne.n	8002798 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002736:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <HAL_UART_MspInit+0x90>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	4a1a      	ldr	r2, [pc, #104]	; (80027a4 <HAL_UART_MspInit+0x90>)
 800273c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002740:	6413      	str	r3, [r2, #64]	; 0x40
 8002742:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <HAL_UART_MspInit+0x90>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <HAL_UART_MspInit+0x90>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <HAL_UART_MspInit+0x90>)
 8002754:	f043 0308 	orr.w	r3, r3, #8
 8002758:	6313      	str	r3, [r2, #48]	; 0x30
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_UART_MspInit+0x90>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002766:	f44f 7340 	mov.w	r3, #768	; 0x300
 800276a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002774:	2303      	movs	r3, #3
 8002776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002778:	2307      	movs	r3, #7
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	4619      	mov	r1, r3
 8002782:	4809      	ldr	r0, [pc, #36]	; (80027a8 <HAL_UART_MspInit+0x94>)
 8002784:	f000 fbc8 	bl	8002f18 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002788:	2200      	movs	r2, #0
 800278a:	2100      	movs	r1, #0
 800278c:	2027      	movs	r0, #39	; 0x27
 800278e:	f000 fafa 	bl	8002d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002792:	2027      	movs	r0, #39	; 0x27
 8002794:	f000 fb13 	bl	8002dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002798:	bf00      	nop
 800279a:	3728      	adds	r7, #40	; 0x28
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40004800 	.word	0x40004800
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40020c00 	.word	0x40020c00

080027ac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	; 0x28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027cc:	d141      	bne.n	8002852 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	4b23      	ldr	r3, [pc, #140]	; (800285c <HAL_PCD_MspInit+0xb0>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	4a22      	ldr	r2, [pc, #136]	; (800285c <HAL_PCD_MspInit+0xb0>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	6313      	str	r3, [r2, #48]	; 0x30
 80027da:	4b20      	ldr	r3, [pc, #128]	; (800285c <HAL_PCD_MspInit+0xb0>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80027e6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80027ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	2302      	movs	r3, #2
 80027ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f4:	2303      	movs	r3, #3
 80027f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80027f8:	230a      	movs	r3, #10
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	4619      	mov	r1, r3
 8002802:	4817      	ldr	r0, [pc, #92]	; (8002860 <HAL_PCD_MspInit+0xb4>)
 8002804:	f000 fb88 	bl	8002f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800280c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002816:	f107 0314 	add.w	r3, r7, #20
 800281a:	4619      	mov	r1, r3
 800281c:	4810      	ldr	r0, [pc, #64]	; (8002860 <HAL_PCD_MspInit+0xb4>)
 800281e:	f000 fb7b 	bl	8002f18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002822:	4b0e      	ldr	r3, [pc, #56]	; (800285c <HAL_PCD_MspInit+0xb0>)
 8002824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002826:	4a0d      	ldr	r2, [pc, #52]	; (800285c <HAL_PCD_MspInit+0xb0>)
 8002828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282c:	6353      	str	r3, [r2, #52]	; 0x34
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_PCD_MspInit+0xb0>)
 8002830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <HAL_PCD_MspInit+0xb0>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	4a07      	ldr	r2, [pc, #28]	; (800285c <HAL_PCD_MspInit+0xb0>)
 8002840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002844:	6453      	str	r3, [r2, #68]	; 0x44
 8002846:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_PCD_MspInit+0xb0>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002852:	bf00      	nop
 8002854:	3728      	adds	r7, #40	; 0x28
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800
 8002860:	40020000 	.word	0x40020000

08002864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002868:	e7fe      	b.n	8002868 <NMI_Handler+0x4>

0800286a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800286e:	e7fe      	b.n	800286e <HardFault_Handler+0x4>

08002870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002874:	e7fe      	b.n	8002874 <MemManage_Handler+0x4>

08002876 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800287a:	e7fe      	b.n	800287a <BusFault_Handler+0x4>

0800287c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002880:	e7fe      	b.n	8002880 <UsageFault_Handler+0x4>

08002882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028b0:	f000 f94a 	bl	8002b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80028bc:	4802      	ldr	r0, [pc, #8]	; (80028c8 <USART3_IRQHandler+0x10>)
 80028be:	f003 fea3 	bl	8006608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	200002b0 	.word	0x200002b0

080028cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
	return 1;
 80028d0:	2301      	movs	r3, #1
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <_kill>:

int _kill(int pid, int sig)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028e6:	f005 fb63 	bl	8007fb0 <__errno>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2216      	movs	r2, #22
 80028ee:	601a      	str	r2, [r3, #0]
	return -1;
 80028f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <_exit>:

void _exit (int status)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002904:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff ffe7 	bl	80028dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800290e:	e7fe      	b.n	800290e <_exit+0x12>

08002910 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	e00a      	b.n	8002938 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002922:	f3af 8000 	nop.w
 8002926:	4601      	mov	r1, r0
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	1c5a      	adds	r2, r3, #1
 800292c:	60ba      	str	r2, [r7, #8]
 800292e:	b2ca      	uxtb	r2, r1
 8002930:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	3301      	adds	r3, #1
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	429a      	cmp	r2, r3
 800293e:	dbf0      	blt.n	8002922 <_read+0x12>
	}

return len;
 8002940:	687b      	ldr	r3, [r7, #4]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b086      	sub	sp, #24
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	e009      	b.n	8002970 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	60ba      	str	r2, [r7, #8]
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	3301      	adds	r3, #1
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	429a      	cmp	r2, r3
 8002976:	dbf1      	blt.n	800295c <_write+0x12>
	}
	return len;
 8002978:	687b      	ldr	r3, [r7, #4]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <_close>:

int _close(int file)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
	return -1;
 800298a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029aa:	605a      	str	r2, [r3, #4]
	return 0;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <_isatty>:

int _isatty(int file)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
	return 1;
 80029c2:	2301      	movs	r3, #1
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
	return 0;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029f4:	4a14      	ldr	r2, [pc, #80]	; (8002a48 <_sbrk+0x5c>)
 80029f6:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <_sbrk+0x60>)
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a00:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <_sbrk+0x64>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d102      	bne.n	8002a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <_sbrk+0x64>)
 8002a0a:	4a12      	ldr	r2, [pc, #72]	; (8002a54 <_sbrk+0x68>)
 8002a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a0e:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <_sbrk+0x64>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d207      	bcs.n	8002a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a1c:	f005 fac8 	bl	8007fb0 <__errno>
 8002a20:	4603      	mov	r3, r0
 8002a22:	220c      	movs	r2, #12
 8002a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a2a:	e009      	b.n	8002a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a2c:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <_sbrk+0x64>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a32:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <_sbrk+0x64>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4413      	add	r3, r2
 8002a3a:	4a05      	ldr	r2, [pc, #20]	; (8002a50 <_sbrk+0x64>)
 8002a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20080000 	.word	0x20080000
 8002a4c:	00000400 	.word	0x00000400
 8002a50:	20000254 	.word	0x20000254
 8002a54:	20000858 	.word	0x20000858

08002a58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <SystemInit+0x20>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a62:	4a05      	ldr	r2, [pc, #20]	; (8002a78 <SystemInit+0x20>)
 8002a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ab4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a80:	480d      	ldr	r0, [pc, #52]	; (8002ab8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a82:	490e      	ldr	r1, [pc, #56]	; (8002abc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a84:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a88:	e002      	b.n	8002a90 <LoopCopyDataInit>

08002a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a8e:	3304      	adds	r3, #4

08002a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a94:	d3f9      	bcc.n	8002a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a96:	4a0b      	ldr	r2, [pc, #44]	; (8002ac4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a98:	4c0b      	ldr	r4, [pc, #44]	; (8002ac8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a9c:	e001      	b.n	8002aa2 <LoopFillZerobss>

08002a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002aa0:	3204      	adds	r2, #4

08002aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aa4:	d3fb      	bcc.n	8002a9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002aa6:	f7ff ffd7 	bl	8002a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aaa:	f005 fa87 	bl	8007fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aae:	f7ff f979 	bl	8001da4 <main>
  bx  lr    
 8002ab2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ab4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002abc:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8002ac0:	0800d4b4 	.word	0x0800d4b4
  ldr r2, =_sbss
 8002ac4:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 8002ac8:	20000858 	.word	0x20000858

08002acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002acc:	e7fe      	b.n	8002acc <ADC_IRQHandler>

08002ace <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad2:	2003      	movs	r0, #3
 8002ad4:	f000 f94c 	bl	8002d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f000 f805 	bl	8002ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ade:	f7ff fd45 	bl	800256c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_InitTick+0x54>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_InitTick+0x58>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	4619      	mov	r1, r3
 8002afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 f967 	bl	8002dda <HAL_SYSTICK_Config>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e00e      	b.n	8002b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b0f      	cmp	r3, #15
 8002b1a:	d80a      	bhi.n	8002b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b24:	f000 f92f 	bl	8002d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b28:	4a06      	ldr	r2, [pc, #24]	; (8002b44 <HAL_InitTick+0x5c>)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e000      	b.n	8002b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	2000004c 	.word	0x2000004c
 8002b40:	20000054 	.word	0x20000054
 8002b44:	20000050 	.word	0x20000050

08002b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_IncTick+0x20>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_IncTick+0x24>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4413      	add	r3, r2
 8002b58:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <HAL_IncTick+0x24>)
 8002b5a:	6013      	str	r3, [r2, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	20000054 	.word	0x20000054
 8002b6c:	20000844 	.word	0x20000844

08002b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return uwTick;
 8002b74:	4b03      	ldr	r3, [pc, #12]	; (8002b84 <HAL_GetTick+0x14>)
 8002b76:	681b      	ldr	r3, [r3, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	20000844 	.word	0x20000844

08002b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b90:	f7ff ffee 	bl	8002b70 <HAL_GetTick>
 8002b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ba0:	d005      	beq.n	8002bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <HAL_Delay+0x44>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bae:	bf00      	nop
 8002bb0:	f7ff ffde 	bl	8002b70 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d8f7      	bhi.n	8002bb0 <HAL_Delay+0x28>
  {
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000054 	.word	0x20000054

08002bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <__NVIC_SetPriorityGrouping+0x40>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bec:	4013      	ands	r3, r2
 8002bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <__NVIC_SetPriorityGrouping+0x44>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bfe:	4a04      	ldr	r2, [pc, #16]	; (8002c10 <__NVIC_SetPriorityGrouping+0x40>)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	60d3      	str	r3, [r2, #12]
}
 8002c04:	bf00      	nop
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000ed00 	.word	0xe000ed00
 8002c14:	05fa0000 	.word	0x05fa0000

08002c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c1c:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <__NVIC_GetPriorityGrouping+0x18>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	0a1b      	lsrs	r3, r3, #8
 8002c22:	f003 0307 	and.w	r3, r3, #7
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	db0b      	blt.n	8002c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	f003 021f 	and.w	r2, r3, #31
 8002c4c:	4907      	ldr	r1, [pc, #28]	; (8002c6c <__NVIC_EnableIRQ+0x38>)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	2001      	movs	r0, #1
 8002c56:	fa00 f202 	lsl.w	r2, r0, r2
 8002c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	e000e100 	.word	0xe000e100

08002c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	6039      	str	r1, [r7, #0]
 8002c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	db0a      	blt.n	8002c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	490c      	ldr	r1, [pc, #48]	; (8002cbc <__NVIC_SetPriority+0x4c>)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	0112      	lsls	r2, r2, #4
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	440b      	add	r3, r1
 8002c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c98:	e00a      	b.n	8002cb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	4908      	ldr	r1, [pc, #32]	; (8002cc0 <__NVIC_SetPriority+0x50>)
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	3b04      	subs	r3, #4
 8002ca8:	0112      	lsls	r2, r2, #4
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	440b      	add	r3, r1
 8002cae:	761a      	strb	r2, [r3, #24]
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	e000e100 	.word	0xe000e100
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b089      	sub	sp, #36	; 0x24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f1c3 0307 	rsb	r3, r3, #7
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	bf28      	it	cs
 8002ce2:	2304      	movcs	r3, #4
 8002ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	2b06      	cmp	r3, #6
 8002cec:	d902      	bls.n	8002cf4 <NVIC_EncodePriority+0x30>
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3b03      	subs	r3, #3
 8002cf2:	e000      	b.n	8002cf6 <NVIC_EncodePriority+0x32>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43da      	mvns	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	401a      	ands	r2, r3
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	fa01 f303 	lsl.w	r3, r1, r3
 8002d16:	43d9      	mvns	r1, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d1c:	4313      	orrs	r3, r2
         );
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3724      	adds	r7, #36	; 0x24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d3c:	d301      	bcc.n	8002d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e00f      	b.n	8002d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d42:	4a0a      	ldr	r2, [pc, #40]	; (8002d6c <SysTick_Config+0x40>)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d4a:	210f      	movs	r1, #15
 8002d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d50:	f7ff ff8e 	bl	8002c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <SysTick_Config+0x40>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d5a:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <SysTick_Config+0x40>)
 8002d5c:	2207      	movs	r2, #7
 8002d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	e000e010 	.word	0xe000e010

08002d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff ff29 	bl	8002bd0 <__NVIC_SetPriorityGrouping>
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b086      	sub	sp, #24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d98:	f7ff ff3e 	bl	8002c18 <__NVIC_GetPriorityGrouping>
 8002d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	6978      	ldr	r0, [r7, #20]
 8002da4:	f7ff ff8e 	bl	8002cc4 <NVIC_EncodePriority>
 8002da8:	4602      	mov	r2, r0
 8002daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dae:	4611      	mov	r1, r2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff ff5d 	bl	8002c70 <__NVIC_SetPriority>
}
 8002db6:	bf00      	nop
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff31 	bl	8002c34 <__NVIC_EnableIRQ>
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff ffa2 	bl	8002d2c <SysTick_Config>
 8002de8:	4603      	mov	r3, r0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e00:	f7ff feb6 	bl	8002b70 <HAL_GetTick>
 8002e04:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d008      	beq.n	8002e24 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2280      	movs	r2, #128	; 0x80
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e052      	b.n	8002eca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0216 	bic.w	r2, r2, #22
 8002e32:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e42:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d103      	bne.n	8002e54 <HAL_DMA_Abort+0x62>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d007      	beq.n	8002e64 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0208 	bic.w	r2, r2, #8
 8002e62:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e74:	e013      	b.n	8002e9e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e76:	f7ff fe7b 	bl	8002b70 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b05      	cmp	r3, #5
 8002e82:	d90c      	bls.n	8002e9e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e015      	b.n	8002eca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1e4      	bne.n	8002e76 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb0:	223f      	movs	r2, #63	; 0x3f
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2280      	movs	r2, #128	; 0x80
 8002eea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e00c      	b.n	8002f0a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2205      	movs	r2, #5
 8002ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
	...

08002f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b089      	sub	sp, #36	; 0x24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
 8002f36:	e175      	b.n	8003224 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f38:	2201      	movs	r2, #1
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	f040 8164 	bne.w	800321e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d005      	beq.n	8002f6e <HAL_GPIO_Init+0x56>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d130      	bne.n	8002fd0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	2203      	movs	r2, #3
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f003 0201 	and.w	r2, r3, #1
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d017      	beq.n	800300c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d123      	bne.n	8003060 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	08da      	lsrs	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3208      	adds	r2, #8
 8003020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	220f      	movs	r2, #15
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	08da      	lsrs	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3208      	adds	r2, #8
 800305a:	69b9      	ldr	r1, [r7, #24]
 800305c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	2203      	movs	r2, #3
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0203 	and.w	r2, r3, #3
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80be 	beq.w	800321e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a2:	4b66      	ldr	r3, [pc, #408]	; (800323c <HAL_GPIO_Init+0x324>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	4a65      	ldr	r2, [pc, #404]	; (800323c <HAL_GPIO_Init+0x324>)
 80030a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ac:	6453      	str	r3, [r2, #68]	; 0x44
 80030ae:	4b63      	ldr	r3, [pc, #396]	; (800323c <HAL_GPIO_Init+0x324>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80030ba:	4a61      	ldr	r2, [pc, #388]	; (8003240 <HAL_GPIO_Init+0x328>)
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	089b      	lsrs	r3, r3, #2
 80030c0:	3302      	adds	r3, #2
 80030c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	220f      	movs	r2, #15
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4013      	ands	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a58      	ldr	r2, [pc, #352]	; (8003244 <HAL_GPIO_Init+0x32c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d037      	beq.n	8003156 <HAL_GPIO_Init+0x23e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a57      	ldr	r2, [pc, #348]	; (8003248 <HAL_GPIO_Init+0x330>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d031      	beq.n	8003152 <HAL_GPIO_Init+0x23a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a56      	ldr	r2, [pc, #344]	; (800324c <HAL_GPIO_Init+0x334>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d02b      	beq.n	800314e <HAL_GPIO_Init+0x236>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a55      	ldr	r2, [pc, #340]	; (8003250 <HAL_GPIO_Init+0x338>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d025      	beq.n	800314a <HAL_GPIO_Init+0x232>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a54      	ldr	r2, [pc, #336]	; (8003254 <HAL_GPIO_Init+0x33c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d01f      	beq.n	8003146 <HAL_GPIO_Init+0x22e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a53      	ldr	r2, [pc, #332]	; (8003258 <HAL_GPIO_Init+0x340>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d019      	beq.n	8003142 <HAL_GPIO_Init+0x22a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a52      	ldr	r2, [pc, #328]	; (800325c <HAL_GPIO_Init+0x344>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d013      	beq.n	800313e <HAL_GPIO_Init+0x226>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a51      	ldr	r2, [pc, #324]	; (8003260 <HAL_GPIO_Init+0x348>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00d      	beq.n	800313a <HAL_GPIO_Init+0x222>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a50      	ldr	r2, [pc, #320]	; (8003264 <HAL_GPIO_Init+0x34c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d007      	beq.n	8003136 <HAL_GPIO_Init+0x21e>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a4f      	ldr	r2, [pc, #316]	; (8003268 <HAL_GPIO_Init+0x350>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d101      	bne.n	8003132 <HAL_GPIO_Init+0x21a>
 800312e:	2309      	movs	r3, #9
 8003130:	e012      	b.n	8003158 <HAL_GPIO_Init+0x240>
 8003132:	230a      	movs	r3, #10
 8003134:	e010      	b.n	8003158 <HAL_GPIO_Init+0x240>
 8003136:	2308      	movs	r3, #8
 8003138:	e00e      	b.n	8003158 <HAL_GPIO_Init+0x240>
 800313a:	2307      	movs	r3, #7
 800313c:	e00c      	b.n	8003158 <HAL_GPIO_Init+0x240>
 800313e:	2306      	movs	r3, #6
 8003140:	e00a      	b.n	8003158 <HAL_GPIO_Init+0x240>
 8003142:	2305      	movs	r3, #5
 8003144:	e008      	b.n	8003158 <HAL_GPIO_Init+0x240>
 8003146:	2304      	movs	r3, #4
 8003148:	e006      	b.n	8003158 <HAL_GPIO_Init+0x240>
 800314a:	2303      	movs	r3, #3
 800314c:	e004      	b.n	8003158 <HAL_GPIO_Init+0x240>
 800314e:	2302      	movs	r3, #2
 8003150:	e002      	b.n	8003158 <HAL_GPIO_Init+0x240>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <HAL_GPIO_Init+0x240>
 8003156:	2300      	movs	r3, #0
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	f002 0203 	and.w	r2, r2, #3
 800315e:	0092      	lsls	r2, r2, #2
 8003160:	4093      	lsls	r3, r2
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003168:	4935      	ldr	r1, [pc, #212]	; (8003240 <HAL_GPIO_Init+0x328>)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	089b      	lsrs	r3, r3, #2
 800316e:	3302      	adds	r3, #2
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003176:	4b3d      	ldr	r3, [pc, #244]	; (800326c <HAL_GPIO_Init+0x354>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	43db      	mvns	r3, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800319a:	4a34      	ldr	r2, [pc, #208]	; (800326c <HAL_GPIO_Init+0x354>)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031a0:	4b32      	ldr	r3, [pc, #200]	; (800326c <HAL_GPIO_Init+0x354>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031c4:	4a29      	ldr	r2, [pc, #164]	; (800326c <HAL_GPIO_Init+0x354>)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ca:	4b28      	ldr	r3, [pc, #160]	; (800326c <HAL_GPIO_Init+0x354>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ee:	4a1f      	ldr	r2, [pc, #124]	; (800326c <HAL_GPIO_Init+0x354>)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031f4:	4b1d      	ldr	r3, [pc, #116]	; (800326c <HAL_GPIO_Init+0x354>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003218:	4a14      	ldr	r2, [pc, #80]	; (800326c <HAL_GPIO_Init+0x354>)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3301      	adds	r3, #1
 8003222:	61fb      	str	r3, [r7, #28]
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	2b0f      	cmp	r3, #15
 8003228:	f67f ae86 	bls.w	8002f38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	3724      	adds	r7, #36	; 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800
 8003240:	40013800 	.word	0x40013800
 8003244:	40020000 	.word	0x40020000
 8003248:	40020400 	.word	0x40020400
 800324c:	40020800 	.word	0x40020800
 8003250:	40020c00 	.word	0x40020c00
 8003254:	40021000 	.word	0x40021000
 8003258:	40021400 	.word	0x40021400
 800325c:	40021800 	.word	0x40021800
 8003260:	40021c00 	.word	0x40021c00
 8003264:	40022000 	.word	0x40022000
 8003268:	40022400 	.word	0x40022400
 800326c:	40013c00 	.word	0x40013c00

08003270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	807b      	strh	r3, [r7, #2]
 800327c:	4613      	mov	r3, r2
 800327e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003280:	787b      	ldrb	r3, [r7, #1]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003286:	887a      	ldrh	r2, [r7, #2]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800328c:	e003      	b.n	8003296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800328e:	887b      	ldrh	r3, [r7, #2]
 8003290:	041a      	lsls	r2, r3, #16
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	619a      	str	r2, [r3, #24]
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032a4:	b08f      	sub	sp, #60	; 0x3c
 80032a6:	af0a      	add	r7, sp, #40	; 0x28
 80032a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e116      	b.n	80034e2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff fa6c 	bl	80027ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2203      	movs	r2, #3
 80032d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d102      	bne.n	80032ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f004 fbc6 	bl	8007a84 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	603b      	str	r3, [r7, #0]
 80032fe:	687e      	ldr	r6, [r7, #4]
 8003300:	466d      	mov	r5, sp
 8003302:	f106 0410 	add.w	r4, r6, #16
 8003306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800330a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800330c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800330e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003312:	e885 0003 	stmia.w	r5, {r0, r1}
 8003316:	1d33      	adds	r3, r6, #4
 8003318:	cb0e      	ldmia	r3, {r1, r2, r3}
 800331a:	6838      	ldr	r0, [r7, #0]
 800331c:	f004 fb5a 	bl	80079d4 <USB_CoreInit>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2202      	movs	r2, #2
 800332a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e0d7      	b.n	80034e2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2100      	movs	r1, #0
 8003338:	4618      	mov	r0, r3
 800333a:	f004 fbb4 	bl	8007aa6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333e:	2300      	movs	r3, #0
 8003340:	73fb      	strb	r3, [r7, #15]
 8003342:	e04a      	b.n	80033da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003344:	7bfa      	ldrb	r2, [r7, #15]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	333d      	adds	r3, #61	; 0x3d
 8003354:	2201      	movs	r2, #1
 8003356:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003358:	7bfa      	ldrb	r2, [r7, #15]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	333c      	adds	r3, #60	; 0x3c
 8003368:	7bfa      	ldrb	r2, [r7, #15]
 800336a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800336c:	7bfa      	ldrb	r2, [r7, #15]
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	b298      	uxth	r0, r3
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	3342      	adds	r3, #66	; 0x42
 8003380:	4602      	mov	r2, r0
 8003382:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003384:	7bfa      	ldrb	r2, [r7, #15]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	333f      	adds	r3, #63	; 0x3f
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003398:	7bfa      	ldrb	r2, [r7, #15]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	3344      	adds	r3, #68	; 0x44
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033ac:	7bfa      	ldrb	r2, [r7, #15]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	3348      	adds	r3, #72	; 0x48
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033c0:	7bfa      	ldrb	r2, [r7, #15]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	3350      	adds	r3, #80	; 0x50
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	3301      	adds	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
 80033da:	7bfa      	ldrb	r2, [r7, #15]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d3af      	bcc.n	8003344 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e4:	2300      	movs	r3, #0
 80033e6:	73fb      	strb	r3, [r7, #15]
 80033e8:	e044      	b.n	8003474 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033ea:	7bfa      	ldrb	r2, [r7, #15]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003400:	7bfa      	ldrb	r2, [r7, #15]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003412:	7bfa      	ldrb	r2, [r7, #15]
 8003414:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003416:	7bfa      	ldrb	r2, [r7, #15]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800342c:	7bfa      	ldrb	r2, [r7, #15]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003442:	7bfa      	ldrb	r2, [r7, #15]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	1a9b      	subs	r3, r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003458:	7bfa      	ldrb	r2, [r7, #15]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	3301      	adds	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
 8003474:	7bfa      	ldrb	r2, [r7, #15]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	429a      	cmp	r2, r3
 800347c:	d3b5      	bcc.n	80033ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	687e      	ldr	r6, [r7, #4]
 8003486:	466d      	mov	r5, sp
 8003488:	f106 0410 	add.w	r4, r6, #16
 800348c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800348e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003494:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003498:	e885 0003 	stmia.w	r5, {r0, r1}
 800349c:	1d33      	adds	r3, r6, #4
 800349e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034a0:	6838      	ldr	r0, [r7, #0]
 80034a2:	f004 fb4d 	bl	8007b40 <USB_DevInit>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e014      	b.n	80034e2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d102      	bne.n	80034d6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f80b 	bl	80034ec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f004 fd07 	bl	8007eee <USB_DevDisconnect>

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080034ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800351a:	4b05      	ldr	r3, [pc, #20]	; (8003530 <HAL_PCDEx_ActivateLPM+0x44>)
 800351c:	4313      	orrs	r3, r2
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	10000003 	.word	0x10000003

08003534 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003538:	4b05      	ldr	r3, [pc, #20]	; (8003550 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a04      	ldr	r2, [pc, #16]	; (8003550 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800353e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003542:	6013      	str	r3, [r2, #0]
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40007000 	.word	0x40007000

08003554 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800355e:	4b23      	ldr	r3, [pc, #140]	; (80035ec <HAL_PWREx_EnableOverDrive+0x98>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	4a22      	ldr	r2, [pc, #136]	; (80035ec <HAL_PWREx_EnableOverDrive+0x98>)
 8003564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003568:	6413      	str	r3, [r2, #64]	; 0x40
 800356a:	4b20      	ldr	r3, [pc, #128]	; (80035ec <HAL_PWREx_EnableOverDrive+0x98>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003572:	603b      	str	r3, [r7, #0]
 8003574:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003576:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a1d      	ldr	r2, [pc, #116]	; (80035f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800357c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003580:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003582:	f7ff faf5 	bl	8002b70 <HAL_GetTick>
 8003586:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003588:	e009      	b.n	800359e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800358a:	f7ff faf1 	bl	8002b70 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003598:	d901      	bls.n	800359e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e022      	b.n	80035e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800359e:	4b14      	ldr	r3, [pc, #80]	; (80035f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035aa:	d1ee      	bne.n	800358a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80035ac:	4b10      	ldr	r3, [pc, #64]	; (80035f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a0f      	ldr	r2, [pc, #60]	; (80035f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035b8:	f7ff fada 	bl	8002b70 <HAL_GetTick>
 80035bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035be:	e009      	b.n	80035d4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035c0:	f7ff fad6 	bl	8002b70 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ce:	d901      	bls.n	80035d4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e007      	b.n	80035e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035e0:	d1ee      	bne.n	80035c0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40007000 	.word	0x40007000

080035f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035fc:	2300      	movs	r3, #0
 80035fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e29b      	b.n	8003b42 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 8087 	beq.w	8003726 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003618:	4b96      	ldr	r3, [pc, #600]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 030c 	and.w	r3, r3, #12
 8003620:	2b04      	cmp	r3, #4
 8003622:	d00c      	beq.n	800363e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003624:	4b93      	ldr	r3, [pc, #588]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 030c 	and.w	r3, r3, #12
 800362c:	2b08      	cmp	r3, #8
 800362e:	d112      	bne.n	8003656 <HAL_RCC_OscConfig+0x62>
 8003630:	4b90      	ldr	r3, [pc, #576]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800363c:	d10b      	bne.n	8003656 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363e:	4b8d      	ldr	r3, [pc, #564]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d06c      	beq.n	8003724 <HAL_RCC_OscConfig+0x130>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d168      	bne.n	8003724 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e275      	b.n	8003b42 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365e:	d106      	bne.n	800366e <HAL_RCC_OscConfig+0x7a>
 8003660:	4b84      	ldr	r3, [pc, #528]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a83      	ldr	r2, [pc, #524]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 8003666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	e02e      	b.n	80036cc <HAL_RCC_OscConfig+0xd8>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10c      	bne.n	8003690 <HAL_RCC_OscConfig+0x9c>
 8003676:	4b7f      	ldr	r3, [pc, #508]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a7e      	ldr	r2, [pc, #504]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 800367c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	4b7c      	ldr	r3, [pc, #496]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a7b      	ldr	r2, [pc, #492]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 8003688:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	e01d      	b.n	80036cc <HAL_RCC_OscConfig+0xd8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003698:	d10c      	bne.n	80036b4 <HAL_RCC_OscConfig+0xc0>
 800369a:	4b76      	ldr	r3, [pc, #472]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a75      	ldr	r2, [pc, #468]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 80036a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	4b73      	ldr	r3, [pc, #460]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a72      	ldr	r2, [pc, #456]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 80036ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	e00b      	b.n	80036cc <HAL_RCC_OscConfig+0xd8>
 80036b4:	4b6f      	ldr	r3, [pc, #444]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a6e      	ldr	r2, [pc, #440]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 80036ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	4b6c      	ldr	r3, [pc, #432]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a6b      	ldr	r2, [pc, #428]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 80036c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d013      	beq.n	80036fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7ff fa4c 	bl	8002b70 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036dc:	f7ff fa48 	bl	8002b70 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b64      	cmp	r3, #100	; 0x64
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e229      	b.n	8003b42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ee:	4b61      	ldr	r3, [pc, #388]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0xe8>
 80036fa:	e014      	b.n	8003726 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fc:	f7ff fa38 	bl	8002b70 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003704:	f7ff fa34 	bl	8002b70 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	; 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e215      	b.n	8003b42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003716:	4b57      	ldr	r3, [pc, #348]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x110>
 8003722:	e000      	b.n	8003726 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d069      	beq.n	8003806 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003732:	4b50      	ldr	r3, [pc, #320]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00b      	beq.n	8003756 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800373e:	4b4d      	ldr	r3, [pc, #308]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	2b08      	cmp	r3, #8
 8003748:	d11c      	bne.n	8003784 <HAL_RCC_OscConfig+0x190>
 800374a:	4b4a      	ldr	r3, [pc, #296]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d116      	bne.n	8003784 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003756:	4b47      	ldr	r3, [pc, #284]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d005      	beq.n	800376e <HAL_RCC_OscConfig+0x17a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d001      	beq.n	800376e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e1e9      	b.n	8003b42 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376e:	4b41      	ldr	r3, [pc, #260]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	493d      	ldr	r1, [pc, #244]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 800377e:	4313      	orrs	r3, r2
 8003780:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003782:	e040      	b.n	8003806 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d023      	beq.n	80037d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800378c:	4b39      	ldr	r3, [pc, #228]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a38      	ldr	r2, [pc, #224]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7ff f9ea 	bl	8002b70 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a0:	f7ff f9e6 	bl	8002b70 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e1c7      	b.n	8003b42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b2:	4b30      	ldr	r3, [pc, #192]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037be:	4b2d      	ldr	r3, [pc, #180]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4929      	ldr	r1, [pc, #164]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]
 80037d2:	e018      	b.n	8003806 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037d4:	4b27      	ldr	r3, [pc, #156]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a26      	ldr	r2, [pc, #152]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 80037da:	f023 0301 	bic.w	r3, r3, #1
 80037de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7ff f9c6 	bl	8002b70 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e8:	f7ff f9c2 	bl	8002b70 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e1a3      	b.n	8003b42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fa:	4b1e      	ldr	r3, [pc, #120]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d038      	beq.n	8003884 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d019      	beq.n	800384e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800381a:	4b16      	ldr	r3, [pc, #88]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 800381c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381e:	4a15      	ldr	r2, [pc, #84]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003826:	f7ff f9a3 	bl	8002b70 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800382e:	f7ff f99f 	bl	8002b70 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e180      	b.n	8003b42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003840:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 8003842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0f0      	beq.n	800382e <HAL_RCC_OscConfig+0x23a>
 800384c:	e01a      	b.n	8003884 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 8003850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003852:	4a08      	ldr	r2, [pc, #32]	; (8003874 <HAL_RCC_OscConfig+0x280>)
 8003854:	f023 0301 	bic.w	r3, r3, #1
 8003858:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385a:	f7ff f989 	bl	8002b70 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003860:	e00a      	b.n	8003878 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003862:	f7ff f985 	bl	8002b70 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d903      	bls.n	8003878 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e166      	b.n	8003b42 <HAL_RCC_OscConfig+0x54e>
 8003874:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003878:	4b92      	ldr	r3, [pc, #584]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 800387a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1ee      	bne.n	8003862 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80a4 	beq.w	80039da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003892:	4b8c      	ldr	r3, [pc, #560]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10d      	bne.n	80038ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800389e:	4b89      	ldr	r3, [pc, #548]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	4a88      	ldr	r2, [pc, #544]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 80038a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a8:	6413      	str	r3, [r2, #64]	; 0x40
 80038aa:	4b86      	ldr	r3, [pc, #536]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038b6:	2301      	movs	r3, #1
 80038b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ba:	4b83      	ldr	r3, [pc, #524]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d118      	bne.n	80038f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038c6:	4b80      	ldr	r3, [pc, #512]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a7f      	ldr	r2, [pc, #508]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 80038cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d2:	f7ff f94d 	bl	8002b70 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038d8:	e008      	b.n	80038ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038da:	f7ff f949 	bl	8002b70 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b64      	cmp	r3, #100	; 0x64
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e12a      	b.n	8003b42 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ec:	4b76      	ldr	r3, [pc, #472]	; (8003ac8 <HAL_RCC_OscConfig+0x4d4>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0f0      	beq.n	80038da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d106      	bne.n	800390e <HAL_RCC_OscConfig+0x31a>
 8003900:	4b70      	ldr	r3, [pc, #448]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 8003902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003904:	4a6f      	ldr	r2, [pc, #444]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	6713      	str	r3, [r2, #112]	; 0x70
 800390c:	e02d      	b.n	800396a <HAL_RCC_OscConfig+0x376>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10c      	bne.n	8003930 <HAL_RCC_OscConfig+0x33c>
 8003916:	4b6b      	ldr	r3, [pc, #428]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391a:	4a6a      	ldr	r2, [pc, #424]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 800391c:	f023 0301 	bic.w	r3, r3, #1
 8003920:	6713      	str	r3, [r2, #112]	; 0x70
 8003922:	4b68      	ldr	r3, [pc, #416]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	4a67      	ldr	r2, [pc, #412]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 8003928:	f023 0304 	bic.w	r3, r3, #4
 800392c:	6713      	str	r3, [r2, #112]	; 0x70
 800392e:	e01c      	b.n	800396a <HAL_RCC_OscConfig+0x376>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b05      	cmp	r3, #5
 8003936:	d10c      	bne.n	8003952 <HAL_RCC_OscConfig+0x35e>
 8003938:	4b62      	ldr	r3, [pc, #392]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393c:	4a61      	ldr	r2, [pc, #388]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 800393e:	f043 0304 	orr.w	r3, r3, #4
 8003942:	6713      	str	r3, [r2, #112]	; 0x70
 8003944:	4b5f      	ldr	r3, [pc, #380]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 8003946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003948:	4a5e      	ldr	r2, [pc, #376]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	6713      	str	r3, [r2, #112]	; 0x70
 8003950:	e00b      	b.n	800396a <HAL_RCC_OscConfig+0x376>
 8003952:	4b5c      	ldr	r3, [pc, #368]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003956:	4a5b      	ldr	r2, [pc, #364]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 8003958:	f023 0301 	bic.w	r3, r3, #1
 800395c:	6713      	str	r3, [r2, #112]	; 0x70
 800395e:	4b59      	ldr	r3, [pc, #356]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003962:	4a58      	ldr	r2, [pc, #352]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 8003964:	f023 0304 	bic.w	r3, r3, #4
 8003968:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d015      	beq.n	800399e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003972:	f7ff f8fd 	bl	8002b70 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003978:	e00a      	b.n	8003990 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397a:	f7ff f8f9 	bl	8002b70 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	f241 3288 	movw	r2, #5000	; 0x1388
 8003988:	4293      	cmp	r3, r2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e0d8      	b.n	8003b42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003990:	4b4c      	ldr	r3, [pc, #304]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 8003992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0ee      	beq.n	800397a <HAL_RCC_OscConfig+0x386>
 800399c:	e014      	b.n	80039c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399e:	f7ff f8e7 	bl	8002b70 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a4:	e00a      	b.n	80039bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a6:	f7ff f8e3 	bl	8002b70 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e0c2      	b.n	8003b42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039bc:	4b41      	ldr	r3, [pc, #260]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1ee      	bne.n	80039a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039c8:	7dfb      	ldrb	r3, [r7, #23]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d105      	bne.n	80039da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ce:	4b3d      	ldr	r3, [pc, #244]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	4a3c      	ldr	r2, [pc, #240]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 80039d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 80ae 	beq.w	8003b40 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039e4:	4b37      	ldr	r3, [pc, #220]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 030c 	and.w	r3, r3, #12
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d06d      	beq.n	8003acc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d14b      	bne.n	8003a90 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f8:	4b32      	ldr	r3, [pc, #200]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a31      	ldr	r2, [pc, #196]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 80039fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a04:	f7ff f8b4 	bl	8002b70 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a0c:	f7ff f8b0 	bl	8002b70 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e091      	b.n	8003b42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1e:	4b29      	ldr	r3, [pc, #164]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f0      	bne.n	8003a0c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69da      	ldr	r2, [r3, #28]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	019b      	lsls	r3, r3, #6
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	3b01      	subs	r3, #1
 8003a44:	041b      	lsls	r3, r3, #16
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	061b      	lsls	r3, r3, #24
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	071b      	lsls	r3, r3, #28
 8003a56:	491b      	ldr	r1, [pc, #108]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a5c:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a18      	ldr	r2, [pc, #96]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 8003a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7ff f882 	bl	8002b70 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a70:	f7ff f87e 	bl	8002b70 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e05f      	b.n	8003b42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCC_OscConfig+0x47c>
 8003a8e:	e057      	b.n	8003b40 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a0b      	ldr	r2, [pc, #44]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 8003a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9c:	f7ff f868 	bl	8002b70 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa4:	f7ff f864 	bl	8002b70 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e045      	b.n	8003b42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab6:	4b03      	ldr	r3, [pc, #12]	; (8003ac4 <HAL_RCC_OscConfig+0x4d0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x4b0>
 8003ac2:	e03d      	b.n	8003b40 <HAL_RCC_OscConfig+0x54c>
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003acc:	4b1f      	ldr	r3, [pc, #124]	; (8003b4c <HAL_RCC_OscConfig+0x558>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d030      	beq.n	8003b3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d129      	bne.n	8003b3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d122      	bne.n	8003b3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003afc:	4013      	ands	r3, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b02:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d119      	bne.n	8003b3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	085b      	lsrs	r3, r3, #1
 8003b14:	3b01      	subs	r3, #1
 8003b16:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d10f      	bne.n	8003b3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d107      	bne.n	8003b3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d001      	beq.n	8003b40 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800

08003b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0d0      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b68:	4b6a      	ldr	r3, [pc, #424]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 030f 	and.w	r3, r3, #15
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d910      	bls.n	8003b98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b76:	4b67      	ldr	r3, [pc, #412]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f023 020f 	bic.w	r2, r3, #15
 8003b7e:	4965      	ldr	r1, [pc, #404]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b86:	4b63      	ldr	r3, [pc, #396]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d001      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0b8      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d020      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bb0:	4b59      	ldr	r3, [pc, #356]	; (8003d18 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4a58      	ldr	r2, [pc, #352]	; (8003d18 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bc8:	4b53      	ldr	r3, [pc, #332]	; (8003d18 <HAL_RCC_ClockConfig+0x1c8>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4a52      	ldr	r2, [pc, #328]	; (8003d18 <HAL_RCC_ClockConfig+0x1c8>)
 8003bce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd4:	4b50      	ldr	r3, [pc, #320]	; (8003d18 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	494d      	ldr	r1, [pc, #308]	; (8003d18 <HAL_RCC_ClockConfig+0x1c8>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d040      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d107      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfa:	4b47      	ldr	r3, [pc, #284]	; (8003d18 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d115      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e07f      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d107      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c12:	4b41      	ldr	r3, [pc, #260]	; (8003d18 <HAL_RCC_ClockConfig+0x1c8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d109      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e073      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c22:	4b3d      	ldr	r3, [pc, #244]	; (8003d18 <HAL_RCC_ClockConfig+0x1c8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e06b      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c32:	4b39      	ldr	r3, [pc, #228]	; (8003d18 <HAL_RCC_ClockConfig+0x1c8>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f023 0203 	bic.w	r2, r3, #3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	4936      	ldr	r1, [pc, #216]	; (8003d18 <HAL_RCC_ClockConfig+0x1c8>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c44:	f7fe ff94 	bl	8002b70 <HAL_GetTick>
 8003c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c4c:	f7fe ff90 	bl	8002b70 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e053      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c62:	4b2d      	ldr	r3, [pc, #180]	; (8003d18 <HAL_RCC_ClockConfig+0x1c8>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 020c 	and.w	r2, r3, #12
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d1eb      	bne.n	8003c4c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c74:	4b27      	ldr	r3, [pc, #156]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 030f 	and.w	r3, r3, #15
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d210      	bcs.n	8003ca4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c82:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 020f 	bic.w	r2, r3, #15
 8003c8a:	4922      	ldr	r1, [pc, #136]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c92:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e032      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4916      	ldr	r1, [pc, #88]	; (8003d18 <HAL_RCC_ClockConfig+0x1c8>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cce:	4b12      	ldr	r3, [pc, #72]	; (8003d18 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	490e      	ldr	r1, [pc, #56]	; (8003d18 <HAL_RCC_ClockConfig+0x1c8>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ce2:	f000 f821 	bl	8003d28 <HAL_RCC_GetSysClockFreq>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_RCC_ClockConfig+0x1c8>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	091b      	lsrs	r3, r3, #4
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	490a      	ldr	r1, [pc, #40]	; (8003d1c <HAL_RCC_ClockConfig+0x1cc>)
 8003cf4:	5ccb      	ldrb	r3, [r1, r3]
 8003cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfa:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <HAL_RCC_ClockConfig+0x1d0>)
 8003cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cfe:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <HAL_RCC_ClockConfig+0x1d4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe fef0 	bl	8002ae8 <HAL_InitTick>

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40023c00 	.word	0x40023c00
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	0800cfc4 	.word	0x0800cfc4
 8003d20:	2000004c 	.word	0x2000004c
 8003d24:	20000050 	.word	0x20000050

08003d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d30:	2300      	movs	r3, #0
 8003d32:	607b      	str	r3, [r7, #4]
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d40:	4b67      	ldr	r3, [pc, #412]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 030c 	and.w	r3, r3, #12
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d00d      	beq.n	8003d68 <HAL_RCC_GetSysClockFreq+0x40>
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	f200 80bd 	bhi.w	8003ecc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <HAL_RCC_GetSysClockFreq+0x34>
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d003      	beq.n	8003d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d5a:	e0b7      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d5c:	4b61      	ldr	r3, [pc, #388]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d5e:	60bb      	str	r3, [r7, #8]
      break;
 8003d60:	e0b7      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d62:	4b61      	ldr	r3, [pc, #388]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003d64:	60bb      	str	r3, [r7, #8]
      break;
 8003d66:	e0b4      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d68:	4b5d      	ldr	r3, [pc, #372]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d70:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d72:	4b5b      	ldr	r3, [pc, #364]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d04d      	beq.n	8003e1a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d7e:	4b58      	ldr	r3, [pc, #352]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	099b      	lsrs	r3, r3, #6
 8003d84:	461a      	mov	r2, r3
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d8e:	f04f 0100 	mov.w	r1, #0
 8003d92:	ea02 0800 	and.w	r8, r2, r0
 8003d96:	ea03 0901 	and.w	r9, r3, r1
 8003d9a:	4640      	mov	r0, r8
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	014b      	lsls	r3, r1, #5
 8003da8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003dac:	0142      	lsls	r2, r0, #5
 8003dae:	4610      	mov	r0, r2
 8003db0:	4619      	mov	r1, r3
 8003db2:	ebb0 0008 	subs.w	r0, r0, r8
 8003db6:	eb61 0109 	sbc.w	r1, r1, r9
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	018b      	lsls	r3, r1, #6
 8003dc4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003dc8:	0182      	lsls	r2, r0, #6
 8003dca:	1a12      	subs	r2, r2, r0
 8003dcc:	eb63 0301 	sbc.w	r3, r3, r1
 8003dd0:	f04f 0000 	mov.w	r0, #0
 8003dd4:	f04f 0100 	mov.w	r1, #0
 8003dd8:	00d9      	lsls	r1, r3, #3
 8003dda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dde:	00d0      	lsls	r0, r2, #3
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	eb12 0208 	adds.w	r2, r2, r8
 8003de8:	eb43 0309 	adc.w	r3, r3, r9
 8003dec:	f04f 0000 	mov.w	r0, #0
 8003df0:	f04f 0100 	mov.w	r1, #0
 8003df4:	0259      	lsls	r1, r3, #9
 8003df6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003dfa:	0250      	lsls	r0, r2, #9
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4610      	mov	r0, r2
 8003e02:	4619      	mov	r1, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	461a      	mov	r2, r3
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	f7fc fc2c 	bl	8000668 <__aeabi_uldivmod>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4613      	mov	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	e04a      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e1a:	4b31      	ldr	r3, [pc, #196]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	099b      	lsrs	r3, r3, #6
 8003e20:	461a      	mov	r2, r3
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e2a:	f04f 0100 	mov.w	r1, #0
 8003e2e:	ea02 0400 	and.w	r4, r2, r0
 8003e32:	ea03 0501 	and.w	r5, r3, r1
 8003e36:	4620      	mov	r0, r4
 8003e38:	4629      	mov	r1, r5
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	014b      	lsls	r3, r1, #5
 8003e44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e48:	0142      	lsls	r2, r0, #5
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	1b00      	subs	r0, r0, r4
 8003e50:	eb61 0105 	sbc.w	r1, r1, r5
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	018b      	lsls	r3, r1, #6
 8003e5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e62:	0182      	lsls	r2, r0, #6
 8003e64:	1a12      	subs	r2, r2, r0
 8003e66:	eb63 0301 	sbc.w	r3, r3, r1
 8003e6a:	f04f 0000 	mov.w	r0, #0
 8003e6e:	f04f 0100 	mov.w	r1, #0
 8003e72:	00d9      	lsls	r1, r3, #3
 8003e74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e78:	00d0      	lsls	r0, r2, #3
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	1912      	adds	r2, r2, r4
 8003e80:	eb45 0303 	adc.w	r3, r5, r3
 8003e84:	f04f 0000 	mov.w	r0, #0
 8003e88:	f04f 0100 	mov.w	r1, #0
 8003e8c:	0299      	lsls	r1, r3, #10
 8003e8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e92:	0290      	lsls	r0, r2, #10
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4610      	mov	r0, r2
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	f7fc fbe0 	bl	8000668 <__aeabi_uldivmod>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4613      	mov	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	0c1b      	lsrs	r3, r3, #16
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	3301      	adds	r3, #1
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	60bb      	str	r3, [r7, #8]
      break;
 8003eca:	e002      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ece:	60bb      	str	r3, [r7, #8]
      break;
 8003ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ede:	bf00      	nop
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	00f42400 	.word	0x00f42400
 8003ee8:	007a1200 	.word	0x007a1200

08003eec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef0:	4b03      	ldr	r3, [pc, #12]	; (8003f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	2000004c 	.word	0x2000004c

08003f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f08:	f7ff fff0 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	0a9b      	lsrs	r3, r3, #10
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4903      	ldr	r1, [pc, #12]	; (8003f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40023800 	.word	0x40023800
 8003f28:	0800cfd4 	.word	0x0800cfd4

08003f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f30:	f7ff ffdc 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f34:	4602      	mov	r2, r0
 8003f36:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	0b5b      	lsrs	r3, r3, #13
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	4903      	ldr	r1, [pc, #12]	; (8003f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f42:	5ccb      	ldrb	r3, [r1, r3]
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	0800cfd4 	.word	0x0800cfd4

08003f54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003f64:	2300      	movs	r3, #0
 8003f66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d012      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f7c:	4b69      	ldr	r3, [pc, #420]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	4a68      	ldr	r2, [pc, #416]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f86:	6093      	str	r3, [r2, #8]
 8003f88:	4b66      	ldr	r3, [pc, #408]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f90:	4964      	ldr	r1, [pc, #400]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d017      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fae:	4b5d      	ldr	r3, [pc, #372]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbc:	4959      	ldr	r1, [pc, #356]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d017      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fea:	4b4e      	ldr	r3, [pc, #312]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ff0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	494a      	ldr	r1, [pc, #296]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004008:	d101      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800400a:	2301      	movs	r3, #1
 800400c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004016:	2301      	movs	r3, #1
 8004018:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004026:	2301      	movs	r3, #1
 8004028:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 808b 	beq.w	800414e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004038:	4b3a      	ldr	r3, [pc, #232]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	4a39      	ldr	r2, [pc, #228]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004042:	6413      	str	r3, [r2, #64]	; 0x40
 8004044:	4b37      	ldr	r3, [pc, #220]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004050:	4b35      	ldr	r3, [pc, #212]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a34      	ldr	r2, [pc, #208]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800405a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800405c:	f7fe fd88 	bl	8002b70 <HAL_GetTick>
 8004060:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004064:	f7fe fd84 	bl	8002b70 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b64      	cmp	r3, #100	; 0x64
 8004070:	d901      	bls.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e38f      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004076:	4b2c      	ldr	r3, [pc, #176]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004082:	4b28      	ldr	r3, [pc, #160]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d035      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	429a      	cmp	r2, r3
 800409e:	d02e      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040a0:	4b20      	ldr	r3, [pc, #128]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040aa:	4b1e      	ldr	r3, [pc, #120]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	4a1d      	ldr	r2, [pc, #116]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040b6:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	4a1a      	ldr	r2, [pc, #104]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80040c2:	4a18      	ldr	r2, [pc, #96]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040c8:	4b16      	ldr	r3, [pc, #88]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d114      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fe fd4c 	bl	8002b70 <HAL_GetTick>
 80040d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040da:	e00a      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040dc:	f7fe fd48 	bl	8002b70 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e351      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f2:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0ee      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800410a:	d111      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004118:	4b04      	ldr	r3, [pc, #16]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800411a:	400b      	ands	r3, r1
 800411c:	4901      	ldr	r1, [pc, #4]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800411e:	4313      	orrs	r3, r2
 8004120:	608b      	str	r3, [r1, #8]
 8004122:	e00b      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004124:	40023800 	.word	0x40023800
 8004128:	40007000 	.word	0x40007000
 800412c:	0ffffcff 	.word	0x0ffffcff
 8004130:	4bb3      	ldr	r3, [pc, #716]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4ab2      	ldr	r2, [pc, #712]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004136:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800413a:	6093      	str	r3, [r2, #8]
 800413c:	4bb0      	ldr	r3, [pc, #704]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800413e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004148:	49ad      	ldr	r1, [pc, #692]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800414a:	4313      	orrs	r3, r2
 800414c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	2b00      	cmp	r3, #0
 8004158:	d010      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800415a:	4ba9      	ldr	r3, [pc, #676]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800415c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004160:	4aa7      	ldr	r2, [pc, #668]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004166:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800416a:	4ba5      	ldr	r3, [pc, #660]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800416c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004174:	49a2      	ldr	r1, [pc, #648]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00a      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004188:	4b9d      	ldr	r3, [pc, #628]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004196:	499a      	ldr	r1, [pc, #616]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041aa:	4b95      	ldr	r3, [pc, #596]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041b8:	4991      	ldr	r1, [pc, #580]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00a      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041cc:	4b8c      	ldr	r3, [pc, #560]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041da:	4989      	ldr	r1, [pc, #548]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041ee:	4b84      	ldr	r3, [pc, #528]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fc:	4980      	ldr	r1, [pc, #512]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00a      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004210:	4b7b      	ldr	r3, [pc, #492]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004216:	f023 0203 	bic.w	r2, r3, #3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421e:	4978      	ldr	r1, [pc, #480]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004232:	4b73      	ldr	r3, [pc, #460]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004238:	f023 020c 	bic.w	r2, r3, #12
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004240:	496f      	ldr	r1, [pc, #444]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004254:	4b6a      	ldr	r3, [pc, #424]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004262:	4967      	ldr	r1, [pc, #412]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004276:	4b62      	ldr	r3, [pc, #392]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004284:	495e      	ldr	r1, [pc, #376]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004298:	4b59      	ldr	r3, [pc, #356]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800429a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a6:	4956      	ldr	r1, [pc, #344]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80042ba:	4b51      	ldr	r3, [pc, #324]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c8:	494d      	ldr	r1, [pc, #308]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00a      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80042dc:	4b48      	ldr	r3, [pc, #288]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ea:	4945      	ldr	r1, [pc, #276]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80042fe:	4b40      	ldr	r3, [pc, #256]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004304:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430c:	493c      	ldr	r1, [pc, #240]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004320:	4b37      	ldr	r3, [pc, #220]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004326:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800432e:	4934      	ldr	r1, [pc, #208]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d011      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004342:	4b2f      	ldr	r3, [pc, #188]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004348:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004350:	492b      	ldr	r1, [pc, #172]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800435c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004360:	d101      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004362:	2301      	movs	r3, #1
 8004364:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004372:	2301      	movs	r3, #1
 8004374:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004382:	4b1f      	ldr	r3, [pc, #124]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004388:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004390:	491b      	ldr	r1, [pc, #108]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00b      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043a4:	4b16      	ldr	r3, [pc, #88]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043b4:	4912      	ldr	r1, [pc, #72]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00b      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80043c8:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d8:	4909      	ldr	r1, [pc, #36]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00f      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043ec:	4b04      	ldr	r3, [pc, #16]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fc:	e002      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80043fe:	bf00      	nop
 8004400:	40023800 	.word	0x40023800
 8004404:	4986      	ldr	r1, [pc, #536]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00b      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004418:	4b81      	ldr	r3, [pc, #516]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800441a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800441e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004428:	497d      	ldr	r1, [pc, #500]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d006      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 80d6 	beq.w	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004444:	4b76      	ldr	r3, [pc, #472]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a75      	ldr	r2, [pc, #468]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800444a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800444e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004450:	f7fe fb8e 	bl	8002b70 <HAL_GetTick>
 8004454:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004458:	f7fe fb8a 	bl	8002b70 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	; 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e195      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800446a:	4b6d      	ldr	r3, [pc, #436]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d021      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004486:	2b00      	cmp	r3, #0
 8004488:	d11d      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800448a:	4b65      	ldr	r3, [pc, #404]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800448c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004490:	0c1b      	lsrs	r3, r3, #16
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004498:	4b61      	ldr	r3, [pc, #388]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800449a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800449e:	0e1b      	lsrs	r3, r3, #24
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	019a      	lsls	r2, r3, #6
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	041b      	lsls	r3, r3, #16
 80044b0:	431a      	orrs	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	061b      	lsls	r3, r3, #24
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	071b      	lsls	r3, r3, #28
 80044be:	4958      	ldr	r1, [pc, #352]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d004      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044da:	d00a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d02e      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044f0:	d129      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80044f2:	4b4b      	ldr	r3, [pc, #300]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044f8:	0c1b      	lsrs	r3, r3, #16
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004500:	4b47      	ldr	r3, [pc, #284]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004506:	0f1b      	lsrs	r3, r3, #28
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	019a      	lsls	r2, r3, #6
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	041b      	lsls	r3, r3, #16
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	061b      	lsls	r3, r3, #24
 8004520:	431a      	orrs	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	071b      	lsls	r3, r3, #28
 8004526:	493e      	ldr	r1, [pc, #248]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800452e:	4b3c      	ldr	r3, [pc, #240]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004534:	f023 021f 	bic.w	r2, r3, #31
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	3b01      	subs	r3, #1
 800453e:	4938      	ldr	r1, [pc, #224]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d01d      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004552:	4b33      	ldr	r3, [pc, #204]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004558:	0e1b      	lsrs	r3, r3, #24
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004560:	4b2f      	ldr	r3, [pc, #188]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004566:	0f1b      	lsrs	r3, r3, #28
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	019a      	lsls	r2, r3, #6
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	041b      	lsls	r3, r3, #16
 800457a:	431a      	orrs	r2, r3
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	061b      	lsls	r3, r3, #24
 8004580:	431a      	orrs	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	071b      	lsls	r3, r3, #28
 8004586:	4926      	ldr	r1, [pc, #152]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d011      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	019a      	lsls	r2, r3, #6
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	041b      	lsls	r3, r3, #16
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	061b      	lsls	r3, r3, #24
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	071b      	lsls	r3, r3, #28
 80045b6:	491a      	ldr	r1, [pc, #104]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045be:	4b18      	ldr	r3, [pc, #96]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a17      	ldr	r2, [pc, #92]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ca:	f7fe fad1 	bl	8002b70 <HAL_GetTick>
 80045ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045d0:	e008      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045d2:	f7fe facd 	bl	8002b70 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b64      	cmp	r3, #100	; 0x64
 80045de:	d901      	bls.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e0d8      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045e4:	4b0e      	ldr	r3, [pc, #56]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f0      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	f040 80ce 	bne.w	8004794 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80045f8:	4b09      	ldr	r3, [pc, #36]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a08      	ldr	r2, [pc, #32]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004602:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004604:	f7fe fab4 	bl	8002b70 <HAL_GetTick>
 8004608:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800460a:	e00b      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800460c:	f7fe fab0 	bl	8002b70 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b64      	cmp	r3, #100	; 0x64
 8004618:	d904      	bls.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e0bb      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800461e:	bf00      	nop
 8004620:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004624:	4b5e      	ldr	r3, [pc, #376]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800462c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004630:	d0ec      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d009      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800464e:	2b00      	cmp	r3, #0
 8004650:	d02e      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	2b00      	cmp	r3, #0
 8004658:	d12a      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800465a:	4b51      	ldr	r3, [pc, #324]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004660:	0c1b      	lsrs	r3, r3, #16
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004668:	4b4d      	ldr	r3, [pc, #308]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800466a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466e:	0f1b      	lsrs	r3, r3, #28
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	019a      	lsls	r2, r3, #6
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	041b      	lsls	r3, r3, #16
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	061b      	lsls	r3, r3, #24
 8004688:	431a      	orrs	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	071b      	lsls	r3, r3, #28
 800468e:	4944      	ldr	r1, [pc, #272]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004696:	4b42      	ldr	r3, [pc, #264]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800469c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a4:	3b01      	subs	r3, #1
 80046a6:	021b      	lsls	r3, r3, #8
 80046a8:	493d      	ldr	r1, [pc, #244]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d022      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046c4:	d11d      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046c6:	4b36      	ldr	r3, [pc, #216]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046cc:	0e1b      	lsrs	r3, r3, #24
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046d4:	4b32      	ldr	r3, [pc, #200]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046da:	0f1b      	lsrs	r3, r3, #28
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	019a      	lsls	r2, r3, #6
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	041b      	lsls	r3, r3, #16
 80046ee:	431a      	orrs	r2, r3
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	061b      	lsls	r3, r3, #24
 80046f4:	431a      	orrs	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	071b      	lsls	r3, r3, #28
 80046fa:	4929      	ldr	r1, [pc, #164]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d028      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800470e:	4b24      	ldr	r3, [pc, #144]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004714:	0e1b      	lsrs	r3, r3, #24
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800471c:	4b20      	ldr	r3, [pc, #128]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004722:	0c1b      	lsrs	r3, r3, #16
 8004724:	f003 0303 	and.w	r3, r3, #3
 8004728:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	019a      	lsls	r2, r3, #6
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	041b      	lsls	r3, r3, #16
 8004734:	431a      	orrs	r2, r3
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	061b      	lsls	r3, r3, #24
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	071b      	lsls	r3, r3, #28
 8004742:	4917      	ldr	r1, [pc, #92]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800474a:	4b15      	ldr	r3, [pc, #84]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800474c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004750:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	4911      	ldr	r1, [pc, #68]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004760:	4b0f      	ldr	r3, [pc, #60]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a0e      	ldr	r2, [pc, #56]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800476a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800476c:	f7fe fa00 	bl	8002b70 <HAL_GetTick>
 8004770:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004774:	f7fe f9fc 	bl	8002b70 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b64      	cmp	r3, #100	; 0x64
 8004780:	d901      	bls.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e007      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004786:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800478e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004792:	d1ef      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3720      	adds	r7, #32
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40023800 	.word	0x40023800

080047a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e09d      	b.n	80048f2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d108      	bne.n	80047d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047c6:	d009      	beq.n	80047dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	61da      	str	r2, [r3, #28]
 80047ce:	e005      	b.n	80047dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fd fedc 	bl	80025b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004812:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800481c:	d902      	bls.n	8004824 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	e002      	b.n	800482a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004828:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004832:	d007      	beq.n	8004844 <HAL_SPI_Init+0xa0>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800483c:	d002      	beq.n	8004844 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004854:	431a      	orrs	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004886:	ea42 0103 	orr.w	r1, r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	0c1b      	lsrs	r3, r3, #16
 80048a0:	f003 0204 	and.w	r2, r3, #4
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80048c0:	ea42 0103 	orr.w	r1, r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69da      	ldr	r2, [r3, #28]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b088      	sub	sp, #32
 80048fe:	af00      	add	r7, sp, #0
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	603b      	str	r3, [r7, #0]
 8004906:	4613      	mov	r3, r2
 8004908:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_SPI_Transmit+0x22>
 8004918:	2302      	movs	r3, #2
 800491a:	e158      	b.n	8004bce <HAL_SPI_Transmit+0x2d4>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004924:	f7fe f924 	bl	8002b70 <HAL_GetTick>
 8004928:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800492a:	88fb      	ldrh	r3, [r7, #6]
 800492c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b01      	cmp	r3, #1
 8004938:	d002      	beq.n	8004940 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800493a:	2302      	movs	r3, #2
 800493c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800493e:	e13d      	b.n	8004bbc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <HAL_SPI_Transmit+0x52>
 8004946:	88fb      	ldrh	r3, [r7, #6]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d102      	bne.n	8004952 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004950:	e134      	b.n	8004bbc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2203      	movs	r2, #3
 8004956:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	88fa      	ldrh	r2, [r7, #6]
 800496a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	88fa      	ldrh	r2, [r7, #6]
 8004970:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800499c:	d10f      	bne.n	80049be <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c8:	2b40      	cmp	r3, #64	; 0x40
 80049ca:	d007      	beq.n	80049dc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049e4:	d94b      	bls.n	8004a7e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <HAL_SPI_Transmit+0xfa>
 80049ee:	8afb      	ldrh	r3, [r7, #22]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d13e      	bne.n	8004a72 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f8:	881a      	ldrh	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	1c9a      	adds	r2, r3, #2
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a18:	e02b      	b.n	8004a72 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d112      	bne.n	8004a4e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2c:	881a      	ldrh	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	1c9a      	adds	r2, r3, #2
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a4c:	e011      	b.n	8004a72 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a4e:	f7fe f88f 	bl	8002b70 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d803      	bhi.n	8004a66 <HAL_SPI_Transmit+0x16c>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a64:	d102      	bne.n	8004a6c <HAL_SPI_Transmit+0x172>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d102      	bne.n	8004a72 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a70:	e0a4      	b.n	8004bbc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1ce      	bne.n	8004a1a <HAL_SPI_Transmit+0x120>
 8004a7c:	e07c      	b.n	8004b78 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <HAL_SPI_Transmit+0x192>
 8004a86:	8afb      	ldrh	r3, [r7, #22]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d170      	bne.n	8004b6e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d912      	bls.n	8004abc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	881a      	ldrh	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	1c9a      	adds	r2, r3, #2
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3b02      	subs	r3, #2
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004aba:	e058      	b.n	8004b6e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	330c      	adds	r3, #12
 8004ac6:	7812      	ldrb	r2, [r2, #0]
 8004ac8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004ae2:	e044      	b.n	8004b6e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d12b      	bne.n	8004b4a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d912      	bls.n	8004b22 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b00:	881a      	ldrh	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	1c9a      	adds	r2, r3, #2
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	3b02      	subs	r3, #2
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b20:	e025      	b.n	8004b6e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	330c      	adds	r3, #12
 8004b2c:	7812      	ldrb	r2, [r2, #0]
 8004b2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	3b01      	subs	r3, #1
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b48:	e011      	b.n	8004b6e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b4a:	f7fe f811 	bl	8002b70 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d803      	bhi.n	8004b62 <HAL_SPI_Transmit+0x268>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b60:	d102      	bne.n	8004b68 <HAL_SPI_Transmit+0x26e>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d102      	bne.n	8004b6e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b6c:	e026      	b.n	8004bbc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1b5      	bne.n	8004ae4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	6839      	ldr	r1, [r7, #0]
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 fb5b 	bl	8005238 <SPI_EndRxTxTransaction>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10a      	bne.n	8004bac <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b96:	2300      	movs	r3, #0
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	77fb      	strb	r3, [r7, #31]
 8004bb8:	e000      	b.n	8004bbc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004bba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004bcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3720      	adds	r7, #32
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b08a      	sub	sp, #40	; 0x28
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	60b9      	str	r1, [r7, #8]
 8004be0:	607a      	str	r2, [r7, #4]
 8004be2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004be4:	2301      	movs	r3, #1
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_SPI_TransmitReceive+0x26>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e1fb      	b.n	8004ff4 <HAL_SPI_TransmitReceive+0x41e>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c04:	f7fd ffb4 	bl	8002b70 <HAL_GetTick>
 8004c08:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c10:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004c18:	887b      	ldrh	r3, [r7, #2]
 8004c1a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004c1c:	887b      	ldrh	r3, [r7, #2]
 8004c1e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c20:	7efb      	ldrb	r3, [r7, #27]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d00e      	beq.n	8004c44 <HAL_SPI_TransmitReceive+0x6e>
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c2c:	d106      	bne.n	8004c3c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d102      	bne.n	8004c3c <HAL_SPI_TransmitReceive+0x66>
 8004c36:	7efb      	ldrb	r3, [r7, #27]
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d003      	beq.n	8004c44 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004c42:	e1cd      	b.n	8004fe0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d005      	beq.n	8004c56 <HAL_SPI_TransmitReceive+0x80>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <HAL_SPI_TransmitReceive+0x80>
 8004c50:	887b      	ldrh	r3, [r7, #2]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d103      	bne.n	8004c5e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004c5c:	e1c0      	b.n	8004fe0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d003      	beq.n	8004c72 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2205      	movs	r2, #5
 8004c6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	887a      	ldrh	r2, [r7, #2]
 8004c82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	887a      	ldrh	r2, [r7, #2]
 8004c8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	887a      	ldrh	r2, [r7, #2]
 8004c98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	887a      	ldrh	r2, [r7, #2]
 8004c9e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cb4:	d802      	bhi.n	8004cbc <HAL_SPI_TransmitReceive+0xe6>
 8004cb6:	8a3b      	ldrh	r3, [r7, #16]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d908      	bls.n	8004cce <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cca:	605a      	str	r2, [r3, #4]
 8004ccc:	e007      	b.n	8004cde <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cdc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce8:	2b40      	cmp	r3, #64	; 0x40
 8004cea:	d007      	beq.n	8004cfc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d04:	d97c      	bls.n	8004e00 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <HAL_SPI_TransmitReceive+0x13e>
 8004d0e:	8a7b      	ldrh	r3, [r7, #18]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d169      	bne.n	8004de8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d18:	881a      	ldrh	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d24:	1c9a      	adds	r2, r3, #2
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d38:	e056      	b.n	8004de8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d11b      	bne.n	8004d80 <HAL_SPI_TransmitReceive+0x1aa>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d016      	beq.n	8004d80 <HAL_SPI_TransmitReceive+0x1aa>
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d113      	bne.n	8004d80 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	881a      	ldrh	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	1c9a      	adds	r2, r3, #2
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d11c      	bne.n	8004dc8 <HAL_SPI_TransmitReceive+0x1f2>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d016      	beq.n	8004dc8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	b292      	uxth	r2, r2
 8004da6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dac:	1c9a      	adds	r2, r3, #2
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dc8:	f7fd fed2 	bl	8002b70 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d807      	bhi.n	8004de8 <HAL_SPI_TransmitReceive+0x212>
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dde:	d003      	beq.n	8004de8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004de6:	e0fb      	b.n	8004fe0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1a3      	bne.n	8004d3a <HAL_SPI_TransmitReceive+0x164>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d19d      	bne.n	8004d3a <HAL_SPI_TransmitReceive+0x164>
 8004dfe:	e0df      	b.n	8004fc0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <HAL_SPI_TransmitReceive+0x23a>
 8004e08:	8a7b      	ldrh	r3, [r7, #18]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	f040 80cb 	bne.w	8004fa6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d912      	bls.n	8004e40 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	881a      	ldrh	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2a:	1c9a      	adds	r2, r3, #2
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b02      	subs	r3, #2
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e3e:	e0b2      	b.n	8004fa6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	330c      	adds	r3, #12
 8004e4a:	7812      	ldrb	r2, [r2, #0]
 8004e4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e66:	e09e      	b.n	8004fa6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d134      	bne.n	8004ee0 <HAL_SPI_TransmitReceive+0x30a>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d02f      	beq.n	8004ee0 <HAL_SPI_TransmitReceive+0x30a>
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d12c      	bne.n	8004ee0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d912      	bls.n	8004eb6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e94:	881a      	ldrh	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	1c9a      	adds	r2, r3, #2
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	3b02      	subs	r3, #2
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eb4:	e012      	b.n	8004edc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	330c      	adds	r3, #12
 8004ec0:	7812      	ldrb	r2, [r2, #0]
 8004ec2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d148      	bne.n	8004f80 <HAL_SPI_TransmitReceive+0x3aa>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d042      	beq.n	8004f80 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d923      	bls.n	8004f4e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f10:	b292      	uxth	r2, r2
 8004f12:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	1c9a      	adds	r2, r3, #2
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b02      	subs	r3, #2
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d81f      	bhi.n	8004f7c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f4a:	605a      	str	r2, [r3, #4]
 8004f4c:	e016      	b.n	8004f7c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f103 020c 	add.w	r2, r3, #12
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	7812      	ldrb	r2, [r2, #0]
 8004f5c:	b2d2      	uxtb	r2, r2
 8004f5e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f80:	f7fd fdf6 	bl	8002b70 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d803      	bhi.n	8004f98 <HAL_SPI_TransmitReceive+0x3c2>
 8004f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f96:	d102      	bne.n	8004f9e <HAL_SPI_TransmitReceive+0x3c8>
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d103      	bne.n	8004fa6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004fa4:	e01c      	b.n	8004fe0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f47f af5b 	bne.w	8004e68 <HAL_SPI_TransmitReceive+0x292>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f47f af54 	bne.w	8004e68 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fc0:	69fa      	ldr	r2, [r7, #28]
 8004fc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f937 	bl	8005238 <SPI_EndRxTxTransaction>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d006      	beq.n	8004fde <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	661a      	str	r2, [r3, #96]	; 0x60
 8004fdc:	e000      	b.n	8004fe0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004fde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ff0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3728      	adds	r7, #40	; 0x28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	603b      	str	r3, [r7, #0]
 8005008:	4613      	mov	r3, r2
 800500a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800500c:	f7fd fdb0 	bl	8002b70 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	4413      	add	r3, r2
 800501a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800501c:	f7fd fda8 	bl	8002b70 <HAL_GetTick>
 8005020:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005022:	4b39      	ldr	r3, [pc, #228]	; (8005108 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	015b      	lsls	r3, r3, #5
 8005028:	0d1b      	lsrs	r3, r3, #20
 800502a:	69fa      	ldr	r2, [r7, #28]
 800502c:	fb02 f303 	mul.w	r3, r2, r3
 8005030:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005032:	e054      	b.n	80050de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800503a:	d050      	beq.n	80050de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800503c:	f7fd fd98 	bl	8002b70 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	69fa      	ldr	r2, [r7, #28]
 8005048:	429a      	cmp	r2, r3
 800504a:	d902      	bls.n	8005052 <SPI_WaitFlagStateUntilTimeout+0x56>
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d13d      	bne.n	80050ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005060:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800506a:	d111      	bne.n	8005090 <SPI_WaitFlagStateUntilTimeout+0x94>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005074:	d004      	beq.n	8005080 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800507e:	d107      	bne.n	8005090 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800508e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005098:	d10f      	bne.n	80050ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e017      	b.n	80050fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	3b01      	subs	r3, #1
 80050dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	4013      	ands	r3, r2
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	bf0c      	ite	eq
 80050ee:	2301      	moveq	r3, #1
 80050f0:	2300      	movne	r3, #0
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d19b      	bne.n	8005034 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3720      	adds	r7, #32
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	2000004c 	.word	0x2000004c

0800510c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	; 0x28
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800511a:	2300      	movs	r3, #0
 800511c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800511e:	f7fd fd27 	bl	8002b70 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005126:	1a9b      	subs	r3, r3, r2
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	4413      	add	r3, r2
 800512c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800512e:	f7fd fd1f 	bl	8002b70 <HAL_GetTick>
 8005132:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	330c      	adds	r3, #12
 800513a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800513c:	4b3d      	ldr	r3, [pc, #244]	; (8005234 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	4613      	mov	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	00da      	lsls	r2, r3, #3
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	0d1b      	lsrs	r3, r3, #20
 800514c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514e:	fb02 f303 	mul.w	r3, r2, r3
 8005152:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005154:	e060      	b.n	8005218 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800515c:	d107      	bne.n	800516e <SPI_WaitFifoStateUntilTimeout+0x62>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d104      	bne.n	800516e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	b2db      	uxtb	r3, r3
 800516a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800516c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005174:	d050      	beq.n	8005218 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005176:	f7fd fcfb 	bl	8002b70 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005182:	429a      	cmp	r2, r3
 8005184:	d902      	bls.n	800518c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	2b00      	cmp	r3, #0
 800518a:	d13d      	bne.n	8005208 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800519a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051a4:	d111      	bne.n	80051ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ae:	d004      	beq.n	80051ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b8:	d107      	bne.n	80051ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d2:	d10f      	bne.n	80051f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e010      	b.n	800522a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	3b01      	subs	r3, #1
 8005216:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	4013      	ands	r3, r2
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	429a      	cmp	r2, r3
 8005226:	d196      	bne.n	8005156 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3728      	adds	r7, #40	; 0x28
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	2000004c 	.word	0x2000004c

08005238 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af02      	add	r7, sp, #8
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2200      	movs	r2, #0
 800524c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f7ff ff5b 	bl	800510c <SPI_WaitFifoStateUntilTimeout>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d007      	beq.n	800526c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005260:	f043 0220 	orr.w	r2, r3, #32
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e046      	b.n	80052fa <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800526c:	4b25      	ldr	r3, [pc, #148]	; (8005304 <SPI_EndRxTxTransaction+0xcc>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a25      	ldr	r2, [pc, #148]	; (8005308 <SPI_EndRxTxTransaction+0xd0>)
 8005272:	fba2 2303 	umull	r2, r3, r2, r3
 8005276:	0d5b      	lsrs	r3, r3, #21
 8005278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800527c:	fb02 f303 	mul.w	r3, r2, r3
 8005280:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800528a:	d112      	bne.n	80052b2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2200      	movs	r2, #0
 8005294:	2180      	movs	r1, #128	; 0x80
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f7ff feb0 	bl	8004ffc <SPI_WaitFlagStateUntilTimeout>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d016      	beq.n	80052d0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a6:	f043 0220 	orr.w	r2, r3, #32
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e023      	b.n	80052fa <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00a      	beq.n	80052ce <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c8:	2b80      	cmp	r3, #128	; 0x80
 80052ca:	d0f2      	beq.n	80052b2 <SPI_EndRxTxTransaction+0x7a>
 80052cc:	e000      	b.n	80052d0 <SPI_EndRxTxTransaction+0x98>
        break;
 80052ce:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f7ff ff15 	bl	800510c <SPI_WaitFifoStateUntilTimeout>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d007      	beq.n	80052f8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ec:	f043 0220 	orr.w	r2, r3, #32
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e000      	b.n	80052fa <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	2000004c 	.word	0x2000004c
 8005308:	165e9f81 	.word	0x165e9f81

0800530c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e049      	b.n	80053b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d106      	bne.n	8005338 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7fd f982 	bl	800263c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3304      	adds	r3, #4
 8005348:	4619      	mov	r1, r3
 800534a:	4610      	mov	r0, r2
 800534c:	f000 fbe0 	bl	8005b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d001      	beq.n	80053d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e04c      	b.n	800546e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a26      	ldr	r2, [pc, #152]	; (800547c <HAL_TIM_Base_Start+0xc0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d022      	beq.n	800542c <HAL_TIM_Base_Start+0x70>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ee:	d01d      	beq.n	800542c <HAL_TIM_Base_Start+0x70>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a22      	ldr	r2, [pc, #136]	; (8005480 <HAL_TIM_Base_Start+0xc4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d018      	beq.n	800542c <HAL_TIM_Base_Start+0x70>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a21      	ldr	r2, [pc, #132]	; (8005484 <HAL_TIM_Base_Start+0xc8>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d013      	beq.n	800542c <HAL_TIM_Base_Start+0x70>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a1f      	ldr	r2, [pc, #124]	; (8005488 <HAL_TIM_Base_Start+0xcc>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d00e      	beq.n	800542c <HAL_TIM_Base_Start+0x70>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a1e      	ldr	r2, [pc, #120]	; (800548c <HAL_TIM_Base_Start+0xd0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d009      	beq.n	800542c <HAL_TIM_Base_Start+0x70>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a1c      	ldr	r2, [pc, #112]	; (8005490 <HAL_TIM_Base_Start+0xd4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d004      	beq.n	800542c <HAL_TIM_Base_Start+0x70>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a1b      	ldr	r2, [pc, #108]	; (8005494 <HAL_TIM_Base_Start+0xd8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d115      	bne.n	8005458 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	4b19      	ldr	r3, [pc, #100]	; (8005498 <HAL_TIM_Base_Start+0xdc>)
 8005434:	4013      	ands	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b06      	cmp	r3, #6
 800543c:	d015      	beq.n	800546a <HAL_TIM_Base_Start+0xae>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005444:	d011      	beq.n	800546a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0201 	orr.w	r2, r2, #1
 8005454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005456:	e008      	b.n	800546a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	e000      	b.n	800546c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	40010000 	.word	0x40010000
 8005480:	40000400 	.word	0x40000400
 8005484:	40000800 	.word	0x40000800
 8005488:	40000c00 	.word	0x40000c00
 800548c:	40010400 	.word	0x40010400
 8005490:	40014000 	.word	0x40014000
 8005494:	40001800 	.word	0x40001800
 8005498:	00010007 	.word	0x00010007

0800549c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e049      	b.n	8005542 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f841 	bl	800554a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3304      	adds	r3, #4
 80054d8:	4619      	mov	r1, r3
 80054da:	4610      	mov	r0, r2
 80054dc:	f000 fb18 	bl	8005b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
	...

08005560 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d109      	bne.n	8005584 <HAL_TIM_PWM_Start+0x24>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b01      	cmp	r3, #1
 800557a:	bf14      	ite	ne
 800557c:	2301      	movne	r3, #1
 800557e:	2300      	moveq	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	e03c      	b.n	80055fe <HAL_TIM_PWM_Start+0x9e>
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2b04      	cmp	r3, #4
 8005588:	d109      	bne.n	800559e <HAL_TIM_PWM_Start+0x3e>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b01      	cmp	r3, #1
 8005594:	bf14      	ite	ne
 8005596:	2301      	movne	r3, #1
 8005598:	2300      	moveq	r3, #0
 800559a:	b2db      	uxtb	r3, r3
 800559c:	e02f      	b.n	80055fe <HAL_TIM_PWM_Start+0x9e>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d109      	bne.n	80055b8 <HAL_TIM_PWM_Start+0x58>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	bf14      	ite	ne
 80055b0:	2301      	movne	r3, #1
 80055b2:	2300      	moveq	r3, #0
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	e022      	b.n	80055fe <HAL_TIM_PWM_Start+0x9e>
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2b0c      	cmp	r3, #12
 80055bc:	d109      	bne.n	80055d2 <HAL_TIM_PWM_Start+0x72>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	bf14      	ite	ne
 80055ca:	2301      	movne	r3, #1
 80055cc:	2300      	moveq	r3, #0
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	e015      	b.n	80055fe <HAL_TIM_PWM_Start+0x9e>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b10      	cmp	r3, #16
 80055d6:	d109      	bne.n	80055ec <HAL_TIM_PWM_Start+0x8c>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	bf14      	ite	ne
 80055e4:	2301      	movne	r3, #1
 80055e6:	2300      	moveq	r3, #0
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	e008      	b.n	80055fe <HAL_TIM_PWM_Start+0x9e>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	bf14      	ite	ne
 80055f8:	2301      	movne	r3, #1
 80055fa:	2300      	moveq	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e092      	b.n	800572c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d104      	bne.n	8005616 <HAL_TIM_PWM_Start+0xb6>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005614:	e023      	b.n	800565e <HAL_TIM_PWM_Start+0xfe>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b04      	cmp	r3, #4
 800561a:	d104      	bne.n	8005626 <HAL_TIM_PWM_Start+0xc6>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005624:	e01b      	b.n	800565e <HAL_TIM_PWM_Start+0xfe>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b08      	cmp	r3, #8
 800562a:	d104      	bne.n	8005636 <HAL_TIM_PWM_Start+0xd6>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005634:	e013      	b.n	800565e <HAL_TIM_PWM_Start+0xfe>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b0c      	cmp	r3, #12
 800563a:	d104      	bne.n	8005646 <HAL_TIM_PWM_Start+0xe6>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005644:	e00b      	b.n	800565e <HAL_TIM_PWM_Start+0xfe>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b10      	cmp	r3, #16
 800564a:	d104      	bne.n	8005656 <HAL_TIM_PWM_Start+0xf6>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005654:	e003      	b.n	800565e <HAL_TIM_PWM_Start+0xfe>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2202      	movs	r2, #2
 800565a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2201      	movs	r2, #1
 8005664:	6839      	ldr	r1, [r7, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f000 fdea 	bl	8006240 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a30      	ldr	r2, [pc, #192]	; (8005734 <HAL_TIM_PWM_Start+0x1d4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d004      	beq.n	8005680 <HAL_TIM_PWM_Start+0x120>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a2f      	ldr	r2, [pc, #188]	; (8005738 <HAL_TIM_PWM_Start+0x1d8>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d101      	bne.n	8005684 <HAL_TIM_PWM_Start+0x124>
 8005680:	2301      	movs	r3, #1
 8005682:	e000      	b.n	8005686 <HAL_TIM_PWM_Start+0x126>
 8005684:	2300      	movs	r3, #0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d007      	beq.n	800569a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005698:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a25      	ldr	r2, [pc, #148]	; (8005734 <HAL_TIM_PWM_Start+0x1d4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d022      	beq.n	80056ea <HAL_TIM_PWM_Start+0x18a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ac:	d01d      	beq.n	80056ea <HAL_TIM_PWM_Start+0x18a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a22      	ldr	r2, [pc, #136]	; (800573c <HAL_TIM_PWM_Start+0x1dc>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d018      	beq.n	80056ea <HAL_TIM_PWM_Start+0x18a>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a20      	ldr	r2, [pc, #128]	; (8005740 <HAL_TIM_PWM_Start+0x1e0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <HAL_TIM_PWM_Start+0x18a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a1f      	ldr	r2, [pc, #124]	; (8005744 <HAL_TIM_PWM_Start+0x1e4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00e      	beq.n	80056ea <HAL_TIM_PWM_Start+0x18a>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a19      	ldr	r2, [pc, #100]	; (8005738 <HAL_TIM_PWM_Start+0x1d8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d009      	beq.n	80056ea <HAL_TIM_PWM_Start+0x18a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a1b      	ldr	r2, [pc, #108]	; (8005748 <HAL_TIM_PWM_Start+0x1e8>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d004      	beq.n	80056ea <HAL_TIM_PWM_Start+0x18a>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a19      	ldr	r2, [pc, #100]	; (800574c <HAL_TIM_PWM_Start+0x1ec>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d115      	bne.n	8005716 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	4b17      	ldr	r3, [pc, #92]	; (8005750 <HAL_TIM_PWM_Start+0x1f0>)
 80056f2:	4013      	ands	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b06      	cmp	r3, #6
 80056fa:	d015      	beq.n	8005728 <HAL_TIM_PWM_Start+0x1c8>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005702:	d011      	beq.n	8005728 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005714:	e008      	b.n	8005728 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 0201 	orr.w	r2, r2, #1
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	e000      	b.n	800572a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005728:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40010000 	.word	0x40010000
 8005738:	40010400 	.word	0x40010400
 800573c:	40000400 	.word	0x40000400
 8005740:	40000800 	.word	0x40000800
 8005744:	40000c00 	.word	0x40000c00
 8005748:	40014000 	.word	0x40014000
 800574c:	40001800 	.word	0x40001800
 8005750:	00010007 	.word	0x00010007

08005754 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005760:	2300      	movs	r3, #0
 8005762:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800576a:	2b01      	cmp	r3, #1
 800576c:	d101      	bne.n	8005772 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800576e:	2302      	movs	r3, #2
 8005770:	e0ff      	b.n	8005972 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b14      	cmp	r3, #20
 800577e:	f200 80f0 	bhi.w	8005962 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005782:	a201      	add	r2, pc, #4	; (adr r2, 8005788 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005788:	080057dd 	.word	0x080057dd
 800578c:	08005963 	.word	0x08005963
 8005790:	08005963 	.word	0x08005963
 8005794:	08005963 	.word	0x08005963
 8005798:	0800581d 	.word	0x0800581d
 800579c:	08005963 	.word	0x08005963
 80057a0:	08005963 	.word	0x08005963
 80057a4:	08005963 	.word	0x08005963
 80057a8:	0800585f 	.word	0x0800585f
 80057ac:	08005963 	.word	0x08005963
 80057b0:	08005963 	.word	0x08005963
 80057b4:	08005963 	.word	0x08005963
 80057b8:	0800589f 	.word	0x0800589f
 80057bc:	08005963 	.word	0x08005963
 80057c0:	08005963 	.word	0x08005963
 80057c4:	08005963 	.word	0x08005963
 80057c8:	080058e1 	.word	0x080058e1
 80057cc:	08005963 	.word	0x08005963
 80057d0:	08005963 	.word	0x08005963
 80057d4:	08005963 	.word	0x08005963
 80057d8:	08005921 	.word	0x08005921
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68b9      	ldr	r1, [r7, #8]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fa34 	bl	8005c50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699a      	ldr	r2, [r3, #24]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0208 	orr.w	r2, r2, #8
 80057f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0204 	bic.w	r2, r2, #4
 8005806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6999      	ldr	r1, [r3, #24]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	691a      	ldr	r2, [r3, #16]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	619a      	str	r2, [r3, #24]
      break;
 800581a:	e0a5      	b.n	8005968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68b9      	ldr	r1, [r7, #8]
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fa86 	bl	8005d34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6999      	ldr	r1, [r3, #24]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	021a      	lsls	r2, r3, #8
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	619a      	str	r2, [r3, #24]
      break;
 800585c:	e084      	b.n	8005968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68b9      	ldr	r1, [r7, #8]
 8005864:	4618      	mov	r0, r3
 8005866:	f000 fadd 	bl	8005e24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69da      	ldr	r2, [r3, #28]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f042 0208 	orr.w	r2, r2, #8
 8005878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0204 	bic.w	r2, r2, #4
 8005888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69d9      	ldr	r1, [r3, #28]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	691a      	ldr	r2, [r3, #16]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	61da      	str	r2, [r3, #28]
      break;
 800589c:	e064      	b.n	8005968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68b9      	ldr	r1, [r7, #8]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 fb33 	bl	8005f10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69da      	ldr	r2, [r3, #28]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69d9      	ldr	r1, [r3, #28]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	021a      	lsls	r2, r3, #8
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	61da      	str	r2, [r3, #28]
      break;
 80058de:	e043      	b.n	8005968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fb6a 	bl	8005fc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0208 	orr.w	r2, r2, #8
 80058fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0204 	bic.w	r2, r2, #4
 800590a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	691a      	ldr	r2, [r3, #16]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800591e:	e023      	b.n	8005968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fb9c 	bl	8006064 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800593a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800594a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	021a      	lsls	r2, r3, #8
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005960:	e002      	b.n	8005968 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	75fb      	strb	r3, [r7, #23]
      break;
 8005966:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005970:	7dfb      	ldrb	r3, [r7, #23]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop

0800597c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005990:	2b01      	cmp	r3, #1
 8005992:	d101      	bne.n	8005998 <HAL_TIM_ConfigClockSource+0x1c>
 8005994:	2302      	movs	r3, #2
 8005996:	e0b4      	b.n	8005b02 <HAL_TIM_ConfigClockSource+0x186>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	4b56      	ldr	r3, [pc, #344]	; (8005b0c <HAL_TIM_ConfigClockSource+0x190>)
 80059b4:	4013      	ands	r3, r2
 80059b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d0:	d03e      	beq.n	8005a50 <HAL_TIM_ConfigClockSource+0xd4>
 80059d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d6:	f200 8087 	bhi.w	8005ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80059da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059de:	f000 8086 	beq.w	8005aee <HAL_TIM_ConfigClockSource+0x172>
 80059e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e6:	d87f      	bhi.n	8005ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80059e8:	2b70      	cmp	r3, #112	; 0x70
 80059ea:	d01a      	beq.n	8005a22 <HAL_TIM_ConfigClockSource+0xa6>
 80059ec:	2b70      	cmp	r3, #112	; 0x70
 80059ee:	d87b      	bhi.n	8005ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80059f0:	2b60      	cmp	r3, #96	; 0x60
 80059f2:	d050      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0x11a>
 80059f4:	2b60      	cmp	r3, #96	; 0x60
 80059f6:	d877      	bhi.n	8005ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80059f8:	2b50      	cmp	r3, #80	; 0x50
 80059fa:	d03c      	beq.n	8005a76 <HAL_TIM_ConfigClockSource+0xfa>
 80059fc:	2b50      	cmp	r3, #80	; 0x50
 80059fe:	d873      	bhi.n	8005ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8005a00:	2b40      	cmp	r3, #64	; 0x40
 8005a02:	d058      	beq.n	8005ab6 <HAL_TIM_ConfigClockSource+0x13a>
 8005a04:	2b40      	cmp	r3, #64	; 0x40
 8005a06:	d86f      	bhi.n	8005ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8005a08:	2b30      	cmp	r3, #48	; 0x30
 8005a0a:	d064      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a0c:	2b30      	cmp	r3, #48	; 0x30
 8005a0e:	d86b      	bhi.n	8005ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	d060      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a14:	2b20      	cmp	r3, #32
 8005a16:	d867      	bhi.n	8005ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d05c      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a1c:	2b10      	cmp	r3, #16
 8005a1e:	d05a      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a20:	e062      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6818      	ldr	r0, [r3, #0]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	6899      	ldr	r1, [r3, #8]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f000 fbe5 	bl	8006200 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	609a      	str	r2, [r3, #8]
      break;
 8005a4e:	e04f      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6818      	ldr	r0, [r3, #0]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	6899      	ldr	r1, [r3, #8]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f000 fbce 	bl	8006200 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a72:	609a      	str	r2, [r3, #8]
      break;
 8005a74:	e03c      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6818      	ldr	r0, [r3, #0]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	6859      	ldr	r1, [r3, #4]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	461a      	mov	r2, r3
 8005a84:	f000 fb42 	bl	800610c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2150      	movs	r1, #80	; 0x50
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fb9b 	bl	80061ca <TIM_ITRx_SetConfig>
      break;
 8005a94:	e02c      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6818      	ldr	r0, [r3, #0]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	6859      	ldr	r1, [r3, #4]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f000 fb61 	bl	800616a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2160      	movs	r1, #96	; 0x60
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 fb8b 	bl	80061ca <TIM_ITRx_SetConfig>
      break;
 8005ab4:	e01c      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6818      	ldr	r0, [r3, #0]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	6859      	ldr	r1, [r3, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f000 fb22 	bl	800610c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2140      	movs	r1, #64	; 0x40
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 fb7b 	bl	80061ca <TIM_ITRx_SetConfig>
      break;
 8005ad4:	e00c      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	f000 fb72 	bl	80061ca <TIM_ITRx_SetConfig>
      break;
 8005ae6:	e003      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	73fb      	strb	r3, [r7, #15]
      break;
 8005aec:	e000      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005aee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	fffeff88 	.word	0xfffeff88

08005b10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a40      	ldr	r2, [pc, #256]	; (8005c24 <TIM_Base_SetConfig+0x114>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d013      	beq.n	8005b50 <TIM_Base_SetConfig+0x40>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b2e:	d00f      	beq.n	8005b50 <TIM_Base_SetConfig+0x40>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a3d      	ldr	r2, [pc, #244]	; (8005c28 <TIM_Base_SetConfig+0x118>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d00b      	beq.n	8005b50 <TIM_Base_SetConfig+0x40>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a3c      	ldr	r2, [pc, #240]	; (8005c2c <TIM_Base_SetConfig+0x11c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d007      	beq.n	8005b50 <TIM_Base_SetConfig+0x40>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a3b      	ldr	r2, [pc, #236]	; (8005c30 <TIM_Base_SetConfig+0x120>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d003      	beq.n	8005b50 <TIM_Base_SetConfig+0x40>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a3a      	ldr	r2, [pc, #232]	; (8005c34 <TIM_Base_SetConfig+0x124>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d108      	bne.n	8005b62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a2f      	ldr	r2, [pc, #188]	; (8005c24 <TIM_Base_SetConfig+0x114>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d02b      	beq.n	8005bc2 <TIM_Base_SetConfig+0xb2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b70:	d027      	beq.n	8005bc2 <TIM_Base_SetConfig+0xb2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a2c      	ldr	r2, [pc, #176]	; (8005c28 <TIM_Base_SetConfig+0x118>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d023      	beq.n	8005bc2 <TIM_Base_SetConfig+0xb2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a2b      	ldr	r2, [pc, #172]	; (8005c2c <TIM_Base_SetConfig+0x11c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d01f      	beq.n	8005bc2 <TIM_Base_SetConfig+0xb2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a2a      	ldr	r2, [pc, #168]	; (8005c30 <TIM_Base_SetConfig+0x120>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d01b      	beq.n	8005bc2 <TIM_Base_SetConfig+0xb2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a29      	ldr	r2, [pc, #164]	; (8005c34 <TIM_Base_SetConfig+0x124>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d017      	beq.n	8005bc2 <TIM_Base_SetConfig+0xb2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a28      	ldr	r2, [pc, #160]	; (8005c38 <TIM_Base_SetConfig+0x128>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d013      	beq.n	8005bc2 <TIM_Base_SetConfig+0xb2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a27      	ldr	r2, [pc, #156]	; (8005c3c <TIM_Base_SetConfig+0x12c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d00f      	beq.n	8005bc2 <TIM_Base_SetConfig+0xb2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a26      	ldr	r2, [pc, #152]	; (8005c40 <TIM_Base_SetConfig+0x130>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d00b      	beq.n	8005bc2 <TIM_Base_SetConfig+0xb2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a25      	ldr	r2, [pc, #148]	; (8005c44 <TIM_Base_SetConfig+0x134>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d007      	beq.n	8005bc2 <TIM_Base_SetConfig+0xb2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a24      	ldr	r2, [pc, #144]	; (8005c48 <TIM_Base_SetConfig+0x138>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d003      	beq.n	8005bc2 <TIM_Base_SetConfig+0xb2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a23      	ldr	r2, [pc, #140]	; (8005c4c <TIM_Base_SetConfig+0x13c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d108      	bne.n	8005bd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a0a      	ldr	r2, [pc, #40]	; (8005c24 <TIM_Base_SetConfig+0x114>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d003      	beq.n	8005c08 <TIM_Base_SetConfig+0xf8>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a0c      	ldr	r2, [pc, #48]	; (8005c34 <TIM_Base_SetConfig+0x124>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d103      	bne.n	8005c10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	691a      	ldr	r2, [r3, #16]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	615a      	str	r2, [r3, #20]
}
 8005c16:	bf00      	nop
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	40010000 	.word	0x40010000
 8005c28:	40000400 	.word	0x40000400
 8005c2c:	40000800 	.word	0x40000800
 8005c30:	40000c00 	.word	0x40000c00
 8005c34:	40010400 	.word	0x40010400
 8005c38:	40014000 	.word	0x40014000
 8005c3c:	40014400 	.word	0x40014400
 8005c40:	40014800 	.word	0x40014800
 8005c44:	40001800 	.word	0x40001800
 8005c48:	40001c00 	.word	0x40001c00
 8005c4c:	40002000 	.word	0x40002000

08005c50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	f023 0201 	bic.w	r2, r3, #1
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4b2b      	ldr	r3, [pc, #172]	; (8005d28 <TIM_OC1_SetConfig+0xd8>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0303 	bic.w	r3, r3, #3
 8005c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f023 0302 	bic.w	r3, r3, #2
 8005c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a21      	ldr	r2, [pc, #132]	; (8005d2c <TIM_OC1_SetConfig+0xdc>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d003      	beq.n	8005cb4 <TIM_OC1_SetConfig+0x64>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a20      	ldr	r2, [pc, #128]	; (8005d30 <TIM_OC1_SetConfig+0xe0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d10c      	bne.n	8005cce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f023 0308 	bic.w	r3, r3, #8
 8005cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f023 0304 	bic.w	r3, r3, #4
 8005ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a16      	ldr	r2, [pc, #88]	; (8005d2c <TIM_OC1_SetConfig+0xdc>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d003      	beq.n	8005cde <TIM_OC1_SetConfig+0x8e>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a15      	ldr	r2, [pc, #84]	; (8005d30 <TIM_OC1_SetConfig+0xe0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d111      	bne.n	8005d02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	621a      	str	r2, [r3, #32]
}
 8005d1c:	bf00      	nop
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	fffeff8f 	.word	0xfffeff8f
 8005d2c:	40010000 	.word	0x40010000
 8005d30:	40010400 	.word	0x40010400

08005d34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	f023 0210 	bic.w	r2, r3, #16
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4b2e      	ldr	r3, [pc, #184]	; (8005e18 <TIM_OC2_SetConfig+0xe4>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	021b      	lsls	r3, r3, #8
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f023 0320 	bic.w	r3, r3, #32
 8005d7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	011b      	lsls	r3, r3, #4
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a23      	ldr	r2, [pc, #140]	; (8005e1c <TIM_OC2_SetConfig+0xe8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d003      	beq.n	8005d9c <TIM_OC2_SetConfig+0x68>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a22      	ldr	r2, [pc, #136]	; (8005e20 <TIM_OC2_SetConfig+0xec>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d10d      	bne.n	8005db8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a18      	ldr	r2, [pc, #96]	; (8005e1c <TIM_OC2_SetConfig+0xe8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d003      	beq.n	8005dc8 <TIM_OC2_SetConfig+0x94>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a17      	ldr	r2, [pc, #92]	; (8005e20 <TIM_OC2_SetConfig+0xec>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d113      	bne.n	8005df0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	621a      	str	r2, [r3, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	feff8fff 	.word	0xfeff8fff
 8005e1c:	40010000 	.word	0x40010000
 8005e20:	40010400 	.word	0x40010400

08005e24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4b2d      	ldr	r3, [pc, #180]	; (8005f04 <TIM_OC3_SetConfig+0xe0>)
 8005e50:	4013      	ands	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 0303 	bic.w	r3, r3, #3
 8005e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	021b      	lsls	r3, r3, #8
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a22      	ldr	r2, [pc, #136]	; (8005f08 <TIM_OC3_SetConfig+0xe4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d003      	beq.n	8005e8a <TIM_OC3_SetConfig+0x66>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a21      	ldr	r2, [pc, #132]	; (8005f0c <TIM_OC3_SetConfig+0xe8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d10d      	bne.n	8005ea6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	021b      	lsls	r3, r3, #8
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a17      	ldr	r2, [pc, #92]	; (8005f08 <TIM_OC3_SetConfig+0xe4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d003      	beq.n	8005eb6 <TIM_OC3_SetConfig+0x92>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a16      	ldr	r2, [pc, #88]	; (8005f0c <TIM_OC3_SetConfig+0xe8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d113      	bne.n	8005ede <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ebc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	011b      	lsls	r3, r3, #4
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	011b      	lsls	r3, r3, #4
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	621a      	str	r2, [r3, #32]
}
 8005ef8:	bf00      	nop
 8005efa:	371c      	adds	r7, #28
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	fffeff8f 	.word	0xfffeff8f
 8005f08:	40010000 	.word	0x40010000
 8005f0c:	40010400 	.word	0x40010400

08005f10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4b1e      	ldr	r3, [pc, #120]	; (8005fb4 <TIM_OC4_SetConfig+0xa4>)
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	021b      	lsls	r3, r3, #8
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	031b      	lsls	r3, r3, #12
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a13      	ldr	r2, [pc, #76]	; (8005fb8 <TIM_OC4_SetConfig+0xa8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d003      	beq.n	8005f78 <TIM_OC4_SetConfig+0x68>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a12      	ldr	r2, [pc, #72]	; (8005fbc <TIM_OC4_SetConfig+0xac>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d109      	bne.n	8005f8c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	019b      	lsls	r3, r3, #6
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	621a      	str	r2, [r3, #32]
}
 8005fa6:	bf00      	nop
 8005fa8:	371c      	adds	r7, #28
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	feff8fff 	.word	0xfeff8fff
 8005fb8:	40010000 	.word	0x40010000
 8005fbc:	40010400 	.word	0x40010400

08005fc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4b1b      	ldr	r3, [pc, #108]	; (8006058 <TIM_OC5_SetConfig+0x98>)
 8005fec:	4013      	ands	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006000:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	041b      	lsls	r3, r3, #16
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	4313      	orrs	r3, r2
 800600c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a12      	ldr	r2, [pc, #72]	; (800605c <TIM_OC5_SetConfig+0x9c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d003      	beq.n	800601e <TIM_OC5_SetConfig+0x5e>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a11      	ldr	r2, [pc, #68]	; (8006060 <TIM_OC5_SetConfig+0xa0>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d109      	bne.n	8006032 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006024:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	021b      	lsls	r3, r3, #8
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	4313      	orrs	r3, r2
 8006030:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	621a      	str	r2, [r3, #32]
}
 800604c:	bf00      	nop
 800604e:	371c      	adds	r7, #28
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	fffeff8f 	.word	0xfffeff8f
 800605c:	40010000 	.word	0x40010000
 8006060:	40010400 	.word	0x40010400

08006064 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4b1c      	ldr	r3, [pc, #112]	; (8006100 <TIM_OC6_SetConfig+0x9c>)
 8006090:	4013      	ands	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	021b      	lsls	r3, r3, #8
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4313      	orrs	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	051b      	lsls	r3, r3, #20
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a13      	ldr	r2, [pc, #76]	; (8006104 <TIM_OC6_SetConfig+0xa0>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d003      	beq.n	80060c4 <TIM_OC6_SetConfig+0x60>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a12      	ldr	r2, [pc, #72]	; (8006108 <TIM_OC6_SetConfig+0xa4>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d109      	bne.n	80060d8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	029b      	lsls	r3, r3, #10
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	621a      	str	r2, [r3, #32]
}
 80060f2:	bf00      	nop
 80060f4:	371c      	adds	r7, #28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	feff8fff 	.word	0xfeff8fff
 8006104:	40010000 	.word	0x40010000
 8006108:	40010400 	.word	0x40010400

0800610c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800610c:	b480      	push	{r7}
 800610e:	b087      	sub	sp, #28
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6a1b      	ldr	r3, [r3, #32]
 800611c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	f023 0201 	bic.w	r2, r3, #1
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	011b      	lsls	r3, r3, #4
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	4313      	orrs	r3, r2
 8006140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f023 030a 	bic.w	r3, r3, #10
 8006148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	621a      	str	r2, [r3, #32]
}
 800615e:	bf00      	nop
 8006160:	371c      	adds	r7, #28
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800616a:	b480      	push	{r7}
 800616c:	b087      	sub	sp, #28
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	f023 0210 	bic.w	r2, r3, #16
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006194:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	031b      	lsls	r3, r3, #12
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	621a      	str	r2, [r3, #32]
}
 80061be:	bf00      	nop
 80061c0:	371c      	adds	r7, #28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b085      	sub	sp, #20
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	f043 0307 	orr.w	r3, r3, #7
 80061ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	609a      	str	r2, [r3, #8]
}
 80061f4:	bf00      	nop
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800621a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	021a      	lsls	r2, r3, #8
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	431a      	orrs	r2, r3
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	4313      	orrs	r3, r2
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	609a      	str	r2, [r3, #8]
}
 8006234:	bf00      	nop
 8006236:	371c      	adds	r7, #28
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f003 031f 	and.w	r3, r3, #31
 8006252:	2201      	movs	r2, #1
 8006254:	fa02 f303 	lsl.w	r3, r2, r3
 8006258:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6a1a      	ldr	r2, [r3, #32]
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	43db      	mvns	r3, r3
 8006262:	401a      	ands	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6a1a      	ldr	r2, [r3, #32]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f003 031f 	and.w	r3, r3, #31
 8006272:	6879      	ldr	r1, [r7, #4]
 8006274:	fa01 f303 	lsl.w	r3, r1, r3
 8006278:	431a      	orrs	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	621a      	str	r2, [r3, #32]
}
 800627e:	bf00      	nop
 8006280:	371c      	adds	r7, #28
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
	...

0800628c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800629c:	2b01      	cmp	r3, #1
 800629e:	d101      	bne.n	80062a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062a0:	2302      	movs	r3, #2
 80062a2:	e06d      	b.n	8006380 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a30      	ldr	r2, [pc, #192]	; (800638c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d004      	beq.n	80062d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a2f      	ldr	r2, [pc, #188]	; (8006390 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d108      	bne.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a20      	ldr	r2, [pc, #128]	; (800638c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d022      	beq.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006316:	d01d      	beq.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a1d      	ldr	r2, [pc, #116]	; (8006394 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d018      	beq.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a1c      	ldr	r2, [pc, #112]	; (8006398 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d013      	beq.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a1a      	ldr	r2, [pc, #104]	; (800639c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d00e      	beq.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a15      	ldr	r2, [pc, #84]	; (8006390 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d009      	beq.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a16      	ldr	r2, [pc, #88]	; (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d004      	beq.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a15      	ldr	r2, [pc, #84]	; (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d10c      	bne.n	800636e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800635a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	4313      	orrs	r3, r2
 8006364:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	40010000 	.word	0x40010000
 8006390:	40010400 	.word	0x40010400
 8006394:	40000400 	.word	0x40000400
 8006398:	40000800 	.word	0x40000800
 800639c:	40000c00 	.word	0x40000c00
 80063a0:	40014000 	.word	0x40014000
 80063a4:	40001800 	.word	0x40001800

080063a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e040      	b.n	800643c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d106      	bne.n	80063d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fc f9a2 	bl	8002714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2224      	movs	r2, #36	; 0x24
 80063d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0201 	bic.w	r2, r2, #1
 80063e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fc18 	bl	8006c1c <UART_SetConfig>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d101      	bne.n	80063f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e022      	b.n	800643c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d002      	beq.n	8006404 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fe6e 	bl	80070e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006422:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0201 	orr.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fef5 	bl	8007224 <UART_CheckIdleState>
 800643a:	4603      	mov	r3, r0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b08a      	sub	sp, #40	; 0x28
 8006448:	af02      	add	r7, sp, #8
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	4613      	mov	r3, r2
 8006452:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006458:	2b20      	cmp	r3, #32
 800645a:	f040 8081 	bne.w	8006560 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <HAL_UART_Transmit+0x26>
 8006464:	88fb      	ldrh	r3, [r7, #6]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e079      	b.n	8006562 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_UART_Transmit+0x38>
 8006478:	2302      	movs	r3, #2
 800647a:	e072      	b.n	8006562 <HAL_UART_Transmit+0x11e>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2221      	movs	r2, #33	; 0x21
 8006490:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006492:	f7fc fb6d 	bl	8002b70 <HAL_GetTick>
 8006496:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	88fa      	ldrh	r2, [r7, #6]
 800649c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	88fa      	ldrh	r2, [r7, #6]
 80064a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b0:	d108      	bne.n	80064c4 <HAL_UART_Transmit+0x80>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d104      	bne.n	80064c4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80064ba:	2300      	movs	r3, #0
 80064bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	61bb      	str	r3, [r7, #24]
 80064c2:	e003      	b.n	80064cc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064c8:	2300      	movs	r3, #0
 80064ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80064d4:	e02c      	b.n	8006530 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2200      	movs	r2, #0
 80064de:	2180      	movs	r1, #128	; 0x80
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 fee8 	bl	80072b6 <UART_WaitOnFlagUntilTimeout>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e038      	b.n	8006562 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10b      	bne.n	800650e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	461a      	mov	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006504:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	3302      	adds	r3, #2
 800650a:	61bb      	str	r3, [r7, #24]
 800650c:	e007      	b.n	800651e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	781a      	ldrb	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	3301      	adds	r3, #1
 800651c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006524:	b29b      	uxth	r3, r3
 8006526:	3b01      	subs	r3, #1
 8006528:	b29a      	uxth	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006536:	b29b      	uxth	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1cc      	bne.n	80064d6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2200      	movs	r2, #0
 8006544:	2140      	movs	r1, #64	; 0x40
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 feb5 	bl	80072b6 <UART_WaitOnFlagUntilTimeout>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e005      	b.n	8006562 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2220      	movs	r2, #32
 800655a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800655c:	2300      	movs	r3, #0
 800655e:	e000      	b.n	8006562 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006560:	2302      	movs	r3, #2
  }
}
 8006562:	4618      	mov	r0, r3
 8006564:	3720      	adds	r7, #32
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b08a      	sub	sp, #40	; 0x28
 800656e:	af00      	add	r7, sp, #0
 8006570:	60f8      	str	r0, [r7, #12]
 8006572:	60b9      	str	r1, [r7, #8]
 8006574:	4613      	mov	r3, r2
 8006576:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800657c:	2b20      	cmp	r3, #32
 800657e:	d13d      	bne.n	80065fc <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d002      	beq.n	800658c <HAL_UART_Receive_IT+0x22>
 8006586:	88fb      	ldrh	r3, [r7, #6]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e036      	b.n	80065fe <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006596:	2b01      	cmp	r3, #1
 8006598:	d101      	bne.n	800659e <HAL_UART_Receive_IT+0x34>
 800659a:	2302      	movs	r3, #2
 800659c:	e02f      	b.n	80065fe <HAL_UART_Receive_IT+0x94>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d018      	beq.n	80065ec <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	e853 3f00 	ldrex	r3, [r3]
 80065c6:	613b      	str	r3, [r7, #16]
   return(result);
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	461a      	mov	r2, r3
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	623b      	str	r3, [r7, #32]
 80065da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065dc:	69f9      	ldr	r1, [r7, #28]
 80065de:	6a3a      	ldr	r2, [r7, #32]
 80065e0:	e841 2300 	strex	r3, r2, [r1]
 80065e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e6      	bne.n	80065ba <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80065ec:	88fb      	ldrh	r3, [r7, #6]
 80065ee:	461a      	mov	r2, r3
 80065f0:	68b9      	ldr	r1, [r7, #8]
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 ff24 	bl	8007440 <UART_Start_Receive_IT>
 80065f8:	4603      	mov	r3, r0
 80065fa:	e000      	b.n	80065fe <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065fc:	2302      	movs	r3, #2
  }
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3728      	adds	r7, #40	; 0x28
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
	...

08006608 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b0ba      	sub	sp, #232	; 0xe8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800662e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006632:	f640 030f 	movw	r3, #2063	; 0x80f
 8006636:	4013      	ands	r3, r2
 8006638:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800663c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006640:	2b00      	cmp	r3, #0
 8006642:	d115      	bne.n	8006670 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006648:	f003 0320 	and.w	r3, r3, #32
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00f      	beq.n	8006670 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006654:	f003 0320 	and.w	r3, r3, #32
 8006658:	2b00      	cmp	r3, #0
 800665a:	d009      	beq.n	8006670 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 82a4 	beq.w	8006bae <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	4798      	blx	r3
      }
      return;
 800666e:	e29e      	b.n	8006bae <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006670:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 8117 	beq.w	80068a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800667a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d106      	bne.n	8006694 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006686:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800668a:	4b85      	ldr	r3, [pc, #532]	; (80068a0 <HAL_UART_IRQHandler+0x298>)
 800668c:	4013      	ands	r3, r2
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 810a 	beq.w	80068a8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b00      	cmp	r3, #0
 800669e:	d011      	beq.n	80066c4 <HAL_UART_IRQHandler+0xbc>
 80066a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00b      	beq.n	80066c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2201      	movs	r2, #1
 80066b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066ba:	f043 0201 	orr.w	r2, r3, #1
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d011      	beq.n	80066f4 <HAL_UART_IRQHandler+0xec>
 80066d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00b      	beq.n	80066f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2202      	movs	r2, #2
 80066e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066ea:	f043 0204 	orr.w	r2, r3, #4
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d011      	beq.n	8006724 <HAL_UART_IRQHandler+0x11c>
 8006700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00b      	beq.n	8006724 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2204      	movs	r2, #4
 8006712:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800671a:	f043 0202 	orr.w	r2, r3, #2
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006728:	f003 0308 	and.w	r3, r3, #8
 800672c:	2b00      	cmp	r3, #0
 800672e:	d017      	beq.n	8006760 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006734:	f003 0320 	and.w	r3, r3, #32
 8006738:	2b00      	cmp	r3, #0
 800673a:	d105      	bne.n	8006748 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800673c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006740:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00b      	beq.n	8006760 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2208      	movs	r2, #8
 800674e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006756:	f043 0208 	orr.w	r2, r3, #8
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006768:	2b00      	cmp	r3, #0
 800676a:	d012      	beq.n	8006792 <HAL_UART_IRQHandler+0x18a>
 800676c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006770:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00c      	beq.n	8006792 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006780:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006788:	f043 0220 	orr.w	r2, r3, #32
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 820a 	beq.w	8006bb2 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800679e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a2:	f003 0320 	and.w	r3, r3, #32
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00d      	beq.n	80067c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ae:	f003 0320 	and.w	r3, r3, #32
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d007      	beq.n	80067c6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067da:	2b40      	cmp	r3, #64	; 0x40
 80067dc:	d005      	beq.n	80067ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80067de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d04f      	beq.n	800688a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fef2 	bl	80075d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fa:	2b40      	cmp	r3, #64	; 0x40
 80067fc:	d141      	bne.n	8006882 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3308      	adds	r3, #8
 8006804:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006808:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006814:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800681c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3308      	adds	r3, #8
 8006826:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800682a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800682e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006836:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1d9      	bne.n	80067fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684e:	2b00      	cmp	r3, #0
 8006850:	d013      	beq.n	800687a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006856:	4a13      	ldr	r2, [pc, #76]	; (80068a4 <HAL_UART_IRQHandler+0x29c>)
 8006858:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685e:	4618      	mov	r0, r3
 8006860:	f7fc fb37 	bl	8002ed2 <HAL_DMA_Abort_IT>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d017      	beq.n	800689a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006874:	4610      	mov	r0, r2
 8006876:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006878:	e00f      	b.n	800689a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f9ae 	bl	8006bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006880:	e00b      	b.n	800689a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f9aa 	bl	8006bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006888:	e007      	b.n	800689a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f9a6 	bl	8006bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006898:	e18b      	b.n	8006bb2 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800689a:	bf00      	nop
    return;
 800689c:	e189      	b.n	8006bb2 <HAL_UART_IRQHandler+0x5aa>
 800689e:	bf00      	nop
 80068a0:	04000120 	.word	0x04000120
 80068a4:	0800769b 	.word	0x0800769b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	f040 8144 	bne.w	8006b3a <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80068b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b6:	f003 0310 	and.w	r3, r3, #16
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 813d 	beq.w	8006b3a <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80068c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c4:	f003 0310 	and.w	r3, r3, #16
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 8136 	beq.w	8006b3a <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2210      	movs	r2, #16
 80068d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e0:	2b40      	cmp	r3, #64	; 0x40
 80068e2:	f040 80b2 	bne.w	8006a4a <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 815d 	beq.w	8006bb6 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006902:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006906:	429a      	cmp	r2, r3
 8006908:	f080 8155 	bcs.w	8006bb6 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006912:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006920:	f000 8085 	beq.w	8006a2e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006938:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800693c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006940:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	461a      	mov	r2, r3
 800694a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800694e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006952:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800695a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006966:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1da      	bne.n	8006924 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3308      	adds	r3, #8
 8006974:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006978:	e853 3f00 	ldrex	r3, [r3]
 800697c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800697e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006980:	f023 0301 	bic.w	r3, r3, #1
 8006984:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3308      	adds	r3, #8
 800698e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006992:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006996:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006998:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800699a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800699e:	e841 2300 	strex	r3, r2, [r1]
 80069a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80069a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1e1      	bne.n	800696e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3308      	adds	r3, #8
 80069b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80069ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3308      	adds	r3, #8
 80069ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80069ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80069d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069d6:	e841 2300 	strex	r3, r2, [r1]
 80069da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80069dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1e3      	bne.n	80069aa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2220      	movs	r2, #32
 80069e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f6:	e853 3f00 	ldrex	r3, [r3]
 80069fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069fe:	f023 0310 	bic.w	r3, r3, #16
 8006a02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a10:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a12:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a18:	e841 2300 	strex	r3, r2, [r1]
 8006a1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1e4      	bne.n	80069ee <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7fc f9e2 	bl	8002df2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	4619      	mov	r1, r3
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f8d4 	bl	8006bf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a48:	e0b5      	b.n	8006bb6 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 80a7 	beq.w	8006bba <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006a6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 80a2 	beq.w	8006bba <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7e:	e853 3f00 	ldrex	r3, [r3]
 8006a82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	461a      	mov	r2, r3
 8006a94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a98:	647b      	str	r3, [r7, #68]	; 0x44
 8006a9a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aa0:	e841 2300 	strex	r3, r2, [r1]
 8006aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e4      	bne.n	8006a76 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3308      	adds	r3, #8
 8006ab2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	e853 3f00 	ldrex	r3, [r3]
 8006aba:	623b      	str	r3, [r7, #32]
   return(result);
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	f023 0301 	bic.w	r3, r3, #1
 8006ac2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3308      	adds	r3, #8
 8006acc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ad0:	633a      	str	r2, [r7, #48]	; 0x30
 8006ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e3      	bne.n	8006aac <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	e853 3f00 	ldrex	r3, [r3]
 8006b02:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f023 0310 	bic.w	r3, r3, #16
 8006b0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	461a      	mov	r2, r3
 8006b14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b18:	61fb      	str	r3, [r7, #28]
 8006b1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	69b9      	ldr	r1, [r7, #24]
 8006b1e:	69fa      	ldr	r2, [r7, #28]
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	617b      	str	r3, [r7, #20]
   return(result);
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e4      	bne.n	8006af6 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b30:	4619      	mov	r1, r3
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f85c 	bl	8006bf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b38:	e03f      	b.n	8006bba <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00e      	beq.n	8006b64 <HAL_UART_IRQHandler+0x55c>
 8006b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d008      	beq.n	8006b64 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f853 	bl	8006c08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b62:	e02d      	b.n	8006bc0 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00e      	beq.n	8006b8e <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d008      	beq.n	8006b8e <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d01c      	beq.n	8006bbe <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	4798      	blx	r3
    }
    return;
 8006b8c:	e017      	b.n	8006bbe <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d012      	beq.n	8006bc0 <HAL_UART_IRQHandler+0x5b8>
 8006b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00c      	beq.n	8006bc0 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fd8d 	bl	80076c6 <UART_EndTransmit_IT>
    return;
 8006bac:	e008      	b.n	8006bc0 <HAL_UART_IRQHandler+0x5b8>
      return;
 8006bae:	bf00      	nop
 8006bb0:	e006      	b.n	8006bc0 <HAL_UART_IRQHandler+0x5b8>
    return;
 8006bb2:	bf00      	nop
 8006bb4:	e004      	b.n	8006bc0 <HAL_UART_IRQHandler+0x5b8>
      return;
 8006bb6:	bf00      	nop
 8006bb8:	e002      	b.n	8006bc0 <HAL_UART_IRQHandler+0x5b8>
      return;
 8006bba:	bf00      	nop
 8006bbc:	e000      	b.n	8006bc0 <HAL_UART_IRQHandler+0x5b8>
    return;
 8006bbe:	bf00      	nop
  }

}
 8006bc0:	37e8      	adds	r7, #232	; 0xe8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop

08006bc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b088      	sub	sp, #32
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	431a      	orrs	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	431a      	orrs	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	4ba7      	ldr	r3, [pc, #668]	; (8006ee4 <UART_SetConfig+0x2c8>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	6812      	ldr	r2, [r2, #0]
 8006c4e:	6979      	ldr	r1, [r7, #20]
 8006c50:	430b      	orrs	r3, r1
 8006c52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a95      	ldr	r2, [pc, #596]	; (8006ee8 <UART_SetConfig+0x2cc>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d120      	bne.n	8006cda <UART_SetConfig+0xbe>
 8006c98:	4b94      	ldr	r3, [pc, #592]	; (8006eec <UART_SetConfig+0x2d0>)
 8006c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c9e:	f003 0303 	and.w	r3, r3, #3
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d816      	bhi.n	8006cd4 <UART_SetConfig+0xb8>
 8006ca6:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <UART_SetConfig+0x90>)
 8006ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cac:	08006cbd 	.word	0x08006cbd
 8006cb0:	08006cc9 	.word	0x08006cc9
 8006cb4:	08006cc3 	.word	0x08006cc3
 8006cb8:	08006ccf 	.word	0x08006ccf
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	77fb      	strb	r3, [r7, #31]
 8006cc0:	e14f      	b.n	8006f62 <UART_SetConfig+0x346>
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	77fb      	strb	r3, [r7, #31]
 8006cc6:	e14c      	b.n	8006f62 <UART_SetConfig+0x346>
 8006cc8:	2304      	movs	r3, #4
 8006cca:	77fb      	strb	r3, [r7, #31]
 8006ccc:	e149      	b.n	8006f62 <UART_SetConfig+0x346>
 8006cce:	2308      	movs	r3, #8
 8006cd0:	77fb      	strb	r3, [r7, #31]
 8006cd2:	e146      	b.n	8006f62 <UART_SetConfig+0x346>
 8006cd4:	2310      	movs	r3, #16
 8006cd6:	77fb      	strb	r3, [r7, #31]
 8006cd8:	e143      	b.n	8006f62 <UART_SetConfig+0x346>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a84      	ldr	r2, [pc, #528]	; (8006ef0 <UART_SetConfig+0x2d4>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d132      	bne.n	8006d4a <UART_SetConfig+0x12e>
 8006ce4:	4b81      	ldr	r3, [pc, #516]	; (8006eec <UART_SetConfig+0x2d0>)
 8006ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cea:	f003 030c 	and.w	r3, r3, #12
 8006cee:	2b0c      	cmp	r3, #12
 8006cf0:	d828      	bhi.n	8006d44 <UART_SetConfig+0x128>
 8006cf2:	a201      	add	r2, pc, #4	; (adr r2, 8006cf8 <UART_SetConfig+0xdc>)
 8006cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf8:	08006d2d 	.word	0x08006d2d
 8006cfc:	08006d45 	.word	0x08006d45
 8006d00:	08006d45 	.word	0x08006d45
 8006d04:	08006d45 	.word	0x08006d45
 8006d08:	08006d39 	.word	0x08006d39
 8006d0c:	08006d45 	.word	0x08006d45
 8006d10:	08006d45 	.word	0x08006d45
 8006d14:	08006d45 	.word	0x08006d45
 8006d18:	08006d33 	.word	0x08006d33
 8006d1c:	08006d45 	.word	0x08006d45
 8006d20:	08006d45 	.word	0x08006d45
 8006d24:	08006d45 	.word	0x08006d45
 8006d28:	08006d3f 	.word	0x08006d3f
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	77fb      	strb	r3, [r7, #31]
 8006d30:	e117      	b.n	8006f62 <UART_SetConfig+0x346>
 8006d32:	2302      	movs	r3, #2
 8006d34:	77fb      	strb	r3, [r7, #31]
 8006d36:	e114      	b.n	8006f62 <UART_SetConfig+0x346>
 8006d38:	2304      	movs	r3, #4
 8006d3a:	77fb      	strb	r3, [r7, #31]
 8006d3c:	e111      	b.n	8006f62 <UART_SetConfig+0x346>
 8006d3e:	2308      	movs	r3, #8
 8006d40:	77fb      	strb	r3, [r7, #31]
 8006d42:	e10e      	b.n	8006f62 <UART_SetConfig+0x346>
 8006d44:	2310      	movs	r3, #16
 8006d46:	77fb      	strb	r3, [r7, #31]
 8006d48:	e10b      	b.n	8006f62 <UART_SetConfig+0x346>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a69      	ldr	r2, [pc, #420]	; (8006ef4 <UART_SetConfig+0x2d8>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d120      	bne.n	8006d96 <UART_SetConfig+0x17a>
 8006d54:	4b65      	ldr	r3, [pc, #404]	; (8006eec <UART_SetConfig+0x2d0>)
 8006d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d5e:	2b30      	cmp	r3, #48	; 0x30
 8006d60:	d013      	beq.n	8006d8a <UART_SetConfig+0x16e>
 8006d62:	2b30      	cmp	r3, #48	; 0x30
 8006d64:	d814      	bhi.n	8006d90 <UART_SetConfig+0x174>
 8006d66:	2b20      	cmp	r3, #32
 8006d68:	d009      	beq.n	8006d7e <UART_SetConfig+0x162>
 8006d6a:	2b20      	cmp	r3, #32
 8006d6c:	d810      	bhi.n	8006d90 <UART_SetConfig+0x174>
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <UART_SetConfig+0x15c>
 8006d72:	2b10      	cmp	r3, #16
 8006d74:	d006      	beq.n	8006d84 <UART_SetConfig+0x168>
 8006d76:	e00b      	b.n	8006d90 <UART_SetConfig+0x174>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	77fb      	strb	r3, [r7, #31]
 8006d7c:	e0f1      	b.n	8006f62 <UART_SetConfig+0x346>
 8006d7e:	2302      	movs	r3, #2
 8006d80:	77fb      	strb	r3, [r7, #31]
 8006d82:	e0ee      	b.n	8006f62 <UART_SetConfig+0x346>
 8006d84:	2304      	movs	r3, #4
 8006d86:	77fb      	strb	r3, [r7, #31]
 8006d88:	e0eb      	b.n	8006f62 <UART_SetConfig+0x346>
 8006d8a:	2308      	movs	r3, #8
 8006d8c:	77fb      	strb	r3, [r7, #31]
 8006d8e:	e0e8      	b.n	8006f62 <UART_SetConfig+0x346>
 8006d90:	2310      	movs	r3, #16
 8006d92:	77fb      	strb	r3, [r7, #31]
 8006d94:	e0e5      	b.n	8006f62 <UART_SetConfig+0x346>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a57      	ldr	r2, [pc, #348]	; (8006ef8 <UART_SetConfig+0x2dc>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d120      	bne.n	8006de2 <UART_SetConfig+0x1c6>
 8006da0:	4b52      	ldr	r3, [pc, #328]	; (8006eec <UART_SetConfig+0x2d0>)
 8006da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006daa:	2bc0      	cmp	r3, #192	; 0xc0
 8006dac:	d013      	beq.n	8006dd6 <UART_SetConfig+0x1ba>
 8006dae:	2bc0      	cmp	r3, #192	; 0xc0
 8006db0:	d814      	bhi.n	8006ddc <UART_SetConfig+0x1c0>
 8006db2:	2b80      	cmp	r3, #128	; 0x80
 8006db4:	d009      	beq.n	8006dca <UART_SetConfig+0x1ae>
 8006db6:	2b80      	cmp	r3, #128	; 0x80
 8006db8:	d810      	bhi.n	8006ddc <UART_SetConfig+0x1c0>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d002      	beq.n	8006dc4 <UART_SetConfig+0x1a8>
 8006dbe:	2b40      	cmp	r3, #64	; 0x40
 8006dc0:	d006      	beq.n	8006dd0 <UART_SetConfig+0x1b4>
 8006dc2:	e00b      	b.n	8006ddc <UART_SetConfig+0x1c0>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	77fb      	strb	r3, [r7, #31]
 8006dc8:	e0cb      	b.n	8006f62 <UART_SetConfig+0x346>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	77fb      	strb	r3, [r7, #31]
 8006dce:	e0c8      	b.n	8006f62 <UART_SetConfig+0x346>
 8006dd0:	2304      	movs	r3, #4
 8006dd2:	77fb      	strb	r3, [r7, #31]
 8006dd4:	e0c5      	b.n	8006f62 <UART_SetConfig+0x346>
 8006dd6:	2308      	movs	r3, #8
 8006dd8:	77fb      	strb	r3, [r7, #31]
 8006dda:	e0c2      	b.n	8006f62 <UART_SetConfig+0x346>
 8006ddc:	2310      	movs	r3, #16
 8006dde:	77fb      	strb	r3, [r7, #31]
 8006de0:	e0bf      	b.n	8006f62 <UART_SetConfig+0x346>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a45      	ldr	r2, [pc, #276]	; (8006efc <UART_SetConfig+0x2e0>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d125      	bne.n	8006e38 <UART_SetConfig+0x21c>
 8006dec:	4b3f      	ldr	r3, [pc, #252]	; (8006eec <UART_SetConfig+0x2d0>)
 8006dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dfa:	d017      	beq.n	8006e2c <UART_SetConfig+0x210>
 8006dfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e00:	d817      	bhi.n	8006e32 <UART_SetConfig+0x216>
 8006e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e06:	d00b      	beq.n	8006e20 <UART_SetConfig+0x204>
 8006e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e0c:	d811      	bhi.n	8006e32 <UART_SetConfig+0x216>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <UART_SetConfig+0x1fe>
 8006e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e16:	d006      	beq.n	8006e26 <UART_SetConfig+0x20a>
 8006e18:	e00b      	b.n	8006e32 <UART_SetConfig+0x216>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	77fb      	strb	r3, [r7, #31]
 8006e1e:	e0a0      	b.n	8006f62 <UART_SetConfig+0x346>
 8006e20:	2302      	movs	r3, #2
 8006e22:	77fb      	strb	r3, [r7, #31]
 8006e24:	e09d      	b.n	8006f62 <UART_SetConfig+0x346>
 8006e26:	2304      	movs	r3, #4
 8006e28:	77fb      	strb	r3, [r7, #31]
 8006e2a:	e09a      	b.n	8006f62 <UART_SetConfig+0x346>
 8006e2c:	2308      	movs	r3, #8
 8006e2e:	77fb      	strb	r3, [r7, #31]
 8006e30:	e097      	b.n	8006f62 <UART_SetConfig+0x346>
 8006e32:	2310      	movs	r3, #16
 8006e34:	77fb      	strb	r3, [r7, #31]
 8006e36:	e094      	b.n	8006f62 <UART_SetConfig+0x346>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a30      	ldr	r2, [pc, #192]	; (8006f00 <UART_SetConfig+0x2e4>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d125      	bne.n	8006e8e <UART_SetConfig+0x272>
 8006e42:	4b2a      	ldr	r3, [pc, #168]	; (8006eec <UART_SetConfig+0x2d0>)
 8006e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e50:	d017      	beq.n	8006e82 <UART_SetConfig+0x266>
 8006e52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e56:	d817      	bhi.n	8006e88 <UART_SetConfig+0x26c>
 8006e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e5c:	d00b      	beq.n	8006e76 <UART_SetConfig+0x25a>
 8006e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e62:	d811      	bhi.n	8006e88 <UART_SetConfig+0x26c>
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d003      	beq.n	8006e70 <UART_SetConfig+0x254>
 8006e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e6c:	d006      	beq.n	8006e7c <UART_SetConfig+0x260>
 8006e6e:	e00b      	b.n	8006e88 <UART_SetConfig+0x26c>
 8006e70:	2301      	movs	r3, #1
 8006e72:	77fb      	strb	r3, [r7, #31]
 8006e74:	e075      	b.n	8006f62 <UART_SetConfig+0x346>
 8006e76:	2302      	movs	r3, #2
 8006e78:	77fb      	strb	r3, [r7, #31]
 8006e7a:	e072      	b.n	8006f62 <UART_SetConfig+0x346>
 8006e7c:	2304      	movs	r3, #4
 8006e7e:	77fb      	strb	r3, [r7, #31]
 8006e80:	e06f      	b.n	8006f62 <UART_SetConfig+0x346>
 8006e82:	2308      	movs	r3, #8
 8006e84:	77fb      	strb	r3, [r7, #31]
 8006e86:	e06c      	b.n	8006f62 <UART_SetConfig+0x346>
 8006e88:	2310      	movs	r3, #16
 8006e8a:	77fb      	strb	r3, [r7, #31]
 8006e8c:	e069      	b.n	8006f62 <UART_SetConfig+0x346>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a1c      	ldr	r2, [pc, #112]	; (8006f04 <UART_SetConfig+0x2e8>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d137      	bne.n	8006f08 <UART_SetConfig+0x2ec>
 8006e98:	4b14      	ldr	r3, [pc, #80]	; (8006eec <UART_SetConfig+0x2d0>)
 8006e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e9e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006ea2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ea6:	d017      	beq.n	8006ed8 <UART_SetConfig+0x2bc>
 8006ea8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006eac:	d817      	bhi.n	8006ede <UART_SetConfig+0x2c2>
 8006eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eb2:	d00b      	beq.n	8006ecc <UART_SetConfig+0x2b0>
 8006eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eb8:	d811      	bhi.n	8006ede <UART_SetConfig+0x2c2>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <UART_SetConfig+0x2aa>
 8006ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ec2:	d006      	beq.n	8006ed2 <UART_SetConfig+0x2b6>
 8006ec4:	e00b      	b.n	8006ede <UART_SetConfig+0x2c2>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	77fb      	strb	r3, [r7, #31]
 8006eca:	e04a      	b.n	8006f62 <UART_SetConfig+0x346>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	77fb      	strb	r3, [r7, #31]
 8006ed0:	e047      	b.n	8006f62 <UART_SetConfig+0x346>
 8006ed2:	2304      	movs	r3, #4
 8006ed4:	77fb      	strb	r3, [r7, #31]
 8006ed6:	e044      	b.n	8006f62 <UART_SetConfig+0x346>
 8006ed8:	2308      	movs	r3, #8
 8006eda:	77fb      	strb	r3, [r7, #31]
 8006edc:	e041      	b.n	8006f62 <UART_SetConfig+0x346>
 8006ede:	2310      	movs	r3, #16
 8006ee0:	77fb      	strb	r3, [r7, #31]
 8006ee2:	e03e      	b.n	8006f62 <UART_SetConfig+0x346>
 8006ee4:	efff69f3 	.word	0xefff69f3
 8006ee8:	40011000 	.word	0x40011000
 8006eec:	40023800 	.word	0x40023800
 8006ef0:	40004400 	.word	0x40004400
 8006ef4:	40004800 	.word	0x40004800
 8006ef8:	40004c00 	.word	0x40004c00
 8006efc:	40005000 	.word	0x40005000
 8006f00:	40011400 	.word	0x40011400
 8006f04:	40007800 	.word	0x40007800
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a71      	ldr	r2, [pc, #452]	; (80070d4 <UART_SetConfig+0x4b8>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d125      	bne.n	8006f5e <UART_SetConfig+0x342>
 8006f12:	4b71      	ldr	r3, [pc, #452]	; (80070d8 <UART_SetConfig+0x4bc>)
 8006f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f1c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f20:	d017      	beq.n	8006f52 <UART_SetConfig+0x336>
 8006f22:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f26:	d817      	bhi.n	8006f58 <UART_SetConfig+0x33c>
 8006f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f2c:	d00b      	beq.n	8006f46 <UART_SetConfig+0x32a>
 8006f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f32:	d811      	bhi.n	8006f58 <UART_SetConfig+0x33c>
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d003      	beq.n	8006f40 <UART_SetConfig+0x324>
 8006f38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f3c:	d006      	beq.n	8006f4c <UART_SetConfig+0x330>
 8006f3e:	e00b      	b.n	8006f58 <UART_SetConfig+0x33c>
 8006f40:	2300      	movs	r3, #0
 8006f42:	77fb      	strb	r3, [r7, #31]
 8006f44:	e00d      	b.n	8006f62 <UART_SetConfig+0x346>
 8006f46:	2302      	movs	r3, #2
 8006f48:	77fb      	strb	r3, [r7, #31]
 8006f4a:	e00a      	b.n	8006f62 <UART_SetConfig+0x346>
 8006f4c:	2304      	movs	r3, #4
 8006f4e:	77fb      	strb	r3, [r7, #31]
 8006f50:	e007      	b.n	8006f62 <UART_SetConfig+0x346>
 8006f52:	2308      	movs	r3, #8
 8006f54:	77fb      	strb	r3, [r7, #31]
 8006f56:	e004      	b.n	8006f62 <UART_SetConfig+0x346>
 8006f58:	2310      	movs	r3, #16
 8006f5a:	77fb      	strb	r3, [r7, #31]
 8006f5c:	e001      	b.n	8006f62 <UART_SetConfig+0x346>
 8006f5e:	2310      	movs	r3, #16
 8006f60:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f6a:	d15a      	bne.n	8007022 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006f6c:	7ffb      	ldrb	r3, [r7, #31]
 8006f6e:	2b08      	cmp	r3, #8
 8006f70:	d827      	bhi.n	8006fc2 <UART_SetConfig+0x3a6>
 8006f72:	a201      	add	r2, pc, #4	; (adr r2, 8006f78 <UART_SetConfig+0x35c>)
 8006f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f78:	08006f9d 	.word	0x08006f9d
 8006f7c:	08006fa5 	.word	0x08006fa5
 8006f80:	08006fad 	.word	0x08006fad
 8006f84:	08006fc3 	.word	0x08006fc3
 8006f88:	08006fb3 	.word	0x08006fb3
 8006f8c:	08006fc3 	.word	0x08006fc3
 8006f90:	08006fc3 	.word	0x08006fc3
 8006f94:	08006fc3 	.word	0x08006fc3
 8006f98:	08006fbb 	.word	0x08006fbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f9c:	f7fc ffb2 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 8006fa0:	61b8      	str	r0, [r7, #24]
        break;
 8006fa2:	e013      	b.n	8006fcc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fa4:	f7fc ffc2 	bl	8003f2c <HAL_RCC_GetPCLK2Freq>
 8006fa8:	61b8      	str	r0, [r7, #24]
        break;
 8006faa:	e00f      	b.n	8006fcc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fac:	4b4b      	ldr	r3, [pc, #300]	; (80070dc <UART_SetConfig+0x4c0>)
 8006fae:	61bb      	str	r3, [r7, #24]
        break;
 8006fb0:	e00c      	b.n	8006fcc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fb2:	f7fc feb9 	bl	8003d28 <HAL_RCC_GetSysClockFreq>
 8006fb6:	61b8      	str	r0, [r7, #24]
        break;
 8006fb8:	e008      	b.n	8006fcc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fbe:	61bb      	str	r3, [r7, #24]
        break;
 8006fc0:	e004      	b.n	8006fcc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	77bb      	strb	r3, [r7, #30]
        break;
 8006fca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d074      	beq.n	80070bc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	005a      	lsls	r2, r3, #1
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	085b      	lsrs	r3, r3, #1
 8006fdc:	441a      	add	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	2b0f      	cmp	r3, #15
 8006fec:	d916      	bls.n	800701c <UART_SetConfig+0x400>
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ff4:	d212      	bcs.n	800701c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	f023 030f 	bic.w	r3, r3, #15
 8006ffe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	085b      	lsrs	r3, r3, #1
 8007004:	b29b      	uxth	r3, r3
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	b29a      	uxth	r2, r3
 800700c:	89fb      	ldrh	r3, [r7, #14]
 800700e:	4313      	orrs	r3, r2
 8007010:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	89fa      	ldrh	r2, [r7, #14]
 8007018:	60da      	str	r2, [r3, #12]
 800701a:	e04f      	b.n	80070bc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	77bb      	strb	r3, [r7, #30]
 8007020:	e04c      	b.n	80070bc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007022:	7ffb      	ldrb	r3, [r7, #31]
 8007024:	2b08      	cmp	r3, #8
 8007026:	d828      	bhi.n	800707a <UART_SetConfig+0x45e>
 8007028:	a201      	add	r2, pc, #4	; (adr r2, 8007030 <UART_SetConfig+0x414>)
 800702a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702e:	bf00      	nop
 8007030:	08007055 	.word	0x08007055
 8007034:	0800705d 	.word	0x0800705d
 8007038:	08007065 	.word	0x08007065
 800703c:	0800707b 	.word	0x0800707b
 8007040:	0800706b 	.word	0x0800706b
 8007044:	0800707b 	.word	0x0800707b
 8007048:	0800707b 	.word	0x0800707b
 800704c:	0800707b 	.word	0x0800707b
 8007050:	08007073 	.word	0x08007073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007054:	f7fc ff56 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 8007058:	61b8      	str	r0, [r7, #24]
        break;
 800705a:	e013      	b.n	8007084 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800705c:	f7fc ff66 	bl	8003f2c <HAL_RCC_GetPCLK2Freq>
 8007060:	61b8      	str	r0, [r7, #24]
        break;
 8007062:	e00f      	b.n	8007084 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007064:	4b1d      	ldr	r3, [pc, #116]	; (80070dc <UART_SetConfig+0x4c0>)
 8007066:	61bb      	str	r3, [r7, #24]
        break;
 8007068:	e00c      	b.n	8007084 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800706a:	f7fc fe5d 	bl	8003d28 <HAL_RCC_GetSysClockFreq>
 800706e:	61b8      	str	r0, [r7, #24]
        break;
 8007070:	e008      	b.n	8007084 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007076:	61bb      	str	r3, [r7, #24]
        break;
 8007078:	e004      	b.n	8007084 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800707a:	2300      	movs	r3, #0
 800707c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	77bb      	strb	r3, [r7, #30]
        break;
 8007082:	bf00      	nop
    }

    if (pclk != 0U)
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d018      	beq.n	80070bc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	085a      	lsrs	r2, r3, #1
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	441a      	add	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	fbb2 f3f3 	udiv	r3, r2, r3
 800709c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b0f      	cmp	r3, #15
 80070a2:	d909      	bls.n	80070b8 <UART_SetConfig+0x49c>
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070aa:	d205      	bcs.n	80070b8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	60da      	str	r2, [r3, #12]
 80070b6:	e001      	b.n	80070bc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80070c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3720      	adds	r7, #32
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	40007c00 	.word	0x40007c00
 80070d8:	40023800 	.word	0x40023800
 80070dc:	00f42400 	.word	0x00f42400

080070e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	f003 0301 	and.w	r3, r3, #1
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00a      	beq.n	800710a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	f003 0304 	and.w	r3, r3, #4
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00a      	beq.n	800714e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007152:	f003 0308 	and.w	r3, r3, #8
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00a      	beq.n	8007170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	430a      	orrs	r2, r1
 800716e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007174:	f003 0310 	and.w	r3, r3, #16
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00a      	beq.n	8007192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007196:	f003 0320 	and.w	r3, r3, #32
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d01a      	beq.n	80071f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071de:	d10a      	bne.n	80071f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00a      	beq.n	8007218 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	605a      	str	r2, [r3, #4]
  }
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af02      	add	r7, sp, #8
 800722a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007234:	f7fb fc9c 	bl	8002b70 <HAL_GetTick>
 8007238:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0308 	and.w	r3, r3, #8
 8007244:	2b08      	cmp	r3, #8
 8007246:	d10e      	bne.n	8007266 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007248:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f82d 	bl	80072b6 <UART_WaitOnFlagUntilTimeout>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e023      	b.n	80072ae <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0304 	and.w	r3, r3, #4
 8007270:	2b04      	cmp	r3, #4
 8007272:	d10e      	bne.n	8007292 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f817 	bl	80072b6 <UART_WaitOnFlagUntilTimeout>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e00d      	b.n	80072ae <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2220      	movs	r2, #32
 8007296:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2220      	movs	r2, #32
 800729c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b09c      	sub	sp, #112	; 0x70
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	60f8      	str	r0, [r7, #12]
 80072be:	60b9      	str	r1, [r7, #8]
 80072c0:	603b      	str	r3, [r7, #0]
 80072c2:	4613      	mov	r3, r2
 80072c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072c6:	e0a5      	b.n	8007414 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072ce:	f000 80a1 	beq.w	8007414 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072d2:	f7fb fc4d 	bl	8002b70 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80072de:	429a      	cmp	r2, r3
 80072e0:	d302      	bcc.n	80072e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80072e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d13e      	bne.n	8007366 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072f0:	e853 3f00 	ldrex	r3, [r3]
 80072f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072fc:	667b      	str	r3, [r7, #100]	; 0x64
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007306:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007308:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800730c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800730e:	e841 2300 	strex	r3, r2, [r1]
 8007312:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1e6      	bne.n	80072e8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3308      	adds	r3, #8
 8007320:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800732a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732c:	f023 0301 	bic.w	r3, r3, #1
 8007330:	663b      	str	r3, [r7, #96]	; 0x60
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3308      	adds	r3, #8
 8007338:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800733a:	64ba      	str	r2, [r7, #72]	; 0x48
 800733c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007340:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007342:	e841 2300 	strex	r3, r2, [r1]
 8007346:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1e5      	bne.n	800731a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2220      	movs	r2, #32
 8007352:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2220      	movs	r2, #32
 8007358:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e067      	b.n	8007436 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0304 	and.w	r3, r3, #4
 8007370:	2b00      	cmp	r3, #0
 8007372:	d04f      	beq.n	8007414 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800737e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007382:	d147      	bne.n	8007414 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800738c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007396:	e853 3f00 	ldrex	r3, [r3]
 800739a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	461a      	mov	r2, r3
 80073aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ac:	637b      	str	r3, [r7, #52]	; 0x34
 80073ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073b4:	e841 2300 	strex	r3, r2, [r1]
 80073b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e6      	bne.n	800738e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3308      	adds	r3, #8
 80073c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	e853 3f00 	ldrex	r3, [r3]
 80073ce:	613b      	str	r3, [r7, #16]
   return(result);
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f023 0301 	bic.w	r3, r3, #1
 80073d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3308      	adds	r3, #8
 80073de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073e0:	623a      	str	r2, [r7, #32]
 80073e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e4:	69f9      	ldr	r1, [r7, #28]
 80073e6:	6a3a      	ldr	r2, [r7, #32]
 80073e8:	e841 2300 	strex	r3, r2, [r1]
 80073ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1e5      	bne.n	80073c0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2220      	movs	r2, #32
 80073f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2220      	movs	r2, #32
 80073fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2220      	movs	r2, #32
 8007404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e010      	b.n	8007436 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	69da      	ldr	r2, [r3, #28]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	4013      	ands	r3, r2
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	429a      	cmp	r2, r3
 8007422:	bf0c      	ite	eq
 8007424:	2301      	moveq	r3, #1
 8007426:	2300      	movne	r3, #0
 8007428:	b2db      	uxtb	r3, r3
 800742a:	461a      	mov	r2, r3
 800742c:	79fb      	ldrb	r3, [r7, #7]
 800742e:	429a      	cmp	r2, r3
 8007430:	f43f af4a 	beq.w	80072c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3770      	adds	r7, #112	; 0x70
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
	...

08007440 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007440:	b480      	push	{r7}
 8007442:	b097      	sub	sp, #92	; 0x5c
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	4613      	mov	r3, r2
 800744c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	88fa      	ldrh	r2, [r7, #6]
 8007458:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	88fa      	ldrh	r2, [r7, #6]
 8007460:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007472:	d10e      	bne.n	8007492 <UART_Start_Receive_IT+0x52>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d105      	bne.n	8007488 <UART_Start_Receive_IT+0x48>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007482:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007486:	e02d      	b.n	80074e4 <UART_Start_Receive_IT+0xa4>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	22ff      	movs	r2, #255	; 0xff
 800748c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007490:	e028      	b.n	80074e4 <UART_Start_Receive_IT+0xa4>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10d      	bne.n	80074b6 <UART_Start_Receive_IT+0x76>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d104      	bne.n	80074ac <UART_Start_Receive_IT+0x6c>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	22ff      	movs	r2, #255	; 0xff
 80074a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074aa:	e01b      	b.n	80074e4 <UART_Start_Receive_IT+0xa4>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	227f      	movs	r2, #127	; 0x7f
 80074b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074b4:	e016      	b.n	80074e4 <UART_Start_Receive_IT+0xa4>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074be:	d10d      	bne.n	80074dc <UART_Start_Receive_IT+0x9c>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d104      	bne.n	80074d2 <UART_Start_Receive_IT+0x92>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	227f      	movs	r2, #127	; 0x7f
 80074cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074d0:	e008      	b.n	80074e4 <UART_Start_Receive_IT+0xa4>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	223f      	movs	r2, #63	; 0x3f
 80074d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074da:	e003      	b.n	80074e4 <UART_Start_Receive_IT+0xa4>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2222      	movs	r2, #34	; 0x22
 80074f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3308      	adds	r3, #8
 80074f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074fc:	e853 3f00 	ldrex	r3, [r3]
 8007500:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007504:	f043 0301 	orr.w	r3, r3, #1
 8007508:	657b      	str	r3, [r7, #84]	; 0x54
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3308      	adds	r3, #8
 8007510:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007512:	64ba      	str	r2, [r7, #72]	; 0x48
 8007514:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007516:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007518:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800751a:	e841 2300 	strex	r3, r2, [r1]
 800751e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1e5      	bne.n	80074f2 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800752e:	d107      	bne.n	8007540 <UART_Start_Receive_IT+0x100>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d103      	bne.n	8007540 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4a24      	ldr	r2, [pc, #144]	; (80075cc <UART_Start_Receive_IT+0x18c>)
 800753c:	665a      	str	r2, [r3, #100]	; 0x64
 800753e:	e002      	b.n	8007546 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	4a23      	ldr	r2, [pc, #140]	; (80075d0 <UART_Start_Receive_IT+0x190>)
 8007544:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d019      	beq.n	800758a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755e:	e853 3f00 	ldrex	r3, [r3]
 8007562:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007566:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800756a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	461a      	mov	r2, r3
 8007572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007574:	637b      	str	r3, [r7, #52]	; 0x34
 8007576:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007578:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800757a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800757c:	e841 2300 	strex	r3, r2, [r1]
 8007580:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1e6      	bne.n	8007556 <UART_Start_Receive_IT+0x116>
 8007588:	e018      	b.n	80075bc <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	e853 3f00 	ldrex	r3, [r3]
 8007596:	613b      	str	r3, [r7, #16]
   return(result);
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	f043 0320 	orr.w	r3, r3, #32
 800759e:	653b      	str	r3, [r7, #80]	; 0x50
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075a8:	623b      	str	r3, [r7, #32]
 80075aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ac:	69f9      	ldr	r1, [r7, #28]
 80075ae:	6a3a      	ldr	r2, [r7, #32]
 80075b0:	e841 2300 	strex	r3, r2, [r1]
 80075b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1e6      	bne.n	800758a <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	375c      	adds	r7, #92	; 0x5c
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	08007877 	.word	0x08007877
 80075d0:	0800771b 	.word	0x0800771b

080075d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b095      	sub	sp, #84	; 0x54
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075fa:	643b      	str	r3, [r7, #64]	; 0x40
 80075fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007600:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007602:	e841 2300 	strex	r3, r2, [r1]
 8007606:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1e6      	bne.n	80075dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3308      	adds	r3, #8
 8007614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	61fb      	str	r3, [r7, #28]
   return(result);
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	f023 0301 	bic.w	r3, r3, #1
 8007624:	64bb      	str	r3, [r7, #72]	; 0x48
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3308      	adds	r3, #8
 800762c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800762e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007630:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007632:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007636:	e841 2300 	strex	r3, r2, [r1]
 800763a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1e5      	bne.n	800760e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007646:	2b01      	cmp	r3, #1
 8007648:	d118      	bne.n	800767c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	e853 3f00 	ldrex	r3, [r3]
 8007656:	60bb      	str	r3, [r7, #8]
   return(result);
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	f023 0310 	bic.w	r3, r3, #16
 800765e:	647b      	str	r3, [r7, #68]	; 0x44
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	461a      	mov	r2, r3
 8007666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007668:	61bb      	str	r3, [r7, #24]
 800766a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766c:	6979      	ldr	r1, [r7, #20]
 800766e:	69ba      	ldr	r2, [r7, #24]
 8007670:	e841 2300 	strex	r3, r2, [r1]
 8007674:	613b      	str	r3, [r7, #16]
   return(result);
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1e6      	bne.n	800764a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2220      	movs	r2, #32
 8007680:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800768e:	bf00      	nop
 8007690:	3754      	adds	r7, #84	; 0x54
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f7ff fa8f 	bl	8006bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076be:	bf00      	nop
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b088      	sub	sp, #32
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	e853 3f00 	ldrex	r3, [r3]
 80076da:	60bb      	str	r3, [r7, #8]
   return(result);
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076e2:	61fb      	str	r3, [r7, #28]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	461a      	mov	r2, r3
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	61bb      	str	r3, [r7, #24]
 80076ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f0:	6979      	ldr	r1, [r7, #20]
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	e841 2300 	strex	r3, r2, [r1]
 80076f8:	613b      	str	r3, [r7, #16]
   return(result);
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1e6      	bne.n	80076ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2220      	movs	r2, #32
 8007704:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7ff fa5b 	bl	8006bc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007712:	bf00      	nop
 8007714:	3720      	adds	r7, #32
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b096      	sub	sp, #88	; 0x58
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007728:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007730:	2b22      	cmp	r3, #34	; 0x22
 8007732:	f040 8094 	bne.w	800785e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007740:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007744:	b2d9      	uxtb	r1, r3
 8007746:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800774a:	b2da      	uxtb	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007750:	400a      	ands	r2, r1
 8007752:	b2d2      	uxtb	r2, r2
 8007754:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007766:	b29b      	uxth	r3, r3
 8007768:	3b01      	subs	r3, #1
 800776a:	b29a      	uxth	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007778:	b29b      	uxth	r3, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d177      	bne.n	800786e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007786:	e853 3f00 	ldrex	r3, [r3]
 800778a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800778c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007792:	653b      	str	r3, [r7, #80]	; 0x50
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	461a      	mov	r2, r3
 800779a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800779c:	647b      	str	r3, [r7, #68]	; 0x44
 800779e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077a4:	e841 2300 	strex	r3, r2, [r1]
 80077a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1e6      	bne.n	800777e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3308      	adds	r3, #8
 80077b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	623b      	str	r3, [r7, #32]
   return(result);
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	f023 0301 	bic.w	r3, r3, #1
 80077c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3308      	adds	r3, #8
 80077ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077d0:	633a      	str	r2, [r7, #48]	; 0x30
 80077d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077d8:	e841 2300 	strex	r3, r2, [r1]
 80077dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e5      	bne.n	80077b0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2220      	movs	r2, #32
 80077e8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d12e      	bne.n	8007856 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	60fb      	str	r3, [r7, #12]
   return(result);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f023 0310 	bic.w	r3, r3, #16
 8007812:	64bb      	str	r3, [r7, #72]	; 0x48
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	461a      	mov	r2, r3
 800781a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800781c:	61fb      	str	r3, [r7, #28]
 800781e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007820:	69b9      	ldr	r1, [r7, #24]
 8007822:	69fa      	ldr	r2, [r7, #28]
 8007824:	e841 2300 	strex	r3, r2, [r1]
 8007828:	617b      	str	r3, [r7, #20]
   return(result);
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e6      	bne.n	80077fe <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	f003 0310 	and.w	r3, r3, #16
 800783a:	2b10      	cmp	r3, #16
 800783c:	d103      	bne.n	8007846 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2210      	movs	r2, #16
 8007844:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7ff f9ce 	bl	8006bf0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007854:	e00b      	b.n	800786e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7fa fa8a 	bl	8001d70 <HAL_UART_RxCpltCallback>
}
 800785c:	e007      	b.n	800786e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	699a      	ldr	r2, [r3, #24]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f042 0208 	orr.w	r2, r2, #8
 800786c:	619a      	str	r2, [r3, #24]
}
 800786e:	bf00      	nop
 8007870:	3758      	adds	r7, #88	; 0x58
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b096      	sub	sp, #88	; 0x58
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007884:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800788c:	2b22      	cmp	r3, #34	; 0x22
 800788e:	f040 8094 	bne.w	80079ba <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80078a2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80078a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80078aa:	4013      	ands	r3, r2
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b6:	1c9a      	adds	r2, r3, #2
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	3b01      	subs	r3, #1
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d177      	bne.n	80079ca <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e2:	e853 3f00 	ldrex	r3, [r3]
 80078e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	461a      	mov	r2, r3
 80078f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078f8:	643b      	str	r3, [r7, #64]	; 0x40
 80078fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007900:	e841 2300 	strex	r3, r2, [r1]
 8007904:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1e6      	bne.n	80078da <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3308      	adds	r3, #8
 8007912:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	e853 3f00 	ldrex	r3, [r3]
 800791a:	61fb      	str	r3, [r7, #28]
   return(result);
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	f023 0301 	bic.w	r3, r3, #1
 8007922:	64bb      	str	r3, [r7, #72]	; 0x48
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	3308      	adds	r3, #8
 800792a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800792c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800792e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007930:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007934:	e841 2300 	strex	r3, r2, [r1]
 8007938:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1e5      	bne.n	800790c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2220      	movs	r2, #32
 8007944:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007950:	2b01      	cmp	r3, #1
 8007952:	d12e      	bne.n	80079b2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	e853 3f00 	ldrex	r3, [r3]
 8007966:	60bb      	str	r3, [r7, #8]
   return(result);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	f023 0310 	bic.w	r3, r3, #16
 800796e:	647b      	str	r3, [r7, #68]	; 0x44
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	461a      	mov	r2, r3
 8007976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007978:	61bb      	str	r3, [r7, #24]
 800797a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797c:	6979      	ldr	r1, [r7, #20]
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	e841 2300 	strex	r3, r2, [r1]
 8007984:	613b      	str	r3, [r7, #16]
   return(result);
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1e6      	bne.n	800795a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	69db      	ldr	r3, [r3, #28]
 8007992:	f003 0310 	and.w	r3, r3, #16
 8007996:	2b10      	cmp	r3, #16
 8007998:	d103      	bne.n	80079a2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2210      	movs	r2, #16
 80079a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7ff f920 	bl	8006bf0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079b0:	e00b      	b.n	80079ca <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7fa f9dc 	bl	8001d70 <HAL_UART_RxCpltCallback>
}
 80079b8:	e007      	b.n	80079ca <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	699a      	ldr	r2, [r3, #24]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f042 0208 	orr.w	r2, r2, #8
 80079c8:	619a      	str	r2, [r3, #24]
}
 80079ca:	bf00      	nop
 80079cc:	3758      	adds	r7, #88	; 0x58
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
	...

080079d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079d4:	b084      	sub	sp, #16
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b084      	sub	sp, #16
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	f107 001c 	add.w	r0, r7, #28
 80079e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d120      	bne.n	8007a2e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	4b20      	ldr	r3, [pc, #128]	; (8007a80 <USB_CoreInit+0xac>)
 80079fe:	4013      	ands	r3, r2
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d105      	bne.n	8007a22 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fa92 	bl	8007f4c <USB_CoreReset>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	73fb      	strb	r3, [r7, #15]
 8007a2c:	e010      	b.n	8007a50 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fa86 	bl	8007f4c <USB_CoreReset>
 8007a40:	4603      	mov	r3, r0
 8007a42:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d10b      	bne.n	8007a6e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f043 0206 	orr.w	r2, r3, #6
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f043 0220 	orr.w	r2, r3, #32
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a7a:	b004      	add	sp, #16
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	ffbdffbf 	.word	0xffbdffbf

08007a84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f023 0201 	bic.w	r2, r3, #1
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b084      	sub	sp, #16
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	460b      	mov	r3, r1
 8007ab0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ac2:	78fb      	ldrb	r3, [r7, #3]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d115      	bne.n	8007af4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ad4:	2001      	movs	r0, #1
 8007ad6:	f7fb f857 	bl	8002b88 <HAL_Delay>
      ms++;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3301      	adds	r3, #1
 8007ade:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fa25 	bl	8007f30 <USB_GetMode>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d01e      	beq.n	8007b2a <USB_SetCurrentMode+0x84>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2b31      	cmp	r3, #49	; 0x31
 8007af0:	d9f0      	bls.n	8007ad4 <USB_SetCurrentMode+0x2e>
 8007af2:	e01a      	b.n	8007b2a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007af4:	78fb      	ldrb	r3, [r7, #3]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d115      	bne.n	8007b26 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b06:	2001      	movs	r0, #1
 8007b08:	f7fb f83e 	bl	8002b88 <HAL_Delay>
      ms++;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fa0c 	bl	8007f30 <USB_GetMode>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d005      	beq.n	8007b2a <USB_SetCurrentMode+0x84>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2b31      	cmp	r3, #49	; 0x31
 8007b22:	d9f0      	bls.n	8007b06 <USB_SetCurrentMode+0x60>
 8007b24:	e001      	b.n	8007b2a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e005      	b.n	8007b36 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2b32      	cmp	r3, #50	; 0x32
 8007b2e:	d101      	bne.n	8007b34 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e000      	b.n	8007b36 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
	...

08007b40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b40:	b084      	sub	sp, #16
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b086      	sub	sp, #24
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007b4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	613b      	str	r3, [r7, #16]
 8007b5e:	e009      	b.n	8007b74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	3340      	adds	r3, #64	; 0x40
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	3301      	adds	r3, #1
 8007b72:	613b      	str	r3, [r7, #16]
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	2b0e      	cmp	r3, #14
 8007b78:	d9f2      	bls.n	8007b60 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d11c      	bne.n	8007bba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b8e:	f043 0302 	orr.w	r3, r3, #2
 8007b92:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b98:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	e005      	b.n	8007bc6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bcc:	461a      	mov	r2, r3
 8007bce:	2300      	movs	r3, #0
 8007bd0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd8:	4619      	mov	r1, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be0:	461a      	mov	r2, r3
 8007be2:	680b      	ldr	r3, [r1, #0]
 8007be4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d10c      	bne.n	8007c06 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d104      	bne.n	8007bfc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f961 	bl	8007ebc <USB_SetDevSpeed>
 8007bfa:	e008      	b.n	8007c0e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f95c 	bl	8007ebc <USB_SetDevSpeed>
 8007c04:	e003      	b.n	8007c0e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c06:	2103      	movs	r1, #3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f957 	bl	8007ebc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c0e:	2110      	movs	r1, #16
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f8f3 	bl	8007dfc <USB_FlushTxFifo>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d001      	beq.n	8007c20 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f91d 	bl	8007e60 <USB_FlushRxFifo>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c36:	461a      	mov	r2, r3
 8007c38:	2300      	movs	r3, #0
 8007c3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c42:	461a      	mov	r2, r3
 8007c44:	2300      	movs	r3, #0
 8007c46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c4e:	461a      	mov	r2, r3
 8007c50:	2300      	movs	r3, #0
 8007c52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c54:	2300      	movs	r3, #0
 8007c56:	613b      	str	r3, [r7, #16]
 8007c58:	e043      	b.n	8007ce2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	015a      	lsls	r2, r3, #5
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c70:	d118      	bne.n	8007ca4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10a      	bne.n	8007c8e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	015a      	lsls	r2, r3, #5
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c84:	461a      	mov	r2, r3
 8007c86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c8a:	6013      	str	r3, [r2, #0]
 8007c8c:	e013      	b.n	8007cb6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	015a      	lsls	r2, r3, #5
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ca0:	6013      	str	r3, [r2, #0]
 8007ca2:	e008      	b.n	8007cb6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	015a      	lsls	r2, r3, #5
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	4413      	add	r3, r2
 8007cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007cda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	613b      	str	r3, [r7, #16]
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d3b7      	bcc.n	8007c5a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cea:	2300      	movs	r3, #0
 8007cec:	613b      	str	r3, [r7, #16]
 8007cee:	e043      	b.n	8007d78 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d06:	d118      	bne.n	8007d3a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10a      	bne.n	8007d24 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	015a      	lsls	r2, r3, #5
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	4413      	add	r3, r2
 8007d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d20:	6013      	str	r3, [r2, #0]
 8007d22:	e013      	b.n	8007d4c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d30:	461a      	mov	r2, r3
 8007d32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	e008      	b.n	8007d4c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	015a      	lsls	r2, r3, #5
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	4413      	add	r3, r2
 8007d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d46:	461a      	mov	r2, r3
 8007d48:	2300      	movs	r3, #0
 8007d4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	015a      	lsls	r2, r3, #5
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	4413      	add	r3, r2
 8007d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d58:	461a      	mov	r2, r3
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	3301      	adds	r3, #1
 8007d76:	613b      	str	r3, [r7, #16]
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d3b7      	bcc.n	8007cf0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007da0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d105      	bne.n	8007db4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	f043 0210 	orr.w	r2, r3, #16
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	699a      	ldr	r2, [r3, #24]
 8007db8:	4b0e      	ldr	r3, [pc, #56]	; (8007df4 <USB_DevInit+0x2b4>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d005      	beq.n	8007dd2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	f043 0208 	orr.w	r2, r3, #8
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d105      	bne.n	8007de4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	699a      	ldr	r2, [r3, #24]
 8007ddc:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <USB_DevInit+0x2b8>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3718      	adds	r7, #24
 8007dea:	46bd      	mov	sp, r7
 8007dec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007df0:	b004      	add	sp, #16
 8007df2:	4770      	bx	lr
 8007df4:	803c3800 	.word	0x803c3800
 8007df8:	40000004 	.word	0x40000004

08007dfc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e06:	2300      	movs	r3, #0
 8007e08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	4a12      	ldr	r2, [pc, #72]	; (8007e5c <USB_FlushTxFifo+0x60>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d901      	bls.n	8007e1a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e01a      	b.n	8007e50 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	daf3      	bge.n	8007e0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007e22:	2300      	movs	r3, #0
 8007e24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	019b      	lsls	r3, r3, #6
 8007e2a:	f043 0220 	orr.w	r2, r3, #32
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	3301      	adds	r3, #1
 8007e36:	60fb      	str	r3, [r7, #12]
 8007e38:	4a08      	ldr	r2, [pc, #32]	; (8007e5c <USB_FlushTxFifo+0x60>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d901      	bls.n	8007e42 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e006      	b.n	8007e50 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	f003 0320 	and.w	r3, r3, #32
 8007e4a:	2b20      	cmp	r3, #32
 8007e4c:	d0f1      	beq.n	8007e32 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	00030d40 	.word	0x00030d40

08007e60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	60fb      	str	r3, [r7, #12]
 8007e72:	4a11      	ldr	r2, [pc, #68]	; (8007eb8 <USB_FlushRxFifo+0x58>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d901      	bls.n	8007e7c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e017      	b.n	8007eac <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	daf3      	bge.n	8007e6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e84:	2300      	movs	r3, #0
 8007e86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2210      	movs	r2, #16
 8007e8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	3301      	adds	r3, #1
 8007e92:	60fb      	str	r3, [r7, #12]
 8007e94:	4a08      	ldr	r2, [pc, #32]	; (8007eb8 <USB_FlushRxFifo+0x58>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d901      	bls.n	8007e9e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e006      	b.n	8007eac <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	f003 0310 	and.w	r3, r3, #16
 8007ea6:	2b10      	cmp	r3, #16
 8007ea8:	d0f1      	beq.n	8007e8e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3714      	adds	r7, #20
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	00030d40 	.word	0x00030d40

08007ebc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	78fb      	ldrb	r3, [r7, #3]
 8007ed6:	68f9      	ldr	r1, [r7, #12]
 8007ed8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007edc:	4313      	orrs	r3, r2
 8007ede:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3714      	adds	r7, #20
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b085      	sub	sp, #20
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f08:	f023 0303 	bic.w	r3, r3, #3
 8007f0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f1c:	f043 0302 	orr.w	r3, r3, #2
 8007f20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	695b      	ldr	r3, [r3, #20]
 8007f3c:	f003 0301 	and.w	r3, r3, #1
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f54:	2300      	movs	r3, #0
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	60fb      	str	r3, [r7, #12]
 8007f5e:	4a13      	ldr	r2, [pc, #76]	; (8007fac <USB_CoreReset+0x60>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d901      	bls.n	8007f68 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e01a      	b.n	8007f9e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	daf3      	bge.n	8007f58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	f043 0201 	orr.w	r2, r3, #1
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	3301      	adds	r3, #1
 8007f84:	60fb      	str	r3, [r7, #12]
 8007f86:	4a09      	ldr	r2, [pc, #36]	; (8007fac <USB_CoreReset+0x60>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d901      	bls.n	8007f90 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e006      	b.n	8007f9e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d0f1      	beq.n	8007f80 <USB_CoreReset+0x34>

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	00030d40 	.word	0x00030d40

08007fb0 <__errno>:
 8007fb0:	4b01      	ldr	r3, [pc, #4]	; (8007fb8 <__errno+0x8>)
 8007fb2:	6818      	ldr	r0, [r3, #0]
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	20000058 	.word	0x20000058

08007fbc <__libc_init_array>:
 8007fbc:	b570      	push	{r4, r5, r6, lr}
 8007fbe:	4d0d      	ldr	r5, [pc, #52]	; (8007ff4 <__libc_init_array+0x38>)
 8007fc0:	4c0d      	ldr	r4, [pc, #52]	; (8007ff8 <__libc_init_array+0x3c>)
 8007fc2:	1b64      	subs	r4, r4, r5
 8007fc4:	10a4      	asrs	r4, r4, #2
 8007fc6:	2600      	movs	r6, #0
 8007fc8:	42a6      	cmp	r6, r4
 8007fca:	d109      	bne.n	8007fe0 <__libc_init_array+0x24>
 8007fcc:	4d0b      	ldr	r5, [pc, #44]	; (8007ffc <__libc_init_array+0x40>)
 8007fce:	4c0c      	ldr	r4, [pc, #48]	; (8008000 <__libc_init_array+0x44>)
 8007fd0:	f004 ffae 	bl	800cf30 <_init>
 8007fd4:	1b64      	subs	r4, r4, r5
 8007fd6:	10a4      	asrs	r4, r4, #2
 8007fd8:	2600      	movs	r6, #0
 8007fda:	42a6      	cmp	r6, r4
 8007fdc:	d105      	bne.n	8007fea <__libc_init_array+0x2e>
 8007fde:	bd70      	pop	{r4, r5, r6, pc}
 8007fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fe4:	4798      	blx	r3
 8007fe6:	3601      	adds	r6, #1
 8007fe8:	e7ee      	b.n	8007fc8 <__libc_init_array+0xc>
 8007fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fee:	4798      	blx	r3
 8007ff0:	3601      	adds	r6, #1
 8007ff2:	e7f2      	b.n	8007fda <__libc_init_array+0x1e>
 8007ff4:	0800d4ac 	.word	0x0800d4ac
 8007ff8:	0800d4ac 	.word	0x0800d4ac
 8007ffc:	0800d4ac 	.word	0x0800d4ac
 8008000:	0800d4b0 	.word	0x0800d4b0

08008004 <memcpy>:
 8008004:	440a      	add	r2, r1
 8008006:	4291      	cmp	r1, r2
 8008008:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800800c:	d100      	bne.n	8008010 <memcpy+0xc>
 800800e:	4770      	bx	lr
 8008010:	b510      	push	{r4, lr}
 8008012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008016:	f803 4f01 	strb.w	r4, [r3, #1]!
 800801a:	4291      	cmp	r1, r2
 800801c:	d1f9      	bne.n	8008012 <memcpy+0xe>
 800801e:	bd10      	pop	{r4, pc}

08008020 <memset>:
 8008020:	4402      	add	r2, r0
 8008022:	4603      	mov	r3, r0
 8008024:	4293      	cmp	r3, r2
 8008026:	d100      	bne.n	800802a <memset+0xa>
 8008028:	4770      	bx	lr
 800802a:	f803 1b01 	strb.w	r1, [r3], #1
 800802e:	e7f9      	b.n	8008024 <memset+0x4>

08008030 <__cvt>:
 8008030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008032:	ed2d 8b02 	vpush	{d8}
 8008036:	eeb0 8b40 	vmov.f64	d8, d0
 800803a:	b085      	sub	sp, #20
 800803c:	4617      	mov	r7, r2
 800803e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008040:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008042:	ee18 2a90 	vmov	r2, s17
 8008046:	f025 0520 	bic.w	r5, r5, #32
 800804a:	2a00      	cmp	r2, #0
 800804c:	bfb6      	itet	lt
 800804e:	222d      	movlt	r2, #45	; 0x2d
 8008050:	2200      	movge	r2, #0
 8008052:	eeb1 8b40 	vneglt.f64	d8, d0
 8008056:	2d46      	cmp	r5, #70	; 0x46
 8008058:	460c      	mov	r4, r1
 800805a:	701a      	strb	r2, [r3, #0]
 800805c:	d004      	beq.n	8008068 <__cvt+0x38>
 800805e:	2d45      	cmp	r5, #69	; 0x45
 8008060:	d100      	bne.n	8008064 <__cvt+0x34>
 8008062:	3401      	adds	r4, #1
 8008064:	2102      	movs	r1, #2
 8008066:	e000      	b.n	800806a <__cvt+0x3a>
 8008068:	2103      	movs	r1, #3
 800806a:	ab03      	add	r3, sp, #12
 800806c:	9301      	str	r3, [sp, #4]
 800806e:	ab02      	add	r3, sp, #8
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	4622      	mov	r2, r4
 8008074:	4633      	mov	r3, r6
 8008076:	eeb0 0b48 	vmov.f64	d0, d8
 800807a:	f001 fde1 	bl	8009c40 <_dtoa_r>
 800807e:	2d47      	cmp	r5, #71	; 0x47
 8008080:	d109      	bne.n	8008096 <__cvt+0x66>
 8008082:	07fb      	lsls	r3, r7, #31
 8008084:	d407      	bmi.n	8008096 <__cvt+0x66>
 8008086:	9b03      	ldr	r3, [sp, #12]
 8008088:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800808a:	1a1b      	subs	r3, r3, r0
 800808c:	6013      	str	r3, [r2, #0]
 800808e:	b005      	add	sp, #20
 8008090:	ecbd 8b02 	vpop	{d8}
 8008094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008096:	2d46      	cmp	r5, #70	; 0x46
 8008098:	eb00 0204 	add.w	r2, r0, r4
 800809c:	d10c      	bne.n	80080b8 <__cvt+0x88>
 800809e:	7803      	ldrb	r3, [r0, #0]
 80080a0:	2b30      	cmp	r3, #48	; 0x30
 80080a2:	d107      	bne.n	80080b4 <__cvt+0x84>
 80080a4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80080a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ac:	bf1c      	itt	ne
 80080ae:	f1c4 0401 	rsbne	r4, r4, #1
 80080b2:	6034      	strne	r4, [r6, #0]
 80080b4:	6833      	ldr	r3, [r6, #0]
 80080b6:	441a      	add	r2, r3
 80080b8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80080bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c0:	bf08      	it	eq
 80080c2:	9203      	streq	r2, [sp, #12]
 80080c4:	2130      	movs	r1, #48	; 0x30
 80080c6:	9b03      	ldr	r3, [sp, #12]
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d2dc      	bcs.n	8008086 <__cvt+0x56>
 80080cc:	1c5c      	adds	r4, r3, #1
 80080ce:	9403      	str	r4, [sp, #12]
 80080d0:	7019      	strb	r1, [r3, #0]
 80080d2:	e7f8      	b.n	80080c6 <__cvt+0x96>

080080d4 <__exponent>:
 80080d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080d6:	4603      	mov	r3, r0
 80080d8:	2900      	cmp	r1, #0
 80080da:	bfb8      	it	lt
 80080dc:	4249      	neglt	r1, r1
 80080de:	f803 2b02 	strb.w	r2, [r3], #2
 80080e2:	bfb4      	ite	lt
 80080e4:	222d      	movlt	r2, #45	; 0x2d
 80080e6:	222b      	movge	r2, #43	; 0x2b
 80080e8:	2909      	cmp	r1, #9
 80080ea:	7042      	strb	r2, [r0, #1]
 80080ec:	dd2a      	ble.n	8008144 <__exponent+0x70>
 80080ee:	f10d 0407 	add.w	r4, sp, #7
 80080f2:	46a4      	mov	ip, r4
 80080f4:	270a      	movs	r7, #10
 80080f6:	46a6      	mov	lr, r4
 80080f8:	460a      	mov	r2, r1
 80080fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80080fe:	fb07 1516 	mls	r5, r7, r6, r1
 8008102:	3530      	adds	r5, #48	; 0x30
 8008104:	2a63      	cmp	r2, #99	; 0x63
 8008106:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800810a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800810e:	4631      	mov	r1, r6
 8008110:	dcf1      	bgt.n	80080f6 <__exponent+0x22>
 8008112:	3130      	adds	r1, #48	; 0x30
 8008114:	f1ae 0502 	sub.w	r5, lr, #2
 8008118:	f804 1c01 	strb.w	r1, [r4, #-1]
 800811c:	1c44      	adds	r4, r0, #1
 800811e:	4629      	mov	r1, r5
 8008120:	4561      	cmp	r1, ip
 8008122:	d30a      	bcc.n	800813a <__exponent+0x66>
 8008124:	f10d 0209 	add.w	r2, sp, #9
 8008128:	eba2 020e 	sub.w	r2, r2, lr
 800812c:	4565      	cmp	r5, ip
 800812e:	bf88      	it	hi
 8008130:	2200      	movhi	r2, #0
 8008132:	4413      	add	r3, r2
 8008134:	1a18      	subs	r0, r3, r0
 8008136:	b003      	add	sp, #12
 8008138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800813a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800813e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008142:	e7ed      	b.n	8008120 <__exponent+0x4c>
 8008144:	2330      	movs	r3, #48	; 0x30
 8008146:	3130      	adds	r1, #48	; 0x30
 8008148:	7083      	strb	r3, [r0, #2]
 800814a:	70c1      	strb	r1, [r0, #3]
 800814c:	1d03      	adds	r3, r0, #4
 800814e:	e7f1      	b.n	8008134 <__exponent+0x60>

08008150 <_printf_float>:
 8008150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008154:	b08b      	sub	sp, #44	; 0x2c
 8008156:	460c      	mov	r4, r1
 8008158:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800815c:	4616      	mov	r6, r2
 800815e:	461f      	mov	r7, r3
 8008160:	4605      	mov	r5, r0
 8008162:	f002 fe5f 	bl	800ae24 <_localeconv_r>
 8008166:	f8d0 b000 	ldr.w	fp, [r0]
 800816a:	4658      	mov	r0, fp
 800816c:	f7f8 f868 	bl	8000240 <strlen>
 8008170:	2300      	movs	r3, #0
 8008172:	9308      	str	r3, [sp, #32]
 8008174:	f8d8 3000 	ldr.w	r3, [r8]
 8008178:	f894 9018 	ldrb.w	r9, [r4, #24]
 800817c:	6822      	ldr	r2, [r4, #0]
 800817e:	3307      	adds	r3, #7
 8008180:	f023 0307 	bic.w	r3, r3, #7
 8008184:	f103 0108 	add.w	r1, r3, #8
 8008188:	f8c8 1000 	str.w	r1, [r8]
 800818c:	4682      	mov	sl, r0
 800818e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008192:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8008196:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80083f8 <_printf_float+0x2a8>
 800819a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800819e:	eeb0 6bc0 	vabs.f64	d6, d0
 80081a2:	eeb4 6b47 	vcmp.f64	d6, d7
 80081a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081aa:	dd24      	ble.n	80081f6 <_printf_float+0xa6>
 80081ac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80081b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081b4:	d502      	bpl.n	80081bc <_printf_float+0x6c>
 80081b6:	232d      	movs	r3, #45	; 0x2d
 80081b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081bc:	4b90      	ldr	r3, [pc, #576]	; (8008400 <_printf_float+0x2b0>)
 80081be:	4891      	ldr	r0, [pc, #580]	; (8008404 <_printf_float+0x2b4>)
 80081c0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80081c4:	bf94      	ite	ls
 80081c6:	4698      	movls	r8, r3
 80081c8:	4680      	movhi	r8, r0
 80081ca:	2303      	movs	r3, #3
 80081cc:	6123      	str	r3, [r4, #16]
 80081ce:	f022 0204 	bic.w	r2, r2, #4
 80081d2:	2300      	movs	r3, #0
 80081d4:	6022      	str	r2, [r4, #0]
 80081d6:	9304      	str	r3, [sp, #16]
 80081d8:	9700      	str	r7, [sp, #0]
 80081da:	4633      	mov	r3, r6
 80081dc:	aa09      	add	r2, sp, #36	; 0x24
 80081de:	4621      	mov	r1, r4
 80081e0:	4628      	mov	r0, r5
 80081e2:	f000 f9d3 	bl	800858c <_printf_common>
 80081e6:	3001      	adds	r0, #1
 80081e8:	f040 808a 	bne.w	8008300 <_printf_float+0x1b0>
 80081ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081f0:	b00b      	add	sp, #44	; 0x2c
 80081f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f6:	eeb4 0b40 	vcmp.f64	d0, d0
 80081fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081fe:	d709      	bvc.n	8008214 <_printf_float+0xc4>
 8008200:	ee10 3a90 	vmov	r3, s1
 8008204:	2b00      	cmp	r3, #0
 8008206:	bfbc      	itt	lt
 8008208:	232d      	movlt	r3, #45	; 0x2d
 800820a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800820e:	487e      	ldr	r0, [pc, #504]	; (8008408 <_printf_float+0x2b8>)
 8008210:	4b7e      	ldr	r3, [pc, #504]	; (800840c <_printf_float+0x2bc>)
 8008212:	e7d5      	b.n	80081c0 <_printf_float+0x70>
 8008214:	6863      	ldr	r3, [r4, #4]
 8008216:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800821a:	9104      	str	r1, [sp, #16]
 800821c:	1c59      	adds	r1, r3, #1
 800821e:	d13c      	bne.n	800829a <_printf_float+0x14a>
 8008220:	2306      	movs	r3, #6
 8008222:	6063      	str	r3, [r4, #4]
 8008224:	2300      	movs	r3, #0
 8008226:	9303      	str	r3, [sp, #12]
 8008228:	ab08      	add	r3, sp, #32
 800822a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800822e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008232:	ab07      	add	r3, sp, #28
 8008234:	6861      	ldr	r1, [r4, #4]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	6022      	str	r2, [r4, #0]
 800823a:	f10d 031b 	add.w	r3, sp, #27
 800823e:	4628      	mov	r0, r5
 8008240:	f7ff fef6 	bl	8008030 <__cvt>
 8008244:	9b04      	ldr	r3, [sp, #16]
 8008246:	9907      	ldr	r1, [sp, #28]
 8008248:	2b47      	cmp	r3, #71	; 0x47
 800824a:	4680      	mov	r8, r0
 800824c:	d108      	bne.n	8008260 <_printf_float+0x110>
 800824e:	1cc8      	adds	r0, r1, #3
 8008250:	db02      	blt.n	8008258 <_printf_float+0x108>
 8008252:	6863      	ldr	r3, [r4, #4]
 8008254:	4299      	cmp	r1, r3
 8008256:	dd41      	ble.n	80082dc <_printf_float+0x18c>
 8008258:	f1a9 0902 	sub.w	r9, r9, #2
 800825c:	fa5f f989 	uxtb.w	r9, r9
 8008260:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008264:	d820      	bhi.n	80082a8 <_printf_float+0x158>
 8008266:	3901      	subs	r1, #1
 8008268:	464a      	mov	r2, r9
 800826a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800826e:	9107      	str	r1, [sp, #28]
 8008270:	f7ff ff30 	bl	80080d4 <__exponent>
 8008274:	9a08      	ldr	r2, [sp, #32]
 8008276:	9004      	str	r0, [sp, #16]
 8008278:	1813      	adds	r3, r2, r0
 800827a:	2a01      	cmp	r2, #1
 800827c:	6123      	str	r3, [r4, #16]
 800827e:	dc02      	bgt.n	8008286 <_printf_float+0x136>
 8008280:	6822      	ldr	r2, [r4, #0]
 8008282:	07d2      	lsls	r2, r2, #31
 8008284:	d501      	bpl.n	800828a <_printf_float+0x13a>
 8008286:	3301      	adds	r3, #1
 8008288:	6123      	str	r3, [r4, #16]
 800828a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d0a2      	beq.n	80081d8 <_printf_float+0x88>
 8008292:	232d      	movs	r3, #45	; 0x2d
 8008294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008298:	e79e      	b.n	80081d8 <_printf_float+0x88>
 800829a:	9904      	ldr	r1, [sp, #16]
 800829c:	2947      	cmp	r1, #71	; 0x47
 800829e:	d1c1      	bne.n	8008224 <_printf_float+0xd4>
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1bf      	bne.n	8008224 <_printf_float+0xd4>
 80082a4:	2301      	movs	r3, #1
 80082a6:	e7bc      	b.n	8008222 <_printf_float+0xd2>
 80082a8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80082ac:	d118      	bne.n	80082e0 <_printf_float+0x190>
 80082ae:	2900      	cmp	r1, #0
 80082b0:	6863      	ldr	r3, [r4, #4]
 80082b2:	dd0b      	ble.n	80082cc <_printf_float+0x17c>
 80082b4:	6121      	str	r1, [r4, #16]
 80082b6:	b913      	cbnz	r3, 80082be <_printf_float+0x16e>
 80082b8:	6822      	ldr	r2, [r4, #0]
 80082ba:	07d0      	lsls	r0, r2, #31
 80082bc:	d502      	bpl.n	80082c4 <_printf_float+0x174>
 80082be:	3301      	adds	r3, #1
 80082c0:	440b      	add	r3, r1
 80082c2:	6123      	str	r3, [r4, #16]
 80082c4:	2300      	movs	r3, #0
 80082c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80082c8:	9304      	str	r3, [sp, #16]
 80082ca:	e7de      	b.n	800828a <_printf_float+0x13a>
 80082cc:	b913      	cbnz	r3, 80082d4 <_printf_float+0x184>
 80082ce:	6822      	ldr	r2, [r4, #0]
 80082d0:	07d2      	lsls	r2, r2, #31
 80082d2:	d501      	bpl.n	80082d8 <_printf_float+0x188>
 80082d4:	3302      	adds	r3, #2
 80082d6:	e7f4      	b.n	80082c2 <_printf_float+0x172>
 80082d8:	2301      	movs	r3, #1
 80082da:	e7f2      	b.n	80082c2 <_printf_float+0x172>
 80082dc:	f04f 0967 	mov.w	r9, #103	; 0x67
 80082e0:	9b08      	ldr	r3, [sp, #32]
 80082e2:	4299      	cmp	r1, r3
 80082e4:	db05      	blt.n	80082f2 <_printf_float+0x1a2>
 80082e6:	6823      	ldr	r3, [r4, #0]
 80082e8:	6121      	str	r1, [r4, #16]
 80082ea:	07d8      	lsls	r0, r3, #31
 80082ec:	d5ea      	bpl.n	80082c4 <_printf_float+0x174>
 80082ee:	1c4b      	adds	r3, r1, #1
 80082f0:	e7e7      	b.n	80082c2 <_printf_float+0x172>
 80082f2:	2900      	cmp	r1, #0
 80082f4:	bfd4      	ite	le
 80082f6:	f1c1 0202 	rsble	r2, r1, #2
 80082fa:	2201      	movgt	r2, #1
 80082fc:	4413      	add	r3, r2
 80082fe:	e7e0      	b.n	80082c2 <_printf_float+0x172>
 8008300:	6823      	ldr	r3, [r4, #0]
 8008302:	055a      	lsls	r2, r3, #21
 8008304:	d407      	bmi.n	8008316 <_printf_float+0x1c6>
 8008306:	6923      	ldr	r3, [r4, #16]
 8008308:	4642      	mov	r2, r8
 800830a:	4631      	mov	r1, r6
 800830c:	4628      	mov	r0, r5
 800830e:	47b8      	blx	r7
 8008310:	3001      	adds	r0, #1
 8008312:	d12a      	bne.n	800836a <_printf_float+0x21a>
 8008314:	e76a      	b.n	80081ec <_printf_float+0x9c>
 8008316:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800831a:	f240 80e2 	bls.w	80084e2 <_printf_float+0x392>
 800831e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008322:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800832a:	d133      	bne.n	8008394 <_printf_float+0x244>
 800832c:	4a38      	ldr	r2, [pc, #224]	; (8008410 <_printf_float+0x2c0>)
 800832e:	2301      	movs	r3, #1
 8008330:	4631      	mov	r1, r6
 8008332:	4628      	mov	r0, r5
 8008334:	47b8      	blx	r7
 8008336:	3001      	adds	r0, #1
 8008338:	f43f af58 	beq.w	80081ec <_printf_float+0x9c>
 800833c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008340:	429a      	cmp	r2, r3
 8008342:	db02      	blt.n	800834a <_printf_float+0x1fa>
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	07d8      	lsls	r0, r3, #31
 8008348:	d50f      	bpl.n	800836a <_printf_float+0x21a>
 800834a:	4653      	mov	r3, sl
 800834c:	465a      	mov	r2, fp
 800834e:	4631      	mov	r1, r6
 8008350:	4628      	mov	r0, r5
 8008352:	47b8      	blx	r7
 8008354:	3001      	adds	r0, #1
 8008356:	f43f af49 	beq.w	80081ec <_printf_float+0x9c>
 800835a:	f04f 0800 	mov.w	r8, #0
 800835e:	f104 091a 	add.w	r9, r4, #26
 8008362:	9b08      	ldr	r3, [sp, #32]
 8008364:	3b01      	subs	r3, #1
 8008366:	4543      	cmp	r3, r8
 8008368:	dc09      	bgt.n	800837e <_printf_float+0x22e>
 800836a:	6823      	ldr	r3, [r4, #0]
 800836c:	079b      	lsls	r3, r3, #30
 800836e:	f100 8108 	bmi.w	8008582 <_printf_float+0x432>
 8008372:	68e0      	ldr	r0, [r4, #12]
 8008374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008376:	4298      	cmp	r0, r3
 8008378:	bfb8      	it	lt
 800837a:	4618      	movlt	r0, r3
 800837c:	e738      	b.n	80081f0 <_printf_float+0xa0>
 800837e:	2301      	movs	r3, #1
 8008380:	464a      	mov	r2, r9
 8008382:	4631      	mov	r1, r6
 8008384:	4628      	mov	r0, r5
 8008386:	47b8      	blx	r7
 8008388:	3001      	adds	r0, #1
 800838a:	f43f af2f 	beq.w	80081ec <_printf_float+0x9c>
 800838e:	f108 0801 	add.w	r8, r8, #1
 8008392:	e7e6      	b.n	8008362 <_printf_float+0x212>
 8008394:	9b07      	ldr	r3, [sp, #28]
 8008396:	2b00      	cmp	r3, #0
 8008398:	dc3c      	bgt.n	8008414 <_printf_float+0x2c4>
 800839a:	4a1d      	ldr	r2, [pc, #116]	; (8008410 <_printf_float+0x2c0>)
 800839c:	2301      	movs	r3, #1
 800839e:	4631      	mov	r1, r6
 80083a0:	4628      	mov	r0, r5
 80083a2:	47b8      	blx	r7
 80083a4:	3001      	adds	r0, #1
 80083a6:	f43f af21 	beq.w	80081ec <_printf_float+0x9c>
 80083aa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	d102      	bne.n	80083b8 <_printf_float+0x268>
 80083b2:	6823      	ldr	r3, [r4, #0]
 80083b4:	07d9      	lsls	r1, r3, #31
 80083b6:	d5d8      	bpl.n	800836a <_printf_float+0x21a>
 80083b8:	4653      	mov	r3, sl
 80083ba:	465a      	mov	r2, fp
 80083bc:	4631      	mov	r1, r6
 80083be:	4628      	mov	r0, r5
 80083c0:	47b8      	blx	r7
 80083c2:	3001      	adds	r0, #1
 80083c4:	f43f af12 	beq.w	80081ec <_printf_float+0x9c>
 80083c8:	f04f 0900 	mov.w	r9, #0
 80083cc:	f104 0a1a 	add.w	sl, r4, #26
 80083d0:	9b07      	ldr	r3, [sp, #28]
 80083d2:	425b      	negs	r3, r3
 80083d4:	454b      	cmp	r3, r9
 80083d6:	dc01      	bgt.n	80083dc <_printf_float+0x28c>
 80083d8:	9b08      	ldr	r3, [sp, #32]
 80083da:	e795      	b.n	8008308 <_printf_float+0x1b8>
 80083dc:	2301      	movs	r3, #1
 80083de:	4652      	mov	r2, sl
 80083e0:	4631      	mov	r1, r6
 80083e2:	4628      	mov	r0, r5
 80083e4:	47b8      	blx	r7
 80083e6:	3001      	adds	r0, #1
 80083e8:	f43f af00 	beq.w	80081ec <_printf_float+0x9c>
 80083ec:	f109 0901 	add.w	r9, r9, #1
 80083f0:	e7ee      	b.n	80083d0 <_printf_float+0x280>
 80083f2:	bf00      	nop
 80083f4:	f3af 8000 	nop.w
 80083f8:	ffffffff 	.word	0xffffffff
 80083fc:	7fefffff 	.word	0x7fefffff
 8008400:	0800cfe0 	.word	0x0800cfe0
 8008404:	0800cfe4 	.word	0x0800cfe4
 8008408:	0800cfec 	.word	0x0800cfec
 800840c:	0800cfe8 	.word	0x0800cfe8
 8008410:	0800d3f1 	.word	0x0800d3f1
 8008414:	9a08      	ldr	r2, [sp, #32]
 8008416:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008418:	429a      	cmp	r2, r3
 800841a:	bfa8      	it	ge
 800841c:	461a      	movge	r2, r3
 800841e:	2a00      	cmp	r2, #0
 8008420:	4691      	mov	r9, r2
 8008422:	dc38      	bgt.n	8008496 <_printf_float+0x346>
 8008424:	2300      	movs	r3, #0
 8008426:	9305      	str	r3, [sp, #20]
 8008428:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800842c:	f104 021a 	add.w	r2, r4, #26
 8008430:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008432:	9905      	ldr	r1, [sp, #20]
 8008434:	9304      	str	r3, [sp, #16]
 8008436:	eba3 0309 	sub.w	r3, r3, r9
 800843a:	428b      	cmp	r3, r1
 800843c:	dc33      	bgt.n	80084a6 <_printf_float+0x356>
 800843e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008442:	429a      	cmp	r2, r3
 8008444:	db3c      	blt.n	80084c0 <_printf_float+0x370>
 8008446:	6823      	ldr	r3, [r4, #0]
 8008448:	07da      	lsls	r2, r3, #31
 800844a:	d439      	bmi.n	80084c0 <_printf_float+0x370>
 800844c:	9a08      	ldr	r2, [sp, #32]
 800844e:	9b04      	ldr	r3, [sp, #16]
 8008450:	9907      	ldr	r1, [sp, #28]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	eba2 0901 	sub.w	r9, r2, r1
 8008458:	4599      	cmp	r9, r3
 800845a:	bfa8      	it	ge
 800845c:	4699      	movge	r9, r3
 800845e:	f1b9 0f00 	cmp.w	r9, #0
 8008462:	dc35      	bgt.n	80084d0 <_printf_float+0x380>
 8008464:	f04f 0800 	mov.w	r8, #0
 8008468:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800846c:	f104 0a1a 	add.w	sl, r4, #26
 8008470:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008474:	1a9b      	subs	r3, r3, r2
 8008476:	eba3 0309 	sub.w	r3, r3, r9
 800847a:	4543      	cmp	r3, r8
 800847c:	f77f af75 	ble.w	800836a <_printf_float+0x21a>
 8008480:	2301      	movs	r3, #1
 8008482:	4652      	mov	r2, sl
 8008484:	4631      	mov	r1, r6
 8008486:	4628      	mov	r0, r5
 8008488:	47b8      	blx	r7
 800848a:	3001      	adds	r0, #1
 800848c:	f43f aeae 	beq.w	80081ec <_printf_float+0x9c>
 8008490:	f108 0801 	add.w	r8, r8, #1
 8008494:	e7ec      	b.n	8008470 <_printf_float+0x320>
 8008496:	4613      	mov	r3, r2
 8008498:	4631      	mov	r1, r6
 800849a:	4642      	mov	r2, r8
 800849c:	4628      	mov	r0, r5
 800849e:	47b8      	blx	r7
 80084a0:	3001      	adds	r0, #1
 80084a2:	d1bf      	bne.n	8008424 <_printf_float+0x2d4>
 80084a4:	e6a2      	b.n	80081ec <_printf_float+0x9c>
 80084a6:	2301      	movs	r3, #1
 80084a8:	4631      	mov	r1, r6
 80084aa:	4628      	mov	r0, r5
 80084ac:	9204      	str	r2, [sp, #16]
 80084ae:	47b8      	blx	r7
 80084b0:	3001      	adds	r0, #1
 80084b2:	f43f ae9b 	beq.w	80081ec <_printf_float+0x9c>
 80084b6:	9b05      	ldr	r3, [sp, #20]
 80084b8:	9a04      	ldr	r2, [sp, #16]
 80084ba:	3301      	adds	r3, #1
 80084bc:	9305      	str	r3, [sp, #20]
 80084be:	e7b7      	b.n	8008430 <_printf_float+0x2e0>
 80084c0:	4653      	mov	r3, sl
 80084c2:	465a      	mov	r2, fp
 80084c4:	4631      	mov	r1, r6
 80084c6:	4628      	mov	r0, r5
 80084c8:	47b8      	blx	r7
 80084ca:	3001      	adds	r0, #1
 80084cc:	d1be      	bne.n	800844c <_printf_float+0x2fc>
 80084ce:	e68d      	b.n	80081ec <_printf_float+0x9c>
 80084d0:	9a04      	ldr	r2, [sp, #16]
 80084d2:	464b      	mov	r3, r9
 80084d4:	4442      	add	r2, r8
 80084d6:	4631      	mov	r1, r6
 80084d8:	4628      	mov	r0, r5
 80084da:	47b8      	blx	r7
 80084dc:	3001      	adds	r0, #1
 80084de:	d1c1      	bne.n	8008464 <_printf_float+0x314>
 80084e0:	e684      	b.n	80081ec <_printf_float+0x9c>
 80084e2:	9a08      	ldr	r2, [sp, #32]
 80084e4:	2a01      	cmp	r2, #1
 80084e6:	dc01      	bgt.n	80084ec <_printf_float+0x39c>
 80084e8:	07db      	lsls	r3, r3, #31
 80084ea:	d537      	bpl.n	800855c <_printf_float+0x40c>
 80084ec:	2301      	movs	r3, #1
 80084ee:	4642      	mov	r2, r8
 80084f0:	4631      	mov	r1, r6
 80084f2:	4628      	mov	r0, r5
 80084f4:	47b8      	blx	r7
 80084f6:	3001      	adds	r0, #1
 80084f8:	f43f ae78 	beq.w	80081ec <_printf_float+0x9c>
 80084fc:	4653      	mov	r3, sl
 80084fe:	465a      	mov	r2, fp
 8008500:	4631      	mov	r1, r6
 8008502:	4628      	mov	r0, r5
 8008504:	47b8      	blx	r7
 8008506:	3001      	adds	r0, #1
 8008508:	f43f ae70 	beq.w	80081ec <_printf_float+0x9c>
 800850c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008510:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008518:	d01b      	beq.n	8008552 <_printf_float+0x402>
 800851a:	9b08      	ldr	r3, [sp, #32]
 800851c:	f108 0201 	add.w	r2, r8, #1
 8008520:	3b01      	subs	r3, #1
 8008522:	4631      	mov	r1, r6
 8008524:	4628      	mov	r0, r5
 8008526:	47b8      	blx	r7
 8008528:	3001      	adds	r0, #1
 800852a:	d10e      	bne.n	800854a <_printf_float+0x3fa>
 800852c:	e65e      	b.n	80081ec <_printf_float+0x9c>
 800852e:	2301      	movs	r3, #1
 8008530:	464a      	mov	r2, r9
 8008532:	4631      	mov	r1, r6
 8008534:	4628      	mov	r0, r5
 8008536:	47b8      	blx	r7
 8008538:	3001      	adds	r0, #1
 800853a:	f43f ae57 	beq.w	80081ec <_printf_float+0x9c>
 800853e:	f108 0801 	add.w	r8, r8, #1
 8008542:	9b08      	ldr	r3, [sp, #32]
 8008544:	3b01      	subs	r3, #1
 8008546:	4543      	cmp	r3, r8
 8008548:	dcf1      	bgt.n	800852e <_printf_float+0x3de>
 800854a:	9b04      	ldr	r3, [sp, #16]
 800854c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008550:	e6db      	b.n	800830a <_printf_float+0x1ba>
 8008552:	f04f 0800 	mov.w	r8, #0
 8008556:	f104 091a 	add.w	r9, r4, #26
 800855a:	e7f2      	b.n	8008542 <_printf_float+0x3f2>
 800855c:	2301      	movs	r3, #1
 800855e:	4642      	mov	r2, r8
 8008560:	e7df      	b.n	8008522 <_printf_float+0x3d2>
 8008562:	2301      	movs	r3, #1
 8008564:	464a      	mov	r2, r9
 8008566:	4631      	mov	r1, r6
 8008568:	4628      	mov	r0, r5
 800856a:	47b8      	blx	r7
 800856c:	3001      	adds	r0, #1
 800856e:	f43f ae3d 	beq.w	80081ec <_printf_float+0x9c>
 8008572:	f108 0801 	add.w	r8, r8, #1
 8008576:	68e3      	ldr	r3, [r4, #12]
 8008578:	9909      	ldr	r1, [sp, #36]	; 0x24
 800857a:	1a5b      	subs	r3, r3, r1
 800857c:	4543      	cmp	r3, r8
 800857e:	dcf0      	bgt.n	8008562 <_printf_float+0x412>
 8008580:	e6f7      	b.n	8008372 <_printf_float+0x222>
 8008582:	f04f 0800 	mov.w	r8, #0
 8008586:	f104 0919 	add.w	r9, r4, #25
 800858a:	e7f4      	b.n	8008576 <_printf_float+0x426>

0800858c <_printf_common>:
 800858c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008590:	4616      	mov	r6, r2
 8008592:	4699      	mov	r9, r3
 8008594:	688a      	ldr	r2, [r1, #8]
 8008596:	690b      	ldr	r3, [r1, #16]
 8008598:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800859c:	4293      	cmp	r3, r2
 800859e:	bfb8      	it	lt
 80085a0:	4613      	movlt	r3, r2
 80085a2:	6033      	str	r3, [r6, #0]
 80085a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085a8:	4607      	mov	r7, r0
 80085aa:	460c      	mov	r4, r1
 80085ac:	b10a      	cbz	r2, 80085b2 <_printf_common+0x26>
 80085ae:	3301      	adds	r3, #1
 80085b0:	6033      	str	r3, [r6, #0]
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	0699      	lsls	r1, r3, #26
 80085b6:	bf42      	ittt	mi
 80085b8:	6833      	ldrmi	r3, [r6, #0]
 80085ba:	3302      	addmi	r3, #2
 80085bc:	6033      	strmi	r3, [r6, #0]
 80085be:	6825      	ldr	r5, [r4, #0]
 80085c0:	f015 0506 	ands.w	r5, r5, #6
 80085c4:	d106      	bne.n	80085d4 <_printf_common+0x48>
 80085c6:	f104 0a19 	add.w	sl, r4, #25
 80085ca:	68e3      	ldr	r3, [r4, #12]
 80085cc:	6832      	ldr	r2, [r6, #0]
 80085ce:	1a9b      	subs	r3, r3, r2
 80085d0:	42ab      	cmp	r3, r5
 80085d2:	dc26      	bgt.n	8008622 <_printf_common+0x96>
 80085d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085d8:	1e13      	subs	r3, r2, #0
 80085da:	6822      	ldr	r2, [r4, #0]
 80085dc:	bf18      	it	ne
 80085de:	2301      	movne	r3, #1
 80085e0:	0692      	lsls	r2, r2, #26
 80085e2:	d42b      	bmi.n	800863c <_printf_common+0xb0>
 80085e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085e8:	4649      	mov	r1, r9
 80085ea:	4638      	mov	r0, r7
 80085ec:	47c0      	blx	r8
 80085ee:	3001      	adds	r0, #1
 80085f0:	d01e      	beq.n	8008630 <_printf_common+0xa4>
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	68e5      	ldr	r5, [r4, #12]
 80085f6:	6832      	ldr	r2, [r6, #0]
 80085f8:	f003 0306 	and.w	r3, r3, #6
 80085fc:	2b04      	cmp	r3, #4
 80085fe:	bf08      	it	eq
 8008600:	1aad      	subeq	r5, r5, r2
 8008602:	68a3      	ldr	r3, [r4, #8]
 8008604:	6922      	ldr	r2, [r4, #16]
 8008606:	bf0c      	ite	eq
 8008608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800860c:	2500      	movne	r5, #0
 800860e:	4293      	cmp	r3, r2
 8008610:	bfc4      	itt	gt
 8008612:	1a9b      	subgt	r3, r3, r2
 8008614:	18ed      	addgt	r5, r5, r3
 8008616:	2600      	movs	r6, #0
 8008618:	341a      	adds	r4, #26
 800861a:	42b5      	cmp	r5, r6
 800861c:	d11a      	bne.n	8008654 <_printf_common+0xc8>
 800861e:	2000      	movs	r0, #0
 8008620:	e008      	b.n	8008634 <_printf_common+0xa8>
 8008622:	2301      	movs	r3, #1
 8008624:	4652      	mov	r2, sl
 8008626:	4649      	mov	r1, r9
 8008628:	4638      	mov	r0, r7
 800862a:	47c0      	blx	r8
 800862c:	3001      	adds	r0, #1
 800862e:	d103      	bne.n	8008638 <_printf_common+0xac>
 8008630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008638:	3501      	adds	r5, #1
 800863a:	e7c6      	b.n	80085ca <_printf_common+0x3e>
 800863c:	18e1      	adds	r1, r4, r3
 800863e:	1c5a      	adds	r2, r3, #1
 8008640:	2030      	movs	r0, #48	; 0x30
 8008642:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008646:	4422      	add	r2, r4
 8008648:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800864c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008650:	3302      	adds	r3, #2
 8008652:	e7c7      	b.n	80085e4 <_printf_common+0x58>
 8008654:	2301      	movs	r3, #1
 8008656:	4622      	mov	r2, r4
 8008658:	4649      	mov	r1, r9
 800865a:	4638      	mov	r0, r7
 800865c:	47c0      	blx	r8
 800865e:	3001      	adds	r0, #1
 8008660:	d0e6      	beq.n	8008630 <_printf_common+0xa4>
 8008662:	3601      	adds	r6, #1
 8008664:	e7d9      	b.n	800861a <_printf_common+0x8e>
	...

08008668 <_printf_i>:
 8008668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800866c:	460c      	mov	r4, r1
 800866e:	4691      	mov	r9, r2
 8008670:	7e27      	ldrb	r7, [r4, #24]
 8008672:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008674:	2f78      	cmp	r7, #120	; 0x78
 8008676:	4680      	mov	r8, r0
 8008678:	469a      	mov	sl, r3
 800867a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800867e:	d807      	bhi.n	8008690 <_printf_i+0x28>
 8008680:	2f62      	cmp	r7, #98	; 0x62
 8008682:	d80a      	bhi.n	800869a <_printf_i+0x32>
 8008684:	2f00      	cmp	r7, #0
 8008686:	f000 80d8 	beq.w	800883a <_printf_i+0x1d2>
 800868a:	2f58      	cmp	r7, #88	; 0x58
 800868c:	f000 80a3 	beq.w	80087d6 <_printf_i+0x16e>
 8008690:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008694:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008698:	e03a      	b.n	8008710 <_printf_i+0xa8>
 800869a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800869e:	2b15      	cmp	r3, #21
 80086a0:	d8f6      	bhi.n	8008690 <_printf_i+0x28>
 80086a2:	a001      	add	r0, pc, #4	; (adr r0, 80086a8 <_printf_i+0x40>)
 80086a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80086a8:	08008701 	.word	0x08008701
 80086ac:	08008715 	.word	0x08008715
 80086b0:	08008691 	.word	0x08008691
 80086b4:	08008691 	.word	0x08008691
 80086b8:	08008691 	.word	0x08008691
 80086bc:	08008691 	.word	0x08008691
 80086c0:	08008715 	.word	0x08008715
 80086c4:	08008691 	.word	0x08008691
 80086c8:	08008691 	.word	0x08008691
 80086cc:	08008691 	.word	0x08008691
 80086d0:	08008691 	.word	0x08008691
 80086d4:	08008821 	.word	0x08008821
 80086d8:	08008745 	.word	0x08008745
 80086dc:	08008803 	.word	0x08008803
 80086e0:	08008691 	.word	0x08008691
 80086e4:	08008691 	.word	0x08008691
 80086e8:	08008843 	.word	0x08008843
 80086ec:	08008691 	.word	0x08008691
 80086f0:	08008745 	.word	0x08008745
 80086f4:	08008691 	.word	0x08008691
 80086f8:	08008691 	.word	0x08008691
 80086fc:	0800880b 	.word	0x0800880b
 8008700:	680b      	ldr	r3, [r1, #0]
 8008702:	1d1a      	adds	r2, r3, #4
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	600a      	str	r2, [r1, #0]
 8008708:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800870c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008710:	2301      	movs	r3, #1
 8008712:	e0a3      	b.n	800885c <_printf_i+0x1f4>
 8008714:	6825      	ldr	r5, [r4, #0]
 8008716:	6808      	ldr	r0, [r1, #0]
 8008718:	062e      	lsls	r6, r5, #24
 800871a:	f100 0304 	add.w	r3, r0, #4
 800871e:	d50a      	bpl.n	8008736 <_printf_i+0xce>
 8008720:	6805      	ldr	r5, [r0, #0]
 8008722:	600b      	str	r3, [r1, #0]
 8008724:	2d00      	cmp	r5, #0
 8008726:	da03      	bge.n	8008730 <_printf_i+0xc8>
 8008728:	232d      	movs	r3, #45	; 0x2d
 800872a:	426d      	negs	r5, r5
 800872c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008730:	485e      	ldr	r0, [pc, #376]	; (80088ac <_printf_i+0x244>)
 8008732:	230a      	movs	r3, #10
 8008734:	e019      	b.n	800876a <_printf_i+0x102>
 8008736:	f015 0f40 	tst.w	r5, #64	; 0x40
 800873a:	6805      	ldr	r5, [r0, #0]
 800873c:	600b      	str	r3, [r1, #0]
 800873e:	bf18      	it	ne
 8008740:	b22d      	sxthne	r5, r5
 8008742:	e7ef      	b.n	8008724 <_printf_i+0xbc>
 8008744:	680b      	ldr	r3, [r1, #0]
 8008746:	6825      	ldr	r5, [r4, #0]
 8008748:	1d18      	adds	r0, r3, #4
 800874a:	6008      	str	r0, [r1, #0]
 800874c:	0628      	lsls	r0, r5, #24
 800874e:	d501      	bpl.n	8008754 <_printf_i+0xec>
 8008750:	681d      	ldr	r5, [r3, #0]
 8008752:	e002      	b.n	800875a <_printf_i+0xf2>
 8008754:	0669      	lsls	r1, r5, #25
 8008756:	d5fb      	bpl.n	8008750 <_printf_i+0xe8>
 8008758:	881d      	ldrh	r5, [r3, #0]
 800875a:	4854      	ldr	r0, [pc, #336]	; (80088ac <_printf_i+0x244>)
 800875c:	2f6f      	cmp	r7, #111	; 0x6f
 800875e:	bf0c      	ite	eq
 8008760:	2308      	moveq	r3, #8
 8008762:	230a      	movne	r3, #10
 8008764:	2100      	movs	r1, #0
 8008766:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800876a:	6866      	ldr	r6, [r4, #4]
 800876c:	60a6      	str	r6, [r4, #8]
 800876e:	2e00      	cmp	r6, #0
 8008770:	bfa2      	ittt	ge
 8008772:	6821      	ldrge	r1, [r4, #0]
 8008774:	f021 0104 	bicge.w	r1, r1, #4
 8008778:	6021      	strge	r1, [r4, #0]
 800877a:	b90d      	cbnz	r5, 8008780 <_printf_i+0x118>
 800877c:	2e00      	cmp	r6, #0
 800877e:	d04d      	beq.n	800881c <_printf_i+0x1b4>
 8008780:	4616      	mov	r6, r2
 8008782:	fbb5 f1f3 	udiv	r1, r5, r3
 8008786:	fb03 5711 	mls	r7, r3, r1, r5
 800878a:	5dc7      	ldrb	r7, [r0, r7]
 800878c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008790:	462f      	mov	r7, r5
 8008792:	42bb      	cmp	r3, r7
 8008794:	460d      	mov	r5, r1
 8008796:	d9f4      	bls.n	8008782 <_printf_i+0x11a>
 8008798:	2b08      	cmp	r3, #8
 800879a:	d10b      	bne.n	80087b4 <_printf_i+0x14c>
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	07df      	lsls	r7, r3, #31
 80087a0:	d508      	bpl.n	80087b4 <_printf_i+0x14c>
 80087a2:	6923      	ldr	r3, [r4, #16]
 80087a4:	6861      	ldr	r1, [r4, #4]
 80087a6:	4299      	cmp	r1, r3
 80087a8:	bfde      	ittt	le
 80087aa:	2330      	movle	r3, #48	; 0x30
 80087ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087b0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80087b4:	1b92      	subs	r2, r2, r6
 80087b6:	6122      	str	r2, [r4, #16]
 80087b8:	f8cd a000 	str.w	sl, [sp]
 80087bc:	464b      	mov	r3, r9
 80087be:	aa03      	add	r2, sp, #12
 80087c0:	4621      	mov	r1, r4
 80087c2:	4640      	mov	r0, r8
 80087c4:	f7ff fee2 	bl	800858c <_printf_common>
 80087c8:	3001      	adds	r0, #1
 80087ca:	d14c      	bne.n	8008866 <_printf_i+0x1fe>
 80087cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087d0:	b004      	add	sp, #16
 80087d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d6:	4835      	ldr	r0, [pc, #212]	; (80088ac <_printf_i+0x244>)
 80087d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	680e      	ldr	r6, [r1, #0]
 80087e0:	061f      	lsls	r7, r3, #24
 80087e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80087e6:	600e      	str	r6, [r1, #0]
 80087e8:	d514      	bpl.n	8008814 <_printf_i+0x1ac>
 80087ea:	07d9      	lsls	r1, r3, #31
 80087ec:	bf44      	itt	mi
 80087ee:	f043 0320 	orrmi.w	r3, r3, #32
 80087f2:	6023      	strmi	r3, [r4, #0]
 80087f4:	b91d      	cbnz	r5, 80087fe <_printf_i+0x196>
 80087f6:	6823      	ldr	r3, [r4, #0]
 80087f8:	f023 0320 	bic.w	r3, r3, #32
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	2310      	movs	r3, #16
 8008800:	e7b0      	b.n	8008764 <_printf_i+0xfc>
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	f043 0320 	orr.w	r3, r3, #32
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	2378      	movs	r3, #120	; 0x78
 800880c:	4828      	ldr	r0, [pc, #160]	; (80088b0 <_printf_i+0x248>)
 800880e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008812:	e7e3      	b.n	80087dc <_printf_i+0x174>
 8008814:	065e      	lsls	r6, r3, #25
 8008816:	bf48      	it	mi
 8008818:	b2ad      	uxthmi	r5, r5
 800881a:	e7e6      	b.n	80087ea <_printf_i+0x182>
 800881c:	4616      	mov	r6, r2
 800881e:	e7bb      	b.n	8008798 <_printf_i+0x130>
 8008820:	680b      	ldr	r3, [r1, #0]
 8008822:	6826      	ldr	r6, [r4, #0]
 8008824:	6960      	ldr	r0, [r4, #20]
 8008826:	1d1d      	adds	r5, r3, #4
 8008828:	600d      	str	r5, [r1, #0]
 800882a:	0635      	lsls	r5, r6, #24
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	d501      	bpl.n	8008834 <_printf_i+0x1cc>
 8008830:	6018      	str	r0, [r3, #0]
 8008832:	e002      	b.n	800883a <_printf_i+0x1d2>
 8008834:	0671      	lsls	r1, r6, #25
 8008836:	d5fb      	bpl.n	8008830 <_printf_i+0x1c8>
 8008838:	8018      	strh	r0, [r3, #0]
 800883a:	2300      	movs	r3, #0
 800883c:	6123      	str	r3, [r4, #16]
 800883e:	4616      	mov	r6, r2
 8008840:	e7ba      	b.n	80087b8 <_printf_i+0x150>
 8008842:	680b      	ldr	r3, [r1, #0]
 8008844:	1d1a      	adds	r2, r3, #4
 8008846:	600a      	str	r2, [r1, #0]
 8008848:	681e      	ldr	r6, [r3, #0]
 800884a:	6862      	ldr	r2, [r4, #4]
 800884c:	2100      	movs	r1, #0
 800884e:	4630      	mov	r0, r6
 8008850:	f7f7 fcfe 	bl	8000250 <memchr>
 8008854:	b108      	cbz	r0, 800885a <_printf_i+0x1f2>
 8008856:	1b80      	subs	r0, r0, r6
 8008858:	6060      	str	r0, [r4, #4]
 800885a:	6863      	ldr	r3, [r4, #4]
 800885c:	6123      	str	r3, [r4, #16]
 800885e:	2300      	movs	r3, #0
 8008860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008864:	e7a8      	b.n	80087b8 <_printf_i+0x150>
 8008866:	6923      	ldr	r3, [r4, #16]
 8008868:	4632      	mov	r2, r6
 800886a:	4649      	mov	r1, r9
 800886c:	4640      	mov	r0, r8
 800886e:	47d0      	blx	sl
 8008870:	3001      	adds	r0, #1
 8008872:	d0ab      	beq.n	80087cc <_printf_i+0x164>
 8008874:	6823      	ldr	r3, [r4, #0]
 8008876:	079b      	lsls	r3, r3, #30
 8008878:	d413      	bmi.n	80088a2 <_printf_i+0x23a>
 800887a:	68e0      	ldr	r0, [r4, #12]
 800887c:	9b03      	ldr	r3, [sp, #12]
 800887e:	4298      	cmp	r0, r3
 8008880:	bfb8      	it	lt
 8008882:	4618      	movlt	r0, r3
 8008884:	e7a4      	b.n	80087d0 <_printf_i+0x168>
 8008886:	2301      	movs	r3, #1
 8008888:	4632      	mov	r2, r6
 800888a:	4649      	mov	r1, r9
 800888c:	4640      	mov	r0, r8
 800888e:	47d0      	blx	sl
 8008890:	3001      	adds	r0, #1
 8008892:	d09b      	beq.n	80087cc <_printf_i+0x164>
 8008894:	3501      	adds	r5, #1
 8008896:	68e3      	ldr	r3, [r4, #12]
 8008898:	9903      	ldr	r1, [sp, #12]
 800889a:	1a5b      	subs	r3, r3, r1
 800889c:	42ab      	cmp	r3, r5
 800889e:	dcf2      	bgt.n	8008886 <_printf_i+0x21e>
 80088a0:	e7eb      	b.n	800887a <_printf_i+0x212>
 80088a2:	2500      	movs	r5, #0
 80088a4:	f104 0619 	add.w	r6, r4, #25
 80088a8:	e7f5      	b.n	8008896 <_printf_i+0x22e>
 80088aa:	bf00      	nop
 80088ac:	0800cff0 	.word	0x0800cff0
 80088b0:	0800d001 	.word	0x0800d001

080088b4 <_scanf_float>:
 80088b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b8:	b087      	sub	sp, #28
 80088ba:	4617      	mov	r7, r2
 80088bc:	9303      	str	r3, [sp, #12]
 80088be:	688b      	ldr	r3, [r1, #8]
 80088c0:	1e5a      	subs	r2, r3, #1
 80088c2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80088c6:	bf83      	ittte	hi
 80088c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80088cc:	195b      	addhi	r3, r3, r5
 80088ce:	9302      	strhi	r3, [sp, #8]
 80088d0:	2300      	movls	r3, #0
 80088d2:	bf86      	itte	hi
 80088d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80088d8:	608b      	strhi	r3, [r1, #8]
 80088da:	9302      	strls	r3, [sp, #8]
 80088dc:	680b      	ldr	r3, [r1, #0]
 80088de:	468b      	mov	fp, r1
 80088e0:	2500      	movs	r5, #0
 80088e2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80088e6:	f84b 3b1c 	str.w	r3, [fp], #28
 80088ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80088ee:	4680      	mov	r8, r0
 80088f0:	460c      	mov	r4, r1
 80088f2:	465e      	mov	r6, fp
 80088f4:	46aa      	mov	sl, r5
 80088f6:	46a9      	mov	r9, r5
 80088f8:	9501      	str	r5, [sp, #4]
 80088fa:	68a2      	ldr	r2, [r4, #8]
 80088fc:	b152      	cbz	r2, 8008914 <_scanf_float+0x60>
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	2b4e      	cmp	r3, #78	; 0x4e
 8008904:	d864      	bhi.n	80089d0 <_scanf_float+0x11c>
 8008906:	2b40      	cmp	r3, #64	; 0x40
 8008908:	d83c      	bhi.n	8008984 <_scanf_float+0xd0>
 800890a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800890e:	b2c8      	uxtb	r0, r1
 8008910:	280e      	cmp	r0, #14
 8008912:	d93a      	bls.n	800898a <_scanf_float+0xd6>
 8008914:	f1b9 0f00 	cmp.w	r9, #0
 8008918:	d003      	beq.n	8008922 <_scanf_float+0x6e>
 800891a:	6823      	ldr	r3, [r4, #0]
 800891c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008920:	6023      	str	r3, [r4, #0]
 8008922:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008926:	f1ba 0f01 	cmp.w	sl, #1
 800892a:	f200 8113 	bhi.w	8008b54 <_scanf_float+0x2a0>
 800892e:	455e      	cmp	r6, fp
 8008930:	f200 8105 	bhi.w	8008b3e <_scanf_float+0x28a>
 8008934:	2501      	movs	r5, #1
 8008936:	4628      	mov	r0, r5
 8008938:	b007      	add	sp, #28
 800893a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800893e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008942:	2a0d      	cmp	r2, #13
 8008944:	d8e6      	bhi.n	8008914 <_scanf_float+0x60>
 8008946:	a101      	add	r1, pc, #4	; (adr r1, 800894c <_scanf_float+0x98>)
 8008948:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800894c:	08008a8b 	.word	0x08008a8b
 8008950:	08008915 	.word	0x08008915
 8008954:	08008915 	.word	0x08008915
 8008958:	08008915 	.word	0x08008915
 800895c:	08008aeb 	.word	0x08008aeb
 8008960:	08008ac3 	.word	0x08008ac3
 8008964:	08008915 	.word	0x08008915
 8008968:	08008915 	.word	0x08008915
 800896c:	08008a99 	.word	0x08008a99
 8008970:	08008915 	.word	0x08008915
 8008974:	08008915 	.word	0x08008915
 8008978:	08008915 	.word	0x08008915
 800897c:	08008915 	.word	0x08008915
 8008980:	08008a51 	.word	0x08008a51
 8008984:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008988:	e7db      	b.n	8008942 <_scanf_float+0x8e>
 800898a:	290e      	cmp	r1, #14
 800898c:	d8c2      	bhi.n	8008914 <_scanf_float+0x60>
 800898e:	a001      	add	r0, pc, #4	; (adr r0, 8008994 <_scanf_float+0xe0>)
 8008990:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008994:	08008a43 	.word	0x08008a43
 8008998:	08008915 	.word	0x08008915
 800899c:	08008a43 	.word	0x08008a43
 80089a0:	08008ad7 	.word	0x08008ad7
 80089a4:	08008915 	.word	0x08008915
 80089a8:	080089f1 	.word	0x080089f1
 80089ac:	08008a2d 	.word	0x08008a2d
 80089b0:	08008a2d 	.word	0x08008a2d
 80089b4:	08008a2d 	.word	0x08008a2d
 80089b8:	08008a2d 	.word	0x08008a2d
 80089bc:	08008a2d 	.word	0x08008a2d
 80089c0:	08008a2d 	.word	0x08008a2d
 80089c4:	08008a2d 	.word	0x08008a2d
 80089c8:	08008a2d 	.word	0x08008a2d
 80089cc:	08008a2d 	.word	0x08008a2d
 80089d0:	2b6e      	cmp	r3, #110	; 0x6e
 80089d2:	d809      	bhi.n	80089e8 <_scanf_float+0x134>
 80089d4:	2b60      	cmp	r3, #96	; 0x60
 80089d6:	d8b2      	bhi.n	800893e <_scanf_float+0x8a>
 80089d8:	2b54      	cmp	r3, #84	; 0x54
 80089da:	d077      	beq.n	8008acc <_scanf_float+0x218>
 80089dc:	2b59      	cmp	r3, #89	; 0x59
 80089de:	d199      	bne.n	8008914 <_scanf_float+0x60>
 80089e0:	2d07      	cmp	r5, #7
 80089e2:	d197      	bne.n	8008914 <_scanf_float+0x60>
 80089e4:	2508      	movs	r5, #8
 80089e6:	e029      	b.n	8008a3c <_scanf_float+0x188>
 80089e8:	2b74      	cmp	r3, #116	; 0x74
 80089ea:	d06f      	beq.n	8008acc <_scanf_float+0x218>
 80089ec:	2b79      	cmp	r3, #121	; 0x79
 80089ee:	e7f6      	b.n	80089de <_scanf_float+0x12a>
 80089f0:	6821      	ldr	r1, [r4, #0]
 80089f2:	05c8      	lsls	r0, r1, #23
 80089f4:	d51a      	bpl.n	8008a2c <_scanf_float+0x178>
 80089f6:	9b02      	ldr	r3, [sp, #8]
 80089f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80089fc:	6021      	str	r1, [r4, #0]
 80089fe:	f109 0901 	add.w	r9, r9, #1
 8008a02:	b11b      	cbz	r3, 8008a0c <_scanf_float+0x158>
 8008a04:	3b01      	subs	r3, #1
 8008a06:	3201      	adds	r2, #1
 8008a08:	9302      	str	r3, [sp, #8]
 8008a0a:	60a2      	str	r2, [r4, #8]
 8008a0c:	68a3      	ldr	r3, [r4, #8]
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	60a3      	str	r3, [r4, #8]
 8008a12:	6923      	ldr	r3, [r4, #16]
 8008a14:	3301      	adds	r3, #1
 8008a16:	6123      	str	r3, [r4, #16]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	607b      	str	r3, [r7, #4]
 8008a20:	f340 8084 	ble.w	8008b2c <_scanf_float+0x278>
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	3301      	adds	r3, #1
 8008a28:	603b      	str	r3, [r7, #0]
 8008a2a:	e766      	b.n	80088fa <_scanf_float+0x46>
 8008a2c:	eb1a 0f05 	cmn.w	sl, r5
 8008a30:	f47f af70 	bne.w	8008914 <_scanf_float+0x60>
 8008a34:	6822      	ldr	r2, [r4, #0]
 8008a36:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008a3a:	6022      	str	r2, [r4, #0]
 8008a3c:	f806 3b01 	strb.w	r3, [r6], #1
 8008a40:	e7e4      	b.n	8008a0c <_scanf_float+0x158>
 8008a42:	6822      	ldr	r2, [r4, #0]
 8008a44:	0610      	lsls	r0, r2, #24
 8008a46:	f57f af65 	bpl.w	8008914 <_scanf_float+0x60>
 8008a4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a4e:	e7f4      	b.n	8008a3a <_scanf_float+0x186>
 8008a50:	f1ba 0f00 	cmp.w	sl, #0
 8008a54:	d10e      	bne.n	8008a74 <_scanf_float+0x1c0>
 8008a56:	f1b9 0f00 	cmp.w	r9, #0
 8008a5a:	d10e      	bne.n	8008a7a <_scanf_float+0x1c6>
 8008a5c:	6822      	ldr	r2, [r4, #0]
 8008a5e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a62:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a66:	d108      	bne.n	8008a7a <_scanf_float+0x1c6>
 8008a68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a6c:	6022      	str	r2, [r4, #0]
 8008a6e:	f04f 0a01 	mov.w	sl, #1
 8008a72:	e7e3      	b.n	8008a3c <_scanf_float+0x188>
 8008a74:	f1ba 0f02 	cmp.w	sl, #2
 8008a78:	d055      	beq.n	8008b26 <_scanf_float+0x272>
 8008a7a:	2d01      	cmp	r5, #1
 8008a7c:	d002      	beq.n	8008a84 <_scanf_float+0x1d0>
 8008a7e:	2d04      	cmp	r5, #4
 8008a80:	f47f af48 	bne.w	8008914 <_scanf_float+0x60>
 8008a84:	3501      	adds	r5, #1
 8008a86:	b2ed      	uxtb	r5, r5
 8008a88:	e7d8      	b.n	8008a3c <_scanf_float+0x188>
 8008a8a:	f1ba 0f01 	cmp.w	sl, #1
 8008a8e:	f47f af41 	bne.w	8008914 <_scanf_float+0x60>
 8008a92:	f04f 0a02 	mov.w	sl, #2
 8008a96:	e7d1      	b.n	8008a3c <_scanf_float+0x188>
 8008a98:	b97d      	cbnz	r5, 8008aba <_scanf_float+0x206>
 8008a9a:	f1b9 0f00 	cmp.w	r9, #0
 8008a9e:	f47f af3c 	bne.w	800891a <_scanf_float+0x66>
 8008aa2:	6822      	ldr	r2, [r4, #0]
 8008aa4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008aa8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008aac:	f47f af39 	bne.w	8008922 <_scanf_float+0x6e>
 8008ab0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ab4:	6022      	str	r2, [r4, #0]
 8008ab6:	2501      	movs	r5, #1
 8008ab8:	e7c0      	b.n	8008a3c <_scanf_float+0x188>
 8008aba:	2d03      	cmp	r5, #3
 8008abc:	d0e2      	beq.n	8008a84 <_scanf_float+0x1d0>
 8008abe:	2d05      	cmp	r5, #5
 8008ac0:	e7de      	b.n	8008a80 <_scanf_float+0x1cc>
 8008ac2:	2d02      	cmp	r5, #2
 8008ac4:	f47f af26 	bne.w	8008914 <_scanf_float+0x60>
 8008ac8:	2503      	movs	r5, #3
 8008aca:	e7b7      	b.n	8008a3c <_scanf_float+0x188>
 8008acc:	2d06      	cmp	r5, #6
 8008ace:	f47f af21 	bne.w	8008914 <_scanf_float+0x60>
 8008ad2:	2507      	movs	r5, #7
 8008ad4:	e7b2      	b.n	8008a3c <_scanf_float+0x188>
 8008ad6:	6822      	ldr	r2, [r4, #0]
 8008ad8:	0591      	lsls	r1, r2, #22
 8008ada:	f57f af1b 	bpl.w	8008914 <_scanf_float+0x60>
 8008ade:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008ae2:	6022      	str	r2, [r4, #0]
 8008ae4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ae8:	e7a8      	b.n	8008a3c <_scanf_float+0x188>
 8008aea:	6822      	ldr	r2, [r4, #0]
 8008aec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008af0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008af4:	d006      	beq.n	8008b04 <_scanf_float+0x250>
 8008af6:	0550      	lsls	r0, r2, #21
 8008af8:	f57f af0c 	bpl.w	8008914 <_scanf_float+0x60>
 8008afc:	f1b9 0f00 	cmp.w	r9, #0
 8008b00:	f43f af0f 	beq.w	8008922 <_scanf_float+0x6e>
 8008b04:	0591      	lsls	r1, r2, #22
 8008b06:	bf58      	it	pl
 8008b08:	9901      	ldrpl	r1, [sp, #4]
 8008b0a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b0e:	bf58      	it	pl
 8008b10:	eba9 0101 	subpl.w	r1, r9, r1
 8008b14:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008b18:	bf58      	it	pl
 8008b1a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008b1e:	6022      	str	r2, [r4, #0]
 8008b20:	f04f 0900 	mov.w	r9, #0
 8008b24:	e78a      	b.n	8008a3c <_scanf_float+0x188>
 8008b26:	f04f 0a03 	mov.w	sl, #3
 8008b2a:	e787      	b.n	8008a3c <_scanf_float+0x188>
 8008b2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008b30:	4639      	mov	r1, r7
 8008b32:	4640      	mov	r0, r8
 8008b34:	4798      	blx	r3
 8008b36:	2800      	cmp	r0, #0
 8008b38:	f43f aedf 	beq.w	80088fa <_scanf_float+0x46>
 8008b3c:	e6ea      	b.n	8008914 <_scanf_float+0x60>
 8008b3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b46:	463a      	mov	r2, r7
 8008b48:	4640      	mov	r0, r8
 8008b4a:	4798      	blx	r3
 8008b4c:	6923      	ldr	r3, [r4, #16]
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	6123      	str	r3, [r4, #16]
 8008b52:	e6ec      	b.n	800892e <_scanf_float+0x7a>
 8008b54:	1e6b      	subs	r3, r5, #1
 8008b56:	2b06      	cmp	r3, #6
 8008b58:	d825      	bhi.n	8008ba6 <_scanf_float+0x2f2>
 8008b5a:	2d02      	cmp	r5, #2
 8008b5c:	d836      	bhi.n	8008bcc <_scanf_float+0x318>
 8008b5e:	455e      	cmp	r6, fp
 8008b60:	f67f aee8 	bls.w	8008934 <_scanf_float+0x80>
 8008b64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b68:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b6c:	463a      	mov	r2, r7
 8008b6e:	4640      	mov	r0, r8
 8008b70:	4798      	blx	r3
 8008b72:	6923      	ldr	r3, [r4, #16]
 8008b74:	3b01      	subs	r3, #1
 8008b76:	6123      	str	r3, [r4, #16]
 8008b78:	e7f1      	b.n	8008b5e <_scanf_float+0x2aa>
 8008b7a:	9802      	ldr	r0, [sp, #8]
 8008b7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b80:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008b84:	9002      	str	r0, [sp, #8]
 8008b86:	463a      	mov	r2, r7
 8008b88:	4640      	mov	r0, r8
 8008b8a:	4798      	blx	r3
 8008b8c:	6923      	ldr	r3, [r4, #16]
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	6123      	str	r3, [r4, #16]
 8008b92:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008b96:	fa5f fa8a 	uxtb.w	sl, sl
 8008b9a:	f1ba 0f02 	cmp.w	sl, #2
 8008b9e:	d1ec      	bne.n	8008b7a <_scanf_float+0x2c6>
 8008ba0:	3d03      	subs	r5, #3
 8008ba2:	b2ed      	uxtb	r5, r5
 8008ba4:	1b76      	subs	r6, r6, r5
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	05da      	lsls	r2, r3, #23
 8008baa:	d52f      	bpl.n	8008c0c <_scanf_float+0x358>
 8008bac:	055b      	lsls	r3, r3, #21
 8008bae:	d510      	bpl.n	8008bd2 <_scanf_float+0x31e>
 8008bb0:	455e      	cmp	r6, fp
 8008bb2:	f67f aebf 	bls.w	8008934 <_scanf_float+0x80>
 8008bb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008bbe:	463a      	mov	r2, r7
 8008bc0:	4640      	mov	r0, r8
 8008bc2:	4798      	blx	r3
 8008bc4:	6923      	ldr	r3, [r4, #16]
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	6123      	str	r3, [r4, #16]
 8008bca:	e7f1      	b.n	8008bb0 <_scanf_float+0x2fc>
 8008bcc:	46aa      	mov	sl, r5
 8008bce:	9602      	str	r6, [sp, #8]
 8008bd0:	e7df      	b.n	8008b92 <_scanf_float+0x2de>
 8008bd2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008bd6:	6923      	ldr	r3, [r4, #16]
 8008bd8:	2965      	cmp	r1, #101	; 0x65
 8008bda:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008bde:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8008be2:	6123      	str	r3, [r4, #16]
 8008be4:	d00c      	beq.n	8008c00 <_scanf_float+0x34c>
 8008be6:	2945      	cmp	r1, #69	; 0x45
 8008be8:	d00a      	beq.n	8008c00 <_scanf_float+0x34c>
 8008bea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bee:	463a      	mov	r2, r7
 8008bf0:	4640      	mov	r0, r8
 8008bf2:	4798      	blx	r3
 8008bf4:	6923      	ldr	r3, [r4, #16]
 8008bf6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	1eb5      	subs	r5, r6, #2
 8008bfe:	6123      	str	r3, [r4, #16]
 8008c00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c04:	463a      	mov	r2, r7
 8008c06:	4640      	mov	r0, r8
 8008c08:	4798      	blx	r3
 8008c0a:	462e      	mov	r6, r5
 8008c0c:	6825      	ldr	r5, [r4, #0]
 8008c0e:	f015 0510 	ands.w	r5, r5, #16
 8008c12:	d14d      	bne.n	8008cb0 <_scanf_float+0x3fc>
 8008c14:	7035      	strb	r5, [r6, #0]
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c20:	d11a      	bne.n	8008c58 <_scanf_float+0x3a4>
 8008c22:	9b01      	ldr	r3, [sp, #4]
 8008c24:	454b      	cmp	r3, r9
 8008c26:	eba3 0209 	sub.w	r2, r3, r9
 8008c2a:	d122      	bne.n	8008c72 <_scanf_float+0x3be>
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	4659      	mov	r1, fp
 8008c30:	4640      	mov	r0, r8
 8008c32:	f000 fecb 	bl	80099cc <_strtod_r>
 8008c36:	9b03      	ldr	r3, [sp, #12]
 8008c38:	6821      	ldr	r1, [r4, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f011 0f02 	tst.w	r1, #2
 8008c40:	f103 0204 	add.w	r2, r3, #4
 8008c44:	d020      	beq.n	8008c88 <_scanf_float+0x3d4>
 8008c46:	9903      	ldr	r1, [sp, #12]
 8008c48:	600a      	str	r2, [r1, #0]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	ed83 0b00 	vstr	d0, [r3]
 8008c50:	68e3      	ldr	r3, [r4, #12]
 8008c52:	3301      	adds	r3, #1
 8008c54:	60e3      	str	r3, [r4, #12]
 8008c56:	e66e      	b.n	8008936 <_scanf_float+0x82>
 8008c58:	9b04      	ldr	r3, [sp, #16]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d0e6      	beq.n	8008c2c <_scanf_float+0x378>
 8008c5e:	9905      	ldr	r1, [sp, #20]
 8008c60:	230a      	movs	r3, #10
 8008c62:	462a      	mov	r2, r5
 8008c64:	3101      	adds	r1, #1
 8008c66:	4640      	mov	r0, r8
 8008c68:	f000 ff3a 	bl	8009ae0 <_strtol_r>
 8008c6c:	9b04      	ldr	r3, [sp, #16]
 8008c6e:	9e05      	ldr	r6, [sp, #20]
 8008c70:	1ac2      	subs	r2, r0, r3
 8008c72:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008c76:	429e      	cmp	r6, r3
 8008c78:	bf28      	it	cs
 8008c7a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008c7e:	490d      	ldr	r1, [pc, #52]	; (8008cb4 <_scanf_float+0x400>)
 8008c80:	4630      	mov	r0, r6
 8008c82:	f000 f821 	bl	8008cc8 <siprintf>
 8008c86:	e7d1      	b.n	8008c2c <_scanf_float+0x378>
 8008c88:	f011 0f04 	tst.w	r1, #4
 8008c8c:	9903      	ldr	r1, [sp, #12]
 8008c8e:	600a      	str	r2, [r1, #0]
 8008c90:	d1db      	bne.n	8008c4a <_scanf_float+0x396>
 8008c92:	eeb4 0b40 	vcmp.f64	d0, d0
 8008c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c9a:	681e      	ldr	r6, [r3, #0]
 8008c9c:	d705      	bvc.n	8008caa <_scanf_float+0x3f6>
 8008c9e:	4806      	ldr	r0, [pc, #24]	; (8008cb8 <_scanf_float+0x404>)
 8008ca0:	f000 f80c 	bl	8008cbc <nanf>
 8008ca4:	ed86 0a00 	vstr	s0, [r6]
 8008ca8:	e7d2      	b.n	8008c50 <_scanf_float+0x39c>
 8008caa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008cae:	e7f9      	b.n	8008ca4 <_scanf_float+0x3f0>
 8008cb0:	2500      	movs	r5, #0
 8008cb2:	e640      	b.n	8008936 <_scanf_float+0x82>
 8008cb4:	0800d012 	.word	0x0800d012
 8008cb8:	0800d443 	.word	0x0800d443

08008cbc <nanf>:
 8008cbc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008cc4 <nanf+0x8>
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	7fc00000 	.word	0x7fc00000

08008cc8 <siprintf>:
 8008cc8:	b40e      	push	{r1, r2, r3}
 8008cca:	b500      	push	{lr}
 8008ccc:	b09c      	sub	sp, #112	; 0x70
 8008cce:	ab1d      	add	r3, sp, #116	; 0x74
 8008cd0:	9002      	str	r0, [sp, #8]
 8008cd2:	9006      	str	r0, [sp, #24]
 8008cd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008cd8:	4809      	ldr	r0, [pc, #36]	; (8008d00 <siprintf+0x38>)
 8008cda:	9107      	str	r1, [sp, #28]
 8008cdc:	9104      	str	r1, [sp, #16]
 8008cde:	4909      	ldr	r1, [pc, #36]	; (8008d04 <siprintf+0x3c>)
 8008ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ce4:	9105      	str	r1, [sp, #20]
 8008ce6:	6800      	ldr	r0, [r0, #0]
 8008ce8:	9301      	str	r3, [sp, #4]
 8008cea:	a902      	add	r1, sp, #8
 8008cec:	f002 fe9c 	bl	800ba28 <_svfiprintf_r>
 8008cf0:	9b02      	ldr	r3, [sp, #8]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	701a      	strb	r2, [r3, #0]
 8008cf6:	b01c      	add	sp, #112	; 0x70
 8008cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cfc:	b003      	add	sp, #12
 8008cfe:	4770      	bx	lr
 8008d00:	20000058 	.word	0x20000058
 8008d04:	ffff0208 	.word	0xffff0208

08008d08 <siscanf>:
 8008d08:	b40e      	push	{r1, r2, r3}
 8008d0a:	b510      	push	{r4, lr}
 8008d0c:	b09f      	sub	sp, #124	; 0x7c
 8008d0e:	ac21      	add	r4, sp, #132	; 0x84
 8008d10:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008d14:	f854 2b04 	ldr.w	r2, [r4], #4
 8008d18:	9201      	str	r2, [sp, #4]
 8008d1a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008d1e:	9004      	str	r0, [sp, #16]
 8008d20:	9008      	str	r0, [sp, #32]
 8008d22:	f7f7 fa8d 	bl	8000240 <strlen>
 8008d26:	4b0c      	ldr	r3, [pc, #48]	; (8008d58 <siscanf+0x50>)
 8008d28:	9005      	str	r0, [sp, #20]
 8008d2a:	9009      	str	r0, [sp, #36]	; 0x24
 8008d2c:	930d      	str	r3, [sp, #52]	; 0x34
 8008d2e:	480b      	ldr	r0, [pc, #44]	; (8008d5c <siscanf+0x54>)
 8008d30:	9a01      	ldr	r2, [sp, #4]
 8008d32:	6800      	ldr	r0, [r0, #0]
 8008d34:	9403      	str	r4, [sp, #12]
 8008d36:	2300      	movs	r3, #0
 8008d38:	9311      	str	r3, [sp, #68]	; 0x44
 8008d3a:	9316      	str	r3, [sp, #88]	; 0x58
 8008d3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d40:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008d44:	a904      	add	r1, sp, #16
 8008d46:	4623      	mov	r3, r4
 8008d48:	f002 ffc8 	bl	800bcdc <__ssvfiscanf_r>
 8008d4c:	b01f      	add	sp, #124	; 0x7c
 8008d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d52:	b003      	add	sp, #12
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	08008d83 	.word	0x08008d83
 8008d5c:	20000058 	.word	0x20000058

08008d60 <__sread>:
 8008d60:	b510      	push	{r4, lr}
 8008d62:	460c      	mov	r4, r1
 8008d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d68:	f003 fa7c 	bl	800c264 <_read_r>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	bfab      	itete	ge
 8008d70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d72:	89a3      	ldrhlt	r3, [r4, #12]
 8008d74:	181b      	addge	r3, r3, r0
 8008d76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d7a:	bfac      	ite	ge
 8008d7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d7e:	81a3      	strhlt	r3, [r4, #12]
 8008d80:	bd10      	pop	{r4, pc}

08008d82 <__seofread>:
 8008d82:	2000      	movs	r0, #0
 8008d84:	4770      	bx	lr

08008d86 <__swrite>:
 8008d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d8a:	461f      	mov	r7, r3
 8008d8c:	898b      	ldrh	r3, [r1, #12]
 8008d8e:	05db      	lsls	r3, r3, #23
 8008d90:	4605      	mov	r5, r0
 8008d92:	460c      	mov	r4, r1
 8008d94:	4616      	mov	r6, r2
 8008d96:	d505      	bpl.n	8008da4 <__swrite+0x1e>
 8008d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f002 f844 	bl	800ae2c <_lseek_r>
 8008da4:	89a3      	ldrh	r3, [r4, #12]
 8008da6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008daa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dae:	81a3      	strh	r3, [r4, #12]
 8008db0:	4632      	mov	r2, r6
 8008db2:	463b      	mov	r3, r7
 8008db4:	4628      	mov	r0, r5
 8008db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dba:	f000 be93 	b.w	8009ae4 <_write_r>

08008dbe <__sseek>:
 8008dbe:	b510      	push	{r4, lr}
 8008dc0:	460c      	mov	r4, r1
 8008dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc6:	f002 f831 	bl	800ae2c <_lseek_r>
 8008dca:	1c43      	adds	r3, r0, #1
 8008dcc:	89a3      	ldrh	r3, [r4, #12]
 8008dce:	bf15      	itete	ne
 8008dd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008dd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008dd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008dda:	81a3      	strheq	r3, [r4, #12]
 8008ddc:	bf18      	it	ne
 8008dde:	81a3      	strhne	r3, [r4, #12]
 8008de0:	bd10      	pop	{r4, pc}

08008de2 <__sclose>:
 8008de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008de6:	f000 be8f 	b.w	8009b08 <_close_r>

08008dea <sulp>:
 8008dea:	b570      	push	{r4, r5, r6, lr}
 8008dec:	4604      	mov	r4, r0
 8008dee:	460d      	mov	r5, r1
 8008df0:	4616      	mov	r6, r2
 8008df2:	ec45 4b10 	vmov	d0, r4, r5
 8008df6:	f002 fbb1 	bl	800b55c <__ulp>
 8008dfa:	b17e      	cbz	r6, 8008e1c <sulp+0x32>
 8008dfc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008e00:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	dd09      	ble.n	8008e1c <sulp+0x32>
 8008e08:	051b      	lsls	r3, r3, #20
 8008e0a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8008e0e:	2000      	movs	r0, #0
 8008e10:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8008e14:	ec41 0b17 	vmov	d7, r0, r1
 8008e18:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008e1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008e20 <_strtod_l>:
 8008e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e24:	ed2d 8b0c 	vpush	{d8-d13}
 8008e28:	b09d      	sub	sp, #116	; 0x74
 8008e2a:	461f      	mov	r7, r3
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	9318      	str	r3, [sp, #96]	; 0x60
 8008e30:	4ba6      	ldr	r3, [pc, #664]	; (80090cc <_strtod_l+0x2ac>)
 8008e32:	9213      	str	r2, [sp, #76]	; 0x4c
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	9308      	str	r3, [sp, #32]
 8008e38:	4604      	mov	r4, r0
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	468a      	mov	sl, r1
 8008e3e:	f7f7 f9ff 	bl	8000240 <strlen>
 8008e42:	f04f 0800 	mov.w	r8, #0
 8008e46:	4605      	mov	r5, r0
 8008e48:	f04f 0900 	mov.w	r9, #0
 8008e4c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8008e50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e52:	781a      	ldrb	r2, [r3, #0]
 8008e54:	2a2b      	cmp	r2, #43	; 0x2b
 8008e56:	d04d      	beq.n	8008ef4 <_strtod_l+0xd4>
 8008e58:	d83a      	bhi.n	8008ed0 <_strtod_l+0xb0>
 8008e5a:	2a0d      	cmp	r2, #13
 8008e5c:	d833      	bhi.n	8008ec6 <_strtod_l+0xa6>
 8008e5e:	2a08      	cmp	r2, #8
 8008e60:	d833      	bhi.n	8008eca <_strtod_l+0xaa>
 8008e62:	2a00      	cmp	r2, #0
 8008e64:	d03d      	beq.n	8008ee2 <_strtod_l+0xc2>
 8008e66:	2300      	movs	r3, #0
 8008e68:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e6a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008e6c:	7833      	ldrb	r3, [r6, #0]
 8008e6e:	2b30      	cmp	r3, #48	; 0x30
 8008e70:	f040 80b6 	bne.w	8008fe0 <_strtod_l+0x1c0>
 8008e74:	7873      	ldrb	r3, [r6, #1]
 8008e76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e7a:	2b58      	cmp	r3, #88	; 0x58
 8008e7c:	d16d      	bne.n	8008f5a <_strtod_l+0x13a>
 8008e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e80:	9301      	str	r3, [sp, #4]
 8008e82:	ab18      	add	r3, sp, #96	; 0x60
 8008e84:	9702      	str	r7, [sp, #8]
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	4a91      	ldr	r2, [pc, #580]	; (80090d0 <_strtod_l+0x2b0>)
 8008e8a:	ab19      	add	r3, sp, #100	; 0x64
 8008e8c:	a917      	add	r1, sp, #92	; 0x5c
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f001 fcc0 	bl	800a814 <__gethex>
 8008e94:	f010 0507 	ands.w	r5, r0, #7
 8008e98:	4607      	mov	r7, r0
 8008e9a:	d005      	beq.n	8008ea8 <_strtod_l+0x88>
 8008e9c:	2d06      	cmp	r5, #6
 8008e9e:	d12b      	bne.n	8008ef8 <_strtod_l+0xd8>
 8008ea0:	3601      	adds	r6, #1
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	9617      	str	r6, [sp, #92]	; 0x5c
 8008ea6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ea8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f040 856e 	bne.w	800998c <_strtod_l+0xb6c>
 8008eb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eb2:	b1e3      	cbz	r3, 8008eee <_strtod_l+0xce>
 8008eb4:	ec49 8b17 	vmov	d7, r8, r9
 8008eb8:	eeb1 0b47 	vneg.f64	d0, d7
 8008ebc:	b01d      	add	sp, #116	; 0x74
 8008ebe:	ecbd 8b0c 	vpop	{d8-d13}
 8008ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec6:	2a20      	cmp	r2, #32
 8008ec8:	d1cd      	bne.n	8008e66 <_strtod_l+0x46>
 8008eca:	3301      	adds	r3, #1
 8008ecc:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ece:	e7bf      	b.n	8008e50 <_strtod_l+0x30>
 8008ed0:	2a2d      	cmp	r2, #45	; 0x2d
 8008ed2:	d1c8      	bne.n	8008e66 <_strtod_l+0x46>
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	920b      	str	r2, [sp, #44]	; 0x2c
 8008ed8:	1c5a      	adds	r2, r3, #1
 8008eda:	9217      	str	r2, [sp, #92]	; 0x5c
 8008edc:	785b      	ldrb	r3, [r3, #1]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1c3      	bne.n	8008e6a <_strtod_l+0x4a>
 8008ee2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ee4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f040 854d 	bne.w	8009988 <_strtod_l+0xb68>
 8008eee:	ec49 8b10 	vmov	d0, r8, r9
 8008ef2:	e7e3      	b.n	8008ebc <_strtod_l+0x9c>
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	e7ee      	b.n	8008ed6 <_strtod_l+0xb6>
 8008ef8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008efa:	b13a      	cbz	r2, 8008f0c <_strtod_l+0xec>
 8008efc:	2135      	movs	r1, #53	; 0x35
 8008efe:	a81a      	add	r0, sp, #104	; 0x68
 8008f00:	f002 fc38 	bl	800b774 <__copybits>
 8008f04:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f06:	4620      	mov	r0, r4
 8008f08:	f001 fffc 	bl	800af04 <_Bfree>
 8008f0c:	3d01      	subs	r5, #1
 8008f0e:	2d05      	cmp	r5, #5
 8008f10:	d807      	bhi.n	8008f22 <_strtod_l+0x102>
 8008f12:	e8df f005 	tbb	[pc, r5]
 8008f16:	0b0e      	.short	0x0b0e
 8008f18:	030e1d18 	.word	0x030e1d18
 8008f1c:	f04f 0900 	mov.w	r9, #0
 8008f20:	46c8      	mov	r8, r9
 8008f22:	073b      	lsls	r3, r7, #28
 8008f24:	d5c0      	bpl.n	8008ea8 <_strtod_l+0x88>
 8008f26:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008f2a:	e7bd      	b.n	8008ea8 <_strtod_l+0x88>
 8008f2c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8008f30:	e7f7      	b.n	8008f22 <_strtod_l+0x102>
 8008f32:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8008f36:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f38:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008f3c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008f40:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008f44:	e7ed      	b.n	8008f22 <_strtod_l+0x102>
 8008f46:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80090d4 <_strtod_l+0x2b4>
 8008f4a:	f04f 0800 	mov.w	r8, #0
 8008f4e:	e7e8      	b.n	8008f22 <_strtod_l+0x102>
 8008f50:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008f54:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008f58:	e7e3      	b.n	8008f22 <_strtod_l+0x102>
 8008f5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f5c:	1c5a      	adds	r2, r3, #1
 8008f5e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008f60:	785b      	ldrb	r3, [r3, #1]
 8008f62:	2b30      	cmp	r3, #48	; 0x30
 8008f64:	d0f9      	beq.n	8008f5a <_strtod_l+0x13a>
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d09e      	beq.n	8008ea8 <_strtod_l+0x88>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	9306      	str	r3, [sp, #24]
 8008f6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f70:	930c      	str	r3, [sp, #48]	; 0x30
 8008f72:	2300      	movs	r3, #0
 8008f74:	9304      	str	r3, [sp, #16]
 8008f76:	930a      	str	r3, [sp, #40]	; 0x28
 8008f78:	461e      	mov	r6, r3
 8008f7a:	220a      	movs	r2, #10
 8008f7c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008f7e:	f890 b000 	ldrb.w	fp, [r0]
 8008f82:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8008f86:	b2d9      	uxtb	r1, r3
 8008f88:	2909      	cmp	r1, #9
 8008f8a:	d92b      	bls.n	8008fe4 <_strtod_l+0x1c4>
 8008f8c:	9908      	ldr	r1, [sp, #32]
 8008f8e:	462a      	mov	r2, r5
 8008f90:	f003 f9cc 	bl	800c32c <strncmp>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d035      	beq.n	8009004 <_strtod_l+0x1e4>
 8008f98:	2000      	movs	r0, #0
 8008f9a:	465a      	mov	r2, fp
 8008f9c:	4633      	mov	r3, r6
 8008f9e:	4683      	mov	fp, r0
 8008fa0:	4601      	mov	r1, r0
 8008fa2:	2a65      	cmp	r2, #101	; 0x65
 8008fa4:	d001      	beq.n	8008faa <_strtod_l+0x18a>
 8008fa6:	2a45      	cmp	r2, #69	; 0x45
 8008fa8:	d118      	bne.n	8008fdc <_strtod_l+0x1bc>
 8008faa:	b91b      	cbnz	r3, 8008fb4 <_strtod_l+0x194>
 8008fac:	9b06      	ldr	r3, [sp, #24]
 8008fae:	4303      	orrs	r3, r0
 8008fb0:	d097      	beq.n	8008ee2 <_strtod_l+0xc2>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8008fb8:	f10a 0201 	add.w	r2, sl, #1
 8008fbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8008fbe:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8008fc2:	2a2b      	cmp	r2, #43	; 0x2b
 8008fc4:	d077      	beq.n	80090b6 <_strtod_l+0x296>
 8008fc6:	2a2d      	cmp	r2, #45	; 0x2d
 8008fc8:	d07d      	beq.n	80090c6 <_strtod_l+0x2a6>
 8008fca:	f04f 0e00 	mov.w	lr, #0
 8008fce:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008fd2:	2d09      	cmp	r5, #9
 8008fd4:	f240 8084 	bls.w	80090e0 <_strtod_l+0x2c0>
 8008fd8:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8008fdc:	2500      	movs	r5, #0
 8008fde:	e09f      	b.n	8009120 <_strtod_l+0x300>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	e7c3      	b.n	8008f6c <_strtod_l+0x14c>
 8008fe4:	2e08      	cmp	r6, #8
 8008fe6:	bfd5      	itete	le
 8008fe8:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8008fea:	9904      	ldrgt	r1, [sp, #16]
 8008fec:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ff0:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008ff4:	f100 0001 	add.w	r0, r0, #1
 8008ff8:	bfd4      	ite	le
 8008ffa:	930a      	strle	r3, [sp, #40]	; 0x28
 8008ffc:	9304      	strgt	r3, [sp, #16]
 8008ffe:	3601      	adds	r6, #1
 8009000:	9017      	str	r0, [sp, #92]	; 0x5c
 8009002:	e7bb      	b.n	8008f7c <_strtod_l+0x15c>
 8009004:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009006:	195a      	adds	r2, r3, r5
 8009008:	9217      	str	r2, [sp, #92]	; 0x5c
 800900a:	5d5a      	ldrb	r2, [r3, r5]
 800900c:	b3ae      	cbz	r6, 800907a <_strtod_l+0x25a>
 800900e:	4683      	mov	fp, r0
 8009010:	4633      	mov	r3, r6
 8009012:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009016:	2909      	cmp	r1, #9
 8009018:	d912      	bls.n	8009040 <_strtod_l+0x220>
 800901a:	2101      	movs	r1, #1
 800901c:	e7c1      	b.n	8008fa2 <_strtod_l+0x182>
 800901e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009020:	1c5a      	adds	r2, r3, #1
 8009022:	9217      	str	r2, [sp, #92]	; 0x5c
 8009024:	785a      	ldrb	r2, [r3, #1]
 8009026:	3001      	adds	r0, #1
 8009028:	2a30      	cmp	r2, #48	; 0x30
 800902a:	d0f8      	beq.n	800901e <_strtod_l+0x1fe>
 800902c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009030:	2b08      	cmp	r3, #8
 8009032:	f200 84b0 	bhi.w	8009996 <_strtod_l+0xb76>
 8009036:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009038:	930c      	str	r3, [sp, #48]	; 0x30
 800903a:	4683      	mov	fp, r0
 800903c:	2000      	movs	r0, #0
 800903e:	4603      	mov	r3, r0
 8009040:	3a30      	subs	r2, #48	; 0x30
 8009042:	f100 0101 	add.w	r1, r0, #1
 8009046:	d012      	beq.n	800906e <_strtod_l+0x24e>
 8009048:	448b      	add	fp, r1
 800904a:	eb00 0c03 	add.w	ip, r0, r3
 800904e:	4619      	mov	r1, r3
 8009050:	250a      	movs	r5, #10
 8009052:	4561      	cmp	r1, ip
 8009054:	d113      	bne.n	800907e <_strtod_l+0x25e>
 8009056:	1819      	adds	r1, r3, r0
 8009058:	2908      	cmp	r1, #8
 800905a:	f103 0301 	add.w	r3, r3, #1
 800905e:	4403      	add	r3, r0
 8009060:	dc1d      	bgt.n	800909e <_strtod_l+0x27e>
 8009062:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009064:	210a      	movs	r1, #10
 8009066:	fb01 2200 	mla	r2, r1, r0, r2
 800906a:	920a      	str	r2, [sp, #40]	; 0x28
 800906c:	2100      	movs	r1, #0
 800906e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009070:	1c50      	adds	r0, r2, #1
 8009072:	9017      	str	r0, [sp, #92]	; 0x5c
 8009074:	7852      	ldrb	r2, [r2, #1]
 8009076:	4608      	mov	r0, r1
 8009078:	e7cb      	b.n	8009012 <_strtod_l+0x1f2>
 800907a:	4630      	mov	r0, r6
 800907c:	e7d4      	b.n	8009028 <_strtod_l+0x208>
 800907e:	2908      	cmp	r1, #8
 8009080:	dc04      	bgt.n	800908c <_strtod_l+0x26c>
 8009082:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009084:	436f      	muls	r7, r5
 8009086:	970a      	str	r7, [sp, #40]	; 0x28
 8009088:	3101      	adds	r1, #1
 800908a:	e7e2      	b.n	8009052 <_strtod_l+0x232>
 800908c:	f101 0e01 	add.w	lr, r1, #1
 8009090:	f1be 0f10 	cmp.w	lr, #16
 8009094:	bfde      	ittt	le
 8009096:	9f04      	ldrle	r7, [sp, #16]
 8009098:	436f      	mulle	r7, r5
 800909a:	9704      	strle	r7, [sp, #16]
 800909c:	e7f4      	b.n	8009088 <_strtod_l+0x268>
 800909e:	2b10      	cmp	r3, #16
 80090a0:	bfdf      	itttt	le
 80090a2:	9804      	ldrle	r0, [sp, #16]
 80090a4:	210a      	movle	r1, #10
 80090a6:	fb01 2200 	mlale	r2, r1, r0, r2
 80090aa:	9204      	strle	r2, [sp, #16]
 80090ac:	e7de      	b.n	800906c <_strtod_l+0x24c>
 80090ae:	f04f 0b00 	mov.w	fp, #0
 80090b2:	2101      	movs	r1, #1
 80090b4:	e77a      	b.n	8008fac <_strtod_l+0x18c>
 80090b6:	f04f 0e00 	mov.w	lr, #0
 80090ba:	f10a 0202 	add.w	r2, sl, #2
 80090be:	9217      	str	r2, [sp, #92]	; 0x5c
 80090c0:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80090c4:	e783      	b.n	8008fce <_strtod_l+0x1ae>
 80090c6:	f04f 0e01 	mov.w	lr, #1
 80090ca:	e7f6      	b.n	80090ba <_strtod_l+0x29a>
 80090cc:	0800d268 	.word	0x0800d268
 80090d0:	0800d018 	.word	0x0800d018
 80090d4:	7ff00000 	.word	0x7ff00000
 80090d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80090da:	1c55      	adds	r5, r2, #1
 80090dc:	9517      	str	r5, [sp, #92]	; 0x5c
 80090de:	7852      	ldrb	r2, [r2, #1]
 80090e0:	2a30      	cmp	r2, #48	; 0x30
 80090e2:	d0f9      	beq.n	80090d8 <_strtod_l+0x2b8>
 80090e4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80090e8:	2d08      	cmp	r5, #8
 80090ea:	f63f af77 	bhi.w	8008fdc <_strtod_l+0x1bc>
 80090ee:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80090f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80090f4:	9208      	str	r2, [sp, #32]
 80090f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80090f8:	1c55      	adds	r5, r2, #1
 80090fa:	9517      	str	r5, [sp, #92]	; 0x5c
 80090fc:	7852      	ldrb	r2, [r2, #1]
 80090fe:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8009102:	2f09      	cmp	r7, #9
 8009104:	d937      	bls.n	8009176 <_strtod_l+0x356>
 8009106:	9f08      	ldr	r7, [sp, #32]
 8009108:	1bed      	subs	r5, r5, r7
 800910a:	2d08      	cmp	r5, #8
 800910c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009110:	dc02      	bgt.n	8009118 <_strtod_l+0x2f8>
 8009112:	4565      	cmp	r5, ip
 8009114:	bfa8      	it	ge
 8009116:	4665      	movge	r5, ip
 8009118:	f1be 0f00 	cmp.w	lr, #0
 800911c:	d000      	beq.n	8009120 <_strtod_l+0x300>
 800911e:	426d      	negs	r5, r5
 8009120:	2b00      	cmp	r3, #0
 8009122:	d14f      	bne.n	80091c4 <_strtod_l+0x3a4>
 8009124:	9b06      	ldr	r3, [sp, #24]
 8009126:	4303      	orrs	r3, r0
 8009128:	f47f aebe 	bne.w	8008ea8 <_strtod_l+0x88>
 800912c:	2900      	cmp	r1, #0
 800912e:	f47f aed8 	bne.w	8008ee2 <_strtod_l+0xc2>
 8009132:	2a69      	cmp	r2, #105	; 0x69
 8009134:	d027      	beq.n	8009186 <_strtod_l+0x366>
 8009136:	dc24      	bgt.n	8009182 <_strtod_l+0x362>
 8009138:	2a49      	cmp	r2, #73	; 0x49
 800913a:	d024      	beq.n	8009186 <_strtod_l+0x366>
 800913c:	2a4e      	cmp	r2, #78	; 0x4e
 800913e:	f47f aed0 	bne.w	8008ee2 <_strtod_l+0xc2>
 8009142:	499b      	ldr	r1, [pc, #620]	; (80093b0 <_strtod_l+0x590>)
 8009144:	a817      	add	r0, sp, #92	; 0x5c
 8009146:	f001 fdbd 	bl	800acc4 <__match>
 800914a:	2800      	cmp	r0, #0
 800914c:	f43f aec9 	beq.w	8008ee2 <_strtod_l+0xc2>
 8009150:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	2b28      	cmp	r3, #40	; 0x28
 8009156:	d12d      	bne.n	80091b4 <_strtod_l+0x394>
 8009158:	4996      	ldr	r1, [pc, #600]	; (80093b4 <_strtod_l+0x594>)
 800915a:	aa1a      	add	r2, sp, #104	; 0x68
 800915c:	a817      	add	r0, sp, #92	; 0x5c
 800915e:	f001 fdc5 	bl	800acec <__hexnan>
 8009162:	2805      	cmp	r0, #5
 8009164:	d126      	bne.n	80091b4 <_strtod_l+0x394>
 8009166:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009168:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800916c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009170:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009174:	e698      	b.n	8008ea8 <_strtod_l+0x88>
 8009176:	250a      	movs	r5, #10
 8009178:	fb05 250c 	mla	r5, r5, ip, r2
 800917c:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8009180:	e7b9      	b.n	80090f6 <_strtod_l+0x2d6>
 8009182:	2a6e      	cmp	r2, #110	; 0x6e
 8009184:	e7db      	b.n	800913e <_strtod_l+0x31e>
 8009186:	498c      	ldr	r1, [pc, #560]	; (80093b8 <_strtod_l+0x598>)
 8009188:	a817      	add	r0, sp, #92	; 0x5c
 800918a:	f001 fd9b 	bl	800acc4 <__match>
 800918e:	2800      	cmp	r0, #0
 8009190:	f43f aea7 	beq.w	8008ee2 <_strtod_l+0xc2>
 8009194:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009196:	4989      	ldr	r1, [pc, #548]	; (80093bc <_strtod_l+0x59c>)
 8009198:	3b01      	subs	r3, #1
 800919a:	a817      	add	r0, sp, #92	; 0x5c
 800919c:	9317      	str	r3, [sp, #92]	; 0x5c
 800919e:	f001 fd91 	bl	800acc4 <__match>
 80091a2:	b910      	cbnz	r0, 80091aa <_strtod_l+0x38a>
 80091a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091a6:	3301      	adds	r3, #1
 80091a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80091aa:	f8df 9224 	ldr.w	r9, [pc, #548]	; 80093d0 <_strtod_l+0x5b0>
 80091ae:	f04f 0800 	mov.w	r8, #0
 80091b2:	e679      	b.n	8008ea8 <_strtod_l+0x88>
 80091b4:	4882      	ldr	r0, [pc, #520]	; (80093c0 <_strtod_l+0x5a0>)
 80091b6:	f003 f867 	bl	800c288 <nan>
 80091ba:	ed8d 0b04 	vstr	d0, [sp, #16]
 80091be:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80091c2:	e671      	b.n	8008ea8 <_strtod_l+0x88>
 80091c4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80091c8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80091cc:	eba5 020b 	sub.w	r2, r5, fp
 80091d0:	2e00      	cmp	r6, #0
 80091d2:	bf08      	it	eq
 80091d4:	461e      	moveq	r6, r3
 80091d6:	2b10      	cmp	r3, #16
 80091d8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80091dc:	9206      	str	r2, [sp, #24]
 80091de:	461a      	mov	r2, r3
 80091e0:	bfa8      	it	ge
 80091e2:	2210      	movge	r2, #16
 80091e4:	2b09      	cmp	r3, #9
 80091e6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80091ea:	dd0e      	ble.n	800920a <_strtod_l+0x3ea>
 80091ec:	4975      	ldr	r1, [pc, #468]	; (80093c4 <_strtod_l+0x5a4>)
 80091ee:	eddd 7a04 	vldr	s15, [sp, #16]
 80091f2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80091f6:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80091fa:	ed9d 5b08 	vldr	d5, [sp, #32]
 80091fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009202:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009206:	ec59 8b17 	vmov	r8, r9, d7
 800920a:	2b0f      	cmp	r3, #15
 800920c:	dc37      	bgt.n	800927e <_strtod_l+0x45e>
 800920e:	9906      	ldr	r1, [sp, #24]
 8009210:	2900      	cmp	r1, #0
 8009212:	f43f ae49 	beq.w	8008ea8 <_strtod_l+0x88>
 8009216:	dd23      	ble.n	8009260 <_strtod_l+0x440>
 8009218:	2916      	cmp	r1, #22
 800921a:	dc0b      	bgt.n	8009234 <_strtod_l+0x414>
 800921c:	4b69      	ldr	r3, [pc, #420]	; (80093c4 <_strtod_l+0x5a4>)
 800921e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009222:	ed93 7b00 	vldr	d7, [r3]
 8009226:	ec49 8b16 	vmov	d6, r8, r9
 800922a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800922e:	ec59 8b17 	vmov	r8, r9, d7
 8009232:	e639      	b.n	8008ea8 <_strtod_l+0x88>
 8009234:	9806      	ldr	r0, [sp, #24]
 8009236:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800923a:	4281      	cmp	r1, r0
 800923c:	db1f      	blt.n	800927e <_strtod_l+0x45e>
 800923e:	4a61      	ldr	r2, [pc, #388]	; (80093c4 <_strtod_l+0x5a4>)
 8009240:	f1c3 030f 	rsb	r3, r3, #15
 8009244:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009248:	ed91 7b00 	vldr	d7, [r1]
 800924c:	ec49 8b16 	vmov	d6, r8, r9
 8009250:	1ac3      	subs	r3, r0, r3
 8009252:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009256:	ee27 7b06 	vmul.f64	d7, d7, d6
 800925a:	ed92 6b00 	vldr	d6, [r2]
 800925e:	e7e4      	b.n	800922a <_strtod_l+0x40a>
 8009260:	9906      	ldr	r1, [sp, #24]
 8009262:	3116      	adds	r1, #22
 8009264:	db0b      	blt.n	800927e <_strtod_l+0x45e>
 8009266:	4b57      	ldr	r3, [pc, #348]	; (80093c4 <_strtod_l+0x5a4>)
 8009268:	ebab 0505 	sub.w	r5, fp, r5
 800926c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009270:	ed95 7b00 	vldr	d7, [r5]
 8009274:	ec49 8b16 	vmov	d6, r8, r9
 8009278:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800927c:	e7d7      	b.n	800922e <_strtod_l+0x40e>
 800927e:	9906      	ldr	r1, [sp, #24]
 8009280:	1a9a      	subs	r2, r3, r2
 8009282:	440a      	add	r2, r1
 8009284:	2a00      	cmp	r2, #0
 8009286:	dd74      	ble.n	8009372 <_strtod_l+0x552>
 8009288:	f012 000f 	ands.w	r0, r2, #15
 800928c:	d00a      	beq.n	80092a4 <_strtod_l+0x484>
 800928e:	494d      	ldr	r1, [pc, #308]	; (80093c4 <_strtod_l+0x5a4>)
 8009290:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009294:	ed91 7b00 	vldr	d7, [r1]
 8009298:	ec49 8b16 	vmov	d6, r8, r9
 800929c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80092a0:	ec59 8b17 	vmov	r8, r9, d7
 80092a4:	f032 020f 	bics.w	r2, r2, #15
 80092a8:	d04f      	beq.n	800934a <_strtod_l+0x52a>
 80092aa:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80092ae:	dd22      	ble.n	80092f6 <_strtod_l+0x4d6>
 80092b0:	2500      	movs	r5, #0
 80092b2:	462e      	mov	r6, r5
 80092b4:	950a      	str	r5, [sp, #40]	; 0x28
 80092b6:	462f      	mov	r7, r5
 80092b8:	2322      	movs	r3, #34	; 0x22
 80092ba:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80093d0 <_strtod_l+0x5b0>
 80092be:	6023      	str	r3, [r4, #0]
 80092c0:	f04f 0800 	mov.w	r8, #0
 80092c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f43f adee 	beq.w	8008ea8 <_strtod_l+0x88>
 80092cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80092ce:	4620      	mov	r0, r4
 80092d0:	f001 fe18 	bl	800af04 <_Bfree>
 80092d4:	4639      	mov	r1, r7
 80092d6:	4620      	mov	r0, r4
 80092d8:	f001 fe14 	bl	800af04 <_Bfree>
 80092dc:	4631      	mov	r1, r6
 80092de:	4620      	mov	r0, r4
 80092e0:	f001 fe10 	bl	800af04 <_Bfree>
 80092e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80092e6:	4620      	mov	r0, r4
 80092e8:	f001 fe0c 	bl	800af04 <_Bfree>
 80092ec:	4629      	mov	r1, r5
 80092ee:	4620      	mov	r0, r4
 80092f0:	f001 fe08 	bl	800af04 <_Bfree>
 80092f4:	e5d8      	b.n	8008ea8 <_strtod_l+0x88>
 80092f6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80092fa:	2000      	movs	r0, #0
 80092fc:	4f32      	ldr	r7, [pc, #200]	; (80093c8 <_strtod_l+0x5a8>)
 80092fe:	1112      	asrs	r2, r2, #4
 8009300:	4601      	mov	r1, r0
 8009302:	2a01      	cmp	r2, #1
 8009304:	dc24      	bgt.n	8009350 <_strtod_l+0x530>
 8009306:	b108      	cbz	r0, 800930c <_strtod_l+0x4ec>
 8009308:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800930c:	4a2e      	ldr	r2, [pc, #184]	; (80093c8 <_strtod_l+0x5a8>)
 800930e:	482f      	ldr	r0, [pc, #188]	; (80093cc <_strtod_l+0x5ac>)
 8009310:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8009314:	ed91 7b00 	vldr	d7, [r1]
 8009318:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800931c:	ec49 8b16 	vmov	d6, r8, r9
 8009320:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009324:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009328:	9905      	ldr	r1, [sp, #20]
 800932a:	4a29      	ldr	r2, [pc, #164]	; (80093d0 <_strtod_l+0x5b0>)
 800932c:	400a      	ands	r2, r1
 800932e:	4282      	cmp	r2, r0
 8009330:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009334:	d8bc      	bhi.n	80092b0 <_strtod_l+0x490>
 8009336:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800933a:	4282      	cmp	r2, r0
 800933c:	bf86      	itte	hi
 800933e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80093d4 <_strtod_l+0x5b4>
 8009342:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8009346:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800934a:	2200      	movs	r2, #0
 800934c:	9204      	str	r2, [sp, #16]
 800934e:	e07f      	b.n	8009450 <_strtod_l+0x630>
 8009350:	f012 0f01 	tst.w	r2, #1
 8009354:	d00a      	beq.n	800936c <_strtod_l+0x54c>
 8009356:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 800935a:	ed90 7b00 	vldr	d7, [r0]
 800935e:	ed9d 6b04 	vldr	d6, [sp, #16]
 8009362:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009366:	ed8d 7b04 	vstr	d7, [sp, #16]
 800936a:	2001      	movs	r0, #1
 800936c:	3101      	adds	r1, #1
 800936e:	1052      	asrs	r2, r2, #1
 8009370:	e7c7      	b.n	8009302 <_strtod_l+0x4e2>
 8009372:	d0ea      	beq.n	800934a <_strtod_l+0x52a>
 8009374:	4252      	negs	r2, r2
 8009376:	f012 000f 	ands.w	r0, r2, #15
 800937a:	d00a      	beq.n	8009392 <_strtod_l+0x572>
 800937c:	4911      	ldr	r1, [pc, #68]	; (80093c4 <_strtod_l+0x5a4>)
 800937e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009382:	ed91 7b00 	vldr	d7, [r1]
 8009386:	ec49 8b16 	vmov	d6, r8, r9
 800938a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800938e:	ec59 8b17 	vmov	r8, r9, d7
 8009392:	1112      	asrs	r2, r2, #4
 8009394:	d0d9      	beq.n	800934a <_strtod_l+0x52a>
 8009396:	2a1f      	cmp	r2, #31
 8009398:	dd1e      	ble.n	80093d8 <_strtod_l+0x5b8>
 800939a:	2500      	movs	r5, #0
 800939c:	462e      	mov	r6, r5
 800939e:	950a      	str	r5, [sp, #40]	; 0x28
 80093a0:	462f      	mov	r7, r5
 80093a2:	2322      	movs	r3, #34	; 0x22
 80093a4:	f04f 0800 	mov.w	r8, #0
 80093a8:	f04f 0900 	mov.w	r9, #0
 80093ac:	6023      	str	r3, [r4, #0]
 80093ae:	e789      	b.n	80092c4 <_strtod_l+0x4a4>
 80093b0:	0800cfed 	.word	0x0800cfed
 80093b4:	0800d02c 	.word	0x0800d02c
 80093b8:	0800cfe5 	.word	0x0800cfe5
 80093bc:	0800d16c 	.word	0x0800d16c
 80093c0:	0800d443 	.word	0x0800d443
 80093c4:	0800d308 	.word	0x0800d308
 80093c8:	0800d2e0 	.word	0x0800d2e0
 80093cc:	7ca00000 	.word	0x7ca00000
 80093d0:	7ff00000 	.word	0x7ff00000
 80093d4:	7fefffff 	.word	0x7fefffff
 80093d8:	f012 0110 	ands.w	r1, r2, #16
 80093dc:	bf18      	it	ne
 80093de:	216a      	movne	r1, #106	; 0x6a
 80093e0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80093e4:	9104      	str	r1, [sp, #16]
 80093e6:	49c0      	ldr	r1, [pc, #768]	; (80096e8 <_strtod_l+0x8c8>)
 80093e8:	2000      	movs	r0, #0
 80093ea:	07d7      	lsls	r7, r2, #31
 80093ec:	d508      	bpl.n	8009400 <_strtod_l+0x5e0>
 80093ee:	ed9d 6b08 	vldr	d6, [sp, #32]
 80093f2:	ed91 7b00 	vldr	d7, [r1]
 80093f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80093fa:	ed8d 7b08 	vstr	d7, [sp, #32]
 80093fe:	2001      	movs	r0, #1
 8009400:	1052      	asrs	r2, r2, #1
 8009402:	f101 0108 	add.w	r1, r1, #8
 8009406:	d1f0      	bne.n	80093ea <_strtod_l+0x5ca>
 8009408:	b108      	cbz	r0, 800940e <_strtod_l+0x5ee>
 800940a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800940e:	9a04      	ldr	r2, [sp, #16]
 8009410:	b1ba      	cbz	r2, 8009442 <_strtod_l+0x622>
 8009412:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009416:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800941a:	2a00      	cmp	r2, #0
 800941c:	4649      	mov	r1, r9
 800941e:	dd10      	ble.n	8009442 <_strtod_l+0x622>
 8009420:	2a1f      	cmp	r2, #31
 8009422:	f340 8132 	ble.w	800968a <_strtod_l+0x86a>
 8009426:	2a34      	cmp	r2, #52	; 0x34
 8009428:	bfde      	ittt	le
 800942a:	3a20      	suble	r2, #32
 800942c:	f04f 30ff 	movle.w	r0, #4294967295	; 0xffffffff
 8009430:	fa00 f202 	lslle.w	r2, r0, r2
 8009434:	f04f 0800 	mov.w	r8, #0
 8009438:	bfcc      	ite	gt
 800943a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800943e:	ea02 0901 	andle.w	r9, r2, r1
 8009442:	ec49 8b17 	vmov	d7, r8, r9
 8009446:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800944a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800944e:	d0a4      	beq.n	800939a <_strtod_l+0x57a>
 8009450:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009452:	9200      	str	r2, [sp, #0]
 8009454:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009456:	4632      	mov	r2, r6
 8009458:	4620      	mov	r0, r4
 800945a:	f001 fdbf 	bl	800afdc <__s2b>
 800945e:	900a      	str	r0, [sp, #40]	; 0x28
 8009460:	2800      	cmp	r0, #0
 8009462:	f43f af25 	beq.w	80092b0 <_strtod_l+0x490>
 8009466:	9b06      	ldr	r3, [sp, #24]
 8009468:	ebab 0505 	sub.w	r5, fp, r5
 800946c:	2b00      	cmp	r3, #0
 800946e:	bfb4      	ite	lt
 8009470:	462b      	movlt	r3, r5
 8009472:	2300      	movge	r3, #0
 8009474:	930c      	str	r3, [sp, #48]	; 0x30
 8009476:	9b06      	ldr	r3, [sp, #24]
 8009478:	ed9f 9b95 	vldr	d9, [pc, #596]	; 80096d0 <_strtod_l+0x8b0>
 800947c:	ed9f ab96 	vldr	d10, [pc, #600]	; 80096d8 <_strtod_l+0x8b8>
 8009480:	ed9f bb97 	vldr	d11, [pc, #604]	; 80096e0 <_strtod_l+0x8c0>
 8009484:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009488:	2500      	movs	r5, #0
 800948a:	9312      	str	r3, [sp, #72]	; 0x48
 800948c:	462e      	mov	r6, r5
 800948e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009490:	4620      	mov	r0, r4
 8009492:	6859      	ldr	r1, [r3, #4]
 8009494:	f001 fcf6 	bl	800ae84 <_Balloc>
 8009498:	4607      	mov	r7, r0
 800949a:	2800      	cmp	r0, #0
 800949c:	f43f af0c 	beq.w	80092b8 <_strtod_l+0x498>
 80094a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094a2:	691a      	ldr	r2, [r3, #16]
 80094a4:	3202      	adds	r2, #2
 80094a6:	f103 010c 	add.w	r1, r3, #12
 80094aa:	0092      	lsls	r2, r2, #2
 80094ac:	300c      	adds	r0, #12
 80094ae:	f7fe fda9 	bl	8008004 <memcpy>
 80094b2:	ec49 8b10 	vmov	d0, r8, r9
 80094b6:	aa1a      	add	r2, sp, #104	; 0x68
 80094b8:	a919      	add	r1, sp, #100	; 0x64
 80094ba:	4620      	mov	r0, r4
 80094bc:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80094c0:	f002 f8c8 	bl	800b654 <__d2b>
 80094c4:	9018      	str	r0, [sp, #96]	; 0x60
 80094c6:	2800      	cmp	r0, #0
 80094c8:	f43f aef6 	beq.w	80092b8 <_strtod_l+0x498>
 80094cc:	2101      	movs	r1, #1
 80094ce:	4620      	mov	r0, r4
 80094d0:	f001 fe1e 	bl	800b110 <__i2b>
 80094d4:	4606      	mov	r6, r0
 80094d6:	2800      	cmp	r0, #0
 80094d8:	f43f aeee 	beq.w	80092b8 <_strtod_l+0x498>
 80094dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094de:	991a      	ldr	r1, [sp, #104]	; 0x68
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	bfab      	itete	ge
 80094e4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80094e6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80094e8:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 80094ec:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 80094f0:	bfac      	ite	ge
 80094f2:	eb03 0b02 	addge.w	fp, r3, r2
 80094f6:	eba2 0a03 	sublt.w	sl, r2, r3
 80094fa:	9a04      	ldr	r2, [sp, #16]
 80094fc:	1a9b      	subs	r3, r3, r2
 80094fe:	440b      	add	r3, r1
 8009500:	4a7a      	ldr	r2, [pc, #488]	; (80096ec <_strtod_l+0x8cc>)
 8009502:	3b01      	subs	r3, #1
 8009504:	4293      	cmp	r3, r2
 8009506:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800950a:	f280 80d1 	bge.w	80096b0 <_strtod_l+0x890>
 800950e:	1ad2      	subs	r2, r2, r3
 8009510:	2a1f      	cmp	r2, #31
 8009512:	eba1 0102 	sub.w	r1, r1, r2
 8009516:	f04f 0001 	mov.w	r0, #1
 800951a:	f300 80bd 	bgt.w	8009698 <_strtod_l+0x878>
 800951e:	fa00 f302 	lsl.w	r3, r0, r2
 8009522:	930e      	str	r3, [sp, #56]	; 0x38
 8009524:	2300      	movs	r3, #0
 8009526:	930d      	str	r3, [sp, #52]	; 0x34
 8009528:	eb0b 0301 	add.w	r3, fp, r1
 800952c:	9a04      	ldr	r2, [sp, #16]
 800952e:	459b      	cmp	fp, r3
 8009530:	448a      	add	sl, r1
 8009532:	4492      	add	sl, r2
 8009534:	465a      	mov	r2, fp
 8009536:	bfa8      	it	ge
 8009538:	461a      	movge	r2, r3
 800953a:	4552      	cmp	r2, sl
 800953c:	bfa8      	it	ge
 800953e:	4652      	movge	r2, sl
 8009540:	2a00      	cmp	r2, #0
 8009542:	bfc2      	ittt	gt
 8009544:	1a9b      	subgt	r3, r3, r2
 8009546:	ebaa 0a02 	subgt.w	sl, sl, r2
 800954a:	ebab 0b02 	subgt.w	fp, fp, r2
 800954e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009550:	2a00      	cmp	r2, #0
 8009552:	dd18      	ble.n	8009586 <_strtod_l+0x766>
 8009554:	4631      	mov	r1, r6
 8009556:	4620      	mov	r0, r4
 8009558:	9315      	str	r3, [sp, #84]	; 0x54
 800955a:	f001 fe95 	bl	800b288 <__pow5mult>
 800955e:	4606      	mov	r6, r0
 8009560:	2800      	cmp	r0, #0
 8009562:	f43f aea9 	beq.w	80092b8 <_strtod_l+0x498>
 8009566:	4601      	mov	r1, r0
 8009568:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800956a:	4620      	mov	r0, r4
 800956c:	f001 fde6 	bl	800b13c <__multiply>
 8009570:	9014      	str	r0, [sp, #80]	; 0x50
 8009572:	2800      	cmp	r0, #0
 8009574:	f43f aea0 	beq.w	80092b8 <_strtod_l+0x498>
 8009578:	9918      	ldr	r1, [sp, #96]	; 0x60
 800957a:	4620      	mov	r0, r4
 800957c:	f001 fcc2 	bl	800af04 <_Bfree>
 8009580:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009582:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009584:	9218      	str	r2, [sp, #96]	; 0x60
 8009586:	2b00      	cmp	r3, #0
 8009588:	f300 8097 	bgt.w	80096ba <_strtod_l+0x89a>
 800958c:	9b06      	ldr	r3, [sp, #24]
 800958e:	2b00      	cmp	r3, #0
 8009590:	dd08      	ble.n	80095a4 <_strtod_l+0x784>
 8009592:	4639      	mov	r1, r7
 8009594:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009596:	4620      	mov	r0, r4
 8009598:	f001 fe76 	bl	800b288 <__pow5mult>
 800959c:	4607      	mov	r7, r0
 800959e:	2800      	cmp	r0, #0
 80095a0:	f43f ae8a 	beq.w	80092b8 <_strtod_l+0x498>
 80095a4:	f1ba 0f00 	cmp.w	sl, #0
 80095a8:	dd08      	ble.n	80095bc <_strtod_l+0x79c>
 80095aa:	4639      	mov	r1, r7
 80095ac:	4652      	mov	r2, sl
 80095ae:	4620      	mov	r0, r4
 80095b0:	f001 fec4 	bl	800b33c <__lshift>
 80095b4:	4607      	mov	r7, r0
 80095b6:	2800      	cmp	r0, #0
 80095b8:	f43f ae7e 	beq.w	80092b8 <_strtod_l+0x498>
 80095bc:	f1bb 0f00 	cmp.w	fp, #0
 80095c0:	dd08      	ble.n	80095d4 <_strtod_l+0x7b4>
 80095c2:	4631      	mov	r1, r6
 80095c4:	465a      	mov	r2, fp
 80095c6:	4620      	mov	r0, r4
 80095c8:	f001 feb8 	bl	800b33c <__lshift>
 80095cc:	4606      	mov	r6, r0
 80095ce:	2800      	cmp	r0, #0
 80095d0:	f43f ae72 	beq.w	80092b8 <_strtod_l+0x498>
 80095d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80095d6:	463a      	mov	r2, r7
 80095d8:	4620      	mov	r0, r4
 80095da:	f001 ff37 	bl	800b44c <__mdiff>
 80095de:	4605      	mov	r5, r0
 80095e0:	2800      	cmp	r0, #0
 80095e2:	f43f ae69 	beq.w	80092b8 <_strtod_l+0x498>
 80095e6:	2300      	movs	r3, #0
 80095e8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80095ec:	60c3      	str	r3, [r0, #12]
 80095ee:	4631      	mov	r1, r6
 80095f0:	f001 ff10 	bl	800b414 <__mcmp>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	da7f      	bge.n	80096f8 <_strtod_l+0x8d8>
 80095f8:	ea5a 0308 	orrs.w	r3, sl, r8
 80095fc:	f040 80a5 	bne.w	800974a <_strtod_l+0x92a>
 8009600:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009604:	2b00      	cmp	r3, #0
 8009606:	f040 80a0 	bne.w	800974a <_strtod_l+0x92a>
 800960a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800960e:	0d1b      	lsrs	r3, r3, #20
 8009610:	051b      	lsls	r3, r3, #20
 8009612:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009616:	f240 8098 	bls.w	800974a <_strtod_l+0x92a>
 800961a:	696b      	ldr	r3, [r5, #20]
 800961c:	b91b      	cbnz	r3, 8009626 <_strtod_l+0x806>
 800961e:	692b      	ldr	r3, [r5, #16]
 8009620:	2b01      	cmp	r3, #1
 8009622:	f340 8092 	ble.w	800974a <_strtod_l+0x92a>
 8009626:	4629      	mov	r1, r5
 8009628:	2201      	movs	r2, #1
 800962a:	4620      	mov	r0, r4
 800962c:	f001 fe86 	bl	800b33c <__lshift>
 8009630:	4631      	mov	r1, r6
 8009632:	4605      	mov	r5, r0
 8009634:	f001 feee 	bl	800b414 <__mcmp>
 8009638:	2800      	cmp	r0, #0
 800963a:	f340 8086 	ble.w	800974a <_strtod_l+0x92a>
 800963e:	9904      	ldr	r1, [sp, #16]
 8009640:	4a2b      	ldr	r2, [pc, #172]	; (80096f0 <_strtod_l+0x8d0>)
 8009642:	464b      	mov	r3, r9
 8009644:	2900      	cmp	r1, #0
 8009646:	f000 80a1 	beq.w	800978c <_strtod_l+0x96c>
 800964a:	ea02 0109 	and.w	r1, r2, r9
 800964e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009652:	f300 809b 	bgt.w	800978c <_strtod_l+0x96c>
 8009656:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800965a:	f77f aea2 	ble.w	80093a2 <_strtod_l+0x582>
 800965e:	4a25      	ldr	r2, [pc, #148]	; (80096f4 <_strtod_l+0x8d4>)
 8009660:	2300      	movs	r3, #0
 8009662:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8009666:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 800966a:	ec49 8b17 	vmov	d7, r8, r9
 800966e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009672:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009676:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800967a:	4313      	orrs	r3, r2
 800967c:	bf08      	it	eq
 800967e:	2322      	moveq	r3, #34	; 0x22
 8009680:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009684:	bf08      	it	eq
 8009686:	6023      	streq	r3, [r4, #0]
 8009688:	e620      	b.n	80092cc <_strtod_l+0x4ac>
 800968a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800968e:	fa01 f202 	lsl.w	r2, r1, r2
 8009692:	ea02 0808 	and.w	r8, r2, r8
 8009696:	e6d4      	b.n	8009442 <_strtod_l+0x622>
 8009698:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800969c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80096a0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80096a4:	33e2      	adds	r3, #226	; 0xe2
 80096a6:	fa00 f303 	lsl.w	r3, r0, r3
 80096aa:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 80096ae:	e73b      	b.n	8009528 <_strtod_l+0x708>
 80096b0:	2000      	movs	r0, #0
 80096b2:	2301      	movs	r3, #1
 80096b4:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 80096b8:	e736      	b.n	8009528 <_strtod_l+0x708>
 80096ba:	9918      	ldr	r1, [sp, #96]	; 0x60
 80096bc:	461a      	mov	r2, r3
 80096be:	4620      	mov	r0, r4
 80096c0:	f001 fe3c 	bl	800b33c <__lshift>
 80096c4:	9018      	str	r0, [sp, #96]	; 0x60
 80096c6:	2800      	cmp	r0, #0
 80096c8:	f47f af60 	bne.w	800958c <_strtod_l+0x76c>
 80096cc:	e5f4      	b.n	80092b8 <_strtod_l+0x498>
 80096ce:	bf00      	nop
 80096d0:	94a03595 	.word	0x94a03595
 80096d4:	3fcfffff 	.word	0x3fcfffff
 80096d8:	94a03595 	.word	0x94a03595
 80096dc:	3fdfffff 	.word	0x3fdfffff
 80096e0:	35afe535 	.word	0x35afe535
 80096e4:	3fe00000 	.word	0x3fe00000
 80096e8:	0800d040 	.word	0x0800d040
 80096ec:	fffffc02 	.word	0xfffffc02
 80096f0:	7ff00000 	.word	0x7ff00000
 80096f4:	39500000 	.word	0x39500000
 80096f8:	46cb      	mov	fp, r9
 80096fa:	d165      	bne.n	80097c8 <_strtod_l+0x9a8>
 80096fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009700:	f1ba 0f00 	cmp.w	sl, #0
 8009704:	d02a      	beq.n	800975c <_strtod_l+0x93c>
 8009706:	4aaa      	ldr	r2, [pc, #680]	; (80099b0 <_strtod_l+0xb90>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d12b      	bne.n	8009764 <_strtod_l+0x944>
 800970c:	9b04      	ldr	r3, [sp, #16]
 800970e:	4641      	mov	r1, r8
 8009710:	b1fb      	cbz	r3, 8009752 <_strtod_l+0x932>
 8009712:	4aa8      	ldr	r2, [pc, #672]	; (80099b4 <_strtod_l+0xb94>)
 8009714:	ea09 0202 	and.w	r2, r9, r2
 8009718:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800971c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009720:	d81a      	bhi.n	8009758 <_strtod_l+0x938>
 8009722:	0d12      	lsrs	r2, r2, #20
 8009724:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009728:	fa00 f303 	lsl.w	r3, r0, r3
 800972c:	4299      	cmp	r1, r3
 800972e:	d119      	bne.n	8009764 <_strtod_l+0x944>
 8009730:	4ba1      	ldr	r3, [pc, #644]	; (80099b8 <_strtod_l+0xb98>)
 8009732:	459b      	cmp	fp, r3
 8009734:	d102      	bne.n	800973c <_strtod_l+0x91c>
 8009736:	3101      	adds	r1, #1
 8009738:	f43f adbe 	beq.w	80092b8 <_strtod_l+0x498>
 800973c:	4b9d      	ldr	r3, [pc, #628]	; (80099b4 <_strtod_l+0xb94>)
 800973e:	ea0b 0303 	and.w	r3, fp, r3
 8009742:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009746:	f04f 0800 	mov.w	r8, #0
 800974a:	9b04      	ldr	r3, [sp, #16]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d186      	bne.n	800965e <_strtod_l+0x83e>
 8009750:	e5bc      	b.n	80092cc <_strtod_l+0x4ac>
 8009752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009756:	e7e9      	b.n	800972c <_strtod_l+0x90c>
 8009758:	4603      	mov	r3, r0
 800975a:	e7e7      	b.n	800972c <_strtod_l+0x90c>
 800975c:	ea53 0308 	orrs.w	r3, r3, r8
 8009760:	f43f af6d 	beq.w	800963e <_strtod_l+0x81e>
 8009764:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009766:	b1db      	cbz	r3, 80097a0 <_strtod_l+0x980>
 8009768:	ea13 0f0b 	tst.w	r3, fp
 800976c:	d0ed      	beq.n	800974a <_strtod_l+0x92a>
 800976e:	9a04      	ldr	r2, [sp, #16]
 8009770:	4640      	mov	r0, r8
 8009772:	4649      	mov	r1, r9
 8009774:	f1ba 0f00 	cmp.w	sl, #0
 8009778:	d016      	beq.n	80097a8 <_strtod_l+0x988>
 800977a:	f7ff fb36 	bl	8008dea <sulp>
 800977e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009782:	ee37 7b00 	vadd.f64	d7, d7, d0
 8009786:	ec59 8b17 	vmov	r8, r9, d7
 800978a:	e7de      	b.n	800974a <_strtod_l+0x92a>
 800978c:	4013      	ands	r3, r2
 800978e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009792:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009796:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800979a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800979e:	e7d4      	b.n	800974a <_strtod_l+0x92a>
 80097a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097a2:	ea13 0f08 	tst.w	r3, r8
 80097a6:	e7e1      	b.n	800976c <_strtod_l+0x94c>
 80097a8:	f7ff fb1f 	bl	8008dea <sulp>
 80097ac:	ed9d 7b08 	vldr	d7, [sp, #32]
 80097b0:	ee37 7b40 	vsub.f64	d7, d7, d0
 80097b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80097b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80097bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097c0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80097c4:	d1c1      	bne.n	800974a <_strtod_l+0x92a>
 80097c6:	e5ec      	b.n	80093a2 <_strtod_l+0x582>
 80097c8:	4631      	mov	r1, r6
 80097ca:	4628      	mov	r0, r5
 80097cc:	f001 ff9e 	bl	800b70c <__ratio>
 80097d0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80097d4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80097d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097dc:	d867      	bhi.n	80098ae <_strtod_l+0xa8e>
 80097de:	f1ba 0f00 	cmp.w	sl, #0
 80097e2:	d044      	beq.n	800986e <_strtod_l+0xa4e>
 80097e4:	4b75      	ldr	r3, [pc, #468]	; (80099bc <_strtod_l+0xb9c>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80097ec:	4971      	ldr	r1, [pc, #452]	; (80099b4 <_strtod_l+0xb94>)
 80097ee:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80099c8 <_strtod_l+0xba8>
 80097f2:	ea0b 0001 	and.w	r0, fp, r1
 80097f6:	4560      	cmp	r0, ip
 80097f8:	900d      	str	r0, [sp, #52]	; 0x34
 80097fa:	f040 808b 	bne.w	8009914 <_strtod_l+0xaf4>
 80097fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009802:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009806:	ec49 8b10 	vmov	d0, r8, r9
 800980a:	ec43 2b1c 	vmov	d12, r2, r3
 800980e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009812:	f001 fea3 	bl	800b55c <__ulp>
 8009816:	ec49 8b1d 	vmov	d13, r8, r9
 800981a:	eeac db00 	vfma.f64	d13, d12, d0
 800981e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8009822:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009824:	4963      	ldr	r1, [pc, #396]	; (80099b4 <_strtod_l+0xb94>)
 8009826:	4a66      	ldr	r2, [pc, #408]	; (80099c0 <_strtod_l+0xba0>)
 8009828:	4019      	ands	r1, r3
 800982a:	4291      	cmp	r1, r2
 800982c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8009830:	d947      	bls.n	80098c2 <_strtod_l+0xaa2>
 8009832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009834:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009838:	4293      	cmp	r3, r2
 800983a:	d103      	bne.n	8009844 <_strtod_l+0xa24>
 800983c:	9b08      	ldr	r3, [sp, #32]
 800983e:	3301      	adds	r3, #1
 8009840:	f43f ad3a 	beq.w	80092b8 <_strtod_l+0x498>
 8009844:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80099b8 <_strtod_l+0xb98>
 8009848:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800984c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800984e:	4620      	mov	r0, r4
 8009850:	f001 fb58 	bl	800af04 <_Bfree>
 8009854:	4639      	mov	r1, r7
 8009856:	4620      	mov	r0, r4
 8009858:	f001 fb54 	bl	800af04 <_Bfree>
 800985c:	4631      	mov	r1, r6
 800985e:	4620      	mov	r0, r4
 8009860:	f001 fb50 	bl	800af04 <_Bfree>
 8009864:	4629      	mov	r1, r5
 8009866:	4620      	mov	r0, r4
 8009868:	f001 fb4c 	bl	800af04 <_Bfree>
 800986c:	e60f      	b.n	800948e <_strtod_l+0x66e>
 800986e:	f1b8 0f00 	cmp.w	r8, #0
 8009872:	d112      	bne.n	800989a <_strtod_l+0xa7a>
 8009874:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009878:	b9b3      	cbnz	r3, 80098a8 <_strtod_l+0xa88>
 800987a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800987e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009886:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800988a:	d401      	bmi.n	8009890 <_strtod_l+0xa70>
 800988c:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009890:	eeb1 7b48 	vneg.f64	d7, d8
 8009894:	ec53 2b17 	vmov	r2, r3, d7
 8009898:	e7a8      	b.n	80097ec <_strtod_l+0x9cc>
 800989a:	f1b8 0f01 	cmp.w	r8, #1
 800989e:	d103      	bne.n	80098a8 <_strtod_l+0xa88>
 80098a0:	f1b9 0f00 	cmp.w	r9, #0
 80098a4:	f43f ad7d 	beq.w	80093a2 <_strtod_l+0x582>
 80098a8:	4b46      	ldr	r3, [pc, #280]	; (80099c4 <_strtod_l+0xba4>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	e79c      	b.n	80097e8 <_strtod_l+0x9c8>
 80098ae:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80098b2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80098b6:	f1ba 0f00 	cmp.w	sl, #0
 80098ba:	d0e9      	beq.n	8009890 <_strtod_l+0xa70>
 80098bc:	ec53 2b18 	vmov	r2, r3, d8
 80098c0:	e794      	b.n	80097ec <_strtod_l+0x9cc>
 80098c2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80098c6:	9b04      	ldr	r3, [sp, #16]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1bf      	bne.n	800984c <_strtod_l+0xa2c>
 80098cc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80098d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098d2:	0d1b      	lsrs	r3, r3, #20
 80098d4:	051b      	lsls	r3, r3, #20
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d1b8      	bne.n	800984c <_strtod_l+0xa2c>
 80098da:	ec51 0b18 	vmov	r0, r1, d8
 80098de:	f7f6 fedb 	bl	8000698 <__aeabi_d2lz>
 80098e2:	f7f6 fe93 	bl	800060c <__aeabi_l2d>
 80098e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098ea:	ec41 0b17 	vmov	d7, r0, r1
 80098ee:	ea43 0308 	orr.w	r3, r3, r8
 80098f2:	ea53 030a 	orrs.w	r3, r3, sl
 80098f6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80098fa:	d03e      	beq.n	800997a <_strtod_l+0xb5a>
 80098fc:	eeb4 8bca 	vcmpe.f64	d8, d10
 8009900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009904:	f53f ace2 	bmi.w	80092cc <_strtod_l+0x4ac>
 8009908:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800990c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009910:	dd9c      	ble.n	800984c <_strtod_l+0xa2c>
 8009912:	e4db      	b.n	80092cc <_strtod_l+0x4ac>
 8009914:	9904      	ldr	r1, [sp, #16]
 8009916:	b301      	cbz	r1, 800995a <_strtod_l+0xb3a>
 8009918:	990d      	ldr	r1, [sp, #52]	; 0x34
 800991a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800991e:	d81c      	bhi.n	800995a <_strtod_l+0xb3a>
 8009920:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80099a8 <_strtod_l+0xb88>
 8009924:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800992c:	d811      	bhi.n	8009952 <_strtod_l+0xb32>
 800992e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8009932:	ee18 3a10 	vmov	r3, s16
 8009936:	2b01      	cmp	r3, #1
 8009938:	bf38      	it	cc
 800993a:	2301      	movcc	r3, #1
 800993c:	ee08 3a10 	vmov	s16, r3
 8009940:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8009944:	f1ba 0f00 	cmp.w	sl, #0
 8009948:	d114      	bne.n	8009974 <_strtod_l+0xb54>
 800994a:	eeb1 7b48 	vneg.f64	d7, d8
 800994e:	ec53 2b17 	vmov	r2, r3, d7
 8009952:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009954:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8009958:	1a0b      	subs	r3, r1, r0
 800995a:	ed9d 0b08 	vldr	d0, [sp, #32]
 800995e:	ec43 2b1c 	vmov	d12, r2, r3
 8009962:	f001 fdfb 	bl	800b55c <__ulp>
 8009966:	ed9d 7b08 	vldr	d7, [sp, #32]
 800996a:	eeac 7b00 	vfma.f64	d7, d12, d0
 800996e:	ec59 8b17 	vmov	r8, r9, d7
 8009972:	e7a8      	b.n	80098c6 <_strtod_l+0xaa6>
 8009974:	ec53 2b18 	vmov	r2, r3, d8
 8009978:	e7eb      	b.n	8009952 <_strtod_l+0xb32>
 800997a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800997e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009982:	f57f af63 	bpl.w	800984c <_strtod_l+0xa2c>
 8009986:	e4a1      	b.n	80092cc <_strtod_l+0x4ac>
 8009988:	2300      	movs	r3, #0
 800998a:	930b      	str	r3, [sp, #44]	; 0x2c
 800998c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800998e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009990:	6013      	str	r3, [r2, #0]
 8009992:	f7ff ba8d 	b.w	8008eb0 <_strtod_l+0x90>
 8009996:	2a65      	cmp	r2, #101	; 0x65
 8009998:	f43f ab89 	beq.w	80090ae <_strtod_l+0x28e>
 800999c:	2a45      	cmp	r2, #69	; 0x45
 800999e:	f43f ab86 	beq.w	80090ae <_strtod_l+0x28e>
 80099a2:	2101      	movs	r1, #1
 80099a4:	f7ff bbbe 	b.w	8009124 <_strtod_l+0x304>
 80099a8:	ffc00000 	.word	0xffc00000
 80099ac:	41dfffff 	.word	0x41dfffff
 80099b0:	000fffff 	.word	0x000fffff
 80099b4:	7ff00000 	.word	0x7ff00000
 80099b8:	7fefffff 	.word	0x7fefffff
 80099bc:	3ff00000 	.word	0x3ff00000
 80099c0:	7c9fffff 	.word	0x7c9fffff
 80099c4:	bff00000 	.word	0xbff00000
 80099c8:	7fe00000 	.word	0x7fe00000

080099cc <_strtod_r>:
 80099cc:	4b01      	ldr	r3, [pc, #4]	; (80099d4 <_strtod_r+0x8>)
 80099ce:	f7ff ba27 	b.w	8008e20 <_strtod_l>
 80099d2:	bf00      	nop
 80099d4:	200000c0 	.word	0x200000c0

080099d8 <_strtol_l.isra.0>:
 80099d8:	2b01      	cmp	r3, #1
 80099da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099de:	d001      	beq.n	80099e4 <_strtol_l.isra.0+0xc>
 80099e0:	2b24      	cmp	r3, #36	; 0x24
 80099e2:	d906      	bls.n	80099f2 <_strtol_l.isra.0+0x1a>
 80099e4:	f7fe fae4 	bl	8007fb0 <__errno>
 80099e8:	2316      	movs	r3, #22
 80099ea:	6003      	str	r3, [r0, #0]
 80099ec:	2000      	movs	r0, #0
 80099ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099f2:	4f3a      	ldr	r7, [pc, #232]	; (8009adc <_strtol_l.isra.0+0x104>)
 80099f4:	468e      	mov	lr, r1
 80099f6:	4676      	mov	r6, lr
 80099f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80099fc:	5de5      	ldrb	r5, [r4, r7]
 80099fe:	f015 0508 	ands.w	r5, r5, #8
 8009a02:	d1f8      	bne.n	80099f6 <_strtol_l.isra.0+0x1e>
 8009a04:	2c2d      	cmp	r4, #45	; 0x2d
 8009a06:	d134      	bne.n	8009a72 <_strtol_l.isra.0+0x9a>
 8009a08:	f89e 4000 	ldrb.w	r4, [lr]
 8009a0c:	f04f 0801 	mov.w	r8, #1
 8009a10:	f106 0e02 	add.w	lr, r6, #2
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d05c      	beq.n	8009ad2 <_strtol_l.isra.0+0xfa>
 8009a18:	2b10      	cmp	r3, #16
 8009a1a:	d10c      	bne.n	8009a36 <_strtol_l.isra.0+0x5e>
 8009a1c:	2c30      	cmp	r4, #48	; 0x30
 8009a1e:	d10a      	bne.n	8009a36 <_strtol_l.isra.0+0x5e>
 8009a20:	f89e 4000 	ldrb.w	r4, [lr]
 8009a24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009a28:	2c58      	cmp	r4, #88	; 0x58
 8009a2a:	d14d      	bne.n	8009ac8 <_strtol_l.isra.0+0xf0>
 8009a2c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009a30:	2310      	movs	r3, #16
 8009a32:	f10e 0e02 	add.w	lr, lr, #2
 8009a36:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009a3a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8009a3e:	2600      	movs	r6, #0
 8009a40:	fbbc f9f3 	udiv	r9, ip, r3
 8009a44:	4635      	mov	r5, r6
 8009a46:	fb03 ca19 	mls	sl, r3, r9, ip
 8009a4a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009a4e:	2f09      	cmp	r7, #9
 8009a50:	d818      	bhi.n	8009a84 <_strtol_l.isra.0+0xac>
 8009a52:	463c      	mov	r4, r7
 8009a54:	42a3      	cmp	r3, r4
 8009a56:	dd24      	ble.n	8009aa2 <_strtol_l.isra.0+0xca>
 8009a58:	2e00      	cmp	r6, #0
 8009a5a:	db1f      	blt.n	8009a9c <_strtol_l.isra.0+0xc4>
 8009a5c:	45a9      	cmp	r9, r5
 8009a5e:	d31d      	bcc.n	8009a9c <_strtol_l.isra.0+0xc4>
 8009a60:	d101      	bne.n	8009a66 <_strtol_l.isra.0+0x8e>
 8009a62:	45a2      	cmp	sl, r4
 8009a64:	db1a      	blt.n	8009a9c <_strtol_l.isra.0+0xc4>
 8009a66:	fb05 4503 	mla	r5, r5, r3, r4
 8009a6a:	2601      	movs	r6, #1
 8009a6c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009a70:	e7eb      	b.n	8009a4a <_strtol_l.isra.0+0x72>
 8009a72:	2c2b      	cmp	r4, #43	; 0x2b
 8009a74:	bf08      	it	eq
 8009a76:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009a7a:	46a8      	mov	r8, r5
 8009a7c:	bf08      	it	eq
 8009a7e:	f106 0e02 	addeq.w	lr, r6, #2
 8009a82:	e7c7      	b.n	8009a14 <_strtol_l.isra.0+0x3c>
 8009a84:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009a88:	2f19      	cmp	r7, #25
 8009a8a:	d801      	bhi.n	8009a90 <_strtol_l.isra.0+0xb8>
 8009a8c:	3c37      	subs	r4, #55	; 0x37
 8009a8e:	e7e1      	b.n	8009a54 <_strtol_l.isra.0+0x7c>
 8009a90:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009a94:	2f19      	cmp	r7, #25
 8009a96:	d804      	bhi.n	8009aa2 <_strtol_l.isra.0+0xca>
 8009a98:	3c57      	subs	r4, #87	; 0x57
 8009a9a:	e7db      	b.n	8009a54 <_strtol_l.isra.0+0x7c>
 8009a9c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8009aa0:	e7e4      	b.n	8009a6c <_strtol_l.isra.0+0x94>
 8009aa2:	2e00      	cmp	r6, #0
 8009aa4:	da05      	bge.n	8009ab2 <_strtol_l.isra.0+0xda>
 8009aa6:	2322      	movs	r3, #34	; 0x22
 8009aa8:	6003      	str	r3, [r0, #0]
 8009aaa:	4665      	mov	r5, ip
 8009aac:	b942      	cbnz	r2, 8009ac0 <_strtol_l.isra.0+0xe8>
 8009aae:	4628      	mov	r0, r5
 8009ab0:	e79d      	b.n	80099ee <_strtol_l.isra.0+0x16>
 8009ab2:	f1b8 0f00 	cmp.w	r8, #0
 8009ab6:	d000      	beq.n	8009aba <_strtol_l.isra.0+0xe2>
 8009ab8:	426d      	negs	r5, r5
 8009aba:	2a00      	cmp	r2, #0
 8009abc:	d0f7      	beq.n	8009aae <_strtol_l.isra.0+0xd6>
 8009abe:	b10e      	cbz	r6, 8009ac4 <_strtol_l.isra.0+0xec>
 8009ac0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8009ac4:	6011      	str	r1, [r2, #0]
 8009ac6:	e7f2      	b.n	8009aae <_strtol_l.isra.0+0xd6>
 8009ac8:	2430      	movs	r4, #48	; 0x30
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1b3      	bne.n	8009a36 <_strtol_l.isra.0+0x5e>
 8009ace:	2308      	movs	r3, #8
 8009ad0:	e7b1      	b.n	8009a36 <_strtol_l.isra.0+0x5e>
 8009ad2:	2c30      	cmp	r4, #48	; 0x30
 8009ad4:	d0a4      	beq.n	8009a20 <_strtol_l.isra.0+0x48>
 8009ad6:	230a      	movs	r3, #10
 8009ad8:	e7ad      	b.n	8009a36 <_strtol_l.isra.0+0x5e>
 8009ada:	bf00      	nop
 8009adc:	0800d069 	.word	0x0800d069

08009ae0 <_strtol_r>:
 8009ae0:	f7ff bf7a 	b.w	80099d8 <_strtol_l.isra.0>

08009ae4 <_write_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	4d07      	ldr	r5, [pc, #28]	; (8009b04 <_write_r+0x20>)
 8009ae8:	4604      	mov	r4, r0
 8009aea:	4608      	mov	r0, r1
 8009aec:	4611      	mov	r1, r2
 8009aee:	2200      	movs	r2, #0
 8009af0:	602a      	str	r2, [r5, #0]
 8009af2:	461a      	mov	r2, r3
 8009af4:	f7f8 ff29 	bl	800294a <_write>
 8009af8:	1c43      	adds	r3, r0, #1
 8009afa:	d102      	bne.n	8009b02 <_write_r+0x1e>
 8009afc:	682b      	ldr	r3, [r5, #0]
 8009afe:	b103      	cbz	r3, 8009b02 <_write_r+0x1e>
 8009b00:	6023      	str	r3, [r4, #0]
 8009b02:	bd38      	pop	{r3, r4, r5, pc}
 8009b04:	20000848 	.word	0x20000848

08009b08 <_close_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	4d06      	ldr	r5, [pc, #24]	; (8009b24 <_close_r+0x1c>)
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	4604      	mov	r4, r0
 8009b10:	4608      	mov	r0, r1
 8009b12:	602b      	str	r3, [r5, #0]
 8009b14:	f7f8 ff35 	bl	8002982 <_close>
 8009b18:	1c43      	adds	r3, r0, #1
 8009b1a:	d102      	bne.n	8009b22 <_close_r+0x1a>
 8009b1c:	682b      	ldr	r3, [r5, #0]
 8009b1e:	b103      	cbz	r3, 8009b22 <_close_r+0x1a>
 8009b20:	6023      	str	r3, [r4, #0]
 8009b22:	bd38      	pop	{r3, r4, r5, pc}
 8009b24:	20000848 	.word	0x20000848

08009b28 <quorem>:
 8009b28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2c:	6903      	ldr	r3, [r0, #16]
 8009b2e:	690c      	ldr	r4, [r1, #16]
 8009b30:	42a3      	cmp	r3, r4
 8009b32:	4607      	mov	r7, r0
 8009b34:	f2c0 8081 	blt.w	8009c3a <quorem+0x112>
 8009b38:	3c01      	subs	r4, #1
 8009b3a:	f101 0814 	add.w	r8, r1, #20
 8009b3e:	f100 0514 	add.w	r5, r0, #20
 8009b42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b46:	9301      	str	r3, [sp, #4]
 8009b48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b50:	3301      	adds	r3, #1
 8009b52:	429a      	cmp	r2, r3
 8009b54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009b58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b60:	d331      	bcc.n	8009bc6 <quorem+0x9e>
 8009b62:	f04f 0e00 	mov.w	lr, #0
 8009b66:	4640      	mov	r0, r8
 8009b68:	46ac      	mov	ip, r5
 8009b6a:	46f2      	mov	sl, lr
 8009b6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b70:	b293      	uxth	r3, r2
 8009b72:	fb06 e303 	mla	r3, r6, r3, lr
 8009b76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	ebaa 0303 	sub.w	r3, sl, r3
 8009b80:	0c12      	lsrs	r2, r2, #16
 8009b82:	f8dc a000 	ldr.w	sl, [ip]
 8009b86:	fb06 e202 	mla	r2, r6, r2, lr
 8009b8a:	fa13 f38a 	uxtah	r3, r3, sl
 8009b8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009b92:	fa1f fa82 	uxth.w	sl, r2
 8009b96:	f8dc 2000 	ldr.w	r2, [ip]
 8009b9a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009b9e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ba8:	4581      	cmp	r9, r0
 8009baa:	f84c 3b04 	str.w	r3, [ip], #4
 8009bae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009bb2:	d2db      	bcs.n	8009b6c <quorem+0x44>
 8009bb4:	f855 300b 	ldr.w	r3, [r5, fp]
 8009bb8:	b92b      	cbnz	r3, 8009bc6 <quorem+0x9e>
 8009bba:	9b01      	ldr	r3, [sp, #4]
 8009bbc:	3b04      	subs	r3, #4
 8009bbe:	429d      	cmp	r5, r3
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	d32e      	bcc.n	8009c22 <quorem+0xfa>
 8009bc4:	613c      	str	r4, [r7, #16]
 8009bc6:	4638      	mov	r0, r7
 8009bc8:	f001 fc24 	bl	800b414 <__mcmp>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	db24      	blt.n	8009c1a <quorem+0xf2>
 8009bd0:	3601      	adds	r6, #1
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	f04f 0c00 	mov.w	ip, #0
 8009bd8:	f858 2b04 	ldr.w	r2, [r8], #4
 8009bdc:	f8d0 e000 	ldr.w	lr, [r0]
 8009be0:	b293      	uxth	r3, r2
 8009be2:	ebac 0303 	sub.w	r3, ip, r3
 8009be6:	0c12      	lsrs	r2, r2, #16
 8009be8:	fa13 f38e 	uxtah	r3, r3, lr
 8009bec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009bf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bfa:	45c1      	cmp	r9, r8
 8009bfc:	f840 3b04 	str.w	r3, [r0], #4
 8009c00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009c04:	d2e8      	bcs.n	8009bd8 <quorem+0xb0>
 8009c06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c0e:	b922      	cbnz	r2, 8009c1a <quorem+0xf2>
 8009c10:	3b04      	subs	r3, #4
 8009c12:	429d      	cmp	r5, r3
 8009c14:	461a      	mov	r2, r3
 8009c16:	d30a      	bcc.n	8009c2e <quorem+0x106>
 8009c18:	613c      	str	r4, [r7, #16]
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	b003      	add	sp, #12
 8009c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c22:	6812      	ldr	r2, [r2, #0]
 8009c24:	3b04      	subs	r3, #4
 8009c26:	2a00      	cmp	r2, #0
 8009c28:	d1cc      	bne.n	8009bc4 <quorem+0x9c>
 8009c2a:	3c01      	subs	r4, #1
 8009c2c:	e7c7      	b.n	8009bbe <quorem+0x96>
 8009c2e:	6812      	ldr	r2, [r2, #0]
 8009c30:	3b04      	subs	r3, #4
 8009c32:	2a00      	cmp	r2, #0
 8009c34:	d1f0      	bne.n	8009c18 <quorem+0xf0>
 8009c36:	3c01      	subs	r4, #1
 8009c38:	e7eb      	b.n	8009c12 <quorem+0xea>
 8009c3a:	2000      	movs	r0, #0
 8009c3c:	e7ee      	b.n	8009c1c <quorem+0xf4>
	...

08009c40 <_dtoa_r>:
 8009c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c44:	ec59 8b10 	vmov	r8, r9, d0
 8009c48:	b095      	sub	sp, #84	; 0x54
 8009c4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c4c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8009c4e:	9107      	str	r1, [sp, #28]
 8009c50:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009c54:	4606      	mov	r6, r0
 8009c56:	9209      	str	r2, [sp, #36]	; 0x24
 8009c58:	9310      	str	r3, [sp, #64]	; 0x40
 8009c5a:	b975      	cbnz	r5, 8009c7a <_dtoa_r+0x3a>
 8009c5c:	2010      	movs	r0, #16
 8009c5e:	f001 f8f7 	bl	800ae50 <malloc>
 8009c62:	4602      	mov	r2, r0
 8009c64:	6270      	str	r0, [r6, #36]	; 0x24
 8009c66:	b920      	cbnz	r0, 8009c72 <_dtoa_r+0x32>
 8009c68:	4bab      	ldr	r3, [pc, #684]	; (8009f18 <_dtoa_r+0x2d8>)
 8009c6a:	21ea      	movs	r1, #234	; 0xea
 8009c6c:	48ab      	ldr	r0, [pc, #684]	; (8009f1c <_dtoa_r+0x2dc>)
 8009c6e:	f002 fc35 	bl	800c4dc <__assert_func>
 8009c72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c76:	6005      	str	r5, [r0, #0]
 8009c78:	60c5      	str	r5, [r0, #12]
 8009c7a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009c7c:	6819      	ldr	r1, [r3, #0]
 8009c7e:	b151      	cbz	r1, 8009c96 <_dtoa_r+0x56>
 8009c80:	685a      	ldr	r2, [r3, #4]
 8009c82:	604a      	str	r2, [r1, #4]
 8009c84:	2301      	movs	r3, #1
 8009c86:	4093      	lsls	r3, r2
 8009c88:	608b      	str	r3, [r1, #8]
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f001 f93a 	bl	800af04 <_Bfree>
 8009c90:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009c92:	2200      	movs	r2, #0
 8009c94:	601a      	str	r2, [r3, #0]
 8009c96:	f1b9 0300 	subs.w	r3, r9, #0
 8009c9a:	bfbb      	ittet	lt
 8009c9c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009ca0:	9303      	strlt	r3, [sp, #12]
 8009ca2:	2300      	movge	r3, #0
 8009ca4:	2201      	movlt	r2, #1
 8009ca6:	bfac      	ite	ge
 8009ca8:	6023      	strge	r3, [r4, #0]
 8009caa:	6022      	strlt	r2, [r4, #0]
 8009cac:	4b9c      	ldr	r3, [pc, #624]	; (8009f20 <_dtoa_r+0x2e0>)
 8009cae:	9c03      	ldr	r4, [sp, #12]
 8009cb0:	43a3      	bics	r3, r4
 8009cb2:	d11a      	bne.n	8009cea <_dtoa_r+0xaa>
 8009cb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009cb6:	f242 730f 	movw	r3, #9999	; 0x270f
 8009cba:	6013      	str	r3, [r2, #0]
 8009cbc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009cc0:	ea53 0308 	orrs.w	r3, r3, r8
 8009cc4:	f000 8512 	beq.w	800a6ec <_dtoa_r+0xaac>
 8009cc8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009cca:	b953      	cbnz	r3, 8009ce2 <_dtoa_r+0xa2>
 8009ccc:	4b95      	ldr	r3, [pc, #596]	; (8009f24 <_dtoa_r+0x2e4>)
 8009cce:	e01f      	b.n	8009d10 <_dtoa_r+0xd0>
 8009cd0:	4b95      	ldr	r3, [pc, #596]	; (8009f28 <_dtoa_r+0x2e8>)
 8009cd2:	9300      	str	r3, [sp, #0]
 8009cd4:	3308      	adds	r3, #8
 8009cd6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009cd8:	6013      	str	r3, [r2, #0]
 8009cda:	9800      	ldr	r0, [sp, #0]
 8009cdc:	b015      	add	sp, #84	; 0x54
 8009cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce2:	4b90      	ldr	r3, [pc, #576]	; (8009f24 <_dtoa_r+0x2e4>)
 8009ce4:	9300      	str	r3, [sp, #0]
 8009ce6:	3303      	adds	r3, #3
 8009ce8:	e7f5      	b.n	8009cd6 <_dtoa_r+0x96>
 8009cea:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009cee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cf6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009cfa:	d10b      	bne.n	8009d14 <_dtoa_r+0xd4>
 8009cfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009cfe:	2301      	movs	r3, #1
 8009d00:	6013      	str	r3, [r2, #0]
 8009d02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f000 84ee 	beq.w	800a6e6 <_dtoa_r+0xaa6>
 8009d0a:	4888      	ldr	r0, [pc, #544]	; (8009f2c <_dtoa_r+0x2ec>)
 8009d0c:	6018      	str	r0, [r3, #0]
 8009d0e:	1e43      	subs	r3, r0, #1
 8009d10:	9300      	str	r3, [sp, #0]
 8009d12:	e7e2      	b.n	8009cda <_dtoa_r+0x9a>
 8009d14:	a913      	add	r1, sp, #76	; 0x4c
 8009d16:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009d1a:	aa12      	add	r2, sp, #72	; 0x48
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	f001 fc99 	bl	800b654 <__d2b>
 8009d22:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8009d26:	4605      	mov	r5, r0
 8009d28:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009d2a:	2900      	cmp	r1, #0
 8009d2c:	d047      	beq.n	8009dbe <_dtoa_r+0x17e>
 8009d2e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009d30:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009d34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009d38:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009d3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009d40:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009d44:	2400      	movs	r4, #0
 8009d46:	ec43 2b16 	vmov	d6, r2, r3
 8009d4a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009d4e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8009f00 <_dtoa_r+0x2c0>
 8009d52:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009d56:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8009f08 <_dtoa_r+0x2c8>
 8009d5a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009d5e:	eeb0 7b46 	vmov.f64	d7, d6
 8009d62:	ee06 1a90 	vmov	s13, r1
 8009d66:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8009d6a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8009f10 <_dtoa_r+0x2d0>
 8009d6e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009d72:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009d76:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d7e:	ee16 ba90 	vmov	fp, s13
 8009d82:	9411      	str	r4, [sp, #68]	; 0x44
 8009d84:	d508      	bpl.n	8009d98 <_dtoa_r+0x158>
 8009d86:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009d8a:	eeb4 6b47 	vcmp.f64	d6, d7
 8009d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d92:	bf18      	it	ne
 8009d94:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8009d98:	f1bb 0f16 	cmp.w	fp, #22
 8009d9c:	d832      	bhi.n	8009e04 <_dtoa_r+0x1c4>
 8009d9e:	4b64      	ldr	r3, [pc, #400]	; (8009f30 <_dtoa_r+0x2f0>)
 8009da0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009da4:	ed93 7b00 	vldr	d7, [r3]
 8009da8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8009dac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db4:	d501      	bpl.n	8009dba <_dtoa_r+0x17a>
 8009db6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009dba:	2300      	movs	r3, #0
 8009dbc:	e023      	b.n	8009e06 <_dtoa_r+0x1c6>
 8009dbe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009dc0:	4401      	add	r1, r0
 8009dc2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009dc6:	2b20      	cmp	r3, #32
 8009dc8:	bfc3      	ittte	gt
 8009dca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009dce:	fa04 f303 	lslgt.w	r3, r4, r3
 8009dd2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009dd6:	f1c3 0320 	rsble	r3, r3, #32
 8009dda:	bfc6      	itte	gt
 8009ddc:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009de0:	ea43 0308 	orrgt.w	r3, r3, r8
 8009de4:	fa08 f303 	lslle.w	r3, r8, r3
 8009de8:	ee07 3a90 	vmov	s15, r3
 8009dec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009df0:	3901      	subs	r1, #1
 8009df2:	ed8d 7b00 	vstr	d7, [sp]
 8009df6:	9c01      	ldr	r4, [sp, #4]
 8009df8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dfc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009e00:	2401      	movs	r4, #1
 8009e02:	e7a0      	b.n	8009d46 <_dtoa_r+0x106>
 8009e04:	2301      	movs	r3, #1
 8009e06:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e08:	1a43      	subs	r3, r0, r1
 8009e0a:	1e5a      	subs	r2, r3, #1
 8009e0c:	bf45      	ittet	mi
 8009e0e:	f1c3 0301 	rsbmi	r3, r3, #1
 8009e12:	9305      	strmi	r3, [sp, #20]
 8009e14:	2300      	movpl	r3, #0
 8009e16:	2300      	movmi	r3, #0
 8009e18:	9206      	str	r2, [sp, #24]
 8009e1a:	bf54      	ite	pl
 8009e1c:	9305      	strpl	r3, [sp, #20]
 8009e1e:	9306      	strmi	r3, [sp, #24]
 8009e20:	f1bb 0f00 	cmp.w	fp, #0
 8009e24:	db18      	blt.n	8009e58 <_dtoa_r+0x218>
 8009e26:	9b06      	ldr	r3, [sp, #24]
 8009e28:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009e2c:	445b      	add	r3, fp
 8009e2e:	9306      	str	r3, [sp, #24]
 8009e30:	2300      	movs	r3, #0
 8009e32:	9a07      	ldr	r2, [sp, #28]
 8009e34:	2a09      	cmp	r2, #9
 8009e36:	d849      	bhi.n	8009ecc <_dtoa_r+0x28c>
 8009e38:	2a05      	cmp	r2, #5
 8009e3a:	bfc4      	itt	gt
 8009e3c:	3a04      	subgt	r2, #4
 8009e3e:	9207      	strgt	r2, [sp, #28]
 8009e40:	9a07      	ldr	r2, [sp, #28]
 8009e42:	f1a2 0202 	sub.w	r2, r2, #2
 8009e46:	bfcc      	ite	gt
 8009e48:	2400      	movgt	r4, #0
 8009e4a:	2401      	movle	r4, #1
 8009e4c:	2a03      	cmp	r2, #3
 8009e4e:	d848      	bhi.n	8009ee2 <_dtoa_r+0x2a2>
 8009e50:	e8df f002 	tbb	[pc, r2]
 8009e54:	3a2c2e0b 	.word	0x3a2c2e0b
 8009e58:	9b05      	ldr	r3, [sp, #20]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	eba3 030b 	sub.w	r3, r3, fp
 8009e60:	9305      	str	r3, [sp, #20]
 8009e62:	920e      	str	r2, [sp, #56]	; 0x38
 8009e64:	f1cb 0300 	rsb	r3, fp, #0
 8009e68:	e7e3      	b.n	8009e32 <_dtoa_r+0x1f2>
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	9208      	str	r2, [sp, #32]
 8009e6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e70:	2a00      	cmp	r2, #0
 8009e72:	dc39      	bgt.n	8009ee8 <_dtoa_r+0x2a8>
 8009e74:	f04f 0a01 	mov.w	sl, #1
 8009e78:	46d1      	mov	r9, sl
 8009e7a:	4652      	mov	r2, sl
 8009e7c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009e80:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009e82:	2100      	movs	r1, #0
 8009e84:	6079      	str	r1, [r7, #4]
 8009e86:	2004      	movs	r0, #4
 8009e88:	f100 0c14 	add.w	ip, r0, #20
 8009e8c:	4594      	cmp	ip, r2
 8009e8e:	6879      	ldr	r1, [r7, #4]
 8009e90:	d92f      	bls.n	8009ef2 <_dtoa_r+0x2b2>
 8009e92:	4630      	mov	r0, r6
 8009e94:	930c      	str	r3, [sp, #48]	; 0x30
 8009e96:	f000 fff5 	bl	800ae84 <_Balloc>
 8009e9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e9c:	9000      	str	r0, [sp, #0]
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	d149      	bne.n	8009f38 <_dtoa_r+0x2f8>
 8009ea4:	4b23      	ldr	r3, [pc, #140]	; (8009f34 <_dtoa_r+0x2f4>)
 8009ea6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009eaa:	e6df      	b.n	8009c6c <_dtoa_r+0x2c>
 8009eac:	2201      	movs	r2, #1
 8009eae:	e7dd      	b.n	8009e6c <_dtoa_r+0x22c>
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	9208      	str	r2, [sp, #32]
 8009eb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009eb6:	eb0b 0a02 	add.w	sl, fp, r2
 8009eba:	f10a 0901 	add.w	r9, sl, #1
 8009ebe:	464a      	mov	r2, r9
 8009ec0:	2a01      	cmp	r2, #1
 8009ec2:	bfb8      	it	lt
 8009ec4:	2201      	movlt	r2, #1
 8009ec6:	e7db      	b.n	8009e80 <_dtoa_r+0x240>
 8009ec8:	2201      	movs	r2, #1
 8009eca:	e7f2      	b.n	8009eb2 <_dtoa_r+0x272>
 8009ecc:	2401      	movs	r4, #1
 8009ece:	2200      	movs	r2, #0
 8009ed0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009ed4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009ed8:	2100      	movs	r1, #0
 8009eda:	46d1      	mov	r9, sl
 8009edc:	2212      	movs	r2, #18
 8009ede:	9109      	str	r1, [sp, #36]	; 0x24
 8009ee0:	e7ce      	b.n	8009e80 <_dtoa_r+0x240>
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	9208      	str	r2, [sp, #32]
 8009ee6:	e7f5      	b.n	8009ed4 <_dtoa_r+0x294>
 8009ee8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009eec:	46d1      	mov	r9, sl
 8009eee:	4652      	mov	r2, sl
 8009ef0:	e7c6      	b.n	8009e80 <_dtoa_r+0x240>
 8009ef2:	3101      	adds	r1, #1
 8009ef4:	6079      	str	r1, [r7, #4]
 8009ef6:	0040      	lsls	r0, r0, #1
 8009ef8:	e7c6      	b.n	8009e88 <_dtoa_r+0x248>
 8009efa:	bf00      	nop
 8009efc:	f3af 8000 	nop.w
 8009f00:	636f4361 	.word	0x636f4361
 8009f04:	3fd287a7 	.word	0x3fd287a7
 8009f08:	8b60c8b3 	.word	0x8b60c8b3
 8009f0c:	3fc68a28 	.word	0x3fc68a28
 8009f10:	509f79fb 	.word	0x509f79fb
 8009f14:	3fd34413 	.word	0x3fd34413
 8009f18:	0800d176 	.word	0x0800d176
 8009f1c:	0800d18d 	.word	0x0800d18d
 8009f20:	7ff00000 	.word	0x7ff00000
 8009f24:	0800d172 	.word	0x0800d172
 8009f28:	0800d169 	.word	0x0800d169
 8009f2c:	0800d3f2 	.word	0x0800d3f2
 8009f30:	0800d308 	.word	0x0800d308
 8009f34:	0800d1ec 	.word	0x0800d1ec
 8009f38:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009f3a:	9900      	ldr	r1, [sp, #0]
 8009f3c:	6011      	str	r1, [r2, #0]
 8009f3e:	f1b9 0f0e 	cmp.w	r9, #14
 8009f42:	d872      	bhi.n	800a02a <_dtoa_r+0x3ea>
 8009f44:	2c00      	cmp	r4, #0
 8009f46:	d070      	beq.n	800a02a <_dtoa_r+0x3ea>
 8009f48:	f1bb 0f00 	cmp.w	fp, #0
 8009f4c:	f340 80a6 	ble.w	800a09c <_dtoa_r+0x45c>
 8009f50:	49ca      	ldr	r1, [pc, #808]	; (800a27c <_dtoa_r+0x63c>)
 8009f52:	f00b 020f 	and.w	r2, fp, #15
 8009f56:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009f5a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009f5e:	ed92 7b00 	vldr	d7, [r2]
 8009f62:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009f66:	f000 808d 	beq.w	800a084 <_dtoa_r+0x444>
 8009f6a:	4ac5      	ldr	r2, [pc, #788]	; (800a280 <_dtoa_r+0x640>)
 8009f6c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8009f70:	ed92 6b08 	vldr	d6, [r2, #32]
 8009f74:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8009f78:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009f7c:	f001 010f 	and.w	r1, r1, #15
 8009f80:	2203      	movs	r2, #3
 8009f82:	48bf      	ldr	r0, [pc, #764]	; (800a280 <_dtoa_r+0x640>)
 8009f84:	2900      	cmp	r1, #0
 8009f86:	d17f      	bne.n	800a088 <_dtoa_r+0x448>
 8009f88:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009f8c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009f90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009f94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009f96:	2900      	cmp	r1, #0
 8009f98:	f000 80b2 	beq.w	800a100 <_dtoa_r+0x4c0>
 8009f9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009fa0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009fa4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fac:	f140 80a8 	bpl.w	800a100 <_dtoa_r+0x4c0>
 8009fb0:	f1b9 0f00 	cmp.w	r9, #0
 8009fb4:	f000 80a4 	beq.w	800a100 <_dtoa_r+0x4c0>
 8009fb8:	f1ba 0f00 	cmp.w	sl, #0
 8009fbc:	dd31      	ble.n	800a022 <_dtoa_r+0x3e2>
 8009fbe:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009fc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009fc6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009fca:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8009fce:	3201      	adds	r2, #1
 8009fd0:	4650      	mov	r0, sl
 8009fd2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009fd6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009fda:	ee07 2a90 	vmov	s15, r2
 8009fde:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009fe2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009fe6:	ed8d 5b02 	vstr	d5, [sp, #8]
 8009fea:	9c03      	ldr	r4, [sp, #12]
 8009fec:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009ff0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	f040 8086 	bne.w	800a106 <_dtoa_r+0x4c6>
 8009ffa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009ffe:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a002:	ec42 1b17 	vmov	d7, r1, r2
 800a006:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a00e:	f300 8272 	bgt.w	800a4f6 <_dtoa_r+0x8b6>
 800a012:	eeb1 7b47 	vneg.f64	d7, d7
 800a016:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a01e:	f100 8267 	bmi.w	800a4f0 <_dtoa_r+0x8b0>
 800a022:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800a026:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a02a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a02c:	2a00      	cmp	r2, #0
 800a02e:	f2c0 8129 	blt.w	800a284 <_dtoa_r+0x644>
 800a032:	f1bb 0f0e 	cmp.w	fp, #14
 800a036:	f300 8125 	bgt.w	800a284 <_dtoa_r+0x644>
 800a03a:	4b90      	ldr	r3, [pc, #576]	; (800a27c <_dtoa_r+0x63c>)
 800a03c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a040:	ed93 6b00 	vldr	d6, [r3]
 800a044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a046:	2b00      	cmp	r3, #0
 800a048:	f280 80c3 	bge.w	800a1d2 <_dtoa_r+0x592>
 800a04c:	f1b9 0f00 	cmp.w	r9, #0
 800a050:	f300 80bf 	bgt.w	800a1d2 <_dtoa_r+0x592>
 800a054:	f040 824c 	bne.w	800a4f0 <_dtoa_r+0x8b0>
 800a058:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a05c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a060:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a064:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a06c:	464c      	mov	r4, r9
 800a06e:	464f      	mov	r7, r9
 800a070:	f280 8222 	bge.w	800a4b8 <_dtoa_r+0x878>
 800a074:	f8dd 8000 	ldr.w	r8, [sp]
 800a078:	2331      	movs	r3, #49	; 0x31
 800a07a:	f808 3b01 	strb.w	r3, [r8], #1
 800a07e:	f10b 0b01 	add.w	fp, fp, #1
 800a082:	e21e      	b.n	800a4c2 <_dtoa_r+0x882>
 800a084:	2202      	movs	r2, #2
 800a086:	e77c      	b.n	8009f82 <_dtoa_r+0x342>
 800a088:	07cc      	lsls	r4, r1, #31
 800a08a:	d504      	bpl.n	800a096 <_dtoa_r+0x456>
 800a08c:	ed90 6b00 	vldr	d6, [r0]
 800a090:	3201      	adds	r2, #1
 800a092:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a096:	1049      	asrs	r1, r1, #1
 800a098:	3008      	adds	r0, #8
 800a09a:	e773      	b.n	8009f84 <_dtoa_r+0x344>
 800a09c:	d02e      	beq.n	800a0fc <_dtoa_r+0x4bc>
 800a09e:	f1cb 0100 	rsb	r1, fp, #0
 800a0a2:	4a76      	ldr	r2, [pc, #472]	; (800a27c <_dtoa_r+0x63c>)
 800a0a4:	f001 000f 	and.w	r0, r1, #15
 800a0a8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a0ac:	ed92 7b00 	vldr	d7, [r2]
 800a0b0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800a0b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a0b8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a0bc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800a0c0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800a0c4:	486e      	ldr	r0, [pc, #440]	; (800a280 <_dtoa_r+0x640>)
 800a0c6:	1109      	asrs	r1, r1, #4
 800a0c8:	2400      	movs	r4, #0
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	b939      	cbnz	r1, 800a0de <_dtoa_r+0x49e>
 800a0ce:	2c00      	cmp	r4, #0
 800a0d0:	f43f af60 	beq.w	8009f94 <_dtoa_r+0x354>
 800a0d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0dc:	e75a      	b.n	8009f94 <_dtoa_r+0x354>
 800a0de:	07cf      	lsls	r7, r1, #31
 800a0e0:	d509      	bpl.n	800a0f6 <_dtoa_r+0x4b6>
 800a0e2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800a0e6:	ed90 7b00 	vldr	d7, [r0]
 800a0ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a0ee:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a0f2:	3201      	adds	r2, #1
 800a0f4:	2401      	movs	r4, #1
 800a0f6:	1049      	asrs	r1, r1, #1
 800a0f8:	3008      	adds	r0, #8
 800a0fa:	e7e7      	b.n	800a0cc <_dtoa_r+0x48c>
 800a0fc:	2202      	movs	r2, #2
 800a0fe:	e749      	b.n	8009f94 <_dtoa_r+0x354>
 800a100:	465f      	mov	r7, fp
 800a102:	4648      	mov	r0, r9
 800a104:	e765      	b.n	8009fd2 <_dtoa_r+0x392>
 800a106:	ec42 1b17 	vmov	d7, r1, r2
 800a10a:	4a5c      	ldr	r2, [pc, #368]	; (800a27c <_dtoa_r+0x63c>)
 800a10c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a110:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a114:	9a00      	ldr	r2, [sp, #0]
 800a116:	1814      	adds	r4, r2, r0
 800a118:	9a08      	ldr	r2, [sp, #32]
 800a11a:	b352      	cbz	r2, 800a172 <_dtoa_r+0x532>
 800a11c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a120:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a124:	f8dd 8000 	ldr.w	r8, [sp]
 800a128:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a12c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a130:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a134:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a138:	ee14 2a90 	vmov	r2, s9
 800a13c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a140:	3230      	adds	r2, #48	; 0x30
 800a142:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a146:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a14e:	f808 2b01 	strb.w	r2, [r8], #1
 800a152:	d439      	bmi.n	800a1c8 <_dtoa_r+0x588>
 800a154:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a158:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a160:	d472      	bmi.n	800a248 <_dtoa_r+0x608>
 800a162:	45a0      	cmp	r8, r4
 800a164:	f43f af5d 	beq.w	800a022 <_dtoa_r+0x3e2>
 800a168:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a16c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a170:	e7e0      	b.n	800a134 <_dtoa_r+0x4f4>
 800a172:	f8dd 8000 	ldr.w	r8, [sp]
 800a176:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a17a:	4621      	mov	r1, r4
 800a17c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a180:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a184:	ee14 2a90 	vmov	r2, s9
 800a188:	3230      	adds	r2, #48	; 0x30
 800a18a:	f808 2b01 	strb.w	r2, [r8], #1
 800a18e:	45a0      	cmp	r8, r4
 800a190:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a194:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a198:	d118      	bne.n	800a1cc <_dtoa_r+0x58c>
 800a19a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a19e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a1a2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1aa:	dc4d      	bgt.n	800a248 <_dtoa_r+0x608>
 800a1ac:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a1b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1b8:	f57f af33 	bpl.w	800a022 <_dtoa_r+0x3e2>
 800a1bc:	4688      	mov	r8, r1
 800a1be:	3901      	subs	r1, #1
 800a1c0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a1c4:	2b30      	cmp	r3, #48	; 0x30
 800a1c6:	d0f9      	beq.n	800a1bc <_dtoa_r+0x57c>
 800a1c8:	46bb      	mov	fp, r7
 800a1ca:	e02a      	b.n	800a222 <_dtoa_r+0x5e2>
 800a1cc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a1d0:	e7d6      	b.n	800a180 <_dtoa_r+0x540>
 800a1d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1d6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a1da:	f8dd 8000 	ldr.w	r8, [sp]
 800a1de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a1e2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a1e6:	ee15 3a10 	vmov	r3, s10
 800a1ea:	3330      	adds	r3, #48	; 0x30
 800a1ec:	f808 3b01 	strb.w	r3, [r8], #1
 800a1f0:	9b00      	ldr	r3, [sp, #0]
 800a1f2:	eba8 0303 	sub.w	r3, r8, r3
 800a1f6:	4599      	cmp	r9, r3
 800a1f8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a1fc:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a200:	d133      	bne.n	800a26a <_dtoa_r+0x62a>
 800a202:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a206:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a20a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a20e:	dc1a      	bgt.n	800a246 <_dtoa_r+0x606>
 800a210:	eeb4 7b46 	vcmp.f64	d7, d6
 800a214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a218:	d103      	bne.n	800a222 <_dtoa_r+0x5e2>
 800a21a:	ee15 3a10 	vmov	r3, s10
 800a21e:	07d9      	lsls	r1, r3, #31
 800a220:	d411      	bmi.n	800a246 <_dtoa_r+0x606>
 800a222:	4629      	mov	r1, r5
 800a224:	4630      	mov	r0, r6
 800a226:	f000 fe6d 	bl	800af04 <_Bfree>
 800a22a:	2300      	movs	r3, #0
 800a22c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a22e:	f888 3000 	strb.w	r3, [r8]
 800a232:	f10b 0301 	add.w	r3, fp, #1
 800a236:	6013      	str	r3, [r2, #0]
 800a238:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f43f ad4d 	beq.w	8009cda <_dtoa_r+0x9a>
 800a240:	f8c3 8000 	str.w	r8, [r3]
 800a244:	e549      	b.n	8009cda <_dtoa_r+0x9a>
 800a246:	465f      	mov	r7, fp
 800a248:	4643      	mov	r3, r8
 800a24a:	4698      	mov	r8, r3
 800a24c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a250:	2a39      	cmp	r2, #57	; 0x39
 800a252:	d106      	bne.n	800a262 <_dtoa_r+0x622>
 800a254:	9a00      	ldr	r2, [sp, #0]
 800a256:	429a      	cmp	r2, r3
 800a258:	d1f7      	bne.n	800a24a <_dtoa_r+0x60a>
 800a25a:	9900      	ldr	r1, [sp, #0]
 800a25c:	2230      	movs	r2, #48	; 0x30
 800a25e:	3701      	adds	r7, #1
 800a260:	700a      	strb	r2, [r1, #0]
 800a262:	781a      	ldrb	r2, [r3, #0]
 800a264:	3201      	adds	r2, #1
 800a266:	701a      	strb	r2, [r3, #0]
 800a268:	e7ae      	b.n	800a1c8 <_dtoa_r+0x588>
 800a26a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a26e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a276:	d1b2      	bne.n	800a1de <_dtoa_r+0x59e>
 800a278:	e7d3      	b.n	800a222 <_dtoa_r+0x5e2>
 800a27a:	bf00      	nop
 800a27c:	0800d308 	.word	0x0800d308
 800a280:	0800d2e0 	.word	0x0800d2e0
 800a284:	9908      	ldr	r1, [sp, #32]
 800a286:	2900      	cmp	r1, #0
 800a288:	f000 80d1 	beq.w	800a42e <_dtoa_r+0x7ee>
 800a28c:	9907      	ldr	r1, [sp, #28]
 800a28e:	2901      	cmp	r1, #1
 800a290:	f300 80b4 	bgt.w	800a3fc <_dtoa_r+0x7bc>
 800a294:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a296:	2900      	cmp	r1, #0
 800a298:	f000 80ac 	beq.w	800a3f4 <_dtoa_r+0x7b4>
 800a29c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a2a0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a2a4:	461c      	mov	r4, r3
 800a2a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a2a8:	9b05      	ldr	r3, [sp, #20]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	9305      	str	r3, [sp, #20]
 800a2ae:	9b06      	ldr	r3, [sp, #24]
 800a2b0:	2101      	movs	r1, #1
 800a2b2:	4413      	add	r3, r2
 800a2b4:	4630      	mov	r0, r6
 800a2b6:	9306      	str	r3, [sp, #24]
 800a2b8:	f000 ff2a 	bl	800b110 <__i2b>
 800a2bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2be:	4607      	mov	r7, r0
 800a2c0:	f1b8 0f00 	cmp.w	r8, #0
 800a2c4:	dd0d      	ble.n	800a2e2 <_dtoa_r+0x6a2>
 800a2c6:	9a06      	ldr	r2, [sp, #24]
 800a2c8:	2a00      	cmp	r2, #0
 800a2ca:	dd0a      	ble.n	800a2e2 <_dtoa_r+0x6a2>
 800a2cc:	4542      	cmp	r2, r8
 800a2ce:	9905      	ldr	r1, [sp, #20]
 800a2d0:	bfa8      	it	ge
 800a2d2:	4642      	movge	r2, r8
 800a2d4:	1a89      	subs	r1, r1, r2
 800a2d6:	9105      	str	r1, [sp, #20]
 800a2d8:	9906      	ldr	r1, [sp, #24]
 800a2da:	eba8 0802 	sub.w	r8, r8, r2
 800a2de:	1a8a      	subs	r2, r1, r2
 800a2e0:	9206      	str	r2, [sp, #24]
 800a2e2:	b303      	cbz	r3, 800a326 <_dtoa_r+0x6e6>
 800a2e4:	9a08      	ldr	r2, [sp, #32]
 800a2e6:	2a00      	cmp	r2, #0
 800a2e8:	f000 80a6 	beq.w	800a438 <_dtoa_r+0x7f8>
 800a2ec:	2c00      	cmp	r4, #0
 800a2ee:	dd13      	ble.n	800a318 <_dtoa_r+0x6d8>
 800a2f0:	4639      	mov	r1, r7
 800a2f2:	4622      	mov	r2, r4
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	930c      	str	r3, [sp, #48]	; 0x30
 800a2f8:	f000 ffc6 	bl	800b288 <__pow5mult>
 800a2fc:	462a      	mov	r2, r5
 800a2fe:	4601      	mov	r1, r0
 800a300:	4607      	mov	r7, r0
 800a302:	4630      	mov	r0, r6
 800a304:	f000 ff1a 	bl	800b13c <__multiply>
 800a308:	4629      	mov	r1, r5
 800a30a:	900a      	str	r0, [sp, #40]	; 0x28
 800a30c:	4630      	mov	r0, r6
 800a30e:	f000 fdf9 	bl	800af04 <_Bfree>
 800a312:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a314:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a316:	4615      	mov	r5, r2
 800a318:	1b1a      	subs	r2, r3, r4
 800a31a:	d004      	beq.n	800a326 <_dtoa_r+0x6e6>
 800a31c:	4629      	mov	r1, r5
 800a31e:	4630      	mov	r0, r6
 800a320:	f000 ffb2 	bl	800b288 <__pow5mult>
 800a324:	4605      	mov	r5, r0
 800a326:	2101      	movs	r1, #1
 800a328:	4630      	mov	r0, r6
 800a32a:	f000 fef1 	bl	800b110 <__i2b>
 800a32e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a330:	2b00      	cmp	r3, #0
 800a332:	4604      	mov	r4, r0
 800a334:	f340 8082 	ble.w	800a43c <_dtoa_r+0x7fc>
 800a338:	461a      	mov	r2, r3
 800a33a:	4601      	mov	r1, r0
 800a33c:	4630      	mov	r0, r6
 800a33e:	f000 ffa3 	bl	800b288 <__pow5mult>
 800a342:	9b07      	ldr	r3, [sp, #28]
 800a344:	2b01      	cmp	r3, #1
 800a346:	4604      	mov	r4, r0
 800a348:	dd7b      	ble.n	800a442 <_dtoa_r+0x802>
 800a34a:	2300      	movs	r3, #0
 800a34c:	930a      	str	r3, [sp, #40]	; 0x28
 800a34e:	6922      	ldr	r2, [r4, #16]
 800a350:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a354:	6910      	ldr	r0, [r2, #16]
 800a356:	f000 fe8b 	bl	800b070 <__hi0bits>
 800a35a:	f1c0 0020 	rsb	r0, r0, #32
 800a35e:	9b06      	ldr	r3, [sp, #24]
 800a360:	4418      	add	r0, r3
 800a362:	f010 001f 	ands.w	r0, r0, #31
 800a366:	f000 808d 	beq.w	800a484 <_dtoa_r+0x844>
 800a36a:	f1c0 0220 	rsb	r2, r0, #32
 800a36e:	2a04      	cmp	r2, #4
 800a370:	f340 8086 	ble.w	800a480 <_dtoa_r+0x840>
 800a374:	f1c0 001c 	rsb	r0, r0, #28
 800a378:	9b05      	ldr	r3, [sp, #20]
 800a37a:	4403      	add	r3, r0
 800a37c:	9305      	str	r3, [sp, #20]
 800a37e:	9b06      	ldr	r3, [sp, #24]
 800a380:	4403      	add	r3, r0
 800a382:	4480      	add	r8, r0
 800a384:	9306      	str	r3, [sp, #24]
 800a386:	9b05      	ldr	r3, [sp, #20]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	dd05      	ble.n	800a398 <_dtoa_r+0x758>
 800a38c:	4629      	mov	r1, r5
 800a38e:	461a      	mov	r2, r3
 800a390:	4630      	mov	r0, r6
 800a392:	f000 ffd3 	bl	800b33c <__lshift>
 800a396:	4605      	mov	r5, r0
 800a398:	9b06      	ldr	r3, [sp, #24]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	dd05      	ble.n	800a3aa <_dtoa_r+0x76a>
 800a39e:	4621      	mov	r1, r4
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	f000 ffca 	bl	800b33c <__lshift>
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d06b      	beq.n	800a488 <_dtoa_r+0x848>
 800a3b0:	4621      	mov	r1, r4
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	f001 f82e 	bl	800b414 <__mcmp>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	da65      	bge.n	800a488 <_dtoa_r+0x848>
 800a3bc:	2300      	movs	r3, #0
 800a3be:	4629      	mov	r1, r5
 800a3c0:	220a      	movs	r2, #10
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	f000 fdc0 	bl	800af48 <__multadd>
 800a3c8:	9b08      	ldr	r3, [sp, #32]
 800a3ca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a3ce:	4605      	mov	r5, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f000 8192 	beq.w	800a6fa <_dtoa_r+0xaba>
 800a3d6:	4639      	mov	r1, r7
 800a3d8:	2300      	movs	r3, #0
 800a3da:	220a      	movs	r2, #10
 800a3dc:	4630      	mov	r0, r6
 800a3de:	f000 fdb3 	bl	800af48 <__multadd>
 800a3e2:	f1ba 0f00 	cmp.w	sl, #0
 800a3e6:	4607      	mov	r7, r0
 800a3e8:	f300 808e 	bgt.w	800a508 <_dtoa_r+0x8c8>
 800a3ec:	9b07      	ldr	r3, [sp, #28]
 800a3ee:	2b02      	cmp	r3, #2
 800a3f0:	dc51      	bgt.n	800a496 <_dtoa_r+0x856>
 800a3f2:	e089      	b.n	800a508 <_dtoa_r+0x8c8>
 800a3f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a3f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a3fa:	e751      	b.n	800a2a0 <_dtoa_r+0x660>
 800a3fc:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800a400:	42a3      	cmp	r3, r4
 800a402:	bfbf      	itttt	lt
 800a404:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a406:	1ae3      	sublt	r3, r4, r3
 800a408:	18d2      	addlt	r2, r2, r3
 800a40a:	4613      	movlt	r3, r2
 800a40c:	bfb7      	itett	lt
 800a40e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a410:	1b1c      	subge	r4, r3, r4
 800a412:	4623      	movlt	r3, r4
 800a414:	2400      	movlt	r4, #0
 800a416:	f1b9 0f00 	cmp.w	r9, #0
 800a41a:	bfb5      	itete	lt
 800a41c:	9a05      	ldrlt	r2, [sp, #20]
 800a41e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800a422:	eba2 0809 	sublt.w	r8, r2, r9
 800a426:	464a      	movge	r2, r9
 800a428:	bfb8      	it	lt
 800a42a:	2200      	movlt	r2, #0
 800a42c:	e73b      	b.n	800a2a6 <_dtoa_r+0x666>
 800a42e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a432:	9f08      	ldr	r7, [sp, #32]
 800a434:	461c      	mov	r4, r3
 800a436:	e743      	b.n	800a2c0 <_dtoa_r+0x680>
 800a438:	461a      	mov	r2, r3
 800a43a:	e76f      	b.n	800a31c <_dtoa_r+0x6dc>
 800a43c:	9b07      	ldr	r3, [sp, #28]
 800a43e:	2b01      	cmp	r3, #1
 800a440:	dc18      	bgt.n	800a474 <_dtoa_r+0x834>
 800a442:	9b02      	ldr	r3, [sp, #8]
 800a444:	b9b3      	cbnz	r3, 800a474 <_dtoa_r+0x834>
 800a446:	9b03      	ldr	r3, [sp, #12]
 800a448:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a44c:	b9a2      	cbnz	r2, 800a478 <_dtoa_r+0x838>
 800a44e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a452:	0d12      	lsrs	r2, r2, #20
 800a454:	0512      	lsls	r2, r2, #20
 800a456:	b18a      	cbz	r2, 800a47c <_dtoa_r+0x83c>
 800a458:	9b05      	ldr	r3, [sp, #20]
 800a45a:	3301      	adds	r3, #1
 800a45c:	9305      	str	r3, [sp, #20]
 800a45e:	9b06      	ldr	r3, [sp, #24]
 800a460:	3301      	adds	r3, #1
 800a462:	9306      	str	r3, [sp, #24]
 800a464:	2301      	movs	r3, #1
 800a466:	930a      	str	r3, [sp, #40]	; 0x28
 800a468:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	f47f af6f 	bne.w	800a34e <_dtoa_r+0x70e>
 800a470:	2001      	movs	r0, #1
 800a472:	e774      	b.n	800a35e <_dtoa_r+0x71e>
 800a474:	2300      	movs	r3, #0
 800a476:	e7f6      	b.n	800a466 <_dtoa_r+0x826>
 800a478:	9b02      	ldr	r3, [sp, #8]
 800a47a:	e7f4      	b.n	800a466 <_dtoa_r+0x826>
 800a47c:	920a      	str	r2, [sp, #40]	; 0x28
 800a47e:	e7f3      	b.n	800a468 <_dtoa_r+0x828>
 800a480:	d081      	beq.n	800a386 <_dtoa_r+0x746>
 800a482:	4610      	mov	r0, r2
 800a484:	301c      	adds	r0, #28
 800a486:	e777      	b.n	800a378 <_dtoa_r+0x738>
 800a488:	f1b9 0f00 	cmp.w	r9, #0
 800a48c:	dc37      	bgt.n	800a4fe <_dtoa_r+0x8be>
 800a48e:	9b07      	ldr	r3, [sp, #28]
 800a490:	2b02      	cmp	r3, #2
 800a492:	dd34      	ble.n	800a4fe <_dtoa_r+0x8be>
 800a494:	46ca      	mov	sl, r9
 800a496:	f1ba 0f00 	cmp.w	sl, #0
 800a49a:	d10d      	bne.n	800a4b8 <_dtoa_r+0x878>
 800a49c:	4621      	mov	r1, r4
 800a49e:	4653      	mov	r3, sl
 800a4a0:	2205      	movs	r2, #5
 800a4a2:	4630      	mov	r0, r6
 800a4a4:	f000 fd50 	bl	800af48 <__multadd>
 800a4a8:	4601      	mov	r1, r0
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	f000 ffb1 	bl	800b414 <__mcmp>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	f73f adde 	bgt.w	800a074 <_dtoa_r+0x434>
 800a4b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ba:	f8dd 8000 	ldr.w	r8, [sp]
 800a4be:	ea6f 0b03 	mvn.w	fp, r3
 800a4c2:	f04f 0900 	mov.w	r9, #0
 800a4c6:	4621      	mov	r1, r4
 800a4c8:	4630      	mov	r0, r6
 800a4ca:	f000 fd1b 	bl	800af04 <_Bfree>
 800a4ce:	2f00      	cmp	r7, #0
 800a4d0:	f43f aea7 	beq.w	800a222 <_dtoa_r+0x5e2>
 800a4d4:	f1b9 0f00 	cmp.w	r9, #0
 800a4d8:	d005      	beq.n	800a4e6 <_dtoa_r+0x8a6>
 800a4da:	45b9      	cmp	r9, r7
 800a4dc:	d003      	beq.n	800a4e6 <_dtoa_r+0x8a6>
 800a4de:	4649      	mov	r1, r9
 800a4e0:	4630      	mov	r0, r6
 800a4e2:	f000 fd0f 	bl	800af04 <_Bfree>
 800a4e6:	4639      	mov	r1, r7
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	f000 fd0b 	bl	800af04 <_Bfree>
 800a4ee:	e698      	b.n	800a222 <_dtoa_r+0x5e2>
 800a4f0:	2400      	movs	r4, #0
 800a4f2:	4627      	mov	r7, r4
 800a4f4:	e7e0      	b.n	800a4b8 <_dtoa_r+0x878>
 800a4f6:	46bb      	mov	fp, r7
 800a4f8:	4604      	mov	r4, r0
 800a4fa:	4607      	mov	r7, r0
 800a4fc:	e5ba      	b.n	800a074 <_dtoa_r+0x434>
 800a4fe:	9b08      	ldr	r3, [sp, #32]
 800a500:	46ca      	mov	sl, r9
 800a502:	2b00      	cmp	r3, #0
 800a504:	f000 8100 	beq.w	800a708 <_dtoa_r+0xac8>
 800a508:	f1b8 0f00 	cmp.w	r8, #0
 800a50c:	dd05      	ble.n	800a51a <_dtoa_r+0x8da>
 800a50e:	4639      	mov	r1, r7
 800a510:	4642      	mov	r2, r8
 800a512:	4630      	mov	r0, r6
 800a514:	f000 ff12 	bl	800b33c <__lshift>
 800a518:	4607      	mov	r7, r0
 800a51a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d05d      	beq.n	800a5dc <_dtoa_r+0x99c>
 800a520:	6879      	ldr	r1, [r7, #4]
 800a522:	4630      	mov	r0, r6
 800a524:	f000 fcae 	bl	800ae84 <_Balloc>
 800a528:	4680      	mov	r8, r0
 800a52a:	b928      	cbnz	r0, 800a538 <_dtoa_r+0x8f8>
 800a52c:	4b82      	ldr	r3, [pc, #520]	; (800a738 <_dtoa_r+0xaf8>)
 800a52e:	4602      	mov	r2, r0
 800a530:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a534:	f7ff bb9a 	b.w	8009c6c <_dtoa_r+0x2c>
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	3202      	adds	r2, #2
 800a53c:	0092      	lsls	r2, r2, #2
 800a53e:	f107 010c 	add.w	r1, r7, #12
 800a542:	300c      	adds	r0, #12
 800a544:	f7fd fd5e 	bl	8008004 <memcpy>
 800a548:	2201      	movs	r2, #1
 800a54a:	4641      	mov	r1, r8
 800a54c:	4630      	mov	r0, r6
 800a54e:	f000 fef5 	bl	800b33c <__lshift>
 800a552:	9b00      	ldr	r3, [sp, #0]
 800a554:	3301      	adds	r3, #1
 800a556:	9305      	str	r3, [sp, #20]
 800a558:	9b00      	ldr	r3, [sp, #0]
 800a55a:	4453      	add	r3, sl
 800a55c:	9309      	str	r3, [sp, #36]	; 0x24
 800a55e:	9b02      	ldr	r3, [sp, #8]
 800a560:	f003 0301 	and.w	r3, r3, #1
 800a564:	46b9      	mov	r9, r7
 800a566:	9308      	str	r3, [sp, #32]
 800a568:	4607      	mov	r7, r0
 800a56a:	9b05      	ldr	r3, [sp, #20]
 800a56c:	4621      	mov	r1, r4
 800a56e:	3b01      	subs	r3, #1
 800a570:	4628      	mov	r0, r5
 800a572:	9302      	str	r3, [sp, #8]
 800a574:	f7ff fad8 	bl	8009b28 <quorem>
 800a578:	4603      	mov	r3, r0
 800a57a:	3330      	adds	r3, #48	; 0x30
 800a57c:	9006      	str	r0, [sp, #24]
 800a57e:	4649      	mov	r1, r9
 800a580:	4628      	mov	r0, r5
 800a582:	930a      	str	r3, [sp, #40]	; 0x28
 800a584:	f000 ff46 	bl	800b414 <__mcmp>
 800a588:	463a      	mov	r2, r7
 800a58a:	4682      	mov	sl, r0
 800a58c:	4621      	mov	r1, r4
 800a58e:	4630      	mov	r0, r6
 800a590:	f000 ff5c 	bl	800b44c <__mdiff>
 800a594:	68c2      	ldr	r2, [r0, #12]
 800a596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a598:	4680      	mov	r8, r0
 800a59a:	bb0a      	cbnz	r2, 800a5e0 <_dtoa_r+0x9a0>
 800a59c:	4601      	mov	r1, r0
 800a59e:	4628      	mov	r0, r5
 800a5a0:	f000 ff38 	bl	800b414 <__mcmp>
 800a5a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	4641      	mov	r1, r8
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	920e      	str	r2, [sp, #56]	; 0x38
 800a5ae:	930a      	str	r3, [sp, #40]	; 0x28
 800a5b0:	f000 fca8 	bl	800af04 <_Bfree>
 800a5b4:	9b07      	ldr	r3, [sp, #28]
 800a5b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5b8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a5bc:	ea43 0102 	orr.w	r1, r3, r2
 800a5c0:	9b08      	ldr	r3, [sp, #32]
 800a5c2:	430b      	orrs	r3, r1
 800a5c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5c6:	d10d      	bne.n	800a5e4 <_dtoa_r+0x9a4>
 800a5c8:	2b39      	cmp	r3, #57	; 0x39
 800a5ca:	d029      	beq.n	800a620 <_dtoa_r+0x9e0>
 800a5cc:	f1ba 0f00 	cmp.w	sl, #0
 800a5d0:	dd01      	ble.n	800a5d6 <_dtoa_r+0x996>
 800a5d2:	9b06      	ldr	r3, [sp, #24]
 800a5d4:	3331      	adds	r3, #49	; 0x31
 800a5d6:	9a02      	ldr	r2, [sp, #8]
 800a5d8:	7013      	strb	r3, [r2, #0]
 800a5da:	e774      	b.n	800a4c6 <_dtoa_r+0x886>
 800a5dc:	4638      	mov	r0, r7
 800a5de:	e7b8      	b.n	800a552 <_dtoa_r+0x912>
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	e7e1      	b.n	800a5a8 <_dtoa_r+0x968>
 800a5e4:	f1ba 0f00 	cmp.w	sl, #0
 800a5e8:	db06      	blt.n	800a5f8 <_dtoa_r+0x9b8>
 800a5ea:	9907      	ldr	r1, [sp, #28]
 800a5ec:	ea41 0a0a 	orr.w	sl, r1, sl
 800a5f0:	9908      	ldr	r1, [sp, #32]
 800a5f2:	ea5a 0101 	orrs.w	r1, sl, r1
 800a5f6:	d120      	bne.n	800a63a <_dtoa_r+0x9fa>
 800a5f8:	2a00      	cmp	r2, #0
 800a5fa:	ddec      	ble.n	800a5d6 <_dtoa_r+0x996>
 800a5fc:	4629      	mov	r1, r5
 800a5fe:	2201      	movs	r2, #1
 800a600:	4630      	mov	r0, r6
 800a602:	9305      	str	r3, [sp, #20]
 800a604:	f000 fe9a 	bl	800b33c <__lshift>
 800a608:	4621      	mov	r1, r4
 800a60a:	4605      	mov	r5, r0
 800a60c:	f000 ff02 	bl	800b414 <__mcmp>
 800a610:	2800      	cmp	r0, #0
 800a612:	9b05      	ldr	r3, [sp, #20]
 800a614:	dc02      	bgt.n	800a61c <_dtoa_r+0x9dc>
 800a616:	d1de      	bne.n	800a5d6 <_dtoa_r+0x996>
 800a618:	07da      	lsls	r2, r3, #31
 800a61a:	d5dc      	bpl.n	800a5d6 <_dtoa_r+0x996>
 800a61c:	2b39      	cmp	r3, #57	; 0x39
 800a61e:	d1d8      	bne.n	800a5d2 <_dtoa_r+0x992>
 800a620:	9a02      	ldr	r2, [sp, #8]
 800a622:	2339      	movs	r3, #57	; 0x39
 800a624:	7013      	strb	r3, [r2, #0]
 800a626:	4643      	mov	r3, r8
 800a628:	4698      	mov	r8, r3
 800a62a:	3b01      	subs	r3, #1
 800a62c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a630:	2a39      	cmp	r2, #57	; 0x39
 800a632:	d051      	beq.n	800a6d8 <_dtoa_r+0xa98>
 800a634:	3201      	adds	r2, #1
 800a636:	701a      	strb	r2, [r3, #0]
 800a638:	e745      	b.n	800a4c6 <_dtoa_r+0x886>
 800a63a:	2a00      	cmp	r2, #0
 800a63c:	dd03      	ble.n	800a646 <_dtoa_r+0xa06>
 800a63e:	2b39      	cmp	r3, #57	; 0x39
 800a640:	d0ee      	beq.n	800a620 <_dtoa_r+0x9e0>
 800a642:	3301      	adds	r3, #1
 800a644:	e7c7      	b.n	800a5d6 <_dtoa_r+0x996>
 800a646:	9a05      	ldr	r2, [sp, #20]
 800a648:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a64a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a64e:	428a      	cmp	r2, r1
 800a650:	d02b      	beq.n	800a6aa <_dtoa_r+0xa6a>
 800a652:	4629      	mov	r1, r5
 800a654:	2300      	movs	r3, #0
 800a656:	220a      	movs	r2, #10
 800a658:	4630      	mov	r0, r6
 800a65a:	f000 fc75 	bl	800af48 <__multadd>
 800a65e:	45b9      	cmp	r9, r7
 800a660:	4605      	mov	r5, r0
 800a662:	f04f 0300 	mov.w	r3, #0
 800a666:	f04f 020a 	mov.w	r2, #10
 800a66a:	4649      	mov	r1, r9
 800a66c:	4630      	mov	r0, r6
 800a66e:	d107      	bne.n	800a680 <_dtoa_r+0xa40>
 800a670:	f000 fc6a 	bl	800af48 <__multadd>
 800a674:	4681      	mov	r9, r0
 800a676:	4607      	mov	r7, r0
 800a678:	9b05      	ldr	r3, [sp, #20]
 800a67a:	3301      	adds	r3, #1
 800a67c:	9305      	str	r3, [sp, #20]
 800a67e:	e774      	b.n	800a56a <_dtoa_r+0x92a>
 800a680:	f000 fc62 	bl	800af48 <__multadd>
 800a684:	4639      	mov	r1, r7
 800a686:	4681      	mov	r9, r0
 800a688:	2300      	movs	r3, #0
 800a68a:	220a      	movs	r2, #10
 800a68c:	4630      	mov	r0, r6
 800a68e:	f000 fc5b 	bl	800af48 <__multadd>
 800a692:	4607      	mov	r7, r0
 800a694:	e7f0      	b.n	800a678 <_dtoa_r+0xa38>
 800a696:	f1ba 0f00 	cmp.w	sl, #0
 800a69a:	9a00      	ldr	r2, [sp, #0]
 800a69c:	bfcc      	ite	gt
 800a69e:	46d0      	movgt	r8, sl
 800a6a0:	f04f 0801 	movle.w	r8, #1
 800a6a4:	4490      	add	r8, r2
 800a6a6:	f04f 0900 	mov.w	r9, #0
 800a6aa:	4629      	mov	r1, r5
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	9302      	str	r3, [sp, #8]
 800a6b2:	f000 fe43 	bl	800b33c <__lshift>
 800a6b6:	4621      	mov	r1, r4
 800a6b8:	4605      	mov	r5, r0
 800a6ba:	f000 feab 	bl	800b414 <__mcmp>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	dcb1      	bgt.n	800a626 <_dtoa_r+0x9e6>
 800a6c2:	d102      	bne.n	800a6ca <_dtoa_r+0xa8a>
 800a6c4:	9b02      	ldr	r3, [sp, #8]
 800a6c6:	07db      	lsls	r3, r3, #31
 800a6c8:	d4ad      	bmi.n	800a626 <_dtoa_r+0x9e6>
 800a6ca:	4643      	mov	r3, r8
 800a6cc:	4698      	mov	r8, r3
 800a6ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6d2:	2a30      	cmp	r2, #48	; 0x30
 800a6d4:	d0fa      	beq.n	800a6cc <_dtoa_r+0xa8c>
 800a6d6:	e6f6      	b.n	800a4c6 <_dtoa_r+0x886>
 800a6d8:	9a00      	ldr	r2, [sp, #0]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d1a4      	bne.n	800a628 <_dtoa_r+0x9e8>
 800a6de:	f10b 0b01 	add.w	fp, fp, #1
 800a6e2:	2331      	movs	r3, #49	; 0x31
 800a6e4:	e778      	b.n	800a5d8 <_dtoa_r+0x998>
 800a6e6:	4b15      	ldr	r3, [pc, #84]	; (800a73c <_dtoa_r+0xafc>)
 800a6e8:	f7ff bb12 	b.w	8009d10 <_dtoa_r+0xd0>
 800a6ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f47f aaee 	bne.w	8009cd0 <_dtoa_r+0x90>
 800a6f4:	4b12      	ldr	r3, [pc, #72]	; (800a740 <_dtoa_r+0xb00>)
 800a6f6:	f7ff bb0b 	b.w	8009d10 <_dtoa_r+0xd0>
 800a6fa:	f1ba 0f00 	cmp.w	sl, #0
 800a6fe:	dc03      	bgt.n	800a708 <_dtoa_r+0xac8>
 800a700:	9b07      	ldr	r3, [sp, #28]
 800a702:	2b02      	cmp	r3, #2
 800a704:	f73f aec7 	bgt.w	800a496 <_dtoa_r+0x856>
 800a708:	f8dd 8000 	ldr.w	r8, [sp]
 800a70c:	4621      	mov	r1, r4
 800a70e:	4628      	mov	r0, r5
 800a710:	f7ff fa0a 	bl	8009b28 <quorem>
 800a714:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a718:	f808 3b01 	strb.w	r3, [r8], #1
 800a71c:	9a00      	ldr	r2, [sp, #0]
 800a71e:	eba8 0202 	sub.w	r2, r8, r2
 800a722:	4592      	cmp	sl, r2
 800a724:	ddb7      	ble.n	800a696 <_dtoa_r+0xa56>
 800a726:	4629      	mov	r1, r5
 800a728:	2300      	movs	r3, #0
 800a72a:	220a      	movs	r2, #10
 800a72c:	4630      	mov	r0, r6
 800a72e:	f000 fc0b 	bl	800af48 <__multadd>
 800a732:	4605      	mov	r5, r0
 800a734:	e7ea      	b.n	800a70c <_dtoa_r+0xacc>
 800a736:	bf00      	nop
 800a738:	0800d1ec 	.word	0x0800d1ec
 800a73c:	0800d3f1 	.word	0x0800d3f1
 800a740:	0800d169 	.word	0x0800d169

0800a744 <rshift>:
 800a744:	6903      	ldr	r3, [r0, #16]
 800a746:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a74a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a74e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a752:	f100 0414 	add.w	r4, r0, #20
 800a756:	dd45      	ble.n	800a7e4 <rshift+0xa0>
 800a758:	f011 011f 	ands.w	r1, r1, #31
 800a75c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a760:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a764:	d10c      	bne.n	800a780 <rshift+0x3c>
 800a766:	f100 0710 	add.w	r7, r0, #16
 800a76a:	4629      	mov	r1, r5
 800a76c:	42b1      	cmp	r1, r6
 800a76e:	d334      	bcc.n	800a7da <rshift+0x96>
 800a770:	1a9b      	subs	r3, r3, r2
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	1eea      	subs	r2, r5, #3
 800a776:	4296      	cmp	r6, r2
 800a778:	bf38      	it	cc
 800a77a:	2300      	movcc	r3, #0
 800a77c:	4423      	add	r3, r4
 800a77e:	e015      	b.n	800a7ac <rshift+0x68>
 800a780:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a784:	f1c1 0820 	rsb	r8, r1, #32
 800a788:	40cf      	lsrs	r7, r1
 800a78a:	f105 0e04 	add.w	lr, r5, #4
 800a78e:	46a1      	mov	r9, r4
 800a790:	4576      	cmp	r6, lr
 800a792:	46f4      	mov	ip, lr
 800a794:	d815      	bhi.n	800a7c2 <rshift+0x7e>
 800a796:	1a9b      	subs	r3, r3, r2
 800a798:	009a      	lsls	r2, r3, #2
 800a79a:	3a04      	subs	r2, #4
 800a79c:	3501      	adds	r5, #1
 800a79e:	42ae      	cmp	r6, r5
 800a7a0:	bf38      	it	cc
 800a7a2:	2200      	movcc	r2, #0
 800a7a4:	18a3      	adds	r3, r4, r2
 800a7a6:	50a7      	str	r7, [r4, r2]
 800a7a8:	b107      	cbz	r7, 800a7ac <rshift+0x68>
 800a7aa:	3304      	adds	r3, #4
 800a7ac:	1b1a      	subs	r2, r3, r4
 800a7ae:	42a3      	cmp	r3, r4
 800a7b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a7b4:	bf08      	it	eq
 800a7b6:	2300      	moveq	r3, #0
 800a7b8:	6102      	str	r2, [r0, #16]
 800a7ba:	bf08      	it	eq
 800a7bc:	6143      	streq	r3, [r0, #20]
 800a7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7c2:	f8dc c000 	ldr.w	ip, [ip]
 800a7c6:	fa0c fc08 	lsl.w	ip, ip, r8
 800a7ca:	ea4c 0707 	orr.w	r7, ip, r7
 800a7ce:	f849 7b04 	str.w	r7, [r9], #4
 800a7d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a7d6:	40cf      	lsrs	r7, r1
 800a7d8:	e7da      	b.n	800a790 <rshift+0x4c>
 800a7da:	f851 cb04 	ldr.w	ip, [r1], #4
 800a7de:	f847 cf04 	str.w	ip, [r7, #4]!
 800a7e2:	e7c3      	b.n	800a76c <rshift+0x28>
 800a7e4:	4623      	mov	r3, r4
 800a7e6:	e7e1      	b.n	800a7ac <rshift+0x68>

0800a7e8 <__hexdig_fun>:
 800a7e8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a7ec:	2b09      	cmp	r3, #9
 800a7ee:	d802      	bhi.n	800a7f6 <__hexdig_fun+0xe>
 800a7f0:	3820      	subs	r0, #32
 800a7f2:	b2c0      	uxtb	r0, r0
 800a7f4:	4770      	bx	lr
 800a7f6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a7fa:	2b05      	cmp	r3, #5
 800a7fc:	d801      	bhi.n	800a802 <__hexdig_fun+0x1a>
 800a7fe:	3847      	subs	r0, #71	; 0x47
 800a800:	e7f7      	b.n	800a7f2 <__hexdig_fun+0xa>
 800a802:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a806:	2b05      	cmp	r3, #5
 800a808:	d801      	bhi.n	800a80e <__hexdig_fun+0x26>
 800a80a:	3827      	subs	r0, #39	; 0x27
 800a80c:	e7f1      	b.n	800a7f2 <__hexdig_fun+0xa>
 800a80e:	2000      	movs	r0, #0
 800a810:	4770      	bx	lr
	...

0800a814 <__gethex>:
 800a814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a818:	ed2d 8b02 	vpush	{d8}
 800a81c:	b089      	sub	sp, #36	; 0x24
 800a81e:	ee08 0a10 	vmov	s16, r0
 800a822:	9304      	str	r3, [sp, #16]
 800a824:	4bbc      	ldr	r3, [pc, #752]	; (800ab18 <__gethex+0x304>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	9301      	str	r3, [sp, #4]
 800a82a:	4618      	mov	r0, r3
 800a82c:	468b      	mov	fp, r1
 800a82e:	4690      	mov	r8, r2
 800a830:	f7f5 fd06 	bl	8000240 <strlen>
 800a834:	9b01      	ldr	r3, [sp, #4]
 800a836:	f8db 2000 	ldr.w	r2, [fp]
 800a83a:	4403      	add	r3, r0
 800a83c:	4682      	mov	sl, r0
 800a83e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a842:	9305      	str	r3, [sp, #20]
 800a844:	1c93      	adds	r3, r2, #2
 800a846:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a84a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a84e:	32fe      	adds	r2, #254	; 0xfe
 800a850:	18d1      	adds	r1, r2, r3
 800a852:	461f      	mov	r7, r3
 800a854:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a858:	9100      	str	r1, [sp, #0]
 800a85a:	2830      	cmp	r0, #48	; 0x30
 800a85c:	d0f8      	beq.n	800a850 <__gethex+0x3c>
 800a85e:	f7ff ffc3 	bl	800a7e8 <__hexdig_fun>
 800a862:	4604      	mov	r4, r0
 800a864:	2800      	cmp	r0, #0
 800a866:	d13a      	bne.n	800a8de <__gethex+0xca>
 800a868:	9901      	ldr	r1, [sp, #4]
 800a86a:	4652      	mov	r2, sl
 800a86c:	4638      	mov	r0, r7
 800a86e:	f001 fd5d 	bl	800c32c <strncmp>
 800a872:	4605      	mov	r5, r0
 800a874:	2800      	cmp	r0, #0
 800a876:	d168      	bne.n	800a94a <__gethex+0x136>
 800a878:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a87c:	eb07 060a 	add.w	r6, r7, sl
 800a880:	f7ff ffb2 	bl	800a7e8 <__hexdig_fun>
 800a884:	2800      	cmp	r0, #0
 800a886:	d062      	beq.n	800a94e <__gethex+0x13a>
 800a888:	4633      	mov	r3, r6
 800a88a:	7818      	ldrb	r0, [r3, #0]
 800a88c:	2830      	cmp	r0, #48	; 0x30
 800a88e:	461f      	mov	r7, r3
 800a890:	f103 0301 	add.w	r3, r3, #1
 800a894:	d0f9      	beq.n	800a88a <__gethex+0x76>
 800a896:	f7ff ffa7 	bl	800a7e8 <__hexdig_fun>
 800a89a:	2301      	movs	r3, #1
 800a89c:	fab0 f480 	clz	r4, r0
 800a8a0:	0964      	lsrs	r4, r4, #5
 800a8a2:	4635      	mov	r5, r6
 800a8a4:	9300      	str	r3, [sp, #0]
 800a8a6:	463a      	mov	r2, r7
 800a8a8:	4616      	mov	r6, r2
 800a8aa:	3201      	adds	r2, #1
 800a8ac:	7830      	ldrb	r0, [r6, #0]
 800a8ae:	f7ff ff9b 	bl	800a7e8 <__hexdig_fun>
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	d1f8      	bne.n	800a8a8 <__gethex+0x94>
 800a8b6:	9901      	ldr	r1, [sp, #4]
 800a8b8:	4652      	mov	r2, sl
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	f001 fd36 	bl	800c32c <strncmp>
 800a8c0:	b980      	cbnz	r0, 800a8e4 <__gethex+0xd0>
 800a8c2:	b94d      	cbnz	r5, 800a8d8 <__gethex+0xc4>
 800a8c4:	eb06 050a 	add.w	r5, r6, sl
 800a8c8:	462a      	mov	r2, r5
 800a8ca:	4616      	mov	r6, r2
 800a8cc:	3201      	adds	r2, #1
 800a8ce:	7830      	ldrb	r0, [r6, #0]
 800a8d0:	f7ff ff8a 	bl	800a7e8 <__hexdig_fun>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d1f8      	bne.n	800a8ca <__gethex+0xb6>
 800a8d8:	1bad      	subs	r5, r5, r6
 800a8da:	00ad      	lsls	r5, r5, #2
 800a8dc:	e004      	b.n	800a8e8 <__gethex+0xd4>
 800a8de:	2400      	movs	r4, #0
 800a8e0:	4625      	mov	r5, r4
 800a8e2:	e7e0      	b.n	800a8a6 <__gethex+0x92>
 800a8e4:	2d00      	cmp	r5, #0
 800a8e6:	d1f7      	bne.n	800a8d8 <__gethex+0xc4>
 800a8e8:	7833      	ldrb	r3, [r6, #0]
 800a8ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a8ee:	2b50      	cmp	r3, #80	; 0x50
 800a8f0:	d13b      	bne.n	800a96a <__gethex+0x156>
 800a8f2:	7873      	ldrb	r3, [r6, #1]
 800a8f4:	2b2b      	cmp	r3, #43	; 0x2b
 800a8f6:	d02c      	beq.n	800a952 <__gethex+0x13e>
 800a8f8:	2b2d      	cmp	r3, #45	; 0x2d
 800a8fa:	d02e      	beq.n	800a95a <__gethex+0x146>
 800a8fc:	1c71      	adds	r1, r6, #1
 800a8fe:	f04f 0900 	mov.w	r9, #0
 800a902:	7808      	ldrb	r0, [r1, #0]
 800a904:	f7ff ff70 	bl	800a7e8 <__hexdig_fun>
 800a908:	1e43      	subs	r3, r0, #1
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	2b18      	cmp	r3, #24
 800a90e:	d82c      	bhi.n	800a96a <__gethex+0x156>
 800a910:	f1a0 0210 	sub.w	r2, r0, #16
 800a914:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a918:	f7ff ff66 	bl	800a7e8 <__hexdig_fun>
 800a91c:	1e43      	subs	r3, r0, #1
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	2b18      	cmp	r3, #24
 800a922:	d91d      	bls.n	800a960 <__gethex+0x14c>
 800a924:	f1b9 0f00 	cmp.w	r9, #0
 800a928:	d000      	beq.n	800a92c <__gethex+0x118>
 800a92a:	4252      	negs	r2, r2
 800a92c:	4415      	add	r5, r2
 800a92e:	f8cb 1000 	str.w	r1, [fp]
 800a932:	b1e4      	cbz	r4, 800a96e <__gethex+0x15a>
 800a934:	9b00      	ldr	r3, [sp, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	bf14      	ite	ne
 800a93a:	2700      	movne	r7, #0
 800a93c:	2706      	moveq	r7, #6
 800a93e:	4638      	mov	r0, r7
 800a940:	b009      	add	sp, #36	; 0x24
 800a942:	ecbd 8b02 	vpop	{d8}
 800a946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a94a:	463e      	mov	r6, r7
 800a94c:	4625      	mov	r5, r4
 800a94e:	2401      	movs	r4, #1
 800a950:	e7ca      	b.n	800a8e8 <__gethex+0xd4>
 800a952:	f04f 0900 	mov.w	r9, #0
 800a956:	1cb1      	adds	r1, r6, #2
 800a958:	e7d3      	b.n	800a902 <__gethex+0xee>
 800a95a:	f04f 0901 	mov.w	r9, #1
 800a95e:	e7fa      	b.n	800a956 <__gethex+0x142>
 800a960:	230a      	movs	r3, #10
 800a962:	fb03 0202 	mla	r2, r3, r2, r0
 800a966:	3a10      	subs	r2, #16
 800a968:	e7d4      	b.n	800a914 <__gethex+0x100>
 800a96a:	4631      	mov	r1, r6
 800a96c:	e7df      	b.n	800a92e <__gethex+0x11a>
 800a96e:	1bf3      	subs	r3, r6, r7
 800a970:	3b01      	subs	r3, #1
 800a972:	4621      	mov	r1, r4
 800a974:	2b07      	cmp	r3, #7
 800a976:	dc0b      	bgt.n	800a990 <__gethex+0x17c>
 800a978:	ee18 0a10 	vmov	r0, s16
 800a97c:	f000 fa82 	bl	800ae84 <_Balloc>
 800a980:	4604      	mov	r4, r0
 800a982:	b940      	cbnz	r0, 800a996 <__gethex+0x182>
 800a984:	4b65      	ldr	r3, [pc, #404]	; (800ab1c <__gethex+0x308>)
 800a986:	4602      	mov	r2, r0
 800a988:	21de      	movs	r1, #222	; 0xde
 800a98a:	4865      	ldr	r0, [pc, #404]	; (800ab20 <__gethex+0x30c>)
 800a98c:	f001 fda6 	bl	800c4dc <__assert_func>
 800a990:	3101      	adds	r1, #1
 800a992:	105b      	asrs	r3, r3, #1
 800a994:	e7ee      	b.n	800a974 <__gethex+0x160>
 800a996:	f100 0914 	add.w	r9, r0, #20
 800a99a:	f04f 0b00 	mov.w	fp, #0
 800a99e:	f1ca 0301 	rsb	r3, sl, #1
 800a9a2:	f8cd 9008 	str.w	r9, [sp, #8]
 800a9a6:	f8cd b000 	str.w	fp, [sp]
 800a9aa:	9306      	str	r3, [sp, #24]
 800a9ac:	42b7      	cmp	r7, r6
 800a9ae:	d340      	bcc.n	800aa32 <__gethex+0x21e>
 800a9b0:	9802      	ldr	r0, [sp, #8]
 800a9b2:	9b00      	ldr	r3, [sp, #0]
 800a9b4:	f840 3b04 	str.w	r3, [r0], #4
 800a9b8:	eba0 0009 	sub.w	r0, r0, r9
 800a9bc:	1080      	asrs	r0, r0, #2
 800a9be:	0146      	lsls	r6, r0, #5
 800a9c0:	6120      	str	r0, [r4, #16]
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f000 fb54 	bl	800b070 <__hi0bits>
 800a9c8:	1a30      	subs	r0, r6, r0
 800a9ca:	f8d8 6000 	ldr.w	r6, [r8]
 800a9ce:	42b0      	cmp	r0, r6
 800a9d0:	dd63      	ble.n	800aa9a <__gethex+0x286>
 800a9d2:	1b87      	subs	r7, r0, r6
 800a9d4:	4639      	mov	r1, r7
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	f000 feef 	bl	800b7ba <__any_on>
 800a9dc:	4682      	mov	sl, r0
 800a9de:	b1a8      	cbz	r0, 800aa0c <__gethex+0x1f8>
 800a9e0:	1e7b      	subs	r3, r7, #1
 800a9e2:	1159      	asrs	r1, r3, #5
 800a9e4:	f003 021f 	and.w	r2, r3, #31
 800a9e8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a9ec:	f04f 0a01 	mov.w	sl, #1
 800a9f0:	fa0a f202 	lsl.w	r2, sl, r2
 800a9f4:	420a      	tst	r2, r1
 800a9f6:	d009      	beq.n	800aa0c <__gethex+0x1f8>
 800a9f8:	4553      	cmp	r3, sl
 800a9fa:	dd05      	ble.n	800aa08 <__gethex+0x1f4>
 800a9fc:	1eb9      	subs	r1, r7, #2
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f000 fedb 	bl	800b7ba <__any_on>
 800aa04:	2800      	cmp	r0, #0
 800aa06:	d145      	bne.n	800aa94 <__gethex+0x280>
 800aa08:	f04f 0a02 	mov.w	sl, #2
 800aa0c:	4639      	mov	r1, r7
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f7ff fe98 	bl	800a744 <rshift>
 800aa14:	443d      	add	r5, r7
 800aa16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa1a:	42ab      	cmp	r3, r5
 800aa1c:	da4c      	bge.n	800aab8 <__gethex+0x2a4>
 800aa1e:	ee18 0a10 	vmov	r0, s16
 800aa22:	4621      	mov	r1, r4
 800aa24:	f000 fa6e 	bl	800af04 <_Bfree>
 800aa28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	6013      	str	r3, [r2, #0]
 800aa2e:	27a3      	movs	r7, #163	; 0xa3
 800aa30:	e785      	b.n	800a93e <__gethex+0x12a>
 800aa32:	1e73      	subs	r3, r6, #1
 800aa34:	9a05      	ldr	r2, [sp, #20]
 800aa36:	9303      	str	r3, [sp, #12]
 800aa38:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d019      	beq.n	800aa74 <__gethex+0x260>
 800aa40:	f1bb 0f20 	cmp.w	fp, #32
 800aa44:	d107      	bne.n	800aa56 <__gethex+0x242>
 800aa46:	9b02      	ldr	r3, [sp, #8]
 800aa48:	9a00      	ldr	r2, [sp, #0]
 800aa4a:	f843 2b04 	str.w	r2, [r3], #4
 800aa4e:	9302      	str	r3, [sp, #8]
 800aa50:	2300      	movs	r3, #0
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	469b      	mov	fp, r3
 800aa56:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800aa5a:	f7ff fec5 	bl	800a7e8 <__hexdig_fun>
 800aa5e:	9b00      	ldr	r3, [sp, #0]
 800aa60:	f000 000f 	and.w	r0, r0, #15
 800aa64:	fa00 f00b 	lsl.w	r0, r0, fp
 800aa68:	4303      	orrs	r3, r0
 800aa6a:	9300      	str	r3, [sp, #0]
 800aa6c:	f10b 0b04 	add.w	fp, fp, #4
 800aa70:	9b03      	ldr	r3, [sp, #12]
 800aa72:	e00d      	b.n	800aa90 <__gethex+0x27c>
 800aa74:	9b03      	ldr	r3, [sp, #12]
 800aa76:	9a06      	ldr	r2, [sp, #24]
 800aa78:	4413      	add	r3, r2
 800aa7a:	42bb      	cmp	r3, r7
 800aa7c:	d3e0      	bcc.n	800aa40 <__gethex+0x22c>
 800aa7e:	4618      	mov	r0, r3
 800aa80:	9901      	ldr	r1, [sp, #4]
 800aa82:	9307      	str	r3, [sp, #28]
 800aa84:	4652      	mov	r2, sl
 800aa86:	f001 fc51 	bl	800c32c <strncmp>
 800aa8a:	9b07      	ldr	r3, [sp, #28]
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	d1d7      	bne.n	800aa40 <__gethex+0x22c>
 800aa90:	461e      	mov	r6, r3
 800aa92:	e78b      	b.n	800a9ac <__gethex+0x198>
 800aa94:	f04f 0a03 	mov.w	sl, #3
 800aa98:	e7b8      	b.n	800aa0c <__gethex+0x1f8>
 800aa9a:	da0a      	bge.n	800aab2 <__gethex+0x29e>
 800aa9c:	1a37      	subs	r7, r6, r0
 800aa9e:	4621      	mov	r1, r4
 800aaa0:	ee18 0a10 	vmov	r0, s16
 800aaa4:	463a      	mov	r2, r7
 800aaa6:	f000 fc49 	bl	800b33c <__lshift>
 800aaaa:	1bed      	subs	r5, r5, r7
 800aaac:	4604      	mov	r4, r0
 800aaae:	f100 0914 	add.w	r9, r0, #20
 800aab2:	f04f 0a00 	mov.w	sl, #0
 800aab6:	e7ae      	b.n	800aa16 <__gethex+0x202>
 800aab8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aabc:	42a8      	cmp	r0, r5
 800aabe:	dd72      	ble.n	800aba6 <__gethex+0x392>
 800aac0:	1b45      	subs	r5, r0, r5
 800aac2:	42ae      	cmp	r6, r5
 800aac4:	dc36      	bgt.n	800ab34 <__gethex+0x320>
 800aac6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d02a      	beq.n	800ab24 <__gethex+0x310>
 800aace:	2b03      	cmp	r3, #3
 800aad0:	d02c      	beq.n	800ab2c <__gethex+0x318>
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d115      	bne.n	800ab02 <__gethex+0x2ee>
 800aad6:	42ae      	cmp	r6, r5
 800aad8:	d113      	bne.n	800ab02 <__gethex+0x2ee>
 800aada:	2e01      	cmp	r6, #1
 800aadc:	d10b      	bne.n	800aaf6 <__gethex+0x2e2>
 800aade:	9a04      	ldr	r2, [sp, #16]
 800aae0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aae4:	6013      	str	r3, [r2, #0]
 800aae6:	2301      	movs	r3, #1
 800aae8:	6123      	str	r3, [r4, #16]
 800aaea:	f8c9 3000 	str.w	r3, [r9]
 800aaee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aaf0:	2762      	movs	r7, #98	; 0x62
 800aaf2:	601c      	str	r4, [r3, #0]
 800aaf4:	e723      	b.n	800a93e <__gethex+0x12a>
 800aaf6:	1e71      	subs	r1, r6, #1
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f000 fe5e 	bl	800b7ba <__any_on>
 800aafe:	2800      	cmp	r0, #0
 800ab00:	d1ed      	bne.n	800aade <__gethex+0x2ca>
 800ab02:	ee18 0a10 	vmov	r0, s16
 800ab06:	4621      	mov	r1, r4
 800ab08:	f000 f9fc 	bl	800af04 <_Bfree>
 800ab0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab0e:	2300      	movs	r3, #0
 800ab10:	6013      	str	r3, [r2, #0]
 800ab12:	2750      	movs	r7, #80	; 0x50
 800ab14:	e713      	b.n	800a93e <__gethex+0x12a>
 800ab16:	bf00      	nop
 800ab18:	0800d268 	.word	0x0800d268
 800ab1c:	0800d1ec 	.word	0x0800d1ec
 800ab20:	0800d1fd 	.word	0x0800d1fd
 800ab24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1eb      	bne.n	800ab02 <__gethex+0x2ee>
 800ab2a:	e7d8      	b.n	800aade <__gethex+0x2ca>
 800ab2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1d5      	bne.n	800aade <__gethex+0x2ca>
 800ab32:	e7e6      	b.n	800ab02 <__gethex+0x2ee>
 800ab34:	1e6f      	subs	r7, r5, #1
 800ab36:	f1ba 0f00 	cmp.w	sl, #0
 800ab3a:	d131      	bne.n	800aba0 <__gethex+0x38c>
 800ab3c:	b127      	cbz	r7, 800ab48 <__gethex+0x334>
 800ab3e:	4639      	mov	r1, r7
 800ab40:	4620      	mov	r0, r4
 800ab42:	f000 fe3a 	bl	800b7ba <__any_on>
 800ab46:	4682      	mov	sl, r0
 800ab48:	117b      	asrs	r3, r7, #5
 800ab4a:	2101      	movs	r1, #1
 800ab4c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ab50:	f007 071f 	and.w	r7, r7, #31
 800ab54:	fa01 f707 	lsl.w	r7, r1, r7
 800ab58:	421f      	tst	r7, r3
 800ab5a:	4629      	mov	r1, r5
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	bf18      	it	ne
 800ab60:	f04a 0a02 	orrne.w	sl, sl, #2
 800ab64:	1b76      	subs	r6, r6, r5
 800ab66:	f7ff fded 	bl	800a744 <rshift>
 800ab6a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ab6e:	2702      	movs	r7, #2
 800ab70:	f1ba 0f00 	cmp.w	sl, #0
 800ab74:	d048      	beq.n	800ac08 <__gethex+0x3f4>
 800ab76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	d015      	beq.n	800abaa <__gethex+0x396>
 800ab7e:	2b03      	cmp	r3, #3
 800ab80:	d017      	beq.n	800abb2 <__gethex+0x39e>
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d109      	bne.n	800ab9a <__gethex+0x386>
 800ab86:	f01a 0f02 	tst.w	sl, #2
 800ab8a:	d006      	beq.n	800ab9a <__gethex+0x386>
 800ab8c:	f8d9 0000 	ldr.w	r0, [r9]
 800ab90:	ea4a 0a00 	orr.w	sl, sl, r0
 800ab94:	f01a 0f01 	tst.w	sl, #1
 800ab98:	d10e      	bne.n	800abb8 <__gethex+0x3a4>
 800ab9a:	f047 0710 	orr.w	r7, r7, #16
 800ab9e:	e033      	b.n	800ac08 <__gethex+0x3f4>
 800aba0:	f04f 0a01 	mov.w	sl, #1
 800aba4:	e7d0      	b.n	800ab48 <__gethex+0x334>
 800aba6:	2701      	movs	r7, #1
 800aba8:	e7e2      	b.n	800ab70 <__gethex+0x35c>
 800abaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abac:	f1c3 0301 	rsb	r3, r3, #1
 800abb0:	9315      	str	r3, [sp, #84]	; 0x54
 800abb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d0f0      	beq.n	800ab9a <__gethex+0x386>
 800abb8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800abbc:	f104 0314 	add.w	r3, r4, #20
 800abc0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800abc4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800abc8:	f04f 0c00 	mov.w	ip, #0
 800abcc:	4618      	mov	r0, r3
 800abce:	f853 2b04 	ldr.w	r2, [r3], #4
 800abd2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800abd6:	d01c      	beq.n	800ac12 <__gethex+0x3fe>
 800abd8:	3201      	adds	r2, #1
 800abda:	6002      	str	r2, [r0, #0]
 800abdc:	2f02      	cmp	r7, #2
 800abde:	f104 0314 	add.w	r3, r4, #20
 800abe2:	d13f      	bne.n	800ac64 <__gethex+0x450>
 800abe4:	f8d8 2000 	ldr.w	r2, [r8]
 800abe8:	3a01      	subs	r2, #1
 800abea:	42b2      	cmp	r2, r6
 800abec:	d10a      	bne.n	800ac04 <__gethex+0x3f0>
 800abee:	1171      	asrs	r1, r6, #5
 800abf0:	2201      	movs	r2, #1
 800abf2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800abf6:	f006 061f 	and.w	r6, r6, #31
 800abfa:	fa02 f606 	lsl.w	r6, r2, r6
 800abfe:	421e      	tst	r6, r3
 800ac00:	bf18      	it	ne
 800ac02:	4617      	movne	r7, r2
 800ac04:	f047 0720 	orr.w	r7, r7, #32
 800ac08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac0a:	601c      	str	r4, [r3, #0]
 800ac0c:	9b04      	ldr	r3, [sp, #16]
 800ac0e:	601d      	str	r5, [r3, #0]
 800ac10:	e695      	b.n	800a93e <__gethex+0x12a>
 800ac12:	4299      	cmp	r1, r3
 800ac14:	f843 cc04 	str.w	ip, [r3, #-4]
 800ac18:	d8d8      	bhi.n	800abcc <__gethex+0x3b8>
 800ac1a:	68a3      	ldr	r3, [r4, #8]
 800ac1c:	459b      	cmp	fp, r3
 800ac1e:	db19      	blt.n	800ac54 <__gethex+0x440>
 800ac20:	6861      	ldr	r1, [r4, #4]
 800ac22:	ee18 0a10 	vmov	r0, s16
 800ac26:	3101      	adds	r1, #1
 800ac28:	f000 f92c 	bl	800ae84 <_Balloc>
 800ac2c:	4681      	mov	r9, r0
 800ac2e:	b918      	cbnz	r0, 800ac38 <__gethex+0x424>
 800ac30:	4b1a      	ldr	r3, [pc, #104]	; (800ac9c <__gethex+0x488>)
 800ac32:	4602      	mov	r2, r0
 800ac34:	2184      	movs	r1, #132	; 0x84
 800ac36:	e6a8      	b.n	800a98a <__gethex+0x176>
 800ac38:	6922      	ldr	r2, [r4, #16]
 800ac3a:	3202      	adds	r2, #2
 800ac3c:	f104 010c 	add.w	r1, r4, #12
 800ac40:	0092      	lsls	r2, r2, #2
 800ac42:	300c      	adds	r0, #12
 800ac44:	f7fd f9de 	bl	8008004 <memcpy>
 800ac48:	4621      	mov	r1, r4
 800ac4a:	ee18 0a10 	vmov	r0, s16
 800ac4e:	f000 f959 	bl	800af04 <_Bfree>
 800ac52:	464c      	mov	r4, r9
 800ac54:	6923      	ldr	r3, [r4, #16]
 800ac56:	1c5a      	adds	r2, r3, #1
 800ac58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac5c:	6122      	str	r2, [r4, #16]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	615a      	str	r2, [r3, #20]
 800ac62:	e7bb      	b.n	800abdc <__gethex+0x3c8>
 800ac64:	6922      	ldr	r2, [r4, #16]
 800ac66:	455a      	cmp	r2, fp
 800ac68:	dd0b      	ble.n	800ac82 <__gethex+0x46e>
 800ac6a:	2101      	movs	r1, #1
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	f7ff fd69 	bl	800a744 <rshift>
 800ac72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac76:	3501      	adds	r5, #1
 800ac78:	42ab      	cmp	r3, r5
 800ac7a:	f6ff aed0 	blt.w	800aa1e <__gethex+0x20a>
 800ac7e:	2701      	movs	r7, #1
 800ac80:	e7c0      	b.n	800ac04 <__gethex+0x3f0>
 800ac82:	f016 061f 	ands.w	r6, r6, #31
 800ac86:	d0fa      	beq.n	800ac7e <__gethex+0x46a>
 800ac88:	449a      	add	sl, r3
 800ac8a:	f1c6 0620 	rsb	r6, r6, #32
 800ac8e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ac92:	f000 f9ed 	bl	800b070 <__hi0bits>
 800ac96:	42b0      	cmp	r0, r6
 800ac98:	dbe7      	blt.n	800ac6a <__gethex+0x456>
 800ac9a:	e7f0      	b.n	800ac7e <__gethex+0x46a>
 800ac9c:	0800d1ec 	.word	0x0800d1ec

0800aca0 <L_shift>:
 800aca0:	f1c2 0208 	rsb	r2, r2, #8
 800aca4:	0092      	lsls	r2, r2, #2
 800aca6:	b570      	push	{r4, r5, r6, lr}
 800aca8:	f1c2 0620 	rsb	r6, r2, #32
 800acac:	6843      	ldr	r3, [r0, #4]
 800acae:	6804      	ldr	r4, [r0, #0]
 800acb0:	fa03 f506 	lsl.w	r5, r3, r6
 800acb4:	432c      	orrs	r4, r5
 800acb6:	40d3      	lsrs	r3, r2
 800acb8:	6004      	str	r4, [r0, #0]
 800acba:	f840 3f04 	str.w	r3, [r0, #4]!
 800acbe:	4288      	cmp	r0, r1
 800acc0:	d3f4      	bcc.n	800acac <L_shift+0xc>
 800acc2:	bd70      	pop	{r4, r5, r6, pc}

0800acc4 <__match>:
 800acc4:	b530      	push	{r4, r5, lr}
 800acc6:	6803      	ldr	r3, [r0, #0]
 800acc8:	3301      	adds	r3, #1
 800acca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acce:	b914      	cbnz	r4, 800acd6 <__match+0x12>
 800acd0:	6003      	str	r3, [r0, #0]
 800acd2:	2001      	movs	r0, #1
 800acd4:	bd30      	pop	{r4, r5, pc}
 800acd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acda:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800acde:	2d19      	cmp	r5, #25
 800ace0:	bf98      	it	ls
 800ace2:	3220      	addls	r2, #32
 800ace4:	42a2      	cmp	r2, r4
 800ace6:	d0f0      	beq.n	800acca <__match+0x6>
 800ace8:	2000      	movs	r0, #0
 800acea:	e7f3      	b.n	800acd4 <__match+0x10>

0800acec <__hexnan>:
 800acec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf0:	680b      	ldr	r3, [r1, #0]
 800acf2:	6801      	ldr	r1, [r0, #0]
 800acf4:	115e      	asrs	r6, r3, #5
 800acf6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800acfa:	f013 031f 	ands.w	r3, r3, #31
 800acfe:	b087      	sub	sp, #28
 800ad00:	bf18      	it	ne
 800ad02:	3604      	addne	r6, #4
 800ad04:	2500      	movs	r5, #0
 800ad06:	1f37      	subs	r7, r6, #4
 800ad08:	4682      	mov	sl, r0
 800ad0a:	4690      	mov	r8, r2
 800ad0c:	9301      	str	r3, [sp, #4]
 800ad0e:	f846 5c04 	str.w	r5, [r6, #-4]
 800ad12:	46b9      	mov	r9, r7
 800ad14:	463c      	mov	r4, r7
 800ad16:	9502      	str	r5, [sp, #8]
 800ad18:	46ab      	mov	fp, r5
 800ad1a:	784a      	ldrb	r2, [r1, #1]
 800ad1c:	1c4b      	adds	r3, r1, #1
 800ad1e:	9303      	str	r3, [sp, #12]
 800ad20:	b342      	cbz	r2, 800ad74 <__hexnan+0x88>
 800ad22:	4610      	mov	r0, r2
 800ad24:	9105      	str	r1, [sp, #20]
 800ad26:	9204      	str	r2, [sp, #16]
 800ad28:	f7ff fd5e 	bl	800a7e8 <__hexdig_fun>
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	d14f      	bne.n	800add0 <__hexnan+0xe4>
 800ad30:	9a04      	ldr	r2, [sp, #16]
 800ad32:	9905      	ldr	r1, [sp, #20]
 800ad34:	2a20      	cmp	r2, #32
 800ad36:	d818      	bhi.n	800ad6a <__hexnan+0x7e>
 800ad38:	9b02      	ldr	r3, [sp, #8]
 800ad3a:	459b      	cmp	fp, r3
 800ad3c:	dd13      	ble.n	800ad66 <__hexnan+0x7a>
 800ad3e:	454c      	cmp	r4, r9
 800ad40:	d206      	bcs.n	800ad50 <__hexnan+0x64>
 800ad42:	2d07      	cmp	r5, #7
 800ad44:	dc04      	bgt.n	800ad50 <__hexnan+0x64>
 800ad46:	462a      	mov	r2, r5
 800ad48:	4649      	mov	r1, r9
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f7ff ffa8 	bl	800aca0 <L_shift>
 800ad50:	4544      	cmp	r4, r8
 800ad52:	d950      	bls.n	800adf6 <__hexnan+0x10a>
 800ad54:	2300      	movs	r3, #0
 800ad56:	f1a4 0904 	sub.w	r9, r4, #4
 800ad5a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad5e:	f8cd b008 	str.w	fp, [sp, #8]
 800ad62:	464c      	mov	r4, r9
 800ad64:	461d      	mov	r5, r3
 800ad66:	9903      	ldr	r1, [sp, #12]
 800ad68:	e7d7      	b.n	800ad1a <__hexnan+0x2e>
 800ad6a:	2a29      	cmp	r2, #41	; 0x29
 800ad6c:	d156      	bne.n	800ae1c <__hexnan+0x130>
 800ad6e:	3102      	adds	r1, #2
 800ad70:	f8ca 1000 	str.w	r1, [sl]
 800ad74:	f1bb 0f00 	cmp.w	fp, #0
 800ad78:	d050      	beq.n	800ae1c <__hexnan+0x130>
 800ad7a:	454c      	cmp	r4, r9
 800ad7c:	d206      	bcs.n	800ad8c <__hexnan+0xa0>
 800ad7e:	2d07      	cmp	r5, #7
 800ad80:	dc04      	bgt.n	800ad8c <__hexnan+0xa0>
 800ad82:	462a      	mov	r2, r5
 800ad84:	4649      	mov	r1, r9
 800ad86:	4620      	mov	r0, r4
 800ad88:	f7ff ff8a 	bl	800aca0 <L_shift>
 800ad8c:	4544      	cmp	r4, r8
 800ad8e:	d934      	bls.n	800adfa <__hexnan+0x10e>
 800ad90:	f1a8 0204 	sub.w	r2, r8, #4
 800ad94:	4623      	mov	r3, r4
 800ad96:	f853 1b04 	ldr.w	r1, [r3], #4
 800ad9a:	f842 1f04 	str.w	r1, [r2, #4]!
 800ad9e:	429f      	cmp	r7, r3
 800ada0:	d2f9      	bcs.n	800ad96 <__hexnan+0xaa>
 800ada2:	1b3b      	subs	r3, r7, r4
 800ada4:	f023 0303 	bic.w	r3, r3, #3
 800ada8:	3304      	adds	r3, #4
 800adaa:	3401      	adds	r4, #1
 800adac:	3e03      	subs	r6, #3
 800adae:	42b4      	cmp	r4, r6
 800adb0:	bf88      	it	hi
 800adb2:	2304      	movhi	r3, #4
 800adb4:	4443      	add	r3, r8
 800adb6:	2200      	movs	r2, #0
 800adb8:	f843 2b04 	str.w	r2, [r3], #4
 800adbc:	429f      	cmp	r7, r3
 800adbe:	d2fb      	bcs.n	800adb8 <__hexnan+0xcc>
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	b91b      	cbnz	r3, 800adcc <__hexnan+0xe0>
 800adc4:	4547      	cmp	r7, r8
 800adc6:	d127      	bne.n	800ae18 <__hexnan+0x12c>
 800adc8:	2301      	movs	r3, #1
 800adca:	603b      	str	r3, [r7, #0]
 800adcc:	2005      	movs	r0, #5
 800adce:	e026      	b.n	800ae1e <__hexnan+0x132>
 800add0:	3501      	adds	r5, #1
 800add2:	2d08      	cmp	r5, #8
 800add4:	f10b 0b01 	add.w	fp, fp, #1
 800add8:	dd06      	ble.n	800ade8 <__hexnan+0xfc>
 800adda:	4544      	cmp	r4, r8
 800addc:	d9c3      	bls.n	800ad66 <__hexnan+0x7a>
 800adde:	2300      	movs	r3, #0
 800ade0:	f844 3c04 	str.w	r3, [r4, #-4]
 800ade4:	2501      	movs	r5, #1
 800ade6:	3c04      	subs	r4, #4
 800ade8:	6822      	ldr	r2, [r4, #0]
 800adea:	f000 000f 	and.w	r0, r0, #15
 800adee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800adf2:	6022      	str	r2, [r4, #0]
 800adf4:	e7b7      	b.n	800ad66 <__hexnan+0x7a>
 800adf6:	2508      	movs	r5, #8
 800adf8:	e7b5      	b.n	800ad66 <__hexnan+0x7a>
 800adfa:	9b01      	ldr	r3, [sp, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d0df      	beq.n	800adc0 <__hexnan+0xd4>
 800ae00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae04:	f1c3 0320 	rsb	r3, r3, #32
 800ae08:	fa22 f303 	lsr.w	r3, r2, r3
 800ae0c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ae10:	401a      	ands	r2, r3
 800ae12:	f846 2c04 	str.w	r2, [r6, #-4]
 800ae16:	e7d3      	b.n	800adc0 <__hexnan+0xd4>
 800ae18:	3f04      	subs	r7, #4
 800ae1a:	e7d1      	b.n	800adc0 <__hexnan+0xd4>
 800ae1c:	2004      	movs	r0, #4
 800ae1e:	b007      	add	sp, #28
 800ae20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae24 <_localeconv_r>:
 800ae24:	4800      	ldr	r0, [pc, #0]	; (800ae28 <_localeconv_r+0x4>)
 800ae26:	4770      	bx	lr
 800ae28:	200001b0 	.word	0x200001b0

0800ae2c <_lseek_r>:
 800ae2c:	b538      	push	{r3, r4, r5, lr}
 800ae2e:	4d07      	ldr	r5, [pc, #28]	; (800ae4c <_lseek_r+0x20>)
 800ae30:	4604      	mov	r4, r0
 800ae32:	4608      	mov	r0, r1
 800ae34:	4611      	mov	r1, r2
 800ae36:	2200      	movs	r2, #0
 800ae38:	602a      	str	r2, [r5, #0]
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	f7f7 fdc8 	bl	80029d0 <_lseek>
 800ae40:	1c43      	adds	r3, r0, #1
 800ae42:	d102      	bne.n	800ae4a <_lseek_r+0x1e>
 800ae44:	682b      	ldr	r3, [r5, #0]
 800ae46:	b103      	cbz	r3, 800ae4a <_lseek_r+0x1e>
 800ae48:	6023      	str	r3, [r4, #0]
 800ae4a:	bd38      	pop	{r3, r4, r5, pc}
 800ae4c:	20000848 	.word	0x20000848

0800ae50 <malloc>:
 800ae50:	4b02      	ldr	r3, [pc, #8]	; (800ae5c <malloc+0xc>)
 800ae52:	4601      	mov	r1, r0
 800ae54:	6818      	ldr	r0, [r3, #0]
 800ae56:	f000 bd31 	b.w	800b8bc <_malloc_r>
 800ae5a:	bf00      	nop
 800ae5c:	20000058 	.word	0x20000058

0800ae60 <__ascii_mbtowc>:
 800ae60:	b082      	sub	sp, #8
 800ae62:	b901      	cbnz	r1, 800ae66 <__ascii_mbtowc+0x6>
 800ae64:	a901      	add	r1, sp, #4
 800ae66:	b142      	cbz	r2, 800ae7a <__ascii_mbtowc+0x1a>
 800ae68:	b14b      	cbz	r3, 800ae7e <__ascii_mbtowc+0x1e>
 800ae6a:	7813      	ldrb	r3, [r2, #0]
 800ae6c:	600b      	str	r3, [r1, #0]
 800ae6e:	7812      	ldrb	r2, [r2, #0]
 800ae70:	1e10      	subs	r0, r2, #0
 800ae72:	bf18      	it	ne
 800ae74:	2001      	movne	r0, #1
 800ae76:	b002      	add	sp, #8
 800ae78:	4770      	bx	lr
 800ae7a:	4610      	mov	r0, r2
 800ae7c:	e7fb      	b.n	800ae76 <__ascii_mbtowc+0x16>
 800ae7e:	f06f 0001 	mvn.w	r0, #1
 800ae82:	e7f8      	b.n	800ae76 <__ascii_mbtowc+0x16>

0800ae84 <_Balloc>:
 800ae84:	b570      	push	{r4, r5, r6, lr}
 800ae86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae88:	4604      	mov	r4, r0
 800ae8a:	460d      	mov	r5, r1
 800ae8c:	b976      	cbnz	r6, 800aeac <_Balloc+0x28>
 800ae8e:	2010      	movs	r0, #16
 800ae90:	f7ff ffde 	bl	800ae50 <malloc>
 800ae94:	4602      	mov	r2, r0
 800ae96:	6260      	str	r0, [r4, #36]	; 0x24
 800ae98:	b920      	cbnz	r0, 800aea4 <_Balloc+0x20>
 800ae9a:	4b18      	ldr	r3, [pc, #96]	; (800aefc <_Balloc+0x78>)
 800ae9c:	4818      	ldr	r0, [pc, #96]	; (800af00 <_Balloc+0x7c>)
 800ae9e:	2166      	movs	r1, #102	; 0x66
 800aea0:	f001 fb1c 	bl	800c4dc <__assert_func>
 800aea4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aea8:	6006      	str	r6, [r0, #0]
 800aeaa:	60c6      	str	r6, [r0, #12]
 800aeac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aeae:	68f3      	ldr	r3, [r6, #12]
 800aeb0:	b183      	cbz	r3, 800aed4 <_Balloc+0x50>
 800aeb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aeba:	b9b8      	cbnz	r0, 800aeec <_Balloc+0x68>
 800aebc:	2101      	movs	r1, #1
 800aebe:	fa01 f605 	lsl.w	r6, r1, r5
 800aec2:	1d72      	adds	r2, r6, #5
 800aec4:	0092      	lsls	r2, r2, #2
 800aec6:	4620      	mov	r0, r4
 800aec8:	f000 fc98 	bl	800b7fc <_calloc_r>
 800aecc:	b160      	cbz	r0, 800aee8 <_Balloc+0x64>
 800aece:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aed2:	e00e      	b.n	800aef2 <_Balloc+0x6e>
 800aed4:	2221      	movs	r2, #33	; 0x21
 800aed6:	2104      	movs	r1, #4
 800aed8:	4620      	mov	r0, r4
 800aeda:	f000 fc8f 	bl	800b7fc <_calloc_r>
 800aede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aee0:	60f0      	str	r0, [r6, #12]
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1e4      	bne.n	800aeb2 <_Balloc+0x2e>
 800aee8:	2000      	movs	r0, #0
 800aeea:	bd70      	pop	{r4, r5, r6, pc}
 800aeec:	6802      	ldr	r2, [r0, #0]
 800aeee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aef2:	2300      	movs	r3, #0
 800aef4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aef8:	e7f7      	b.n	800aeea <_Balloc+0x66>
 800aefa:	bf00      	nop
 800aefc:	0800d176 	.word	0x0800d176
 800af00:	0800d27c 	.word	0x0800d27c

0800af04 <_Bfree>:
 800af04:	b570      	push	{r4, r5, r6, lr}
 800af06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af08:	4605      	mov	r5, r0
 800af0a:	460c      	mov	r4, r1
 800af0c:	b976      	cbnz	r6, 800af2c <_Bfree+0x28>
 800af0e:	2010      	movs	r0, #16
 800af10:	f7ff ff9e 	bl	800ae50 <malloc>
 800af14:	4602      	mov	r2, r0
 800af16:	6268      	str	r0, [r5, #36]	; 0x24
 800af18:	b920      	cbnz	r0, 800af24 <_Bfree+0x20>
 800af1a:	4b09      	ldr	r3, [pc, #36]	; (800af40 <_Bfree+0x3c>)
 800af1c:	4809      	ldr	r0, [pc, #36]	; (800af44 <_Bfree+0x40>)
 800af1e:	218a      	movs	r1, #138	; 0x8a
 800af20:	f001 fadc 	bl	800c4dc <__assert_func>
 800af24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af28:	6006      	str	r6, [r0, #0]
 800af2a:	60c6      	str	r6, [r0, #12]
 800af2c:	b13c      	cbz	r4, 800af3e <_Bfree+0x3a>
 800af2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af30:	6862      	ldr	r2, [r4, #4]
 800af32:	68db      	ldr	r3, [r3, #12]
 800af34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af38:	6021      	str	r1, [r4, #0]
 800af3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af3e:	bd70      	pop	{r4, r5, r6, pc}
 800af40:	0800d176 	.word	0x0800d176
 800af44:	0800d27c 	.word	0x0800d27c

0800af48 <__multadd>:
 800af48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af4c:	690e      	ldr	r6, [r1, #16]
 800af4e:	4607      	mov	r7, r0
 800af50:	4698      	mov	r8, r3
 800af52:	460c      	mov	r4, r1
 800af54:	f101 0014 	add.w	r0, r1, #20
 800af58:	2300      	movs	r3, #0
 800af5a:	6805      	ldr	r5, [r0, #0]
 800af5c:	b2a9      	uxth	r1, r5
 800af5e:	fb02 8101 	mla	r1, r2, r1, r8
 800af62:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800af66:	0c2d      	lsrs	r5, r5, #16
 800af68:	fb02 c505 	mla	r5, r2, r5, ip
 800af6c:	b289      	uxth	r1, r1
 800af6e:	3301      	adds	r3, #1
 800af70:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800af74:	429e      	cmp	r6, r3
 800af76:	f840 1b04 	str.w	r1, [r0], #4
 800af7a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800af7e:	dcec      	bgt.n	800af5a <__multadd+0x12>
 800af80:	f1b8 0f00 	cmp.w	r8, #0
 800af84:	d022      	beq.n	800afcc <__multadd+0x84>
 800af86:	68a3      	ldr	r3, [r4, #8]
 800af88:	42b3      	cmp	r3, r6
 800af8a:	dc19      	bgt.n	800afc0 <__multadd+0x78>
 800af8c:	6861      	ldr	r1, [r4, #4]
 800af8e:	4638      	mov	r0, r7
 800af90:	3101      	adds	r1, #1
 800af92:	f7ff ff77 	bl	800ae84 <_Balloc>
 800af96:	4605      	mov	r5, r0
 800af98:	b928      	cbnz	r0, 800afa6 <__multadd+0x5e>
 800af9a:	4602      	mov	r2, r0
 800af9c:	4b0d      	ldr	r3, [pc, #52]	; (800afd4 <__multadd+0x8c>)
 800af9e:	480e      	ldr	r0, [pc, #56]	; (800afd8 <__multadd+0x90>)
 800afa0:	21b5      	movs	r1, #181	; 0xb5
 800afa2:	f001 fa9b 	bl	800c4dc <__assert_func>
 800afa6:	6922      	ldr	r2, [r4, #16]
 800afa8:	3202      	adds	r2, #2
 800afaa:	f104 010c 	add.w	r1, r4, #12
 800afae:	0092      	lsls	r2, r2, #2
 800afb0:	300c      	adds	r0, #12
 800afb2:	f7fd f827 	bl	8008004 <memcpy>
 800afb6:	4621      	mov	r1, r4
 800afb8:	4638      	mov	r0, r7
 800afba:	f7ff ffa3 	bl	800af04 <_Bfree>
 800afbe:	462c      	mov	r4, r5
 800afc0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800afc4:	3601      	adds	r6, #1
 800afc6:	f8c3 8014 	str.w	r8, [r3, #20]
 800afca:	6126      	str	r6, [r4, #16]
 800afcc:	4620      	mov	r0, r4
 800afce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afd2:	bf00      	nop
 800afd4:	0800d1ec 	.word	0x0800d1ec
 800afd8:	0800d27c 	.word	0x0800d27c

0800afdc <__s2b>:
 800afdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afe0:	460c      	mov	r4, r1
 800afe2:	4615      	mov	r5, r2
 800afe4:	461f      	mov	r7, r3
 800afe6:	2209      	movs	r2, #9
 800afe8:	3308      	adds	r3, #8
 800afea:	4606      	mov	r6, r0
 800afec:	fb93 f3f2 	sdiv	r3, r3, r2
 800aff0:	2100      	movs	r1, #0
 800aff2:	2201      	movs	r2, #1
 800aff4:	429a      	cmp	r2, r3
 800aff6:	db09      	blt.n	800b00c <__s2b+0x30>
 800aff8:	4630      	mov	r0, r6
 800affa:	f7ff ff43 	bl	800ae84 <_Balloc>
 800affe:	b940      	cbnz	r0, 800b012 <__s2b+0x36>
 800b000:	4602      	mov	r2, r0
 800b002:	4b19      	ldr	r3, [pc, #100]	; (800b068 <__s2b+0x8c>)
 800b004:	4819      	ldr	r0, [pc, #100]	; (800b06c <__s2b+0x90>)
 800b006:	21ce      	movs	r1, #206	; 0xce
 800b008:	f001 fa68 	bl	800c4dc <__assert_func>
 800b00c:	0052      	lsls	r2, r2, #1
 800b00e:	3101      	adds	r1, #1
 800b010:	e7f0      	b.n	800aff4 <__s2b+0x18>
 800b012:	9b08      	ldr	r3, [sp, #32]
 800b014:	6143      	str	r3, [r0, #20]
 800b016:	2d09      	cmp	r5, #9
 800b018:	f04f 0301 	mov.w	r3, #1
 800b01c:	6103      	str	r3, [r0, #16]
 800b01e:	dd16      	ble.n	800b04e <__s2b+0x72>
 800b020:	f104 0909 	add.w	r9, r4, #9
 800b024:	46c8      	mov	r8, r9
 800b026:	442c      	add	r4, r5
 800b028:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b02c:	4601      	mov	r1, r0
 800b02e:	3b30      	subs	r3, #48	; 0x30
 800b030:	220a      	movs	r2, #10
 800b032:	4630      	mov	r0, r6
 800b034:	f7ff ff88 	bl	800af48 <__multadd>
 800b038:	45a0      	cmp	r8, r4
 800b03a:	d1f5      	bne.n	800b028 <__s2b+0x4c>
 800b03c:	f1a5 0408 	sub.w	r4, r5, #8
 800b040:	444c      	add	r4, r9
 800b042:	1b2d      	subs	r5, r5, r4
 800b044:	1963      	adds	r3, r4, r5
 800b046:	42bb      	cmp	r3, r7
 800b048:	db04      	blt.n	800b054 <__s2b+0x78>
 800b04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b04e:	340a      	adds	r4, #10
 800b050:	2509      	movs	r5, #9
 800b052:	e7f6      	b.n	800b042 <__s2b+0x66>
 800b054:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b058:	4601      	mov	r1, r0
 800b05a:	3b30      	subs	r3, #48	; 0x30
 800b05c:	220a      	movs	r2, #10
 800b05e:	4630      	mov	r0, r6
 800b060:	f7ff ff72 	bl	800af48 <__multadd>
 800b064:	e7ee      	b.n	800b044 <__s2b+0x68>
 800b066:	bf00      	nop
 800b068:	0800d1ec 	.word	0x0800d1ec
 800b06c:	0800d27c 	.word	0x0800d27c

0800b070 <__hi0bits>:
 800b070:	0c03      	lsrs	r3, r0, #16
 800b072:	041b      	lsls	r3, r3, #16
 800b074:	b9d3      	cbnz	r3, 800b0ac <__hi0bits+0x3c>
 800b076:	0400      	lsls	r0, r0, #16
 800b078:	2310      	movs	r3, #16
 800b07a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b07e:	bf04      	itt	eq
 800b080:	0200      	lsleq	r0, r0, #8
 800b082:	3308      	addeq	r3, #8
 800b084:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b088:	bf04      	itt	eq
 800b08a:	0100      	lsleq	r0, r0, #4
 800b08c:	3304      	addeq	r3, #4
 800b08e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b092:	bf04      	itt	eq
 800b094:	0080      	lsleq	r0, r0, #2
 800b096:	3302      	addeq	r3, #2
 800b098:	2800      	cmp	r0, #0
 800b09a:	db05      	blt.n	800b0a8 <__hi0bits+0x38>
 800b09c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b0a0:	f103 0301 	add.w	r3, r3, #1
 800b0a4:	bf08      	it	eq
 800b0a6:	2320      	moveq	r3, #32
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	4770      	bx	lr
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	e7e4      	b.n	800b07a <__hi0bits+0xa>

0800b0b0 <__lo0bits>:
 800b0b0:	6803      	ldr	r3, [r0, #0]
 800b0b2:	f013 0207 	ands.w	r2, r3, #7
 800b0b6:	4601      	mov	r1, r0
 800b0b8:	d00b      	beq.n	800b0d2 <__lo0bits+0x22>
 800b0ba:	07da      	lsls	r2, r3, #31
 800b0bc:	d424      	bmi.n	800b108 <__lo0bits+0x58>
 800b0be:	0798      	lsls	r0, r3, #30
 800b0c0:	bf49      	itett	mi
 800b0c2:	085b      	lsrmi	r3, r3, #1
 800b0c4:	089b      	lsrpl	r3, r3, #2
 800b0c6:	2001      	movmi	r0, #1
 800b0c8:	600b      	strmi	r3, [r1, #0]
 800b0ca:	bf5c      	itt	pl
 800b0cc:	600b      	strpl	r3, [r1, #0]
 800b0ce:	2002      	movpl	r0, #2
 800b0d0:	4770      	bx	lr
 800b0d2:	b298      	uxth	r0, r3
 800b0d4:	b9b0      	cbnz	r0, 800b104 <__lo0bits+0x54>
 800b0d6:	0c1b      	lsrs	r3, r3, #16
 800b0d8:	2010      	movs	r0, #16
 800b0da:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b0de:	bf04      	itt	eq
 800b0e0:	0a1b      	lsreq	r3, r3, #8
 800b0e2:	3008      	addeq	r0, #8
 800b0e4:	071a      	lsls	r2, r3, #28
 800b0e6:	bf04      	itt	eq
 800b0e8:	091b      	lsreq	r3, r3, #4
 800b0ea:	3004      	addeq	r0, #4
 800b0ec:	079a      	lsls	r2, r3, #30
 800b0ee:	bf04      	itt	eq
 800b0f0:	089b      	lsreq	r3, r3, #2
 800b0f2:	3002      	addeq	r0, #2
 800b0f4:	07da      	lsls	r2, r3, #31
 800b0f6:	d403      	bmi.n	800b100 <__lo0bits+0x50>
 800b0f8:	085b      	lsrs	r3, r3, #1
 800b0fa:	f100 0001 	add.w	r0, r0, #1
 800b0fe:	d005      	beq.n	800b10c <__lo0bits+0x5c>
 800b100:	600b      	str	r3, [r1, #0]
 800b102:	4770      	bx	lr
 800b104:	4610      	mov	r0, r2
 800b106:	e7e8      	b.n	800b0da <__lo0bits+0x2a>
 800b108:	2000      	movs	r0, #0
 800b10a:	4770      	bx	lr
 800b10c:	2020      	movs	r0, #32
 800b10e:	4770      	bx	lr

0800b110 <__i2b>:
 800b110:	b510      	push	{r4, lr}
 800b112:	460c      	mov	r4, r1
 800b114:	2101      	movs	r1, #1
 800b116:	f7ff feb5 	bl	800ae84 <_Balloc>
 800b11a:	4602      	mov	r2, r0
 800b11c:	b928      	cbnz	r0, 800b12a <__i2b+0x1a>
 800b11e:	4b05      	ldr	r3, [pc, #20]	; (800b134 <__i2b+0x24>)
 800b120:	4805      	ldr	r0, [pc, #20]	; (800b138 <__i2b+0x28>)
 800b122:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b126:	f001 f9d9 	bl	800c4dc <__assert_func>
 800b12a:	2301      	movs	r3, #1
 800b12c:	6144      	str	r4, [r0, #20]
 800b12e:	6103      	str	r3, [r0, #16]
 800b130:	bd10      	pop	{r4, pc}
 800b132:	bf00      	nop
 800b134:	0800d1ec 	.word	0x0800d1ec
 800b138:	0800d27c 	.word	0x0800d27c

0800b13c <__multiply>:
 800b13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b140:	4614      	mov	r4, r2
 800b142:	690a      	ldr	r2, [r1, #16]
 800b144:	6923      	ldr	r3, [r4, #16]
 800b146:	429a      	cmp	r2, r3
 800b148:	bfb8      	it	lt
 800b14a:	460b      	movlt	r3, r1
 800b14c:	460d      	mov	r5, r1
 800b14e:	bfbc      	itt	lt
 800b150:	4625      	movlt	r5, r4
 800b152:	461c      	movlt	r4, r3
 800b154:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b158:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b15c:	68ab      	ldr	r3, [r5, #8]
 800b15e:	6869      	ldr	r1, [r5, #4]
 800b160:	eb0a 0709 	add.w	r7, sl, r9
 800b164:	42bb      	cmp	r3, r7
 800b166:	b085      	sub	sp, #20
 800b168:	bfb8      	it	lt
 800b16a:	3101      	addlt	r1, #1
 800b16c:	f7ff fe8a 	bl	800ae84 <_Balloc>
 800b170:	b930      	cbnz	r0, 800b180 <__multiply+0x44>
 800b172:	4602      	mov	r2, r0
 800b174:	4b42      	ldr	r3, [pc, #264]	; (800b280 <__multiply+0x144>)
 800b176:	4843      	ldr	r0, [pc, #268]	; (800b284 <__multiply+0x148>)
 800b178:	f240 115d 	movw	r1, #349	; 0x15d
 800b17c:	f001 f9ae 	bl	800c4dc <__assert_func>
 800b180:	f100 0614 	add.w	r6, r0, #20
 800b184:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b188:	4633      	mov	r3, r6
 800b18a:	2200      	movs	r2, #0
 800b18c:	4543      	cmp	r3, r8
 800b18e:	d31e      	bcc.n	800b1ce <__multiply+0x92>
 800b190:	f105 0c14 	add.w	ip, r5, #20
 800b194:	f104 0314 	add.w	r3, r4, #20
 800b198:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b19c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b1a0:	9202      	str	r2, [sp, #8]
 800b1a2:	ebac 0205 	sub.w	r2, ip, r5
 800b1a6:	3a15      	subs	r2, #21
 800b1a8:	f022 0203 	bic.w	r2, r2, #3
 800b1ac:	3204      	adds	r2, #4
 800b1ae:	f105 0115 	add.w	r1, r5, #21
 800b1b2:	458c      	cmp	ip, r1
 800b1b4:	bf38      	it	cc
 800b1b6:	2204      	movcc	r2, #4
 800b1b8:	9201      	str	r2, [sp, #4]
 800b1ba:	9a02      	ldr	r2, [sp, #8]
 800b1bc:	9303      	str	r3, [sp, #12]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d808      	bhi.n	800b1d4 <__multiply+0x98>
 800b1c2:	2f00      	cmp	r7, #0
 800b1c4:	dc55      	bgt.n	800b272 <__multiply+0x136>
 800b1c6:	6107      	str	r7, [r0, #16]
 800b1c8:	b005      	add	sp, #20
 800b1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ce:	f843 2b04 	str.w	r2, [r3], #4
 800b1d2:	e7db      	b.n	800b18c <__multiply+0x50>
 800b1d4:	f8b3 a000 	ldrh.w	sl, [r3]
 800b1d8:	f1ba 0f00 	cmp.w	sl, #0
 800b1dc:	d020      	beq.n	800b220 <__multiply+0xe4>
 800b1de:	f105 0e14 	add.w	lr, r5, #20
 800b1e2:	46b1      	mov	r9, r6
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b1ea:	f8d9 b000 	ldr.w	fp, [r9]
 800b1ee:	b2a1      	uxth	r1, r4
 800b1f0:	fa1f fb8b 	uxth.w	fp, fp
 800b1f4:	fb0a b101 	mla	r1, sl, r1, fp
 800b1f8:	4411      	add	r1, r2
 800b1fa:	f8d9 2000 	ldr.w	r2, [r9]
 800b1fe:	0c24      	lsrs	r4, r4, #16
 800b200:	0c12      	lsrs	r2, r2, #16
 800b202:	fb0a 2404 	mla	r4, sl, r4, r2
 800b206:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b20a:	b289      	uxth	r1, r1
 800b20c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b210:	45f4      	cmp	ip, lr
 800b212:	f849 1b04 	str.w	r1, [r9], #4
 800b216:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b21a:	d8e4      	bhi.n	800b1e6 <__multiply+0xaa>
 800b21c:	9901      	ldr	r1, [sp, #4]
 800b21e:	5072      	str	r2, [r6, r1]
 800b220:	9a03      	ldr	r2, [sp, #12]
 800b222:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b226:	3304      	adds	r3, #4
 800b228:	f1b9 0f00 	cmp.w	r9, #0
 800b22c:	d01f      	beq.n	800b26e <__multiply+0x132>
 800b22e:	6834      	ldr	r4, [r6, #0]
 800b230:	f105 0114 	add.w	r1, r5, #20
 800b234:	46b6      	mov	lr, r6
 800b236:	f04f 0a00 	mov.w	sl, #0
 800b23a:	880a      	ldrh	r2, [r1, #0]
 800b23c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b240:	fb09 b202 	mla	r2, r9, r2, fp
 800b244:	4492      	add	sl, r2
 800b246:	b2a4      	uxth	r4, r4
 800b248:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b24c:	f84e 4b04 	str.w	r4, [lr], #4
 800b250:	f851 4b04 	ldr.w	r4, [r1], #4
 800b254:	f8be 2000 	ldrh.w	r2, [lr]
 800b258:	0c24      	lsrs	r4, r4, #16
 800b25a:	fb09 2404 	mla	r4, r9, r4, r2
 800b25e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b262:	458c      	cmp	ip, r1
 800b264:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b268:	d8e7      	bhi.n	800b23a <__multiply+0xfe>
 800b26a:	9a01      	ldr	r2, [sp, #4]
 800b26c:	50b4      	str	r4, [r6, r2]
 800b26e:	3604      	adds	r6, #4
 800b270:	e7a3      	b.n	800b1ba <__multiply+0x7e>
 800b272:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1a5      	bne.n	800b1c6 <__multiply+0x8a>
 800b27a:	3f01      	subs	r7, #1
 800b27c:	e7a1      	b.n	800b1c2 <__multiply+0x86>
 800b27e:	bf00      	nop
 800b280:	0800d1ec 	.word	0x0800d1ec
 800b284:	0800d27c 	.word	0x0800d27c

0800b288 <__pow5mult>:
 800b288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b28c:	4615      	mov	r5, r2
 800b28e:	f012 0203 	ands.w	r2, r2, #3
 800b292:	4606      	mov	r6, r0
 800b294:	460f      	mov	r7, r1
 800b296:	d007      	beq.n	800b2a8 <__pow5mult+0x20>
 800b298:	4c25      	ldr	r4, [pc, #148]	; (800b330 <__pow5mult+0xa8>)
 800b29a:	3a01      	subs	r2, #1
 800b29c:	2300      	movs	r3, #0
 800b29e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2a2:	f7ff fe51 	bl	800af48 <__multadd>
 800b2a6:	4607      	mov	r7, r0
 800b2a8:	10ad      	asrs	r5, r5, #2
 800b2aa:	d03d      	beq.n	800b328 <__pow5mult+0xa0>
 800b2ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b2ae:	b97c      	cbnz	r4, 800b2d0 <__pow5mult+0x48>
 800b2b0:	2010      	movs	r0, #16
 800b2b2:	f7ff fdcd 	bl	800ae50 <malloc>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	6270      	str	r0, [r6, #36]	; 0x24
 800b2ba:	b928      	cbnz	r0, 800b2c8 <__pow5mult+0x40>
 800b2bc:	4b1d      	ldr	r3, [pc, #116]	; (800b334 <__pow5mult+0xac>)
 800b2be:	481e      	ldr	r0, [pc, #120]	; (800b338 <__pow5mult+0xb0>)
 800b2c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b2c4:	f001 f90a 	bl	800c4dc <__assert_func>
 800b2c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2cc:	6004      	str	r4, [r0, #0]
 800b2ce:	60c4      	str	r4, [r0, #12]
 800b2d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b2d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2d8:	b94c      	cbnz	r4, 800b2ee <__pow5mult+0x66>
 800b2da:	f240 2171 	movw	r1, #625	; 0x271
 800b2de:	4630      	mov	r0, r6
 800b2e0:	f7ff ff16 	bl	800b110 <__i2b>
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	6003      	str	r3, [r0, #0]
 800b2ee:	f04f 0900 	mov.w	r9, #0
 800b2f2:	07eb      	lsls	r3, r5, #31
 800b2f4:	d50a      	bpl.n	800b30c <__pow5mult+0x84>
 800b2f6:	4639      	mov	r1, r7
 800b2f8:	4622      	mov	r2, r4
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	f7ff ff1e 	bl	800b13c <__multiply>
 800b300:	4639      	mov	r1, r7
 800b302:	4680      	mov	r8, r0
 800b304:	4630      	mov	r0, r6
 800b306:	f7ff fdfd 	bl	800af04 <_Bfree>
 800b30a:	4647      	mov	r7, r8
 800b30c:	106d      	asrs	r5, r5, #1
 800b30e:	d00b      	beq.n	800b328 <__pow5mult+0xa0>
 800b310:	6820      	ldr	r0, [r4, #0]
 800b312:	b938      	cbnz	r0, 800b324 <__pow5mult+0x9c>
 800b314:	4622      	mov	r2, r4
 800b316:	4621      	mov	r1, r4
 800b318:	4630      	mov	r0, r6
 800b31a:	f7ff ff0f 	bl	800b13c <__multiply>
 800b31e:	6020      	str	r0, [r4, #0]
 800b320:	f8c0 9000 	str.w	r9, [r0]
 800b324:	4604      	mov	r4, r0
 800b326:	e7e4      	b.n	800b2f2 <__pow5mult+0x6a>
 800b328:	4638      	mov	r0, r7
 800b32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b32e:	bf00      	nop
 800b330:	0800d3d0 	.word	0x0800d3d0
 800b334:	0800d176 	.word	0x0800d176
 800b338:	0800d27c 	.word	0x0800d27c

0800b33c <__lshift>:
 800b33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b340:	460c      	mov	r4, r1
 800b342:	6849      	ldr	r1, [r1, #4]
 800b344:	6923      	ldr	r3, [r4, #16]
 800b346:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b34a:	68a3      	ldr	r3, [r4, #8]
 800b34c:	4607      	mov	r7, r0
 800b34e:	4691      	mov	r9, r2
 800b350:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b354:	f108 0601 	add.w	r6, r8, #1
 800b358:	42b3      	cmp	r3, r6
 800b35a:	db0b      	blt.n	800b374 <__lshift+0x38>
 800b35c:	4638      	mov	r0, r7
 800b35e:	f7ff fd91 	bl	800ae84 <_Balloc>
 800b362:	4605      	mov	r5, r0
 800b364:	b948      	cbnz	r0, 800b37a <__lshift+0x3e>
 800b366:	4602      	mov	r2, r0
 800b368:	4b28      	ldr	r3, [pc, #160]	; (800b40c <__lshift+0xd0>)
 800b36a:	4829      	ldr	r0, [pc, #164]	; (800b410 <__lshift+0xd4>)
 800b36c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b370:	f001 f8b4 	bl	800c4dc <__assert_func>
 800b374:	3101      	adds	r1, #1
 800b376:	005b      	lsls	r3, r3, #1
 800b378:	e7ee      	b.n	800b358 <__lshift+0x1c>
 800b37a:	2300      	movs	r3, #0
 800b37c:	f100 0114 	add.w	r1, r0, #20
 800b380:	f100 0210 	add.w	r2, r0, #16
 800b384:	4618      	mov	r0, r3
 800b386:	4553      	cmp	r3, sl
 800b388:	db33      	blt.n	800b3f2 <__lshift+0xb6>
 800b38a:	6920      	ldr	r0, [r4, #16]
 800b38c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b390:	f104 0314 	add.w	r3, r4, #20
 800b394:	f019 091f 	ands.w	r9, r9, #31
 800b398:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b39c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b3a0:	d02b      	beq.n	800b3fa <__lshift+0xbe>
 800b3a2:	f1c9 0e20 	rsb	lr, r9, #32
 800b3a6:	468a      	mov	sl, r1
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	6818      	ldr	r0, [r3, #0]
 800b3ac:	fa00 f009 	lsl.w	r0, r0, r9
 800b3b0:	4302      	orrs	r2, r0
 800b3b2:	f84a 2b04 	str.w	r2, [sl], #4
 800b3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3ba:	459c      	cmp	ip, r3
 800b3bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b3c0:	d8f3      	bhi.n	800b3aa <__lshift+0x6e>
 800b3c2:	ebac 0304 	sub.w	r3, ip, r4
 800b3c6:	3b15      	subs	r3, #21
 800b3c8:	f023 0303 	bic.w	r3, r3, #3
 800b3cc:	3304      	adds	r3, #4
 800b3ce:	f104 0015 	add.w	r0, r4, #21
 800b3d2:	4584      	cmp	ip, r0
 800b3d4:	bf38      	it	cc
 800b3d6:	2304      	movcc	r3, #4
 800b3d8:	50ca      	str	r2, [r1, r3]
 800b3da:	b10a      	cbz	r2, 800b3e0 <__lshift+0xa4>
 800b3dc:	f108 0602 	add.w	r6, r8, #2
 800b3e0:	3e01      	subs	r6, #1
 800b3e2:	4638      	mov	r0, r7
 800b3e4:	612e      	str	r6, [r5, #16]
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	f7ff fd8c 	bl	800af04 <_Bfree>
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	e7c5      	b.n	800b386 <__lshift+0x4a>
 800b3fa:	3904      	subs	r1, #4
 800b3fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b400:	f841 2f04 	str.w	r2, [r1, #4]!
 800b404:	459c      	cmp	ip, r3
 800b406:	d8f9      	bhi.n	800b3fc <__lshift+0xc0>
 800b408:	e7ea      	b.n	800b3e0 <__lshift+0xa4>
 800b40a:	bf00      	nop
 800b40c:	0800d1ec 	.word	0x0800d1ec
 800b410:	0800d27c 	.word	0x0800d27c

0800b414 <__mcmp>:
 800b414:	b530      	push	{r4, r5, lr}
 800b416:	6902      	ldr	r2, [r0, #16]
 800b418:	690c      	ldr	r4, [r1, #16]
 800b41a:	1b12      	subs	r2, r2, r4
 800b41c:	d10e      	bne.n	800b43c <__mcmp+0x28>
 800b41e:	f100 0314 	add.w	r3, r0, #20
 800b422:	3114      	adds	r1, #20
 800b424:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b428:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b42c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b430:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b434:	42a5      	cmp	r5, r4
 800b436:	d003      	beq.n	800b440 <__mcmp+0x2c>
 800b438:	d305      	bcc.n	800b446 <__mcmp+0x32>
 800b43a:	2201      	movs	r2, #1
 800b43c:	4610      	mov	r0, r2
 800b43e:	bd30      	pop	{r4, r5, pc}
 800b440:	4283      	cmp	r3, r0
 800b442:	d3f3      	bcc.n	800b42c <__mcmp+0x18>
 800b444:	e7fa      	b.n	800b43c <__mcmp+0x28>
 800b446:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b44a:	e7f7      	b.n	800b43c <__mcmp+0x28>

0800b44c <__mdiff>:
 800b44c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b450:	460c      	mov	r4, r1
 800b452:	4606      	mov	r6, r0
 800b454:	4611      	mov	r1, r2
 800b456:	4620      	mov	r0, r4
 800b458:	4617      	mov	r7, r2
 800b45a:	f7ff ffdb 	bl	800b414 <__mcmp>
 800b45e:	1e05      	subs	r5, r0, #0
 800b460:	d110      	bne.n	800b484 <__mdiff+0x38>
 800b462:	4629      	mov	r1, r5
 800b464:	4630      	mov	r0, r6
 800b466:	f7ff fd0d 	bl	800ae84 <_Balloc>
 800b46a:	b930      	cbnz	r0, 800b47a <__mdiff+0x2e>
 800b46c:	4b39      	ldr	r3, [pc, #228]	; (800b554 <__mdiff+0x108>)
 800b46e:	4602      	mov	r2, r0
 800b470:	f240 2132 	movw	r1, #562	; 0x232
 800b474:	4838      	ldr	r0, [pc, #224]	; (800b558 <__mdiff+0x10c>)
 800b476:	f001 f831 	bl	800c4dc <__assert_func>
 800b47a:	2301      	movs	r3, #1
 800b47c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b480:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b484:	bfa4      	itt	ge
 800b486:	463b      	movge	r3, r7
 800b488:	4627      	movge	r7, r4
 800b48a:	4630      	mov	r0, r6
 800b48c:	6879      	ldr	r1, [r7, #4]
 800b48e:	bfa6      	itte	ge
 800b490:	461c      	movge	r4, r3
 800b492:	2500      	movge	r5, #0
 800b494:	2501      	movlt	r5, #1
 800b496:	f7ff fcf5 	bl	800ae84 <_Balloc>
 800b49a:	b920      	cbnz	r0, 800b4a6 <__mdiff+0x5a>
 800b49c:	4b2d      	ldr	r3, [pc, #180]	; (800b554 <__mdiff+0x108>)
 800b49e:	4602      	mov	r2, r0
 800b4a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b4a4:	e7e6      	b.n	800b474 <__mdiff+0x28>
 800b4a6:	693e      	ldr	r6, [r7, #16]
 800b4a8:	60c5      	str	r5, [r0, #12]
 800b4aa:	6925      	ldr	r5, [r4, #16]
 800b4ac:	f107 0114 	add.w	r1, r7, #20
 800b4b0:	f104 0914 	add.w	r9, r4, #20
 800b4b4:	f100 0e14 	add.w	lr, r0, #20
 800b4b8:	f107 0210 	add.w	r2, r7, #16
 800b4bc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b4c0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b4c4:	46f2      	mov	sl, lr
 800b4c6:	2700      	movs	r7, #0
 800b4c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b4cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b4d0:	fa1f f883 	uxth.w	r8, r3
 800b4d4:	fa17 f78b 	uxtah	r7, r7, fp
 800b4d8:	0c1b      	lsrs	r3, r3, #16
 800b4da:	eba7 0808 	sub.w	r8, r7, r8
 800b4de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b4e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b4e6:	fa1f f888 	uxth.w	r8, r8
 800b4ea:	141f      	asrs	r7, r3, #16
 800b4ec:	454d      	cmp	r5, r9
 800b4ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b4f2:	f84a 3b04 	str.w	r3, [sl], #4
 800b4f6:	d8e7      	bhi.n	800b4c8 <__mdiff+0x7c>
 800b4f8:	1b2b      	subs	r3, r5, r4
 800b4fa:	3b15      	subs	r3, #21
 800b4fc:	f023 0303 	bic.w	r3, r3, #3
 800b500:	3304      	adds	r3, #4
 800b502:	3415      	adds	r4, #21
 800b504:	42a5      	cmp	r5, r4
 800b506:	bf38      	it	cc
 800b508:	2304      	movcc	r3, #4
 800b50a:	4419      	add	r1, r3
 800b50c:	4473      	add	r3, lr
 800b50e:	469e      	mov	lr, r3
 800b510:	460d      	mov	r5, r1
 800b512:	4565      	cmp	r5, ip
 800b514:	d30e      	bcc.n	800b534 <__mdiff+0xe8>
 800b516:	f10c 0203 	add.w	r2, ip, #3
 800b51a:	1a52      	subs	r2, r2, r1
 800b51c:	f022 0203 	bic.w	r2, r2, #3
 800b520:	3903      	subs	r1, #3
 800b522:	458c      	cmp	ip, r1
 800b524:	bf38      	it	cc
 800b526:	2200      	movcc	r2, #0
 800b528:	441a      	add	r2, r3
 800b52a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b52e:	b17b      	cbz	r3, 800b550 <__mdiff+0x104>
 800b530:	6106      	str	r6, [r0, #16]
 800b532:	e7a5      	b.n	800b480 <__mdiff+0x34>
 800b534:	f855 8b04 	ldr.w	r8, [r5], #4
 800b538:	fa17 f488 	uxtah	r4, r7, r8
 800b53c:	1422      	asrs	r2, r4, #16
 800b53e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b542:	b2a4      	uxth	r4, r4
 800b544:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b548:	f84e 4b04 	str.w	r4, [lr], #4
 800b54c:	1417      	asrs	r7, r2, #16
 800b54e:	e7e0      	b.n	800b512 <__mdiff+0xc6>
 800b550:	3e01      	subs	r6, #1
 800b552:	e7ea      	b.n	800b52a <__mdiff+0xde>
 800b554:	0800d1ec 	.word	0x0800d1ec
 800b558:	0800d27c 	.word	0x0800d27c

0800b55c <__ulp>:
 800b55c:	b082      	sub	sp, #8
 800b55e:	ed8d 0b00 	vstr	d0, [sp]
 800b562:	9b01      	ldr	r3, [sp, #4]
 800b564:	4912      	ldr	r1, [pc, #72]	; (800b5b0 <__ulp+0x54>)
 800b566:	4019      	ands	r1, r3
 800b568:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b56c:	2900      	cmp	r1, #0
 800b56e:	dd05      	ble.n	800b57c <__ulp+0x20>
 800b570:	2200      	movs	r2, #0
 800b572:	460b      	mov	r3, r1
 800b574:	ec43 2b10 	vmov	d0, r2, r3
 800b578:	b002      	add	sp, #8
 800b57a:	4770      	bx	lr
 800b57c:	4249      	negs	r1, r1
 800b57e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b582:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b586:	f04f 0200 	mov.w	r2, #0
 800b58a:	f04f 0300 	mov.w	r3, #0
 800b58e:	da04      	bge.n	800b59a <__ulp+0x3e>
 800b590:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b594:	fa41 f300 	asr.w	r3, r1, r0
 800b598:	e7ec      	b.n	800b574 <__ulp+0x18>
 800b59a:	f1a0 0114 	sub.w	r1, r0, #20
 800b59e:	291e      	cmp	r1, #30
 800b5a0:	bfda      	itte	le
 800b5a2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b5a6:	fa20 f101 	lsrle.w	r1, r0, r1
 800b5aa:	2101      	movgt	r1, #1
 800b5ac:	460a      	mov	r2, r1
 800b5ae:	e7e1      	b.n	800b574 <__ulp+0x18>
 800b5b0:	7ff00000 	.word	0x7ff00000

0800b5b4 <__b2d>:
 800b5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5b6:	6905      	ldr	r5, [r0, #16]
 800b5b8:	f100 0714 	add.w	r7, r0, #20
 800b5bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b5c0:	1f2e      	subs	r6, r5, #4
 800b5c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	f7ff fd52 	bl	800b070 <__hi0bits>
 800b5cc:	f1c0 0320 	rsb	r3, r0, #32
 800b5d0:	280a      	cmp	r0, #10
 800b5d2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b650 <__b2d+0x9c>
 800b5d6:	600b      	str	r3, [r1, #0]
 800b5d8:	dc14      	bgt.n	800b604 <__b2d+0x50>
 800b5da:	f1c0 0e0b 	rsb	lr, r0, #11
 800b5de:	fa24 f10e 	lsr.w	r1, r4, lr
 800b5e2:	42b7      	cmp	r7, r6
 800b5e4:	ea41 030c 	orr.w	r3, r1, ip
 800b5e8:	bf34      	ite	cc
 800b5ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b5ee:	2100      	movcs	r1, #0
 800b5f0:	3015      	adds	r0, #21
 800b5f2:	fa04 f000 	lsl.w	r0, r4, r0
 800b5f6:	fa21 f10e 	lsr.w	r1, r1, lr
 800b5fa:	ea40 0201 	orr.w	r2, r0, r1
 800b5fe:	ec43 2b10 	vmov	d0, r2, r3
 800b602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b604:	42b7      	cmp	r7, r6
 800b606:	bf3a      	itte	cc
 800b608:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b60c:	f1a5 0608 	subcc.w	r6, r5, #8
 800b610:	2100      	movcs	r1, #0
 800b612:	380b      	subs	r0, #11
 800b614:	d017      	beq.n	800b646 <__b2d+0x92>
 800b616:	f1c0 0c20 	rsb	ip, r0, #32
 800b61a:	fa04 f500 	lsl.w	r5, r4, r0
 800b61e:	42be      	cmp	r6, r7
 800b620:	fa21 f40c 	lsr.w	r4, r1, ip
 800b624:	ea45 0504 	orr.w	r5, r5, r4
 800b628:	bf8c      	ite	hi
 800b62a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b62e:	2400      	movls	r4, #0
 800b630:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b634:	fa01 f000 	lsl.w	r0, r1, r0
 800b638:	fa24 f40c 	lsr.w	r4, r4, ip
 800b63c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b640:	ea40 0204 	orr.w	r2, r0, r4
 800b644:	e7db      	b.n	800b5fe <__b2d+0x4a>
 800b646:	ea44 030c 	orr.w	r3, r4, ip
 800b64a:	460a      	mov	r2, r1
 800b64c:	e7d7      	b.n	800b5fe <__b2d+0x4a>
 800b64e:	bf00      	nop
 800b650:	3ff00000 	.word	0x3ff00000

0800b654 <__d2b>:
 800b654:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b658:	4689      	mov	r9, r1
 800b65a:	2101      	movs	r1, #1
 800b65c:	ec57 6b10 	vmov	r6, r7, d0
 800b660:	4690      	mov	r8, r2
 800b662:	f7ff fc0f 	bl	800ae84 <_Balloc>
 800b666:	4604      	mov	r4, r0
 800b668:	b930      	cbnz	r0, 800b678 <__d2b+0x24>
 800b66a:	4602      	mov	r2, r0
 800b66c:	4b25      	ldr	r3, [pc, #148]	; (800b704 <__d2b+0xb0>)
 800b66e:	4826      	ldr	r0, [pc, #152]	; (800b708 <__d2b+0xb4>)
 800b670:	f240 310a 	movw	r1, #778	; 0x30a
 800b674:	f000 ff32 	bl	800c4dc <__assert_func>
 800b678:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b67c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b680:	bb35      	cbnz	r5, 800b6d0 <__d2b+0x7c>
 800b682:	2e00      	cmp	r6, #0
 800b684:	9301      	str	r3, [sp, #4]
 800b686:	d028      	beq.n	800b6da <__d2b+0x86>
 800b688:	4668      	mov	r0, sp
 800b68a:	9600      	str	r6, [sp, #0]
 800b68c:	f7ff fd10 	bl	800b0b0 <__lo0bits>
 800b690:	9900      	ldr	r1, [sp, #0]
 800b692:	b300      	cbz	r0, 800b6d6 <__d2b+0x82>
 800b694:	9a01      	ldr	r2, [sp, #4]
 800b696:	f1c0 0320 	rsb	r3, r0, #32
 800b69a:	fa02 f303 	lsl.w	r3, r2, r3
 800b69e:	430b      	orrs	r3, r1
 800b6a0:	40c2      	lsrs	r2, r0
 800b6a2:	6163      	str	r3, [r4, #20]
 800b6a4:	9201      	str	r2, [sp, #4]
 800b6a6:	9b01      	ldr	r3, [sp, #4]
 800b6a8:	61a3      	str	r3, [r4, #24]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	bf14      	ite	ne
 800b6ae:	2202      	movne	r2, #2
 800b6b0:	2201      	moveq	r2, #1
 800b6b2:	6122      	str	r2, [r4, #16]
 800b6b4:	b1d5      	cbz	r5, 800b6ec <__d2b+0x98>
 800b6b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b6ba:	4405      	add	r5, r0
 800b6bc:	f8c9 5000 	str.w	r5, [r9]
 800b6c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b6c4:	f8c8 0000 	str.w	r0, [r8]
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	b003      	add	sp, #12
 800b6cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6d4:	e7d5      	b.n	800b682 <__d2b+0x2e>
 800b6d6:	6161      	str	r1, [r4, #20]
 800b6d8:	e7e5      	b.n	800b6a6 <__d2b+0x52>
 800b6da:	a801      	add	r0, sp, #4
 800b6dc:	f7ff fce8 	bl	800b0b0 <__lo0bits>
 800b6e0:	9b01      	ldr	r3, [sp, #4]
 800b6e2:	6163      	str	r3, [r4, #20]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	6122      	str	r2, [r4, #16]
 800b6e8:	3020      	adds	r0, #32
 800b6ea:	e7e3      	b.n	800b6b4 <__d2b+0x60>
 800b6ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b6f4:	f8c9 0000 	str.w	r0, [r9]
 800b6f8:	6918      	ldr	r0, [r3, #16]
 800b6fa:	f7ff fcb9 	bl	800b070 <__hi0bits>
 800b6fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b702:	e7df      	b.n	800b6c4 <__d2b+0x70>
 800b704:	0800d1ec 	.word	0x0800d1ec
 800b708:	0800d27c 	.word	0x0800d27c

0800b70c <__ratio>:
 800b70c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b710:	468a      	mov	sl, r1
 800b712:	4669      	mov	r1, sp
 800b714:	4683      	mov	fp, r0
 800b716:	f7ff ff4d 	bl	800b5b4 <__b2d>
 800b71a:	a901      	add	r1, sp, #4
 800b71c:	4650      	mov	r0, sl
 800b71e:	ec59 8b10 	vmov	r8, r9, d0
 800b722:	ee10 6a10 	vmov	r6, s0
 800b726:	f7ff ff45 	bl	800b5b4 <__b2d>
 800b72a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b72e:	f8da 2010 	ldr.w	r2, [sl, #16]
 800b732:	eba3 0c02 	sub.w	ip, r3, r2
 800b736:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b73a:	1a9b      	subs	r3, r3, r2
 800b73c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b740:	ec55 4b10 	vmov	r4, r5, d0
 800b744:	2b00      	cmp	r3, #0
 800b746:	ee10 0a10 	vmov	r0, s0
 800b74a:	bfce      	itee	gt
 800b74c:	464a      	movgt	r2, r9
 800b74e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b752:	462a      	movle	r2, r5
 800b754:	464f      	mov	r7, r9
 800b756:	4629      	mov	r1, r5
 800b758:	bfcc      	ite	gt
 800b75a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b75e:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b762:	ec47 6b17 	vmov	d7, r6, r7
 800b766:	ec41 0b16 	vmov	d6, r0, r1
 800b76a:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800b76e:	b003      	add	sp, #12
 800b770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b774 <__copybits>:
 800b774:	3901      	subs	r1, #1
 800b776:	b570      	push	{r4, r5, r6, lr}
 800b778:	1149      	asrs	r1, r1, #5
 800b77a:	6914      	ldr	r4, [r2, #16]
 800b77c:	3101      	adds	r1, #1
 800b77e:	f102 0314 	add.w	r3, r2, #20
 800b782:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b786:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b78a:	1f05      	subs	r5, r0, #4
 800b78c:	42a3      	cmp	r3, r4
 800b78e:	d30c      	bcc.n	800b7aa <__copybits+0x36>
 800b790:	1aa3      	subs	r3, r4, r2
 800b792:	3b11      	subs	r3, #17
 800b794:	f023 0303 	bic.w	r3, r3, #3
 800b798:	3211      	adds	r2, #17
 800b79a:	42a2      	cmp	r2, r4
 800b79c:	bf88      	it	hi
 800b79e:	2300      	movhi	r3, #0
 800b7a0:	4418      	add	r0, r3
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	4288      	cmp	r0, r1
 800b7a6:	d305      	bcc.n	800b7b4 <__copybits+0x40>
 800b7a8:	bd70      	pop	{r4, r5, r6, pc}
 800b7aa:	f853 6b04 	ldr.w	r6, [r3], #4
 800b7ae:	f845 6f04 	str.w	r6, [r5, #4]!
 800b7b2:	e7eb      	b.n	800b78c <__copybits+0x18>
 800b7b4:	f840 3b04 	str.w	r3, [r0], #4
 800b7b8:	e7f4      	b.n	800b7a4 <__copybits+0x30>

0800b7ba <__any_on>:
 800b7ba:	f100 0214 	add.w	r2, r0, #20
 800b7be:	6900      	ldr	r0, [r0, #16]
 800b7c0:	114b      	asrs	r3, r1, #5
 800b7c2:	4298      	cmp	r0, r3
 800b7c4:	b510      	push	{r4, lr}
 800b7c6:	db11      	blt.n	800b7ec <__any_on+0x32>
 800b7c8:	dd0a      	ble.n	800b7e0 <__any_on+0x26>
 800b7ca:	f011 011f 	ands.w	r1, r1, #31
 800b7ce:	d007      	beq.n	800b7e0 <__any_on+0x26>
 800b7d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b7d4:	fa24 f001 	lsr.w	r0, r4, r1
 800b7d8:	fa00 f101 	lsl.w	r1, r0, r1
 800b7dc:	428c      	cmp	r4, r1
 800b7de:	d10b      	bne.n	800b7f8 <__any_on+0x3e>
 800b7e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d803      	bhi.n	800b7f0 <__any_on+0x36>
 800b7e8:	2000      	movs	r0, #0
 800b7ea:	bd10      	pop	{r4, pc}
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	e7f7      	b.n	800b7e0 <__any_on+0x26>
 800b7f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b7f4:	2900      	cmp	r1, #0
 800b7f6:	d0f5      	beq.n	800b7e4 <__any_on+0x2a>
 800b7f8:	2001      	movs	r0, #1
 800b7fa:	e7f6      	b.n	800b7ea <__any_on+0x30>

0800b7fc <_calloc_r>:
 800b7fc:	b513      	push	{r0, r1, r4, lr}
 800b7fe:	434a      	muls	r2, r1
 800b800:	4611      	mov	r1, r2
 800b802:	9201      	str	r2, [sp, #4]
 800b804:	f000 f85a 	bl	800b8bc <_malloc_r>
 800b808:	4604      	mov	r4, r0
 800b80a:	b118      	cbz	r0, 800b814 <_calloc_r+0x18>
 800b80c:	9a01      	ldr	r2, [sp, #4]
 800b80e:	2100      	movs	r1, #0
 800b810:	f7fc fc06 	bl	8008020 <memset>
 800b814:	4620      	mov	r0, r4
 800b816:	b002      	add	sp, #8
 800b818:	bd10      	pop	{r4, pc}
	...

0800b81c <_free_r>:
 800b81c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b81e:	2900      	cmp	r1, #0
 800b820:	d048      	beq.n	800b8b4 <_free_r+0x98>
 800b822:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b826:	9001      	str	r0, [sp, #4]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	f1a1 0404 	sub.w	r4, r1, #4
 800b82e:	bfb8      	it	lt
 800b830:	18e4      	addlt	r4, r4, r3
 800b832:	f001 f857 	bl	800c8e4 <__malloc_lock>
 800b836:	4a20      	ldr	r2, [pc, #128]	; (800b8b8 <_free_r+0x9c>)
 800b838:	9801      	ldr	r0, [sp, #4]
 800b83a:	6813      	ldr	r3, [r2, #0]
 800b83c:	4615      	mov	r5, r2
 800b83e:	b933      	cbnz	r3, 800b84e <_free_r+0x32>
 800b840:	6063      	str	r3, [r4, #4]
 800b842:	6014      	str	r4, [r2, #0]
 800b844:	b003      	add	sp, #12
 800b846:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b84a:	f001 b851 	b.w	800c8f0 <__malloc_unlock>
 800b84e:	42a3      	cmp	r3, r4
 800b850:	d90b      	bls.n	800b86a <_free_r+0x4e>
 800b852:	6821      	ldr	r1, [r4, #0]
 800b854:	1862      	adds	r2, r4, r1
 800b856:	4293      	cmp	r3, r2
 800b858:	bf04      	itt	eq
 800b85a:	681a      	ldreq	r2, [r3, #0]
 800b85c:	685b      	ldreq	r3, [r3, #4]
 800b85e:	6063      	str	r3, [r4, #4]
 800b860:	bf04      	itt	eq
 800b862:	1852      	addeq	r2, r2, r1
 800b864:	6022      	streq	r2, [r4, #0]
 800b866:	602c      	str	r4, [r5, #0]
 800b868:	e7ec      	b.n	800b844 <_free_r+0x28>
 800b86a:	461a      	mov	r2, r3
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	b10b      	cbz	r3, 800b874 <_free_r+0x58>
 800b870:	42a3      	cmp	r3, r4
 800b872:	d9fa      	bls.n	800b86a <_free_r+0x4e>
 800b874:	6811      	ldr	r1, [r2, #0]
 800b876:	1855      	adds	r5, r2, r1
 800b878:	42a5      	cmp	r5, r4
 800b87a:	d10b      	bne.n	800b894 <_free_r+0x78>
 800b87c:	6824      	ldr	r4, [r4, #0]
 800b87e:	4421      	add	r1, r4
 800b880:	1854      	adds	r4, r2, r1
 800b882:	42a3      	cmp	r3, r4
 800b884:	6011      	str	r1, [r2, #0]
 800b886:	d1dd      	bne.n	800b844 <_free_r+0x28>
 800b888:	681c      	ldr	r4, [r3, #0]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	6053      	str	r3, [r2, #4]
 800b88e:	4421      	add	r1, r4
 800b890:	6011      	str	r1, [r2, #0]
 800b892:	e7d7      	b.n	800b844 <_free_r+0x28>
 800b894:	d902      	bls.n	800b89c <_free_r+0x80>
 800b896:	230c      	movs	r3, #12
 800b898:	6003      	str	r3, [r0, #0]
 800b89a:	e7d3      	b.n	800b844 <_free_r+0x28>
 800b89c:	6825      	ldr	r5, [r4, #0]
 800b89e:	1961      	adds	r1, r4, r5
 800b8a0:	428b      	cmp	r3, r1
 800b8a2:	bf04      	itt	eq
 800b8a4:	6819      	ldreq	r1, [r3, #0]
 800b8a6:	685b      	ldreq	r3, [r3, #4]
 800b8a8:	6063      	str	r3, [r4, #4]
 800b8aa:	bf04      	itt	eq
 800b8ac:	1949      	addeq	r1, r1, r5
 800b8ae:	6021      	streq	r1, [r4, #0]
 800b8b0:	6054      	str	r4, [r2, #4]
 800b8b2:	e7c7      	b.n	800b844 <_free_r+0x28>
 800b8b4:	b003      	add	sp, #12
 800b8b6:	bd30      	pop	{r4, r5, pc}
 800b8b8:	20000258 	.word	0x20000258

0800b8bc <_malloc_r>:
 800b8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8be:	1ccd      	adds	r5, r1, #3
 800b8c0:	f025 0503 	bic.w	r5, r5, #3
 800b8c4:	3508      	adds	r5, #8
 800b8c6:	2d0c      	cmp	r5, #12
 800b8c8:	bf38      	it	cc
 800b8ca:	250c      	movcc	r5, #12
 800b8cc:	2d00      	cmp	r5, #0
 800b8ce:	4606      	mov	r6, r0
 800b8d0:	db01      	blt.n	800b8d6 <_malloc_r+0x1a>
 800b8d2:	42a9      	cmp	r1, r5
 800b8d4:	d903      	bls.n	800b8de <_malloc_r+0x22>
 800b8d6:	230c      	movs	r3, #12
 800b8d8:	6033      	str	r3, [r6, #0]
 800b8da:	2000      	movs	r0, #0
 800b8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8de:	f001 f801 	bl	800c8e4 <__malloc_lock>
 800b8e2:	4921      	ldr	r1, [pc, #132]	; (800b968 <_malloc_r+0xac>)
 800b8e4:	680a      	ldr	r2, [r1, #0]
 800b8e6:	4614      	mov	r4, r2
 800b8e8:	b99c      	cbnz	r4, 800b912 <_malloc_r+0x56>
 800b8ea:	4f20      	ldr	r7, [pc, #128]	; (800b96c <_malloc_r+0xb0>)
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	b923      	cbnz	r3, 800b8fa <_malloc_r+0x3e>
 800b8f0:	4621      	mov	r1, r4
 800b8f2:	4630      	mov	r0, r6
 800b8f4:	f000 fcd0 	bl	800c298 <_sbrk_r>
 800b8f8:	6038      	str	r0, [r7, #0]
 800b8fa:	4629      	mov	r1, r5
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f000 fccb 	bl	800c298 <_sbrk_r>
 800b902:	1c43      	adds	r3, r0, #1
 800b904:	d123      	bne.n	800b94e <_malloc_r+0x92>
 800b906:	230c      	movs	r3, #12
 800b908:	6033      	str	r3, [r6, #0]
 800b90a:	4630      	mov	r0, r6
 800b90c:	f000 fff0 	bl	800c8f0 <__malloc_unlock>
 800b910:	e7e3      	b.n	800b8da <_malloc_r+0x1e>
 800b912:	6823      	ldr	r3, [r4, #0]
 800b914:	1b5b      	subs	r3, r3, r5
 800b916:	d417      	bmi.n	800b948 <_malloc_r+0x8c>
 800b918:	2b0b      	cmp	r3, #11
 800b91a:	d903      	bls.n	800b924 <_malloc_r+0x68>
 800b91c:	6023      	str	r3, [r4, #0]
 800b91e:	441c      	add	r4, r3
 800b920:	6025      	str	r5, [r4, #0]
 800b922:	e004      	b.n	800b92e <_malloc_r+0x72>
 800b924:	6863      	ldr	r3, [r4, #4]
 800b926:	42a2      	cmp	r2, r4
 800b928:	bf0c      	ite	eq
 800b92a:	600b      	streq	r3, [r1, #0]
 800b92c:	6053      	strne	r3, [r2, #4]
 800b92e:	4630      	mov	r0, r6
 800b930:	f000 ffde 	bl	800c8f0 <__malloc_unlock>
 800b934:	f104 000b 	add.w	r0, r4, #11
 800b938:	1d23      	adds	r3, r4, #4
 800b93a:	f020 0007 	bic.w	r0, r0, #7
 800b93e:	1ac2      	subs	r2, r0, r3
 800b940:	d0cc      	beq.n	800b8dc <_malloc_r+0x20>
 800b942:	1a1b      	subs	r3, r3, r0
 800b944:	50a3      	str	r3, [r4, r2]
 800b946:	e7c9      	b.n	800b8dc <_malloc_r+0x20>
 800b948:	4622      	mov	r2, r4
 800b94a:	6864      	ldr	r4, [r4, #4]
 800b94c:	e7cc      	b.n	800b8e8 <_malloc_r+0x2c>
 800b94e:	1cc4      	adds	r4, r0, #3
 800b950:	f024 0403 	bic.w	r4, r4, #3
 800b954:	42a0      	cmp	r0, r4
 800b956:	d0e3      	beq.n	800b920 <_malloc_r+0x64>
 800b958:	1a21      	subs	r1, r4, r0
 800b95a:	4630      	mov	r0, r6
 800b95c:	f000 fc9c 	bl	800c298 <_sbrk_r>
 800b960:	3001      	adds	r0, #1
 800b962:	d1dd      	bne.n	800b920 <_malloc_r+0x64>
 800b964:	e7cf      	b.n	800b906 <_malloc_r+0x4a>
 800b966:	bf00      	nop
 800b968:	20000258 	.word	0x20000258
 800b96c:	2000025c 	.word	0x2000025c

0800b970 <__ssputs_r>:
 800b970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b974:	688e      	ldr	r6, [r1, #8]
 800b976:	429e      	cmp	r6, r3
 800b978:	4682      	mov	sl, r0
 800b97a:	460c      	mov	r4, r1
 800b97c:	4690      	mov	r8, r2
 800b97e:	461f      	mov	r7, r3
 800b980:	d838      	bhi.n	800b9f4 <__ssputs_r+0x84>
 800b982:	898a      	ldrh	r2, [r1, #12]
 800b984:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b988:	d032      	beq.n	800b9f0 <__ssputs_r+0x80>
 800b98a:	6825      	ldr	r5, [r4, #0]
 800b98c:	6909      	ldr	r1, [r1, #16]
 800b98e:	eba5 0901 	sub.w	r9, r5, r1
 800b992:	6965      	ldr	r5, [r4, #20]
 800b994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b998:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b99c:	3301      	adds	r3, #1
 800b99e:	444b      	add	r3, r9
 800b9a0:	106d      	asrs	r5, r5, #1
 800b9a2:	429d      	cmp	r5, r3
 800b9a4:	bf38      	it	cc
 800b9a6:	461d      	movcc	r5, r3
 800b9a8:	0553      	lsls	r3, r2, #21
 800b9aa:	d531      	bpl.n	800ba10 <__ssputs_r+0xa0>
 800b9ac:	4629      	mov	r1, r5
 800b9ae:	f7ff ff85 	bl	800b8bc <_malloc_r>
 800b9b2:	4606      	mov	r6, r0
 800b9b4:	b950      	cbnz	r0, 800b9cc <__ssputs_r+0x5c>
 800b9b6:	230c      	movs	r3, #12
 800b9b8:	f8ca 3000 	str.w	r3, [sl]
 800b9bc:	89a3      	ldrh	r3, [r4, #12]
 800b9be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9c2:	81a3      	strh	r3, [r4, #12]
 800b9c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9cc:	6921      	ldr	r1, [r4, #16]
 800b9ce:	464a      	mov	r2, r9
 800b9d0:	f7fc fb18 	bl	8008004 <memcpy>
 800b9d4:	89a3      	ldrh	r3, [r4, #12]
 800b9d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b9da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9de:	81a3      	strh	r3, [r4, #12]
 800b9e0:	6126      	str	r6, [r4, #16]
 800b9e2:	6165      	str	r5, [r4, #20]
 800b9e4:	444e      	add	r6, r9
 800b9e6:	eba5 0509 	sub.w	r5, r5, r9
 800b9ea:	6026      	str	r6, [r4, #0]
 800b9ec:	60a5      	str	r5, [r4, #8]
 800b9ee:	463e      	mov	r6, r7
 800b9f0:	42be      	cmp	r6, r7
 800b9f2:	d900      	bls.n	800b9f6 <__ssputs_r+0x86>
 800b9f4:	463e      	mov	r6, r7
 800b9f6:	4632      	mov	r2, r6
 800b9f8:	6820      	ldr	r0, [r4, #0]
 800b9fa:	4641      	mov	r1, r8
 800b9fc:	f000 ff58 	bl	800c8b0 <memmove>
 800ba00:	68a3      	ldr	r3, [r4, #8]
 800ba02:	6822      	ldr	r2, [r4, #0]
 800ba04:	1b9b      	subs	r3, r3, r6
 800ba06:	4432      	add	r2, r6
 800ba08:	60a3      	str	r3, [r4, #8]
 800ba0a:	6022      	str	r2, [r4, #0]
 800ba0c:	2000      	movs	r0, #0
 800ba0e:	e7db      	b.n	800b9c8 <__ssputs_r+0x58>
 800ba10:	462a      	mov	r2, r5
 800ba12:	f000 ff73 	bl	800c8fc <_realloc_r>
 800ba16:	4606      	mov	r6, r0
 800ba18:	2800      	cmp	r0, #0
 800ba1a:	d1e1      	bne.n	800b9e0 <__ssputs_r+0x70>
 800ba1c:	6921      	ldr	r1, [r4, #16]
 800ba1e:	4650      	mov	r0, sl
 800ba20:	f7ff fefc 	bl	800b81c <_free_r>
 800ba24:	e7c7      	b.n	800b9b6 <__ssputs_r+0x46>
	...

0800ba28 <_svfiprintf_r>:
 800ba28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba2c:	4698      	mov	r8, r3
 800ba2e:	898b      	ldrh	r3, [r1, #12]
 800ba30:	061b      	lsls	r3, r3, #24
 800ba32:	b09d      	sub	sp, #116	; 0x74
 800ba34:	4607      	mov	r7, r0
 800ba36:	460d      	mov	r5, r1
 800ba38:	4614      	mov	r4, r2
 800ba3a:	d50e      	bpl.n	800ba5a <_svfiprintf_r+0x32>
 800ba3c:	690b      	ldr	r3, [r1, #16]
 800ba3e:	b963      	cbnz	r3, 800ba5a <_svfiprintf_r+0x32>
 800ba40:	2140      	movs	r1, #64	; 0x40
 800ba42:	f7ff ff3b 	bl	800b8bc <_malloc_r>
 800ba46:	6028      	str	r0, [r5, #0]
 800ba48:	6128      	str	r0, [r5, #16]
 800ba4a:	b920      	cbnz	r0, 800ba56 <_svfiprintf_r+0x2e>
 800ba4c:	230c      	movs	r3, #12
 800ba4e:	603b      	str	r3, [r7, #0]
 800ba50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba54:	e0d1      	b.n	800bbfa <_svfiprintf_r+0x1d2>
 800ba56:	2340      	movs	r3, #64	; 0x40
 800ba58:	616b      	str	r3, [r5, #20]
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba5e:	2320      	movs	r3, #32
 800ba60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba64:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba68:	2330      	movs	r3, #48	; 0x30
 800ba6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bc14 <_svfiprintf_r+0x1ec>
 800ba6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba72:	f04f 0901 	mov.w	r9, #1
 800ba76:	4623      	mov	r3, r4
 800ba78:	469a      	mov	sl, r3
 800ba7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba7e:	b10a      	cbz	r2, 800ba84 <_svfiprintf_r+0x5c>
 800ba80:	2a25      	cmp	r2, #37	; 0x25
 800ba82:	d1f9      	bne.n	800ba78 <_svfiprintf_r+0x50>
 800ba84:	ebba 0b04 	subs.w	fp, sl, r4
 800ba88:	d00b      	beq.n	800baa2 <_svfiprintf_r+0x7a>
 800ba8a:	465b      	mov	r3, fp
 800ba8c:	4622      	mov	r2, r4
 800ba8e:	4629      	mov	r1, r5
 800ba90:	4638      	mov	r0, r7
 800ba92:	f7ff ff6d 	bl	800b970 <__ssputs_r>
 800ba96:	3001      	adds	r0, #1
 800ba98:	f000 80aa 	beq.w	800bbf0 <_svfiprintf_r+0x1c8>
 800ba9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba9e:	445a      	add	r2, fp
 800baa0:	9209      	str	r2, [sp, #36]	; 0x24
 800baa2:	f89a 3000 	ldrb.w	r3, [sl]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	f000 80a2 	beq.w	800bbf0 <_svfiprintf_r+0x1c8>
 800baac:	2300      	movs	r3, #0
 800baae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bab6:	f10a 0a01 	add.w	sl, sl, #1
 800baba:	9304      	str	r3, [sp, #16]
 800babc:	9307      	str	r3, [sp, #28]
 800babe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bac2:	931a      	str	r3, [sp, #104]	; 0x68
 800bac4:	4654      	mov	r4, sl
 800bac6:	2205      	movs	r2, #5
 800bac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bacc:	4851      	ldr	r0, [pc, #324]	; (800bc14 <_svfiprintf_r+0x1ec>)
 800bace:	f7f4 fbbf 	bl	8000250 <memchr>
 800bad2:	9a04      	ldr	r2, [sp, #16]
 800bad4:	b9d8      	cbnz	r0, 800bb0e <_svfiprintf_r+0xe6>
 800bad6:	06d0      	lsls	r0, r2, #27
 800bad8:	bf44      	itt	mi
 800bada:	2320      	movmi	r3, #32
 800badc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bae0:	0711      	lsls	r1, r2, #28
 800bae2:	bf44      	itt	mi
 800bae4:	232b      	movmi	r3, #43	; 0x2b
 800bae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baea:	f89a 3000 	ldrb.w	r3, [sl]
 800baee:	2b2a      	cmp	r3, #42	; 0x2a
 800baf0:	d015      	beq.n	800bb1e <_svfiprintf_r+0xf6>
 800baf2:	9a07      	ldr	r2, [sp, #28]
 800baf4:	4654      	mov	r4, sl
 800baf6:	2000      	movs	r0, #0
 800baf8:	f04f 0c0a 	mov.w	ip, #10
 800bafc:	4621      	mov	r1, r4
 800bafe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb02:	3b30      	subs	r3, #48	; 0x30
 800bb04:	2b09      	cmp	r3, #9
 800bb06:	d94e      	bls.n	800bba6 <_svfiprintf_r+0x17e>
 800bb08:	b1b0      	cbz	r0, 800bb38 <_svfiprintf_r+0x110>
 800bb0a:	9207      	str	r2, [sp, #28]
 800bb0c:	e014      	b.n	800bb38 <_svfiprintf_r+0x110>
 800bb0e:	eba0 0308 	sub.w	r3, r0, r8
 800bb12:	fa09 f303 	lsl.w	r3, r9, r3
 800bb16:	4313      	orrs	r3, r2
 800bb18:	9304      	str	r3, [sp, #16]
 800bb1a:	46a2      	mov	sl, r4
 800bb1c:	e7d2      	b.n	800bac4 <_svfiprintf_r+0x9c>
 800bb1e:	9b03      	ldr	r3, [sp, #12]
 800bb20:	1d19      	adds	r1, r3, #4
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	9103      	str	r1, [sp, #12]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	bfbb      	ittet	lt
 800bb2a:	425b      	neglt	r3, r3
 800bb2c:	f042 0202 	orrlt.w	r2, r2, #2
 800bb30:	9307      	strge	r3, [sp, #28]
 800bb32:	9307      	strlt	r3, [sp, #28]
 800bb34:	bfb8      	it	lt
 800bb36:	9204      	strlt	r2, [sp, #16]
 800bb38:	7823      	ldrb	r3, [r4, #0]
 800bb3a:	2b2e      	cmp	r3, #46	; 0x2e
 800bb3c:	d10c      	bne.n	800bb58 <_svfiprintf_r+0x130>
 800bb3e:	7863      	ldrb	r3, [r4, #1]
 800bb40:	2b2a      	cmp	r3, #42	; 0x2a
 800bb42:	d135      	bne.n	800bbb0 <_svfiprintf_r+0x188>
 800bb44:	9b03      	ldr	r3, [sp, #12]
 800bb46:	1d1a      	adds	r2, r3, #4
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	9203      	str	r2, [sp, #12]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	bfb8      	it	lt
 800bb50:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bb54:	3402      	adds	r4, #2
 800bb56:	9305      	str	r3, [sp, #20]
 800bb58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bc24 <_svfiprintf_r+0x1fc>
 800bb5c:	7821      	ldrb	r1, [r4, #0]
 800bb5e:	2203      	movs	r2, #3
 800bb60:	4650      	mov	r0, sl
 800bb62:	f7f4 fb75 	bl	8000250 <memchr>
 800bb66:	b140      	cbz	r0, 800bb7a <_svfiprintf_r+0x152>
 800bb68:	2340      	movs	r3, #64	; 0x40
 800bb6a:	eba0 000a 	sub.w	r0, r0, sl
 800bb6e:	fa03 f000 	lsl.w	r0, r3, r0
 800bb72:	9b04      	ldr	r3, [sp, #16]
 800bb74:	4303      	orrs	r3, r0
 800bb76:	3401      	adds	r4, #1
 800bb78:	9304      	str	r3, [sp, #16]
 800bb7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb7e:	4826      	ldr	r0, [pc, #152]	; (800bc18 <_svfiprintf_r+0x1f0>)
 800bb80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb84:	2206      	movs	r2, #6
 800bb86:	f7f4 fb63 	bl	8000250 <memchr>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d038      	beq.n	800bc00 <_svfiprintf_r+0x1d8>
 800bb8e:	4b23      	ldr	r3, [pc, #140]	; (800bc1c <_svfiprintf_r+0x1f4>)
 800bb90:	bb1b      	cbnz	r3, 800bbda <_svfiprintf_r+0x1b2>
 800bb92:	9b03      	ldr	r3, [sp, #12]
 800bb94:	3307      	adds	r3, #7
 800bb96:	f023 0307 	bic.w	r3, r3, #7
 800bb9a:	3308      	adds	r3, #8
 800bb9c:	9303      	str	r3, [sp, #12]
 800bb9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bba0:	4433      	add	r3, r6
 800bba2:	9309      	str	r3, [sp, #36]	; 0x24
 800bba4:	e767      	b.n	800ba76 <_svfiprintf_r+0x4e>
 800bba6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbaa:	460c      	mov	r4, r1
 800bbac:	2001      	movs	r0, #1
 800bbae:	e7a5      	b.n	800bafc <_svfiprintf_r+0xd4>
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	3401      	adds	r4, #1
 800bbb4:	9305      	str	r3, [sp, #20]
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	f04f 0c0a 	mov.w	ip, #10
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbc2:	3a30      	subs	r2, #48	; 0x30
 800bbc4:	2a09      	cmp	r2, #9
 800bbc6:	d903      	bls.n	800bbd0 <_svfiprintf_r+0x1a8>
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d0c5      	beq.n	800bb58 <_svfiprintf_r+0x130>
 800bbcc:	9105      	str	r1, [sp, #20]
 800bbce:	e7c3      	b.n	800bb58 <_svfiprintf_r+0x130>
 800bbd0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbd4:	4604      	mov	r4, r0
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	e7f0      	b.n	800bbbc <_svfiprintf_r+0x194>
 800bbda:	ab03      	add	r3, sp, #12
 800bbdc:	9300      	str	r3, [sp, #0]
 800bbde:	462a      	mov	r2, r5
 800bbe0:	4b0f      	ldr	r3, [pc, #60]	; (800bc20 <_svfiprintf_r+0x1f8>)
 800bbe2:	a904      	add	r1, sp, #16
 800bbe4:	4638      	mov	r0, r7
 800bbe6:	f7fc fab3 	bl	8008150 <_printf_float>
 800bbea:	1c42      	adds	r2, r0, #1
 800bbec:	4606      	mov	r6, r0
 800bbee:	d1d6      	bne.n	800bb9e <_svfiprintf_r+0x176>
 800bbf0:	89ab      	ldrh	r3, [r5, #12]
 800bbf2:	065b      	lsls	r3, r3, #25
 800bbf4:	f53f af2c 	bmi.w	800ba50 <_svfiprintf_r+0x28>
 800bbf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbfa:	b01d      	add	sp, #116	; 0x74
 800bbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc00:	ab03      	add	r3, sp, #12
 800bc02:	9300      	str	r3, [sp, #0]
 800bc04:	462a      	mov	r2, r5
 800bc06:	4b06      	ldr	r3, [pc, #24]	; (800bc20 <_svfiprintf_r+0x1f8>)
 800bc08:	a904      	add	r1, sp, #16
 800bc0a:	4638      	mov	r0, r7
 800bc0c:	f7fc fd2c 	bl	8008668 <_printf_i>
 800bc10:	e7eb      	b.n	800bbea <_svfiprintf_r+0x1c2>
 800bc12:	bf00      	nop
 800bc14:	0800d3dc 	.word	0x0800d3dc
 800bc18:	0800d3e6 	.word	0x0800d3e6
 800bc1c:	08008151 	.word	0x08008151
 800bc20:	0800b971 	.word	0x0800b971
 800bc24:	0800d3e2 	.word	0x0800d3e2

0800bc28 <_sungetc_r>:
 800bc28:	b538      	push	{r3, r4, r5, lr}
 800bc2a:	1c4b      	adds	r3, r1, #1
 800bc2c:	4614      	mov	r4, r2
 800bc2e:	d103      	bne.n	800bc38 <_sungetc_r+0x10>
 800bc30:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bc34:	4628      	mov	r0, r5
 800bc36:	bd38      	pop	{r3, r4, r5, pc}
 800bc38:	8993      	ldrh	r3, [r2, #12]
 800bc3a:	f023 0320 	bic.w	r3, r3, #32
 800bc3e:	8193      	strh	r3, [r2, #12]
 800bc40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc42:	6852      	ldr	r2, [r2, #4]
 800bc44:	b2cd      	uxtb	r5, r1
 800bc46:	b18b      	cbz	r3, 800bc6c <_sungetc_r+0x44>
 800bc48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	dd08      	ble.n	800bc60 <_sungetc_r+0x38>
 800bc4e:	6823      	ldr	r3, [r4, #0]
 800bc50:	1e5a      	subs	r2, r3, #1
 800bc52:	6022      	str	r2, [r4, #0]
 800bc54:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bc58:	6863      	ldr	r3, [r4, #4]
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	6063      	str	r3, [r4, #4]
 800bc5e:	e7e9      	b.n	800bc34 <_sungetc_r+0xc>
 800bc60:	4621      	mov	r1, r4
 800bc62:	f000 fbf3 	bl	800c44c <__submore>
 800bc66:	2800      	cmp	r0, #0
 800bc68:	d0f1      	beq.n	800bc4e <_sungetc_r+0x26>
 800bc6a:	e7e1      	b.n	800bc30 <_sungetc_r+0x8>
 800bc6c:	6921      	ldr	r1, [r4, #16]
 800bc6e:	6823      	ldr	r3, [r4, #0]
 800bc70:	b151      	cbz	r1, 800bc88 <_sungetc_r+0x60>
 800bc72:	4299      	cmp	r1, r3
 800bc74:	d208      	bcs.n	800bc88 <_sungetc_r+0x60>
 800bc76:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bc7a:	42a9      	cmp	r1, r5
 800bc7c:	d104      	bne.n	800bc88 <_sungetc_r+0x60>
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	3201      	adds	r2, #1
 800bc82:	6023      	str	r3, [r4, #0]
 800bc84:	6062      	str	r2, [r4, #4]
 800bc86:	e7d5      	b.n	800bc34 <_sungetc_r+0xc>
 800bc88:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800bc8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc90:	6363      	str	r3, [r4, #52]	; 0x34
 800bc92:	2303      	movs	r3, #3
 800bc94:	63a3      	str	r3, [r4, #56]	; 0x38
 800bc96:	4623      	mov	r3, r4
 800bc98:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bc9c:	6023      	str	r3, [r4, #0]
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e7dc      	b.n	800bc5c <_sungetc_r+0x34>

0800bca2 <__ssrefill_r>:
 800bca2:	b510      	push	{r4, lr}
 800bca4:	460c      	mov	r4, r1
 800bca6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bca8:	b169      	cbz	r1, 800bcc6 <__ssrefill_r+0x24>
 800bcaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcae:	4299      	cmp	r1, r3
 800bcb0:	d001      	beq.n	800bcb6 <__ssrefill_r+0x14>
 800bcb2:	f7ff fdb3 	bl	800b81c <_free_r>
 800bcb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bcb8:	6063      	str	r3, [r4, #4]
 800bcba:	2000      	movs	r0, #0
 800bcbc:	6360      	str	r0, [r4, #52]	; 0x34
 800bcbe:	b113      	cbz	r3, 800bcc6 <__ssrefill_r+0x24>
 800bcc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bcc2:	6023      	str	r3, [r4, #0]
 800bcc4:	bd10      	pop	{r4, pc}
 800bcc6:	6923      	ldr	r3, [r4, #16]
 800bcc8:	6023      	str	r3, [r4, #0]
 800bcca:	2300      	movs	r3, #0
 800bccc:	6063      	str	r3, [r4, #4]
 800bcce:	89a3      	ldrh	r3, [r4, #12]
 800bcd0:	f043 0320 	orr.w	r3, r3, #32
 800bcd4:	81a3      	strh	r3, [r4, #12]
 800bcd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcda:	e7f3      	b.n	800bcc4 <__ssrefill_r+0x22>

0800bcdc <__ssvfiscanf_r>:
 800bcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce0:	460c      	mov	r4, r1
 800bce2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800bce6:	2100      	movs	r1, #0
 800bce8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bcec:	49b2      	ldr	r1, [pc, #712]	; (800bfb8 <__ssvfiscanf_r+0x2dc>)
 800bcee:	91a0      	str	r1, [sp, #640]	; 0x280
 800bcf0:	f10d 0804 	add.w	r8, sp, #4
 800bcf4:	49b1      	ldr	r1, [pc, #708]	; (800bfbc <__ssvfiscanf_r+0x2e0>)
 800bcf6:	4fb2      	ldr	r7, [pc, #712]	; (800bfc0 <__ssvfiscanf_r+0x2e4>)
 800bcf8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800bfc4 <__ssvfiscanf_r+0x2e8>
 800bcfc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bd00:	4606      	mov	r6, r0
 800bd02:	91a1      	str	r1, [sp, #644]	; 0x284
 800bd04:	9300      	str	r3, [sp, #0]
 800bd06:	f892 a000 	ldrb.w	sl, [r2]
 800bd0a:	f1ba 0f00 	cmp.w	sl, #0
 800bd0e:	f000 8151 	beq.w	800bfb4 <__ssvfiscanf_r+0x2d8>
 800bd12:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800bd16:	f013 0308 	ands.w	r3, r3, #8
 800bd1a:	f102 0501 	add.w	r5, r2, #1
 800bd1e:	d019      	beq.n	800bd54 <__ssvfiscanf_r+0x78>
 800bd20:	6863      	ldr	r3, [r4, #4]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	dd0f      	ble.n	800bd46 <__ssvfiscanf_r+0x6a>
 800bd26:	6823      	ldr	r3, [r4, #0]
 800bd28:	781a      	ldrb	r2, [r3, #0]
 800bd2a:	5cba      	ldrb	r2, [r7, r2]
 800bd2c:	0712      	lsls	r2, r2, #28
 800bd2e:	d401      	bmi.n	800bd34 <__ssvfiscanf_r+0x58>
 800bd30:	462a      	mov	r2, r5
 800bd32:	e7e8      	b.n	800bd06 <__ssvfiscanf_r+0x2a>
 800bd34:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bd36:	3201      	adds	r2, #1
 800bd38:	9245      	str	r2, [sp, #276]	; 0x114
 800bd3a:	6862      	ldr	r2, [r4, #4]
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	3a01      	subs	r2, #1
 800bd40:	6062      	str	r2, [r4, #4]
 800bd42:	6023      	str	r3, [r4, #0]
 800bd44:	e7ec      	b.n	800bd20 <__ssvfiscanf_r+0x44>
 800bd46:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bd48:	4621      	mov	r1, r4
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	4798      	blx	r3
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	d0e9      	beq.n	800bd26 <__ssvfiscanf_r+0x4a>
 800bd52:	e7ed      	b.n	800bd30 <__ssvfiscanf_r+0x54>
 800bd54:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800bd58:	f040 8083 	bne.w	800be62 <__ssvfiscanf_r+0x186>
 800bd5c:	9341      	str	r3, [sp, #260]	; 0x104
 800bd5e:	9343      	str	r3, [sp, #268]	; 0x10c
 800bd60:	7853      	ldrb	r3, [r2, #1]
 800bd62:	2b2a      	cmp	r3, #42	; 0x2a
 800bd64:	bf02      	ittt	eq
 800bd66:	2310      	moveq	r3, #16
 800bd68:	1c95      	addeq	r5, r2, #2
 800bd6a:	9341      	streq	r3, [sp, #260]	; 0x104
 800bd6c:	220a      	movs	r2, #10
 800bd6e:	46ab      	mov	fp, r5
 800bd70:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800bd74:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800bd78:	2b09      	cmp	r3, #9
 800bd7a:	d91d      	bls.n	800bdb8 <__ssvfiscanf_r+0xdc>
 800bd7c:	4891      	ldr	r0, [pc, #580]	; (800bfc4 <__ssvfiscanf_r+0x2e8>)
 800bd7e:	2203      	movs	r2, #3
 800bd80:	f7f4 fa66 	bl	8000250 <memchr>
 800bd84:	b140      	cbz	r0, 800bd98 <__ssvfiscanf_r+0xbc>
 800bd86:	2301      	movs	r3, #1
 800bd88:	eba0 0009 	sub.w	r0, r0, r9
 800bd8c:	fa03 f000 	lsl.w	r0, r3, r0
 800bd90:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bd92:	4318      	orrs	r0, r3
 800bd94:	9041      	str	r0, [sp, #260]	; 0x104
 800bd96:	465d      	mov	r5, fp
 800bd98:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bd9c:	2b78      	cmp	r3, #120	; 0x78
 800bd9e:	d806      	bhi.n	800bdae <__ssvfiscanf_r+0xd2>
 800bda0:	2b57      	cmp	r3, #87	; 0x57
 800bda2:	d810      	bhi.n	800bdc6 <__ssvfiscanf_r+0xea>
 800bda4:	2b25      	cmp	r3, #37	; 0x25
 800bda6:	d05c      	beq.n	800be62 <__ssvfiscanf_r+0x186>
 800bda8:	d856      	bhi.n	800be58 <__ssvfiscanf_r+0x17c>
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d074      	beq.n	800be98 <__ssvfiscanf_r+0x1bc>
 800bdae:	2303      	movs	r3, #3
 800bdb0:	9347      	str	r3, [sp, #284]	; 0x11c
 800bdb2:	230a      	movs	r3, #10
 800bdb4:	9342      	str	r3, [sp, #264]	; 0x108
 800bdb6:	e081      	b.n	800bebc <__ssvfiscanf_r+0x1e0>
 800bdb8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bdba:	fb02 1303 	mla	r3, r2, r3, r1
 800bdbe:	3b30      	subs	r3, #48	; 0x30
 800bdc0:	9343      	str	r3, [sp, #268]	; 0x10c
 800bdc2:	465d      	mov	r5, fp
 800bdc4:	e7d3      	b.n	800bd6e <__ssvfiscanf_r+0x92>
 800bdc6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bdca:	2a20      	cmp	r2, #32
 800bdcc:	d8ef      	bhi.n	800bdae <__ssvfiscanf_r+0xd2>
 800bdce:	a101      	add	r1, pc, #4	; (adr r1, 800bdd4 <__ssvfiscanf_r+0xf8>)
 800bdd0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bdd4:	0800bea7 	.word	0x0800bea7
 800bdd8:	0800bdaf 	.word	0x0800bdaf
 800bddc:	0800bdaf 	.word	0x0800bdaf
 800bde0:	0800bf05 	.word	0x0800bf05
 800bde4:	0800bdaf 	.word	0x0800bdaf
 800bde8:	0800bdaf 	.word	0x0800bdaf
 800bdec:	0800bdaf 	.word	0x0800bdaf
 800bdf0:	0800bdaf 	.word	0x0800bdaf
 800bdf4:	0800bdaf 	.word	0x0800bdaf
 800bdf8:	0800bdaf 	.word	0x0800bdaf
 800bdfc:	0800bdaf 	.word	0x0800bdaf
 800be00:	0800bf1b 	.word	0x0800bf1b
 800be04:	0800bef1 	.word	0x0800bef1
 800be08:	0800be5f 	.word	0x0800be5f
 800be0c:	0800be5f 	.word	0x0800be5f
 800be10:	0800be5f 	.word	0x0800be5f
 800be14:	0800bdaf 	.word	0x0800bdaf
 800be18:	0800bef5 	.word	0x0800bef5
 800be1c:	0800bdaf 	.word	0x0800bdaf
 800be20:	0800bdaf 	.word	0x0800bdaf
 800be24:	0800bdaf 	.word	0x0800bdaf
 800be28:	0800bdaf 	.word	0x0800bdaf
 800be2c:	0800bf2b 	.word	0x0800bf2b
 800be30:	0800befd 	.word	0x0800befd
 800be34:	0800be9f 	.word	0x0800be9f
 800be38:	0800bdaf 	.word	0x0800bdaf
 800be3c:	0800bdaf 	.word	0x0800bdaf
 800be40:	0800bf27 	.word	0x0800bf27
 800be44:	0800bdaf 	.word	0x0800bdaf
 800be48:	0800bef1 	.word	0x0800bef1
 800be4c:	0800bdaf 	.word	0x0800bdaf
 800be50:	0800bdaf 	.word	0x0800bdaf
 800be54:	0800bea7 	.word	0x0800bea7
 800be58:	3b45      	subs	r3, #69	; 0x45
 800be5a:	2b02      	cmp	r3, #2
 800be5c:	d8a7      	bhi.n	800bdae <__ssvfiscanf_r+0xd2>
 800be5e:	2305      	movs	r3, #5
 800be60:	e02b      	b.n	800beba <__ssvfiscanf_r+0x1de>
 800be62:	6863      	ldr	r3, [r4, #4]
 800be64:	2b00      	cmp	r3, #0
 800be66:	dd0d      	ble.n	800be84 <__ssvfiscanf_r+0x1a8>
 800be68:	6823      	ldr	r3, [r4, #0]
 800be6a:	781a      	ldrb	r2, [r3, #0]
 800be6c:	4552      	cmp	r2, sl
 800be6e:	f040 80a1 	bne.w	800bfb4 <__ssvfiscanf_r+0x2d8>
 800be72:	3301      	adds	r3, #1
 800be74:	6862      	ldr	r2, [r4, #4]
 800be76:	6023      	str	r3, [r4, #0]
 800be78:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800be7a:	3a01      	subs	r2, #1
 800be7c:	3301      	adds	r3, #1
 800be7e:	6062      	str	r2, [r4, #4]
 800be80:	9345      	str	r3, [sp, #276]	; 0x114
 800be82:	e755      	b.n	800bd30 <__ssvfiscanf_r+0x54>
 800be84:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800be86:	4621      	mov	r1, r4
 800be88:	4630      	mov	r0, r6
 800be8a:	4798      	blx	r3
 800be8c:	2800      	cmp	r0, #0
 800be8e:	d0eb      	beq.n	800be68 <__ssvfiscanf_r+0x18c>
 800be90:	9844      	ldr	r0, [sp, #272]	; 0x110
 800be92:	2800      	cmp	r0, #0
 800be94:	f040 8084 	bne.w	800bfa0 <__ssvfiscanf_r+0x2c4>
 800be98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be9c:	e086      	b.n	800bfac <__ssvfiscanf_r+0x2d0>
 800be9e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bea0:	f042 0220 	orr.w	r2, r2, #32
 800bea4:	9241      	str	r2, [sp, #260]	; 0x104
 800bea6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800beac:	9241      	str	r2, [sp, #260]	; 0x104
 800beae:	2210      	movs	r2, #16
 800beb0:	2b6f      	cmp	r3, #111	; 0x6f
 800beb2:	9242      	str	r2, [sp, #264]	; 0x108
 800beb4:	bf34      	ite	cc
 800beb6:	2303      	movcc	r3, #3
 800beb8:	2304      	movcs	r3, #4
 800beba:	9347      	str	r3, [sp, #284]	; 0x11c
 800bebc:	6863      	ldr	r3, [r4, #4]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	dd41      	ble.n	800bf46 <__ssvfiscanf_r+0x26a>
 800bec2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bec4:	0659      	lsls	r1, r3, #25
 800bec6:	d404      	bmi.n	800bed2 <__ssvfiscanf_r+0x1f6>
 800bec8:	6823      	ldr	r3, [r4, #0]
 800beca:	781a      	ldrb	r2, [r3, #0]
 800becc:	5cba      	ldrb	r2, [r7, r2]
 800bece:	0712      	lsls	r2, r2, #28
 800bed0:	d440      	bmi.n	800bf54 <__ssvfiscanf_r+0x278>
 800bed2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bed4:	2b02      	cmp	r3, #2
 800bed6:	dc4f      	bgt.n	800bf78 <__ssvfiscanf_r+0x29c>
 800bed8:	466b      	mov	r3, sp
 800beda:	4622      	mov	r2, r4
 800bedc:	a941      	add	r1, sp, #260	; 0x104
 800bede:	4630      	mov	r0, r6
 800bee0:	f000 f874 	bl	800bfcc <_scanf_chars>
 800bee4:	2801      	cmp	r0, #1
 800bee6:	d065      	beq.n	800bfb4 <__ssvfiscanf_r+0x2d8>
 800bee8:	2802      	cmp	r0, #2
 800beea:	f47f af21 	bne.w	800bd30 <__ssvfiscanf_r+0x54>
 800beee:	e7cf      	b.n	800be90 <__ssvfiscanf_r+0x1b4>
 800bef0:	220a      	movs	r2, #10
 800bef2:	e7dd      	b.n	800beb0 <__ssvfiscanf_r+0x1d4>
 800bef4:	2300      	movs	r3, #0
 800bef6:	9342      	str	r3, [sp, #264]	; 0x108
 800bef8:	2303      	movs	r3, #3
 800befa:	e7de      	b.n	800beba <__ssvfiscanf_r+0x1de>
 800befc:	2308      	movs	r3, #8
 800befe:	9342      	str	r3, [sp, #264]	; 0x108
 800bf00:	2304      	movs	r3, #4
 800bf02:	e7da      	b.n	800beba <__ssvfiscanf_r+0x1de>
 800bf04:	4629      	mov	r1, r5
 800bf06:	4640      	mov	r0, r8
 800bf08:	f000 f9d6 	bl	800c2b8 <__sccl>
 800bf0c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bf0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf12:	9341      	str	r3, [sp, #260]	; 0x104
 800bf14:	4605      	mov	r5, r0
 800bf16:	2301      	movs	r3, #1
 800bf18:	e7cf      	b.n	800beba <__ssvfiscanf_r+0x1de>
 800bf1a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bf1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf20:	9341      	str	r3, [sp, #260]	; 0x104
 800bf22:	2300      	movs	r3, #0
 800bf24:	e7c9      	b.n	800beba <__ssvfiscanf_r+0x1de>
 800bf26:	2302      	movs	r3, #2
 800bf28:	e7c7      	b.n	800beba <__ssvfiscanf_r+0x1de>
 800bf2a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bf2c:	06c3      	lsls	r3, r0, #27
 800bf2e:	f53f aeff 	bmi.w	800bd30 <__ssvfiscanf_r+0x54>
 800bf32:	9b00      	ldr	r3, [sp, #0]
 800bf34:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bf36:	1d19      	adds	r1, r3, #4
 800bf38:	9100      	str	r1, [sp, #0]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	07c0      	lsls	r0, r0, #31
 800bf3e:	bf4c      	ite	mi
 800bf40:	801a      	strhmi	r2, [r3, #0]
 800bf42:	601a      	strpl	r2, [r3, #0]
 800bf44:	e6f4      	b.n	800bd30 <__ssvfiscanf_r+0x54>
 800bf46:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bf48:	4621      	mov	r1, r4
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	4798      	blx	r3
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	d0b7      	beq.n	800bec2 <__ssvfiscanf_r+0x1e6>
 800bf52:	e79d      	b.n	800be90 <__ssvfiscanf_r+0x1b4>
 800bf54:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bf56:	3201      	adds	r2, #1
 800bf58:	9245      	str	r2, [sp, #276]	; 0x114
 800bf5a:	6862      	ldr	r2, [r4, #4]
 800bf5c:	3a01      	subs	r2, #1
 800bf5e:	2a00      	cmp	r2, #0
 800bf60:	6062      	str	r2, [r4, #4]
 800bf62:	dd02      	ble.n	800bf6a <__ssvfiscanf_r+0x28e>
 800bf64:	3301      	adds	r3, #1
 800bf66:	6023      	str	r3, [r4, #0]
 800bf68:	e7ae      	b.n	800bec8 <__ssvfiscanf_r+0x1ec>
 800bf6a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bf6c:	4621      	mov	r1, r4
 800bf6e:	4630      	mov	r0, r6
 800bf70:	4798      	blx	r3
 800bf72:	2800      	cmp	r0, #0
 800bf74:	d0a8      	beq.n	800bec8 <__ssvfiscanf_r+0x1ec>
 800bf76:	e78b      	b.n	800be90 <__ssvfiscanf_r+0x1b4>
 800bf78:	2b04      	cmp	r3, #4
 800bf7a:	dc06      	bgt.n	800bf8a <__ssvfiscanf_r+0x2ae>
 800bf7c:	466b      	mov	r3, sp
 800bf7e:	4622      	mov	r2, r4
 800bf80:	a941      	add	r1, sp, #260	; 0x104
 800bf82:	4630      	mov	r0, r6
 800bf84:	f000 f87a 	bl	800c07c <_scanf_i>
 800bf88:	e7ac      	b.n	800bee4 <__ssvfiscanf_r+0x208>
 800bf8a:	4b0f      	ldr	r3, [pc, #60]	; (800bfc8 <__ssvfiscanf_r+0x2ec>)
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	f43f aecf 	beq.w	800bd30 <__ssvfiscanf_r+0x54>
 800bf92:	466b      	mov	r3, sp
 800bf94:	4622      	mov	r2, r4
 800bf96:	a941      	add	r1, sp, #260	; 0x104
 800bf98:	4630      	mov	r0, r6
 800bf9a:	f7fc fc8b 	bl	80088b4 <_scanf_float>
 800bf9e:	e7a1      	b.n	800bee4 <__ssvfiscanf_r+0x208>
 800bfa0:	89a3      	ldrh	r3, [r4, #12]
 800bfa2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bfa6:	bf18      	it	ne
 800bfa8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800bfac:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800bfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bfb6:	e7f9      	b.n	800bfac <__ssvfiscanf_r+0x2d0>
 800bfb8:	0800bc29 	.word	0x0800bc29
 800bfbc:	0800bca3 	.word	0x0800bca3
 800bfc0:	0800d069 	.word	0x0800d069
 800bfc4:	0800d3e2 	.word	0x0800d3e2
 800bfc8:	080088b5 	.word	0x080088b5

0800bfcc <_scanf_chars>:
 800bfcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfd0:	4615      	mov	r5, r2
 800bfd2:	688a      	ldr	r2, [r1, #8]
 800bfd4:	4680      	mov	r8, r0
 800bfd6:	460c      	mov	r4, r1
 800bfd8:	b932      	cbnz	r2, 800bfe8 <_scanf_chars+0x1c>
 800bfda:	698a      	ldr	r2, [r1, #24]
 800bfdc:	2a00      	cmp	r2, #0
 800bfde:	bf0c      	ite	eq
 800bfe0:	2201      	moveq	r2, #1
 800bfe2:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800bfe6:	608a      	str	r2, [r1, #8]
 800bfe8:	6822      	ldr	r2, [r4, #0]
 800bfea:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c078 <_scanf_chars+0xac>
 800bfee:	06d1      	lsls	r1, r2, #27
 800bff0:	bf5f      	itttt	pl
 800bff2:	681a      	ldrpl	r2, [r3, #0]
 800bff4:	1d11      	addpl	r1, r2, #4
 800bff6:	6019      	strpl	r1, [r3, #0]
 800bff8:	6816      	ldrpl	r6, [r2, #0]
 800bffa:	2700      	movs	r7, #0
 800bffc:	69a0      	ldr	r0, [r4, #24]
 800bffe:	b188      	cbz	r0, 800c024 <_scanf_chars+0x58>
 800c000:	2801      	cmp	r0, #1
 800c002:	d107      	bne.n	800c014 <_scanf_chars+0x48>
 800c004:	682b      	ldr	r3, [r5, #0]
 800c006:	781a      	ldrb	r2, [r3, #0]
 800c008:	6963      	ldr	r3, [r4, #20]
 800c00a:	5c9b      	ldrb	r3, [r3, r2]
 800c00c:	b953      	cbnz	r3, 800c024 <_scanf_chars+0x58>
 800c00e:	bb27      	cbnz	r7, 800c05a <_scanf_chars+0x8e>
 800c010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c014:	2802      	cmp	r0, #2
 800c016:	d120      	bne.n	800c05a <_scanf_chars+0x8e>
 800c018:	682b      	ldr	r3, [r5, #0]
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c020:	071b      	lsls	r3, r3, #28
 800c022:	d41a      	bmi.n	800c05a <_scanf_chars+0x8e>
 800c024:	6823      	ldr	r3, [r4, #0]
 800c026:	06da      	lsls	r2, r3, #27
 800c028:	bf5e      	ittt	pl
 800c02a:	682b      	ldrpl	r3, [r5, #0]
 800c02c:	781b      	ldrbpl	r3, [r3, #0]
 800c02e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c032:	682a      	ldr	r2, [r5, #0]
 800c034:	686b      	ldr	r3, [r5, #4]
 800c036:	3201      	adds	r2, #1
 800c038:	602a      	str	r2, [r5, #0]
 800c03a:	68a2      	ldr	r2, [r4, #8]
 800c03c:	3b01      	subs	r3, #1
 800c03e:	3a01      	subs	r2, #1
 800c040:	606b      	str	r3, [r5, #4]
 800c042:	3701      	adds	r7, #1
 800c044:	60a2      	str	r2, [r4, #8]
 800c046:	b142      	cbz	r2, 800c05a <_scanf_chars+0x8e>
 800c048:	2b00      	cmp	r3, #0
 800c04a:	dcd7      	bgt.n	800bffc <_scanf_chars+0x30>
 800c04c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c050:	4629      	mov	r1, r5
 800c052:	4640      	mov	r0, r8
 800c054:	4798      	blx	r3
 800c056:	2800      	cmp	r0, #0
 800c058:	d0d0      	beq.n	800bffc <_scanf_chars+0x30>
 800c05a:	6823      	ldr	r3, [r4, #0]
 800c05c:	f013 0310 	ands.w	r3, r3, #16
 800c060:	d105      	bne.n	800c06e <_scanf_chars+0xa2>
 800c062:	68e2      	ldr	r2, [r4, #12]
 800c064:	3201      	adds	r2, #1
 800c066:	60e2      	str	r2, [r4, #12]
 800c068:	69a2      	ldr	r2, [r4, #24]
 800c06a:	b102      	cbz	r2, 800c06e <_scanf_chars+0xa2>
 800c06c:	7033      	strb	r3, [r6, #0]
 800c06e:	6923      	ldr	r3, [r4, #16]
 800c070:	441f      	add	r7, r3
 800c072:	6127      	str	r7, [r4, #16]
 800c074:	2000      	movs	r0, #0
 800c076:	e7cb      	b.n	800c010 <_scanf_chars+0x44>
 800c078:	0800d069 	.word	0x0800d069

0800c07c <_scanf_i>:
 800c07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c080:	4698      	mov	r8, r3
 800c082:	4b74      	ldr	r3, [pc, #464]	; (800c254 <_scanf_i+0x1d8>)
 800c084:	460c      	mov	r4, r1
 800c086:	4682      	mov	sl, r0
 800c088:	4616      	mov	r6, r2
 800c08a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c08e:	b087      	sub	sp, #28
 800c090:	ab03      	add	r3, sp, #12
 800c092:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c096:	4b70      	ldr	r3, [pc, #448]	; (800c258 <_scanf_i+0x1dc>)
 800c098:	69a1      	ldr	r1, [r4, #24]
 800c09a:	4a70      	ldr	r2, [pc, #448]	; (800c25c <_scanf_i+0x1e0>)
 800c09c:	2903      	cmp	r1, #3
 800c09e:	bf18      	it	ne
 800c0a0:	461a      	movne	r2, r3
 800c0a2:	68a3      	ldr	r3, [r4, #8]
 800c0a4:	9201      	str	r2, [sp, #4]
 800c0a6:	1e5a      	subs	r2, r3, #1
 800c0a8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c0ac:	bf88      	it	hi
 800c0ae:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c0b2:	4627      	mov	r7, r4
 800c0b4:	bf82      	ittt	hi
 800c0b6:	eb03 0905 	addhi.w	r9, r3, r5
 800c0ba:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c0be:	60a3      	strhi	r3, [r4, #8]
 800c0c0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c0c4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c0c8:	bf98      	it	ls
 800c0ca:	f04f 0900 	movls.w	r9, #0
 800c0ce:	6023      	str	r3, [r4, #0]
 800c0d0:	463d      	mov	r5, r7
 800c0d2:	f04f 0b00 	mov.w	fp, #0
 800c0d6:	6831      	ldr	r1, [r6, #0]
 800c0d8:	ab03      	add	r3, sp, #12
 800c0da:	7809      	ldrb	r1, [r1, #0]
 800c0dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c0e0:	2202      	movs	r2, #2
 800c0e2:	f7f4 f8b5 	bl	8000250 <memchr>
 800c0e6:	b328      	cbz	r0, 800c134 <_scanf_i+0xb8>
 800c0e8:	f1bb 0f01 	cmp.w	fp, #1
 800c0ec:	d159      	bne.n	800c1a2 <_scanf_i+0x126>
 800c0ee:	6862      	ldr	r2, [r4, #4]
 800c0f0:	b92a      	cbnz	r2, 800c0fe <_scanf_i+0x82>
 800c0f2:	6822      	ldr	r2, [r4, #0]
 800c0f4:	2308      	movs	r3, #8
 800c0f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c0fa:	6063      	str	r3, [r4, #4]
 800c0fc:	6022      	str	r2, [r4, #0]
 800c0fe:	6822      	ldr	r2, [r4, #0]
 800c100:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c104:	6022      	str	r2, [r4, #0]
 800c106:	68a2      	ldr	r2, [r4, #8]
 800c108:	1e51      	subs	r1, r2, #1
 800c10a:	60a1      	str	r1, [r4, #8]
 800c10c:	b192      	cbz	r2, 800c134 <_scanf_i+0xb8>
 800c10e:	6832      	ldr	r2, [r6, #0]
 800c110:	1c51      	adds	r1, r2, #1
 800c112:	6031      	str	r1, [r6, #0]
 800c114:	7812      	ldrb	r2, [r2, #0]
 800c116:	f805 2b01 	strb.w	r2, [r5], #1
 800c11a:	6872      	ldr	r2, [r6, #4]
 800c11c:	3a01      	subs	r2, #1
 800c11e:	2a00      	cmp	r2, #0
 800c120:	6072      	str	r2, [r6, #4]
 800c122:	dc07      	bgt.n	800c134 <_scanf_i+0xb8>
 800c124:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c128:	4631      	mov	r1, r6
 800c12a:	4650      	mov	r0, sl
 800c12c:	4790      	blx	r2
 800c12e:	2800      	cmp	r0, #0
 800c130:	f040 8085 	bne.w	800c23e <_scanf_i+0x1c2>
 800c134:	f10b 0b01 	add.w	fp, fp, #1
 800c138:	f1bb 0f03 	cmp.w	fp, #3
 800c13c:	d1cb      	bne.n	800c0d6 <_scanf_i+0x5a>
 800c13e:	6863      	ldr	r3, [r4, #4]
 800c140:	b90b      	cbnz	r3, 800c146 <_scanf_i+0xca>
 800c142:	230a      	movs	r3, #10
 800c144:	6063      	str	r3, [r4, #4]
 800c146:	6863      	ldr	r3, [r4, #4]
 800c148:	4945      	ldr	r1, [pc, #276]	; (800c260 <_scanf_i+0x1e4>)
 800c14a:	6960      	ldr	r0, [r4, #20]
 800c14c:	1ac9      	subs	r1, r1, r3
 800c14e:	f000 f8b3 	bl	800c2b8 <__sccl>
 800c152:	f04f 0b00 	mov.w	fp, #0
 800c156:	68a3      	ldr	r3, [r4, #8]
 800c158:	6822      	ldr	r2, [r4, #0]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d03d      	beq.n	800c1da <_scanf_i+0x15e>
 800c15e:	6831      	ldr	r1, [r6, #0]
 800c160:	6960      	ldr	r0, [r4, #20]
 800c162:	f891 c000 	ldrb.w	ip, [r1]
 800c166:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c16a:	2800      	cmp	r0, #0
 800c16c:	d035      	beq.n	800c1da <_scanf_i+0x15e>
 800c16e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c172:	d124      	bne.n	800c1be <_scanf_i+0x142>
 800c174:	0510      	lsls	r0, r2, #20
 800c176:	d522      	bpl.n	800c1be <_scanf_i+0x142>
 800c178:	f10b 0b01 	add.w	fp, fp, #1
 800c17c:	f1b9 0f00 	cmp.w	r9, #0
 800c180:	d003      	beq.n	800c18a <_scanf_i+0x10e>
 800c182:	3301      	adds	r3, #1
 800c184:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c188:	60a3      	str	r3, [r4, #8]
 800c18a:	6873      	ldr	r3, [r6, #4]
 800c18c:	3b01      	subs	r3, #1
 800c18e:	2b00      	cmp	r3, #0
 800c190:	6073      	str	r3, [r6, #4]
 800c192:	dd1b      	ble.n	800c1cc <_scanf_i+0x150>
 800c194:	6833      	ldr	r3, [r6, #0]
 800c196:	3301      	adds	r3, #1
 800c198:	6033      	str	r3, [r6, #0]
 800c19a:	68a3      	ldr	r3, [r4, #8]
 800c19c:	3b01      	subs	r3, #1
 800c19e:	60a3      	str	r3, [r4, #8]
 800c1a0:	e7d9      	b.n	800c156 <_scanf_i+0xda>
 800c1a2:	f1bb 0f02 	cmp.w	fp, #2
 800c1a6:	d1ae      	bne.n	800c106 <_scanf_i+0x8a>
 800c1a8:	6822      	ldr	r2, [r4, #0]
 800c1aa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c1ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c1b2:	d1bf      	bne.n	800c134 <_scanf_i+0xb8>
 800c1b4:	2310      	movs	r3, #16
 800c1b6:	6063      	str	r3, [r4, #4]
 800c1b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c1bc:	e7a2      	b.n	800c104 <_scanf_i+0x88>
 800c1be:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c1c2:	6022      	str	r2, [r4, #0]
 800c1c4:	780b      	ldrb	r3, [r1, #0]
 800c1c6:	f805 3b01 	strb.w	r3, [r5], #1
 800c1ca:	e7de      	b.n	800c18a <_scanf_i+0x10e>
 800c1cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c1d0:	4631      	mov	r1, r6
 800c1d2:	4650      	mov	r0, sl
 800c1d4:	4798      	blx	r3
 800c1d6:	2800      	cmp	r0, #0
 800c1d8:	d0df      	beq.n	800c19a <_scanf_i+0x11e>
 800c1da:	6823      	ldr	r3, [r4, #0]
 800c1dc:	05d9      	lsls	r1, r3, #23
 800c1de:	d50d      	bpl.n	800c1fc <_scanf_i+0x180>
 800c1e0:	42bd      	cmp	r5, r7
 800c1e2:	d909      	bls.n	800c1f8 <_scanf_i+0x17c>
 800c1e4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c1e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c1ec:	4632      	mov	r2, r6
 800c1ee:	4650      	mov	r0, sl
 800c1f0:	4798      	blx	r3
 800c1f2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800c1f6:	464d      	mov	r5, r9
 800c1f8:	42bd      	cmp	r5, r7
 800c1fa:	d028      	beq.n	800c24e <_scanf_i+0x1d2>
 800c1fc:	6822      	ldr	r2, [r4, #0]
 800c1fe:	f012 0210 	ands.w	r2, r2, #16
 800c202:	d113      	bne.n	800c22c <_scanf_i+0x1b0>
 800c204:	702a      	strb	r2, [r5, #0]
 800c206:	6863      	ldr	r3, [r4, #4]
 800c208:	9e01      	ldr	r6, [sp, #4]
 800c20a:	4639      	mov	r1, r7
 800c20c:	4650      	mov	r0, sl
 800c20e:	47b0      	blx	r6
 800c210:	f8d8 3000 	ldr.w	r3, [r8]
 800c214:	6821      	ldr	r1, [r4, #0]
 800c216:	1d1a      	adds	r2, r3, #4
 800c218:	f8c8 2000 	str.w	r2, [r8]
 800c21c:	f011 0f20 	tst.w	r1, #32
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	d00f      	beq.n	800c244 <_scanf_i+0x1c8>
 800c224:	6018      	str	r0, [r3, #0]
 800c226:	68e3      	ldr	r3, [r4, #12]
 800c228:	3301      	adds	r3, #1
 800c22a:	60e3      	str	r3, [r4, #12]
 800c22c:	1bed      	subs	r5, r5, r7
 800c22e:	44ab      	add	fp, r5
 800c230:	6925      	ldr	r5, [r4, #16]
 800c232:	445d      	add	r5, fp
 800c234:	6125      	str	r5, [r4, #16]
 800c236:	2000      	movs	r0, #0
 800c238:	b007      	add	sp, #28
 800c23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c23e:	f04f 0b00 	mov.w	fp, #0
 800c242:	e7ca      	b.n	800c1da <_scanf_i+0x15e>
 800c244:	07ca      	lsls	r2, r1, #31
 800c246:	bf4c      	ite	mi
 800c248:	8018      	strhmi	r0, [r3, #0]
 800c24a:	6018      	strpl	r0, [r3, #0]
 800c24c:	e7eb      	b.n	800c226 <_scanf_i+0x1aa>
 800c24e:	2001      	movs	r0, #1
 800c250:	e7f2      	b.n	800c238 <_scanf_i+0x1bc>
 800c252:	bf00      	nop
 800c254:	0800cfb8 	.word	0x0800cfb8
 800c258:	0800c449 	.word	0x0800c449
 800c25c:	08009ae1 	.word	0x08009ae1
 800c260:	0800d406 	.word	0x0800d406

0800c264 <_read_r>:
 800c264:	b538      	push	{r3, r4, r5, lr}
 800c266:	4d07      	ldr	r5, [pc, #28]	; (800c284 <_read_r+0x20>)
 800c268:	4604      	mov	r4, r0
 800c26a:	4608      	mov	r0, r1
 800c26c:	4611      	mov	r1, r2
 800c26e:	2200      	movs	r2, #0
 800c270:	602a      	str	r2, [r5, #0]
 800c272:	461a      	mov	r2, r3
 800c274:	f7f6 fb4c 	bl	8002910 <_read>
 800c278:	1c43      	adds	r3, r0, #1
 800c27a:	d102      	bne.n	800c282 <_read_r+0x1e>
 800c27c:	682b      	ldr	r3, [r5, #0]
 800c27e:	b103      	cbz	r3, 800c282 <_read_r+0x1e>
 800c280:	6023      	str	r3, [r4, #0]
 800c282:	bd38      	pop	{r3, r4, r5, pc}
 800c284:	20000848 	.word	0x20000848

0800c288 <nan>:
 800c288:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c290 <nan+0x8>
 800c28c:	4770      	bx	lr
 800c28e:	bf00      	nop
 800c290:	00000000 	.word	0x00000000
 800c294:	7ff80000 	.word	0x7ff80000

0800c298 <_sbrk_r>:
 800c298:	b538      	push	{r3, r4, r5, lr}
 800c29a:	4d06      	ldr	r5, [pc, #24]	; (800c2b4 <_sbrk_r+0x1c>)
 800c29c:	2300      	movs	r3, #0
 800c29e:	4604      	mov	r4, r0
 800c2a0:	4608      	mov	r0, r1
 800c2a2:	602b      	str	r3, [r5, #0]
 800c2a4:	f7f6 fba2 	bl	80029ec <_sbrk>
 800c2a8:	1c43      	adds	r3, r0, #1
 800c2aa:	d102      	bne.n	800c2b2 <_sbrk_r+0x1a>
 800c2ac:	682b      	ldr	r3, [r5, #0]
 800c2ae:	b103      	cbz	r3, 800c2b2 <_sbrk_r+0x1a>
 800c2b0:	6023      	str	r3, [r4, #0]
 800c2b2:	bd38      	pop	{r3, r4, r5, pc}
 800c2b4:	20000848 	.word	0x20000848

0800c2b8 <__sccl>:
 800c2b8:	b570      	push	{r4, r5, r6, lr}
 800c2ba:	780b      	ldrb	r3, [r1, #0]
 800c2bc:	4604      	mov	r4, r0
 800c2be:	2b5e      	cmp	r3, #94	; 0x5e
 800c2c0:	bf0b      	itete	eq
 800c2c2:	784b      	ldrbeq	r3, [r1, #1]
 800c2c4:	1c48      	addne	r0, r1, #1
 800c2c6:	1c88      	addeq	r0, r1, #2
 800c2c8:	2200      	movne	r2, #0
 800c2ca:	bf08      	it	eq
 800c2cc:	2201      	moveq	r2, #1
 800c2ce:	1e61      	subs	r1, r4, #1
 800c2d0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c2d4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c2d8:	42a9      	cmp	r1, r5
 800c2da:	d1fb      	bne.n	800c2d4 <__sccl+0x1c>
 800c2dc:	b90b      	cbnz	r3, 800c2e2 <__sccl+0x2a>
 800c2de:	3801      	subs	r0, #1
 800c2e0:	bd70      	pop	{r4, r5, r6, pc}
 800c2e2:	f082 0101 	eor.w	r1, r2, #1
 800c2e6:	54e1      	strb	r1, [r4, r3]
 800c2e8:	1c42      	adds	r2, r0, #1
 800c2ea:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800c2ee:	2d2d      	cmp	r5, #45	; 0x2d
 800c2f0:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 800c2f4:	4610      	mov	r0, r2
 800c2f6:	d006      	beq.n	800c306 <__sccl+0x4e>
 800c2f8:	2d5d      	cmp	r5, #93	; 0x5d
 800c2fa:	d0f1      	beq.n	800c2e0 <__sccl+0x28>
 800c2fc:	b90d      	cbnz	r5, 800c302 <__sccl+0x4a>
 800c2fe:	4630      	mov	r0, r6
 800c300:	e7ee      	b.n	800c2e0 <__sccl+0x28>
 800c302:	462b      	mov	r3, r5
 800c304:	e7ef      	b.n	800c2e6 <__sccl+0x2e>
 800c306:	7816      	ldrb	r6, [r2, #0]
 800c308:	2e5d      	cmp	r6, #93	; 0x5d
 800c30a:	d0fa      	beq.n	800c302 <__sccl+0x4a>
 800c30c:	42b3      	cmp	r3, r6
 800c30e:	dcf8      	bgt.n	800c302 <__sccl+0x4a>
 800c310:	4618      	mov	r0, r3
 800c312:	3001      	adds	r0, #1
 800c314:	4286      	cmp	r6, r0
 800c316:	5421      	strb	r1, [r4, r0]
 800c318:	dcfb      	bgt.n	800c312 <__sccl+0x5a>
 800c31a:	43d8      	mvns	r0, r3
 800c31c:	4430      	add	r0, r6
 800c31e:	1c5d      	adds	r5, r3, #1
 800c320:	42b3      	cmp	r3, r6
 800c322:	bfa8      	it	ge
 800c324:	2000      	movge	r0, #0
 800c326:	182b      	adds	r3, r5, r0
 800c328:	3202      	adds	r2, #2
 800c32a:	e7de      	b.n	800c2ea <__sccl+0x32>

0800c32c <strncmp>:
 800c32c:	b510      	push	{r4, lr}
 800c32e:	b16a      	cbz	r2, 800c34c <strncmp+0x20>
 800c330:	3901      	subs	r1, #1
 800c332:	1884      	adds	r4, r0, r2
 800c334:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c338:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d103      	bne.n	800c348 <strncmp+0x1c>
 800c340:	42a0      	cmp	r0, r4
 800c342:	d001      	beq.n	800c348 <strncmp+0x1c>
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1f5      	bne.n	800c334 <strncmp+0x8>
 800c348:	1a98      	subs	r0, r3, r2
 800c34a:	bd10      	pop	{r4, pc}
 800c34c:	4610      	mov	r0, r2
 800c34e:	e7fc      	b.n	800c34a <strncmp+0x1e>

0800c350 <_strtoul_l.isra.0>:
 800c350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c354:	4e3b      	ldr	r6, [pc, #236]	; (800c444 <_strtoul_l.isra.0+0xf4>)
 800c356:	4686      	mov	lr, r0
 800c358:	468c      	mov	ip, r1
 800c35a:	4660      	mov	r0, ip
 800c35c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c360:	5da5      	ldrb	r5, [r4, r6]
 800c362:	f015 0508 	ands.w	r5, r5, #8
 800c366:	d1f8      	bne.n	800c35a <_strtoul_l.isra.0+0xa>
 800c368:	2c2d      	cmp	r4, #45	; 0x2d
 800c36a:	d134      	bne.n	800c3d6 <_strtoul_l.isra.0+0x86>
 800c36c:	f89c 4000 	ldrb.w	r4, [ip]
 800c370:	f04f 0801 	mov.w	r8, #1
 800c374:	f100 0c02 	add.w	ip, r0, #2
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d05e      	beq.n	800c43a <_strtoul_l.isra.0+0xea>
 800c37c:	2b10      	cmp	r3, #16
 800c37e:	d10c      	bne.n	800c39a <_strtoul_l.isra.0+0x4a>
 800c380:	2c30      	cmp	r4, #48	; 0x30
 800c382:	d10a      	bne.n	800c39a <_strtoul_l.isra.0+0x4a>
 800c384:	f89c 0000 	ldrb.w	r0, [ip]
 800c388:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c38c:	2858      	cmp	r0, #88	; 0x58
 800c38e:	d14f      	bne.n	800c430 <_strtoul_l.isra.0+0xe0>
 800c390:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c394:	2310      	movs	r3, #16
 800c396:	f10c 0c02 	add.w	ip, ip, #2
 800c39a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c39e:	2500      	movs	r5, #0
 800c3a0:	fbb7 f7f3 	udiv	r7, r7, r3
 800c3a4:	fb03 f907 	mul.w	r9, r3, r7
 800c3a8:	ea6f 0909 	mvn.w	r9, r9
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c3b2:	2e09      	cmp	r6, #9
 800c3b4:	d818      	bhi.n	800c3e8 <_strtoul_l.isra.0+0x98>
 800c3b6:	4634      	mov	r4, r6
 800c3b8:	42a3      	cmp	r3, r4
 800c3ba:	dd24      	ble.n	800c406 <_strtoul_l.isra.0+0xb6>
 800c3bc:	2d00      	cmp	r5, #0
 800c3be:	db1f      	blt.n	800c400 <_strtoul_l.isra.0+0xb0>
 800c3c0:	4287      	cmp	r7, r0
 800c3c2:	d31d      	bcc.n	800c400 <_strtoul_l.isra.0+0xb0>
 800c3c4:	d101      	bne.n	800c3ca <_strtoul_l.isra.0+0x7a>
 800c3c6:	45a1      	cmp	r9, r4
 800c3c8:	db1a      	blt.n	800c400 <_strtoul_l.isra.0+0xb0>
 800c3ca:	fb00 4003 	mla	r0, r0, r3, r4
 800c3ce:	2501      	movs	r5, #1
 800c3d0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c3d4:	e7eb      	b.n	800c3ae <_strtoul_l.isra.0+0x5e>
 800c3d6:	2c2b      	cmp	r4, #43	; 0x2b
 800c3d8:	bf08      	it	eq
 800c3da:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c3de:	46a8      	mov	r8, r5
 800c3e0:	bf08      	it	eq
 800c3e2:	f100 0c02 	addeq.w	ip, r0, #2
 800c3e6:	e7c7      	b.n	800c378 <_strtoul_l.isra.0+0x28>
 800c3e8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c3ec:	2e19      	cmp	r6, #25
 800c3ee:	d801      	bhi.n	800c3f4 <_strtoul_l.isra.0+0xa4>
 800c3f0:	3c37      	subs	r4, #55	; 0x37
 800c3f2:	e7e1      	b.n	800c3b8 <_strtoul_l.isra.0+0x68>
 800c3f4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c3f8:	2e19      	cmp	r6, #25
 800c3fa:	d804      	bhi.n	800c406 <_strtoul_l.isra.0+0xb6>
 800c3fc:	3c57      	subs	r4, #87	; 0x57
 800c3fe:	e7db      	b.n	800c3b8 <_strtoul_l.isra.0+0x68>
 800c400:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c404:	e7e4      	b.n	800c3d0 <_strtoul_l.isra.0+0x80>
 800c406:	2d00      	cmp	r5, #0
 800c408:	da07      	bge.n	800c41a <_strtoul_l.isra.0+0xca>
 800c40a:	2322      	movs	r3, #34	; 0x22
 800c40c:	f8ce 3000 	str.w	r3, [lr]
 800c410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c414:	b942      	cbnz	r2, 800c428 <_strtoul_l.isra.0+0xd8>
 800c416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c41a:	f1b8 0f00 	cmp.w	r8, #0
 800c41e:	d000      	beq.n	800c422 <_strtoul_l.isra.0+0xd2>
 800c420:	4240      	negs	r0, r0
 800c422:	2a00      	cmp	r2, #0
 800c424:	d0f7      	beq.n	800c416 <_strtoul_l.isra.0+0xc6>
 800c426:	b10d      	cbz	r5, 800c42c <_strtoul_l.isra.0+0xdc>
 800c428:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800c42c:	6011      	str	r1, [r2, #0]
 800c42e:	e7f2      	b.n	800c416 <_strtoul_l.isra.0+0xc6>
 800c430:	2430      	movs	r4, #48	; 0x30
 800c432:	2b00      	cmp	r3, #0
 800c434:	d1b1      	bne.n	800c39a <_strtoul_l.isra.0+0x4a>
 800c436:	2308      	movs	r3, #8
 800c438:	e7af      	b.n	800c39a <_strtoul_l.isra.0+0x4a>
 800c43a:	2c30      	cmp	r4, #48	; 0x30
 800c43c:	d0a2      	beq.n	800c384 <_strtoul_l.isra.0+0x34>
 800c43e:	230a      	movs	r3, #10
 800c440:	e7ab      	b.n	800c39a <_strtoul_l.isra.0+0x4a>
 800c442:	bf00      	nop
 800c444:	0800d069 	.word	0x0800d069

0800c448 <_strtoul_r>:
 800c448:	f7ff bf82 	b.w	800c350 <_strtoul_l.isra.0>

0800c44c <__submore>:
 800c44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c450:	460c      	mov	r4, r1
 800c452:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c458:	4299      	cmp	r1, r3
 800c45a:	d11d      	bne.n	800c498 <__submore+0x4c>
 800c45c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c460:	f7ff fa2c 	bl	800b8bc <_malloc_r>
 800c464:	b918      	cbnz	r0, 800c46e <__submore+0x22>
 800c466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c46e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c472:	63a3      	str	r3, [r4, #56]	; 0x38
 800c474:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c478:	6360      	str	r0, [r4, #52]	; 0x34
 800c47a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c47e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c482:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c486:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c48a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c48e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c492:	6020      	str	r0, [r4, #0]
 800c494:	2000      	movs	r0, #0
 800c496:	e7e8      	b.n	800c46a <__submore+0x1e>
 800c498:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c49a:	0077      	lsls	r7, r6, #1
 800c49c:	463a      	mov	r2, r7
 800c49e:	f000 fa2d 	bl	800c8fc <_realloc_r>
 800c4a2:	4605      	mov	r5, r0
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	d0de      	beq.n	800c466 <__submore+0x1a>
 800c4a8:	eb00 0806 	add.w	r8, r0, r6
 800c4ac:	4601      	mov	r1, r0
 800c4ae:	4632      	mov	r2, r6
 800c4b0:	4640      	mov	r0, r8
 800c4b2:	f7fb fda7 	bl	8008004 <memcpy>
 800c4b6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c4ba:	f8c4 8000 	str.w	r8, [r4]
 800c4be:	e7e9      	b.n	800c494 <__submore+0x48>

0800c4c0 <__ascii_wctomb>:
 800c4c0:	b149      	cbz	r1, 800c4d6 <__ascii_wctomb+0x16>
 800c4c2:	2aff      	cmp	r2, #255	; 0xff
 800c4c4:	bf85      	ittet	hi
 800c4c6:	238a      	movhi	r3, #138	; 0x8a
 800c4c8:	6003      	strhi	r3, [r0, #0]
 800c4ca:	700a      	strbls	r2, [r1, #0]
 800c4cc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c4d0:	bf98      	it	ls
 800c4d2:	2001      	movls	r0, #1
 800c4d4:	4770      	bx	lr
 800c4d6:	4608      	mov	r0, r1
 800c4d8:	4770      	bx	lr
	...

0800c4dc <__assert_func>:
 800c4dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c4de:	4614      	mov	r4, r2
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	4b09      	ldr	r3, [pc, #36]	; (800c508 <__assert_func+0x2c>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4605      	mov	r5, r0
 800c4e8:	68d8      	ldr	r0, [r3, #12]
 800c4ea:	b14c      	cbz	r4, 800c500 <__assert_func+0x24>
 800c4ec:	4b07      	ldr	r3, [pc, #28]	; (800c50c <__assert_func+0x30>)
 800c4ee:	9100      	str	r1, [sp, #0]
 800c4f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c4f4:	4906      	ldr	r1, [pc, #24]	; (800c510 <__assert_func+0x34>)
 800c4f6:	462b      	mov	r3, r5
 800c4f8:	f000 f9a6 	bl	800c848 <fiprintf>
 800c4fc:	f000 fc3e 	bl	800cd7c <abort>
 800c500:	4b04      	ldr	r3, [pc, #16]	; (800c514 <__assert_func+0x38>)
 800c502:	461c      	mov	r4, r3
 800c504:	e7f3      	b.n	800c4ee <__assert_func+0x12>
 800c506:	bf00      	nop
 800c508:	20000058 	.word	0x20000058
 800c50c:	0800d408 	.word	0x0800d408
 800c510:	0800d415 	.word	0x0800d415
 800c514:	0800d443 	.word	0x0800d443

0800c518 <__sflush_r>:
 800c518:	898a      	ldrh	r2, [r1, #12]
 800c51a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c51e:	4605      	mov	r5, r0
 800c520:	0710      	lsls	r0, r2, #28
 800c522:	460c      	mov	r4, r1
 800c524:	d458      	bmi.n	800c5d8 <__sflush_r+0xc0>
 800c526:	684b      	ldr	r3, [r1, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	dc05      	bgt.n	800c538 <__sflush_r+0x20>
 800c52c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c52e:	2b00      	cmp	r3, #0
 800c530:	dc02      	bgt.n	800c538 <__sflush_r+0x20>
 800c532:	2000      	movs	r0, #0
 800c534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c538:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c53a:	2e00      	cmp	r6, #0
 800c53c:	d0f9      	beq.n	800c532 <__sflush_r+0x1a>
 800c53e:	2300      	movs	r3, #0
 800c540:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c544:	682f      	ldr	r7, [r5, #0]
 800c546:	602b      	str	r3, [r5, #0]
 800c548:	d032      	beq.n	800c5b0 <__sflush_r+0x98>
 800c54a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c54c:	89a3      	ldrh	r3, [r4, #12]
 800c54e:	075a      	lsls	r2, r3, #29
 800c550:	d505      	bpl.n	800c55e <__sflush_r+0x46>
 800c552:	6863      	ldr	r3, [r4, #4]
 800c554:	1ac0      	subs	r0, r0, r3
 800c556:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c558:	b10b      	cbz	r3, 800c55e <__sflush_r+0x46>
 800c55a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c55c:	1ac0      	subs	r0, r0, r3
 800c55e:	2300      	movs	r3, #0
 800c560:	4602      	mov	r2, r0
 800c562:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c564:	6a21      	ldr	r1, [r4, #32]
 800c566:	4628      	mov	r0, r5
 800c568:	47b0      	blx	r6
 800c56a:	1c43      	adds	r3, r0, #1
 800c56c:	89a3      	ldrh	r3, [r4, #12]
 800c56e:	d106      	bne.n	800c57e <__sflush_r+0x66>
 800c570:	6829      	ldr	r1, [r5, #0]
 800c572:	291d      	cmp	r1, #29
 800c574:	d82c      	bhi.n	800c5d0 <__sflush_r+0xb8>
 800c576:	4a2a      	ldr	r2, [pc, #168]	; (800c620 <__sflush_r+0x108>)
 800c578:	40ca      	lsrs	r2, r1
 800c57a:	07d6      	lsls	r6, r2, #31
 800c57c:	d528      	bpl.n	800c5d0 <__sflush_r+0xb8>
 800c57e:	2200      	movs	r2, #0
 800c580:	6062      	str	r2, [r4, #4]
 800c582:	04d9      	lsls	r1, r3, #19
 800c584:	6922      	ldr	r2, [r4, #16]
 800c586:	6022      	str	r2, [r4, #0]
 800c588:	d504      	bpl.n	800c594 <__sflush_r+0x7c>
 800c58a:	1c42      	adds	r2, r0, #1
 800c58c:	d101      	bne.n	800c592 <__sflush_r+0x7a>
 800c58e:	682b      	ldr	r3, [r5, #0]
 800c590:	b903      	cbnz	r3, 800c594 <__sflush_r+0x7c>
 800c592:	6560      	str	r0, [r4, #84]	; 0x54
 800c594:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c596:	602f      	str	r7, [r5, #0]
 800c598:	2900      	cmp	r1, #0
 800c59a:	d0ca      	beq.n	800c532 <__sflush_r+0x1a>
 800c59c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5a0:	4299      	cmp	r1, r3
 800c5a2:	d002      	beq.n	800c5aa <__sflush_r+0x92>
 800c5a4:	4628      	mov	r0, r5
 800c5a6:	f7ff f939 	bl	800b81c <_free_r>
 800c5aa:	2000      	movs	r0, #0
 800c5ac:	6360      	str	r0, [r4, #52]	; 0x34
 800c5ae:	e7c1      	b.n	800c534 <__sflush_r+0x1c>
 800c5b0:	6a21      	ldr	r1, [r4, #32]
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	4628      	mov	r0, r5
 800c5b6:	47b0      	blx	r6
 800c5b8:	1c41      	adds	r1, r0, #1
 800c5ba:	d1c7      	bne.n	800c54c <__sflush_r+0x34>
 800c5bc:	682b      	ldr	r3, [r5, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d0c4      	beq.n	800c54c <__sflush_r+0x34>
 800c5c2:	2b1d      	cmp	r3, #29
 800c5c4:	d001      	beq.n	800c5ca <__sflush_r+0xb2>
 800c5c6:	2b16      	cmp	r3, #22
 800c5c8:	d101      	bne.n	800c5ce <__sflush_r+0xb6>
 800c5ca:	602f      	str	r7, [r5, #0]
 800c5cc:	e7b1      	b.n	800c532 <__sflush_r+0x1a>
 800c5ce:	89a3      	ldrh	r3, [r4, #12]
 800c5d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5d4:	81a3      	strh	r3, [r4, #12]
 800c5d6:	e7ad      	b.n	800c534 <__sflush_r+0x1c>
 800c5d8:	690f      	ldr	r7, [r1, #16]
 800c5da:	2f00      	cmp	r7, #0
 800c5dc:	d0a9      	beq.n	800c532 <__sflush_r+0x1a>
 800c5de:	0793      	lsls	r3, r2, #30
 800c5e0:	680e      	ldr	r6, [r1, #0]
 800c5e2:	bf08      	it	eq
 800c5e4:	694b      	ldreq	r3, [r1, #20]
 800c5e6:	600f      	str	r7, [r1, #0]
 800c5e8:	bf18      	it	ne
 800c5ea:	2300      	movne	r3, #0
 800c5ec:	eba6 0807 	sub.w	r8, r6, r7
 800c5f0:	608b      	str	r3, [r1, #8]
 800c5f2:	f1b8 0f00 	cmp.w	r8, #0
 800c5f6:	dd9c      	ble.n	800c532 <__sflush_r+0x1a>
 800c5f8:	6a21      	ldr	r1, [r4, #32]
 800c5fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c5fc:	4643      	mov	r3, r8
 800c5fe:	463a      	mov	r2, r7
 800c600:	4628      	mov	r0, r5
 800c602:	47b0      	blx	r6
 800c604:	2800      	cmp	r0, #0
 800c606:	dc06      	bgt.n	800c616 <__sflush_r+0xfe>
 800c608:	89a3      	ldrh	r3, [r4, #12]
 800c60a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c60e:	81a3      	strh	r3, [r4, #12]
 800c610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c614:	e78e      	b.n	800c534 <__sflush_r+0x1c>
 800c616:	4407      	add	r7, r0
 800c618:	eba8 0800 	sub.w	r8, r8, r0
 800c61c:	e7e9      	b.n	800c5f2 <__sflush_r+0xda>
 800c61e:	bf00      	nop
 800c620:	20400001 	.word	0x20400001

0800c624 <_fflush_r>:
 800c624:	b538      	push	{r3, r4, r5, lr}
 800c626:	690b      	ldr	r3, [r1, #16]
 800c628:	4605      	mov	r5, r0
 800c62a:	460c      	mov	r4, r1
 800c62c:	b913      	cbnz	r3, 800c634 <_fflush_r+0x10>
 800c62e:	2500      	movs	r5, #0
 800c630:	4628      	mov	r0, r5
 800c632:	bd38      	pop	{r3, r4, r5, pc}
 800c634:	b118      	cbz	r0, 800c63e <_fflush_r+0x1a>
 800c636:	6983      	ldr	r3, [r0, #24]
 800c638:	b90b      	cbnz	r3, 800c63e <_fflush_r+0x1a>
 800c63a:	f000 f887 	bl	800c74c <__sinit>
 800c63e:	4b14      	ldr	r3, [pc, #80]	; (800c690 <_fflush_r+0x6c>)
 800c640:	429c      	cmp	r4, r3
 800c642:	d11b      	bne.n	800c67c <_fflush_r+0x58>
 800c644:	686c      	ldr	r4, [r5, #4]
 800c646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d0ef      	beq.n	800c62e <_fflush_r+0xa>
 800c64e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c650:	07d0      	lsls	r0, r2, #31
 800c652:	d404      	bmi.n	800c65e <_fflush_r+0x3a>
 800c654:	0599      	lsls	r1, r3, #22
 800c656:	d402      	bmi.n	800c65e <_fflush_r+0x3a>
 800c658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c65a:	f000 f927 	bl	800c8ac <__retarget_lock_acquire_recursive>
 800c65e:	4628      	mov	r0, r5
 800c660:	4621      	mov	r1, r4
 800c662:	f7ff ff59 	bl	800c518 <__sflush_r>
 800c666:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c668:	07da      	lsls	r2, r3, #31
 800c66a:	4605      	mov	r5, r0
 800c66c:	d4e0      	bmi.n	800c630 <_fflush_r+0xc>
 800c66e:	89a3      	ldrh	r3, [r4, #12]
 800c670:	059b      	lsls	r3, r3, #22
 800c672:	d4dd      	bmi.n	800c630 <_fflush_r+0xc>
 800c674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c676:	f000 f91a 	bl	800c8ae <__retarget_lock_release_recursive>
 800c67a:	e7d9      	b.n	800c630 <_fflush_r+0xc>
 800c67c:	4b05      	ldr	r3, [pc, #20]	; (800c694 <_fflush_r+0x70>)
 800c67e:	429c      	cmp	r4, r3
 800c680:	d101      	bne.n	800c686 <_fflush_r+0x62>
 800c682:	68ac      	ldr	r4, [r5, #8]
 800c684:	e7df      	b.n	800c646 <_fflush_r+0x22>
 800c686:	4b04      	ldr	r3, [pc, #16]	; (800c698 <_fflush_r+0x74>)
 800c688:	429c      	cmp	r4, r3
 800c68a:	bf08      	it	eq
 800c68c:	68ec      	ldreq	r4, [r5, #12]
 800c68e:	e7da      	b.n	800c646 <_fflush_r+0x22>
 800c690:	0800d464 	.word	0x0800d464
 800c694:	0800d484 	.word	0x0800d484
 800c698:	0800d444 	.word	0x0800d444

0800c69c <std>:
 800c69c:	2300      	movs	r3, #0
 800c69e:	b510      	push	{r4, lr}
 800c6a0:	4604      	mov	r4, r0
 800c6a2:	e9c0 3300 	strd	r3, r3, [r0]
 800c6a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c6aa:	6083      	str	r3, [r0, #8]
 800c6ac:	8181      	strh	r1, [r0, #12]
 800c6ae:	6643      	str	r3, [r0, #100]	; 0x64
 800c6b0:	81c2      	strh	r2, [r0, #14]
 800c6b2:	6183      	str	r3, [r0, #24]
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	2208      	movs	r2, #8
 800c6b8:	305c      	adds	r0, #92	; 0x5c
 800c6ba:	f7fb fcb1 	bl	8008020 <memset>
 800c6be:	4b05      	ldr	r3, [pc, #20]	; (800c6d4 <std+0x38>)
 800c6c0:	6263      	str	r3, [r4, #36]	; 0x24
 800c6c2:	4b05      	ldr	r3, [pc, #20]	; (800c6d8 <std+0x3c>)
 800c6c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c6c6:	4b05      	ldr	r3, [pc, #20]	; (800c6dc <std+0x40>)
 800c6c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c6ca:	4b05      	ldr	r3, [pc, #20]	; (800c6e0 <std+0x44>)
 800c6cc:	6224      	str	r4, [r4, #32]
 800c6ce:	6323      	str	r3, [r4, #48]	; 0x30
 800c6d0:	bd10      	pop	{r4, pc}
 800c6d2:	bf00      	nop
 800c6d4:	08008d61 	.word	0x08008d61
 800c6d8:	08008d87 	.word	0x08008d87
 800c6dc:	08008dbf 	.word	0x08008dbf
 800c6e0:	08008de3 	.word	0x08008de3

0800c6e4 <_cleanup_r>:
 800c6e4:	4901      	ldr	r1, [pc, #4]	; (800c6ec <_cleanup_r+0x8>)
 800c6e6:	f000 b8c1 	b.w	800c86c <_fwalk_reent>
 800c6ea:	bf00      	nop
 800c6ec:	0800c625 	.word	0x0800c625

0800c6f0 <__sfmoreglue>:
 800c6f0:	b570      	push	{r4, r5, r6, lr}
 800c6f2:	1e4a      	subs	r2, r1, #1
 800c6f4:	2568      	movs	r5, #104	; 0x68
 800c6f6:	4355      	muls	r5, r2
 800c6f8:	460e      	mov	r6, r1
 800c6fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c6fe:	f7ff f8dd 	bl	800b8bc <_malloc_r>
 800c702:	4604      	mov	r4, r0
 800c704:	b140      	cbz	r0, 800c718 <__sfmoreglue+0x28>
 800c706:	2100      	movs	r1, #0
 800c708:	e9c0 1600 	strd	r1, r6, [r0]
 800c70c:	300c      	adds	r0, #12
 800c70e:	60a0      	str	r0, [r4, #8]
 800c710:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c714:	f7fb fc84 	bl	8008020 <memset>
 800c718:	4620      	mov	r0, r4
 800c71a:	bd70      	pop	{r4, r5, r6, pc}

0800c71c <__sfp_lock_acquire>:
 800c71c:	4801      	ldr	r0, [pc, #4]	; (800c724 <__sfp_lock_acquire+0x8>)
 800c71e:	f000 b8c5 	b.w	800c8ac <__retarget_lock_acquire_recursive>
 800c722:	bf00      	nop
 800c724:	20000854 	.word	0x20000854

0800c728 <__sfp_lock_release>:
 800c728:	4801      	ldr	r0, [pc, #4]	; (800c730 <__sfp_lock_release+0x8>)
 800c72a:	f000 b8c0 	b.w	800c8ae <__retarget_lock_release_recursive>
 800c72e:	bf00      	nop
 800c730:	20000854 	.word	0x20000854

0800c734 <__sinit_lock_acquire>:
 800c734:	4801      	ldr	r0, [pc, #4]	; (800c73c <__sinit_lock_acquire+0x8>)
 800c736:	f000 b8b9 	b.w	800c8ac <__retarget_lock_acquire_recursive>
 800c73a:	bf00      	nop
 800c73c:	2000084f 	.word	0x2000084f

0800c740 <__sinit_lock_release>:
 800c740:	4801      	ldr	r0, [pc, #4]	; (800c748 <__sinit_lock_release+0x8>)
 800c742:	f000 b8b4 	b.w	800c8ae <__retarget_lock_release_recursive>
 800c746:	bf00      	nop
 800c748:	2000084f 	.word	0x2000084f

0800c74c <__sinit>:
 800c74c:	b510      	push	{r4, lr}
 800c74e:	4604      	mov	r4, r0
 800c750:	f7ff fff0 	bl	800c734 <__sinit_lock_acquire>
 800c754:	69a3      	ldr	r3, [r4, #24]
 800c756:	b11b      	cbz	r3, 800c760 <__sinit+0x14>
 800c758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c75c:	f7ff bff0 	b.w	800c740 <__sinit_lock_release>
 800c760:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c764:	6523      	str	r3, [r4, #80]	; 0x50
 800c766:	4b13      	ldr	r3, [pc, #76]	; (800c7b4 <__sinit+0x68>)
 800c768:	4a13      	ldr	r2, [pc, #76]	; (800c7b8 <__sinit+0x6c>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c76e:	42a3      	cmp	r3, r4
 800c770:	bf04      	itt	eq
 800c772:	2301      	moveq	r3, #1
 800c774:	61a3      	streq	r3, [r4, #24]
 800c776:	4620      	mov	r0, r4
 800c778:	f000 f820 	bl	800c7bc <__sfp>
 800c77c:	6060      	str	r0, [r4, #4]
 800c77e:	4620      	mov	r0, r4
 800c780:	f000 f81c 	bl	800c7bc <__sfp>
 800c784:	60a0      	str	r0, [r4, #8]
 800c786:	4620      	mov	r0, r4
 800c788:	f000 f818 	bl	800c7bc <__sfp>
 800c78c:	2200      	movs	r2, #0
 800c78e:	60e0      	str	r0, [r4, #12]
 800c790:	2104      	movs	r1, #4
 800c792:	6860      	ldr	r0, [r4, #4]
 800c794:	f7ff ff82 	bl	800c69c <std>
 800c798:	68a0      	ldr	r0, [r4, #8]
 800c79a:	2201      	movs	r2, #1
 800c79c:	2109      	movs	r1, #9
 800c79e:	f7ff ff7d 	bl	800c69c <std>
 800c7a2:	68e0      	ldr	r0, [r4, #12]
 800c7a4:	2202      	movs	r2, #2
 800c7a6:	2112      	movs	r1, #18
 800c7a8:	f7ff ff78 	bl	800c69c <std>
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	61a3      	str	r3, [r4, #24]
 800c7b0:	e7d2      	b.n	800c758 <__sinit+0xc>
 800c7b2:	bf00      	nop
 800c7b4:	0800cfdc 	.word	0x0800cfdc
 800c7b8:	0800c6e5 	.word	0x0800c6e5

0800c7bc <__sfp>:
 800c7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7be:	4607      	mov	r7, r0
 800c7c0:	f7ff ffac 	bl	800c71c <__sfp_lock_acquire>
 800c7c4:	4b1e      	ldr	r3, [pc, #120]	; (800c840 <__sfp+0x84>)
 800c7c6:	681e      	ldr	r6, [r3, #0]
 800c7c8:	69b3      	ldr	r3, [r6, #24]
 800c7ca:	b913      	cbnz	r3, 800c7d2 <__sfp+0x16>
 800c7cc:	4630      	mov	r0, r6
 800c7ce:	f7ff ffbd 	bl	800c74c <__sinit>
 800c7d2:	3648      	adds	r6, #72	; 0x48
 800c7d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c7d8:	3b01      	subs	r3, #1
 800c7da:	d503      	bpl.n	800c7e4 <__sfp+0x28>
 800c7dc:	6833      	ldr	r3, [r6, #0]
 800c7de:	b30b      	cbz	r3, 800c824 <__sfp+0x68>
 800c7e0:	6836      	ldr	r6, [r6, #0]
 800c7e2:	e7f7      	b.n	800c7d4 <__sfp+0x18>
 800c7e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c7e8:	b9d5      	cbnz	r5, 800c820 <__sfp+0x64>
 800c7ea:	4b16      	ldr	r3, [pc, #88]	; (800c844 <__sfp+0x88>)
 800c7ec:	60e3      	str	r3, [r4, #12]
 800c7ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c7f2:	6665      	str	r5, [r4, #100]	; 0x64
 800c7f4:	f000 f859 	bl	800c8aa <__retarget_lock_init_recursive>
 800c7f8:	f7ff ff96 	bl	800c728 <__sfp_lock_release>
 800c7fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c800:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c804:	6025      	str	r5, [r4, #0]
 800c806:	61a5      	str	r5, [r4, #24]
 800c808:	2208      	movs	r2, #8
 800c80a:	4629      	mov	r1, r5
 800c80c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c810:	f7fb fc06 	bl	8008020 <memset>
 800c814:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c818:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c81c:	4620      	mov	r0, r4
 800c81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c820:	3468      	adds	r4, #104	; 0x68
 800c822:	e7d9      	b.n	800c7d8 <__sfp+0x1c>
 800c824:	2104      	movs	r1, #4
 800c826:	4638      	mov	r0, r7
 800c828:	f7ff ff62 	bl	800c6f0 <__sfmoreglue>
 800c82c:	4604      	mov	r4, r0
 800c82e:	6030      	str	r0, [r6, #0]
 800c830:	2800      	cmp	r0, #0
 800c832:	d1d5      	bne.n	800c7e0 <__sfp+0x24>
 800c834:	f7ff ff78 	bl	800c728 <__sfp_lock_release>
 800c838:	230c      	movs	r3, #12
 800c83a:	603b      	str	r3, [r7, #0]
 800c83c:	e7ee      	b.n	800c81c <__sfp+0x60>
 800c83e:	bf00      	nop
 800c840:	0800cfdc 	.word	0x0800cfdc
 800c844:	ffff0001 	.word	0xffff0001

0800c848 <fiprintf>:
 800c848:	b40e      	push	{r1, r2, r3}
 800c84a:	b503      	push	{r0, r1, lr}
 800c84c:	4601      	mov	r1, r0
 800c84e:	ab03      	add	r3, sp, #12
 800c850:	4805      	ldr	r0, [pc, #20]	; (800c868 <fiprintf+0x20>)
 800c852:	f853 2b04 	ldr.w	r2, [r3], #4
 800c856:	6800      	ldr	r0, [r0, #0]
 800c858:	9301      	str	r3, [sp, #4]
 800c85a:	f000 f89f 	bl	800c99c <_vfiprintf_r>
 800c85e:	b002      	add	sp, #8
 800c860:	f85d eb04 	ldr.w	lr, [sp], #4
 800c864:	b003      	add	sp, #12
 800c866:	4770      	bx	lr
 800c868:	20000058 	.word	0x20000058

0800c86c <_fwalk_reent>:
 800c86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c870:	4606      	mov	r6, r0
 800c872:	4688      	mov	r8, r1
 800c874:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c878:	2700      	movs	r7, #0
 800c87a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c87e:	f1b9 0901 	subs.w	r9, r9, #1
 800c882:	d505      	bpl.n	800c890 <_fwalk_reent+0x24>
 800c884:	6824      	ldr	r4, [r4, #0]
 800c886:	2c00      	cmp	r4, #0
 800c888:	d1f7      	bne.n	800c87a <_fwalk_reent+0xe>
 800c88a:	4638      	mov	r0, r7
 800c88c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c890:	89ab      	ldrh	r3, [r5, #12]
 800c892:	2b01      	cmp	r3, #1
 800c894:	d907      	bls.n	800c8a6 <_fwalk_reent+0x3a>
 800c896:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c89a:	3301      	adds	r3, #1
 800c89c:	d003      	beq.n	800c8a6 <_fwalk_reent+0x3a>
 800c89e:	4629      	mov	r1, r5
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	47c0      	blx	r8
 800c8a4:	4307      	orrs	r7, r0
 800c8a6:	3568      	adds	r5, #104	; 0x68
 800c8a8:	e7e9      	b.n	800c87e <_fwalk_reent+0x12>

0800c8aa <__retarget_lock_init_recursive>:
 800c8aa:	4770      	bx	lr

0800c8ac <__retarget_lock_acquire_recursive>:
 800c8ac:	4770      	bx	lr

0800c8ae <__retarget_lock_release_recursive>:
 800c8ae:	4770      	bx	lr

0800c8b0 <memmove>:
 800c8b0:	4288      	cmp	r0, r1
 800c8b2:	b510      	push	{r4, lr}
 800c8b4:	eb01 0402 	add.w	r4, r1, r2
 800c8b8:	d902      	bls.n	800c8c0 <memmove+0x10>
 800c8ba:	4284      	cmp	r4, r0
 800c8bc:	4623      	mov	r3, r4
 800c8be:	d807      	bhi.n	800c8d0 <memmove+0x20>
 800c8c0:	1e43      	subs	r3, r0, #1
 800c8c2:	42a1      	cmp	r1, r4
 800c8c4:	d008      	beq.n	800c8d8 <memmove+0x28>
 800c8c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8ce:	e7f8      	b.n	800c8c2 <memmove+0x12>
 800c8d0:	4402      	add	r2, r0
 800c8d2:	4601      	mov	r1, r0
 800c8d4:	428a      	cmp	r2, r1
 800c8d6:	d100      	bne.n	800c8da <memmove+0x2a>
 800c8d8:	bd10      	pop	{r4, pc}
 800c8da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8e2:	e7f7      	b.n	800c8d4 <memmove+0x24>

0800c8e4 <__malloc_lock>:
 800c8e4:	4801      	ldr	r0, [pc, #4]	; (800c8ec <__malloc_lock+0x8>)
 800c8e6:	f7ff bfe1 	b.w	800c8ac <__retarget_lock_acquire_recursive>
 800c8ea:	bf00      	nop
 800c8ec:	20000850 	.word	0x20000850

0800c8f0 <__malloc_unlock>:
 800c8f0:	4801      	ldr	r0, [pc, #4]	; (800c8f8 <__malloc_unlock+0x8>)
 800c8f2:	f7ff bfdc 	b.w	800c8ae <__retarget_lock_release_recursive>
 800c8f6:	bf00      	nop
 800c8f8:	20000850 	.word	0x20000850

0800c8fc <_realloc_r>:
 800c8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8fe:	4607      	mov	r7, r0
 800c900:	4614      	mov	r4, r2
 800c902:	460e      	mov	r6, r1
 800c904:	b921      	cbnz	r1, 800c910 <_realloc_r+0x14>
 800c906:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c90a:	4611      	mov	r1, r2
 800c90c:	f7fe bfd6 	b.w	800b8bc <_malloc_r>
 800c910:	b922      	cbnz	r2, 800c91c <_realloc_r+0x20>
 800c912:	f7fe ff83 	bl	800b81c <_free_r>
 800c916:	4625      	mov	r5, r4
 800c918:	4628      	mov	r0, r5
 800c91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c91c:	f000 fa9a 	bl	800ce54 <_malloc_usable_size_r>
 800c920:	42a0      	cmp	r0, r4
 800c922:	d20f      	bcs.n	800c944 <_realloc_r+0x48>
 800c924:	4621      	mov	r1, r4
 800c926:	4638      	mov	r0, r7
 800c928:	f7fe ffc8 	bl	800b8bc <_malloc_r>
 800c92c:	4605      	mov	r5, r0
 800c92e:	2800      	cmp	r0, #0
 800c930:	d0f2      	beq.n	800c918 <_realloc_r+0x1c>
 800c932:	4631      	mov	r1, r6
 800c934:	4622      	mov	r2, r4
 800c936:	f7fb fb65 	bl	8008004 <memcpy>
 800c93a:	4631      	mov	r1, r6
 800c93c:	4638      	mov	r0, r7
 800c93e:	f7fe ff6d 	bl	800b81c <_free_r>
 800c942:	e7e9      	b.n	800c918 <_realloc_r+0x1c>
 800c944:	4635      	mov	r5, r6
 800c946:	e7e7      	b.n	800c918 <_realloc_r+0x1c>

0800c948 <__sfputc_r>:
 800c948:	6893      	ldr	r3, [r2, #8]
 800c94a:	3b01      	subs	r3, #1
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	b410      	push	{r4}
 800c950:	6093      	str	r3, [r2, #8]
 800c952:	da08      	bge.n	800c966 <__sfputc_r+0x1e>
 800c954:	6994      	ldr	r4, [r2, #24]
 800c956:	42a3      	cmp	r3, r4
 800c958:	db01      	blt.n	800c95e <__sfputc_r+0x16>
 800c95a:	290a      	cmp	r1, #10
 800c95c:	d103      	bne.n	800c966 <__sfputc_r+0x1e>
 800c95e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c962:	f000 b94b 	b.w	800cbfc <__swbuf_r>
 800c966:	6813      	ldr	r3, [r2, #0]
 800c968:	1c58      	adds	r0, r3, #1
 800c96a:	6010      	str	r0, [r2, #0]
 800c96c:	7019      	strb	r1, [r3, #0]
 800c96e:	4608      	mov	r0, r1
 800c970:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c974:	4770      	bx	lr

0800c976 <__sfputs_r>:
 800c976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c978:	4606      	mov	r6, r0
 800c97a:	460f      	mov	r7, r1
 800c97c:	4614      	mov	r4, r2
 800c97e:	18d5      	adds	r5, r2, r3
 800c980:	42ac      	cmp	r4, r5
 800c982:	d101      	bne.n	800c988 <__sfputs_r+0x12>
 800c984:	2000      	movs	r0, #0
 800c986:	e007      	b.n	800c998 <__sfputs_r+0x22>
 800c988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c98c:	463a      	mov	r2, r7
 800c98e:	4630      	mov	r0, r6
 800c990:	f7ff ffda 	bl	800c948 <__sfputc_r>
 800c994:	1c43      	adds	r3, r0, #1
 800c996:	d1f3      	bne.n	800c980 <__sfputs_r+0xa>
 800c998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c99c <_vfiprintf_r>:
 800c99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a0:	460d      	mov	r5, r1
 800c9a2:	b09d      	sub	sp, #116	; 0x74
 800c9a4:	4614      	mov	r4, r2
 800c9a6:	4698      	mov	r8, r3
 800c9a8:	4606      	mov	r6, r0
 800c9aa:	b118      	cbz	r0, 800c9b4 <_vfiprintf_r+0x18>
 800c9ac:	6983      	ldr	r3, [r0, #24]
 800c9ae:	b90b      	cbnz	r3, 800c9b4 <_vfiprintf_r+0x18>
 800c9b0:	f7ff fecc 	bl	800c74c <__sinit>
 800c9b4:	4b89      	ldr	r3, [pc, #548]	; (800cbdc <_vfiprintf_r+0x240>)
 800c9b6:	429d      	cmp	r5, r3
 800c9b8:	d11b      	bne.n	800c9f2 <_vfiprintf_r+0x56>
 800c9ba:	6875      	ldr	r5, [r6, #4]
 800c9bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9be:	07d9      	lsls	r1, r3, #31
 800c9c0:	d405      	bmi.n	800c9ce <_vfiprintf_r+0x32>
 800c9c2:	89ab      	ldrh	r3, [r5, #12]
 800c9c4:	059a      	lsls	r2, r3, #22
 800c9c6:	d402      	bmi.n	800c9ce <_vfiprintf_r+0x32>
 800c9c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9ca:	f7ff ff6f 	bl	800c8ac <__retarget_lock_acquire_recursive>
 800c9ce:	89ab      	ldrh	r3, [r5, #12]
 800c9d0:	071b      	lsls	r3, r3, #28
 800c9d2:	d501      	bpl.n	800c9d8 <_vfiprintf_r+0x3c>
 800c9d4:	692b      	ldr	r3, [r5, #16]
 800c9d6:	b9eb      	cbnz	r3, 800ca14 <_vfiprintf_r+0x78>
 800c9d8:	4629      	mov	r1, r5
 800c9da:	4630      	mov	r0, r6
 800c9dc:	f000 f960 	bl	800cca0 <__swsetup_r>
 800c9e0:	b1c0      	cbz	r0, 800ca14 <_vfiprintf_r+0x78>
 800c9e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9e4:	07dc      	lsls	r4, r3, #31
 800c9e6:	d50e      	bpl.n	800ca06 <_vfiprintf_r+0x6a>
 800c9e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c9ec:	b01d      	add	sp, #116	; 0x74
 800c9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9f2:	4b7b      	ldr	r3, [pc, #492]	; (800cbe0 <_vfiprintf_r+0x244>)
 800c9f4:	429d      	cmp	r5, r3
 800c9f6:	d101      	bne.n	800c9fc <_vfiprintf_r+0x60>
 800c9f8:	68b5      	ldr	r5, [r6, #8]
 800c9fa:	e7df      	b.n	800c9bc <_vfiprintf_r+0x20>
 800c9fc:	4b79      	ldr	r3, [pc, #484]	; (800cbe4 <_vfiprintf_r+0x248>)
 800c9fe:	429d      	cmp	r5, r3
 800ca00:	bf08      	it	eq
 800ca02:	68f5      	ldreq	r5, [r6, #12]
 800ca04:	e7da      	b.n	800c9bc <_vfiprintf_r+0x20>
 800ca06:	89ab      	ldrh	r3, [r5, #12]
 800ca08:	0598      	lsls	r0, r3, #22
 800ca0a:	d4ed      	bmi.n	800c9e8 <_vfiprintf_r+0x4c>
 800ca0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca0e:	f7ff ff4e 	bl	800c8ae <__retarget_lock_release_recursive>
 800ca12:	e7e9      	b.n	800c9e8 <_vfiprintf_r+0x4c>
 800ca14:	2300      	movs	r3, #0
 800ca16:	9309      	str	r3, [sp, #36]	; 0x24
 800ca18:	2320      	movs	r3, #32
 800ca1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca22:	2330      	movs	r3, #48	; 0x30
 800ca24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cbe8 <_vfiprintf_r+0x24c>
 800ca28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca2c:	f04f 0901 	mov.w	r9, #1
 800ca30:	4623      	mov	r3, r4
 800ca32:	469a      	mov	sl, r3
 800ca34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca38:	b10a      	cbz	r2, 800ca3e <_vfiprintf_r+0xa2>
 800ca3a:	2a25      	cmp	r2, #37	; 0x25
 800ca3c:	d1f9      	bne.n	800ca32 <_vfiprintf_r+0x96>
 800ca3e:	ebba 0b04 	subs.w	fp, sl, r4
 800ca42:	d00b      	beq.n	800ca5c <_vfiprintf_r+0xc0>
 800ca44:	465b      	mov	r3, fp
 800ca46:	4622      	mov	r2, r4
 800ca48:	4629      	mov	r1, r5
 800ca4a:	4630      	mov	r0, r6
 800ca4c:	f7ff ff93 	bl	800c976 <__sfputs_r>
 800ca50:	3001      	adds	r0, #1
 800ca52:	f000 80aa 	beq.w	800cbaa <_vfiprintf_r+0x20e>
 800ca56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca58:	445a      	add	r2, fp
 800ca5a:	9209      	str	r2, [sp, #36]	; 0x24
 800ca5c:	f89a 3000 	ldrb.w	r3, [sl]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	f000 80a2 	beq.w	800cbaa <_vfiprintf_r+0x20e>
 800ca66:	2300      	movs	r3, #0
 800ca68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca70:	f10a 0a01 	add.w	sl, sl, #1
 800ca74:	9304      	str	r3, [sp, #16]
 800ca76:	9307      	str	r3, [sp, #28]
 800ca78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca7c:	931a      	str	r3, [sp, #104]	; 0x68
 800ca7e:	4654      	mov	r4, sl
 800ca80:	2205      	movs	r2, #5
 800ca82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca86:	4858      	ldr	r0, [pc, #352]	; (800cbe8 <_vfiprintf_r+0x24c>)
 800ca88:	f7f3 fbe2 	bl	8000250 <memchr>
 800ca8c:	9a04      	ldr	r2, [sp, #16]
 800ca8e:	b9d8      	cbnz	r0, 800cac8 <_vfiprintf_r+0x12c>
 800ca90:	06d1      	lsls	r1, r2, #27
 800ca92:	bf44      	itt	mi
 800ca94:	2320      	movmi	r3, #32
 800ca96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca9a:	0713      	lsls	r3, r2, #28
 800ca9c:	bf44      	itt	mi
 800ca9e:	232b      	movmi	r3, #43	; 0x2b
 800caa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caa4:	f89a 3000 	ldrb.w	r3, [sl]
 800caa8:	2b2a      	cmp	r3, #42	; 0x2a
 800caaa:	d015      	beq.n	800cad8 <_vfiprintf_r+0x13c>
 800caac:	9a07      	ldr	r2, [sp, #28]
 800caae:	4654      	mov	r4, sl
 800cab0:	2000      	movs	r0, #0
 800cab2:	f04f 0c0a 	mov.w	ip, #10
 800cab6:	4621      	mov	r1, r4
 800cab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cabc:	3b30      	subs	r3, #48	; 0x30
 800cabe:	2b09      	cmp	r3, #9
 800cac0:	d94e      	bls.n	800cb60 <_vfiprintf_r+0x1c4>
 800cac2:	b1b0      	cbz	r0, 800caf2 <_vfiprintf_r+0x156>
 800cac4:	9207      	str	r2, [sp, #28]
 800cac6:	e014      	b.n	800caf2 <_vfiprintf_r+0x156>
 800cac8:	eba0 0308 	sub.w	r3, r0, r8
 800cacc:	fa09 f303 	lsl.w	r3, r9, r3
 800cad0:	4313      	orrs	r3, r2
 800cad2:	9304      	str	r3, [sp, #16]
 800cad4:	46a2      	mov	sl, r4
 800cad6:	e7d2      	b.n	800ca7e <_vfiprintf_r+0xe2>
 800cad8:	9b03      	ldr	r3, [sp, #12]
 800cada:	1d19      	adds	r1, r3, #4
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	9103      	str	r1, [sp, #12]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	bfbb      	ittet	lt
 800cae4:	425b      	neglt	r3, r3
 800cae6:	f042 0202 	orrlt.w	r2, r2, #2
 800caea:	9307      	strge	r3, [sp, #28]
 800caec:	9307      	strlt	r3, [sp, #28]
 800caee:	bfb8      	it	lt
 800caf0:	9204      	strlt	r2, [sp, #16]
 800caf2:	7823      	ldrb	r3, [r4, #0]
 800caf4:	2b2e      	cmp	r3, #46	; 0x2e
 800caf6:	d10c      	bne.n	800cb12 <_vfiprintf_r+0x176>
 800caf8:	7863      	ldrb	r3, [r4, #1]
 800cafa:	2b2a      	cmp	r3, #42	; 0x2a
 800cafc:	d135      	bne.n	800cb6a <_vfiprintf_r+0x1ce>
 800cafe:	9b03      	ldr	r3, [sp, #12]
 800cb00:	1d1a      	adds	r2, r3, #4
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	9203      	str	r2, [sp, #12]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	bfb8      	it	lt
 800cb0a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cb0e:	3402      	adds	r4, #2
 800cb10:	9305      	str	r3, [sp, #20]
 800cb12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cbf8 <_vfiprintf_r+0x25c>
 800cb16:	7821      	ldrb	r1, [r4, #0]
 800cb18:	2203      	movs	r2, #3
 800cb1a:	4650      	mov	r0, sl
 800cb1c:	f7f3 fb98 	bl	8000250 <memchr>
 800cb20:	b140      	cbz	r0, 800cb34 <_vfiprintf_r+0x198>
 800cb22:	2340      	movs	r3, #64	; 0x40
 800cb24:	eba0 000a 	sub.w	r0, r0, sl
 800cb28:	fa03 f000 	lsl.w	r0, r3, r0
 800cb2c:	9b04      	ldr	r3, [sp, #16]
 800cb2e:	4303      	orrs	r3, r0
 800cb30:	3401      	adds	r4, #1
 800cb32:	9304      	str	r3, [sp, #16]
 800cb34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb38:	482c      	ldr	r0, [pc, #176]	; (800cbec <_vfiprintf_r+0x250>)
 800cb3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb3e:	2206      	movs	r2, #6
 800cb40:	f7f3 fb86 	bl	8000250 <memchr>
 800cb44:	2800      	cmp	r0, #0
 800cb46:	d03f      	beq.n	800cbc8 <_vfiprintf_r+0x22c>
 800cb48:	4b29      	ldr	r3, [pc, #164]	; (800cbf0 <_vfiprintf_r+0x254>)
 800cb4a:	bb1b      	cbnz	r3, 800cb94 <_vfiprintf_r+0x1f8>
 800cb4c:	9b03      	ldr	r3, [sp, #12]
 800cb4e:	3307      	adds	r3, #7
 800cb50:	f023 0307 	bic.w	r3, r3, #7
 800cb54:	3308      	adds	r3, #8
 800cb56:	9303      	str	r3, [sp, #12]
 800cb58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb5a:	443b      	add	r3, r7
 800cb5c:	9309      	str	r3, [sp, #36]	; 0x24
 800cb5e:	e767      	b.n	800ca30 <_vfiprintf_r+0x94>
 800cb60:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb64:	460c      	mov	r4, r1
 800cb66:	2001      	movs	r0, #1
 800cb68:	e7a5      	b.n	800cab6 <_vfiprintf_r+0x11a>
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	3401      	adds	r4, #1
 800cb6e:	9305      	str	r3, [sp, #20]
 800cb70:	4619      	mov	r1, r3
 800cb72:	f04f 0c0a 	mov.w	ip, #10
 800cb76:	4620      	mov	r0, r4
 800cb78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb7c:	3a30      	subs	r2, #48	; 0x30
 800cb7e:	2a09      	cmp	r2, #9
 800cb80:	d903      	bls.n	800cb8a <_vfiprintf_r+0x1ee>
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d0c5      	beq.n	800cb12 <_vfiprintf_r+0x176>
 800cb86:	9105      	str	r1, [sp, #20]
 800cb88:	e7c3      	b.n	800cb12 <_vfiprintf_r+0x176>
 800cb8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb8e:	4604      	mov	r4, r0
 800cb90:	2301      	movs	r3, #1
 800cb92:	e7f0      	b.n	800cb76 <_vfiprintf_r+0x1da>
 800cb94:	ab03      	add	r3, sp, #12
 800cb96:	9300      	str	r3, [sp, #0]
 800cb98:	462a      	mov	r2, r5
 800cb9a:	4b16      	ldr	r3, [pc, #88]	; (800cbf4 <_vfiprintf_r+0x258>)
 800cb9c:	a904      	add	r1, sp, #16
 800cb9e:	4630      	mov	r0, r6
 800cba0:	f7fb fad6 	bl	8008150 <_printf_float>
 800cba4:	4607      	mov	r7, r0
 800cba6:	1c78      	adds	r0, r7, #1
 800cba8:	d1d6      	bne.n	800cb58 <_vfiprintf_r+0x1bc>
 800cbaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbac:	07d9      	lsls	r1, r3, #31
 800cbae:	d405      	bmi.n	800cbbc <_vfiprintf_r+0x220>
 800cbb0:	89ab      	ldrh	r3, [r5, #12]
 800cbb2:	059a      	lsls	r2, r3, #22
 800cbb4:	d402      	bmi.n	800cbbc <_vfiprintf_r+0x220>
 800cbb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbb8:	f7ff fe79 	bl	800c8ae <__retarget_lock_release_recursive>
 800cbbc:	89ab      	ldrh	r3, [r5, #12]
 800cbbe:	065b      	lsls	r3, r3, #25
 800cbc0:	f53f af12 	bmi.w	800c9e8 <_vfiprintf_r+0x4c>
 800cbc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbc6:	e711      	b.n	800c9ec <_vfiprintf_r+0x50>
 800cbc8:	ab03      	add	r3, sp, #12
 800cbca:	9300      	str	r3, [sp, #0]
 800cbcc:	462a      	mov	r2, r5
 800cbce:	4b09      	ldr	r3, [pc, #36]	; (800cbf4 <_vfiprintf_r+0x258>)
 800cbd0:	a904      	add	r1, sp, #16
 800cbd2:	4630      	mov	r0, r6
 800cbd4:	f7fb fd48 	bl	8008668 <_printf_i>
 800cbd8:	e7e4      	b.n	800cba4 <_vfiprintf_r+0x208>
 800cbda:	bf00      	nop
 800cbdc:	0800d464 	.word	0x0800d464
 800cbe0:	0800d484 	.word	0x0800d484
 800cbe4:	0800d444 	.word	0x0800d444
 800cbe8:	0800d3dc 	.word	0x0800d3dc
 800cbec:	0800d3e6 	.word	0x0800d3e6
 800cbf0:	08008151 	.word	0x08008151
 800cbf4:	0800c977 	.word	0x0800c977
 800cbf8:	0800d3e2 	.word	0x0800d3e2

0800cbfc <__swbuf_r>:
 800cbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbfe:	460e      	mov	r6, r1
 800cc00:	4614      	mov	r4, r2
 800cc02:	4605      	mov	r5, r0
 800cc04:	b118      	cbz	r0, 800cc0e <__swbuf_r+0x12>
 800cc06:	6983      	ldr	r3, [r0, #24]
 800cc08:	b90b      	cbnz	r3, 800cc0e <__swbuf_r+0x12>
 800cc0a:	f7ff fd9f 	bl	800c74c <__sinit>
 800cc0e:	4b21      	ldr	r3, [pc, #132]	; (800cc94 <__swbuf_r+0x98>)
 800cc10:	429c      	cmp	r4, r3
 800cc12:	d12b      	bne.n	800cc6c <__swbuf_r+0x70>
 800cc14:	686c      	ldr	r4, [r5, #4]
 800cc16:	69a3      	ldr	r3, [r4, #24]
 800cc18:	60a3      	str	r3, [r4, #8]
 800cc1a:	89a3      	ldrh	r3, [r4, #12]
 800cc1c:	071a      	lsls	r2, r3, #28
 800cc1e:	d52f      	bpl.n	800cc80 <__swbuf_r+0x84>
 800cc20:	6923      	ldr	r3, [r4, #16]
 800cc22:	b36b      	cbz	r3, 800cc80 <__swbuf_r+0x84>
 800cc24:	6923      	ldr	r3, [r4, #16]
 800cc26:	6820      	ldr	r0, [r4, #0]
 800cc28:	1ac0      	subs	r0, r0, r3
 800cc2a:	6963      	ldr	r3, [r4, #20]
 800cc2c:	b2f6      	uxtb	r6, r6
 800cc2e:	4283      	cmp	r3, r0
 800cc30:	4637      	mov	r7, r6
 800cc32:	dc04      	bgt.n	800cc3e <__swbuf_r+0x42>
 800cc34:	4621      	mov	r1, r4
 800cc36:	4628      	mov	r0, r5
 800cc38:	f7ff fcf4 	bl	800c624 <_fflush_r>
 800cc3c:	bb30      	cbnz	r0, 800cc8c <__swbuf_r+0x90>
 800cc3e:	68a3      	ldr	r3, [r4, #8]
 800cc40:	3b01      	subs	r3, #1
 800cc42:	60a3      	str	r3, [r4, #8]
 800cc44:	6823      	ldr	r3, [r4, #0]
 800cc46:	1c5a      	adds	r2, r3, #1
 800cc48:	6022      	str	r2, [r4, #0]
 800cc4a:	701e      	strb	r6, [r3, #0]
 800cc4c:	6963      	ldr	r3, [r4, #20]
 800cc4e:	3001      	adds	r0, #1
 800cc50:	4283      	cmp	r3, r0
 800cc52:	d004      	beq.n	800cc5e <__swbuf_r+0x62>
 800cc54:	89a3      	ldrh	r3, [r4, #12]
 800cc56:	07db      	lsls	r3, r3, #31
 800cc58:	d506      	bpl.n	800cc68 <__swbuf_r+0x6c>
 800cc5a:	2e0a      	cmp	r6, #10
 800cc5c:	d104      	bne.n	800cc68 <__swbuf_r+0x6c>
 800cc5e:	4621      	mov	r1, r4
 800cc60:	4628      	mov	r0, r5
 800cc62:	f7ff fcdf 	bl	800c624 <_fflush_r>
 800cc66:	b988      	cbnz	r0, 800cc8c <__swbuf_r+0x90>
 800cc68:	4638      	mov	r0, r7
 800cc6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc6c:	4b0a      	ldr	r3, [pc, #40]	; (800cc98 <__swbuf_r+0x9c>)
 800cc6e:	429c      	cmp	r4, r3
 800cc70:	d101      	bne.n	800cc76 <__swbuf_r+0x7a>
 800cc72:	68ac      	ldr	r4, [r5, #8]
 800cc74:	e7cf      	b.n	800cc16 <__swbuf_r+0x1a>
 800cc76:	4b09      	ldr	r3, [pc, #36]	; (800cc9c <__swbuf_r+0xa0>)
 800cc78:	429c      	cmp	r4, r3
 800cc7a:	bf08      	it	eq
 800cc7c:	68ec      	ldreq	r4, [r5, #12]
 800cc7e:	e7ca      	b.n	800cc16 <__swbuf_r+0x1a>
 800cc80:	4621      	mov	r1, r4
 800cc82:	4628      	mov	r0, r5
 800cc84:	f000 f80c 	bl	800cca0 <__swsetup_r>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	d0cb      	beq.n	800cc24 <__swbuf_r+0x28>
 800cc8c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800cc90:	e7ea      	b.n	800cc68 <__swbuf_r+0x6c>
 800cc92:	bf00      	nop
 800cc94:	0800d464 	.word	0x0800d464
 800cc98:	0800d484 	.word	0x0800d484
 800cc9c:	0800d444 	.word	0x0800d444

0800cca0 <__swsetup_r>:
 800cca0:	4b32      	ldr	r3, [pc, #200]	; (800cd6c <__swsetup_r+0xcc>)
 800cca2:	b570      	push	{r4, r5, r6, lr}
 800cca4:	681d      	ldr	r5, [r3, #0]
 800cca6:	4606      	mov	r6, r0
 800cca8:	460c      	mov	r4, r1
 800ccaa:	b125      	cbz	r5, 800ccb6 <__swsetup_r+0x16>
 800ccac:	69ab      	ldr	r3, [r5, #24]
 800ccae:	b913      	cbnz	r3, 800ccb6 <__swsetup_r+0x16>
 800ccb0:	4628      	mov	r0, r5
 800ccb2:	f7ff fd4b 	bl	800c74c <__sinit>
 800ccb6:	4b2e      	ldr	r3, [pc, #184]	; (800cd70 <__swsetup_r+0xd0>)
 800ccb8:	429c      	cmp	r4, r3
 800ccba:	d10f      	bne.n	800ccdc <__swsetup_r+0x3c>
 800ccbc:	686c      	ldr	r4, [r5, #4]
 800ccbe:	89a3      	ldrh	r3, [r4, #12]
 800ccc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ccc4:	0719      	lsls	r1, r3, #28
 800ccc6:	d42c      	bmi.n	800cd22 <__swsetup_r+0x82>
 800ccc8:	06dd      	lsls	r5, r3, #27
 800ccca:	d411      	bmi.n	800ccf0 <__swsetup_r+0x50>
 800cccc:	2309      	movs	r3, #9
 800ccce:	6033      	str	r3, [r6, #0]
 800ccd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ccd4:	81a3      	strh	r3, [r4, #12]
 800ccd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ccda:	e03e      	b.n	800cd5a <__swsetup_r+0xba>
 800ccdc:	4b25      	ldr	r3, [pc, #148]	; (800cd74 <__swsetup_r+0xd4>)
 800ccde:	429c      	cmp	r4, r3
 800cce0:	d101      	bne.n	800cce6 <__swsetup_r+0x46>
 800cce2:	68ac      	ldr	r4, [r5, #8]
 800cce4:	e7eb      	b.n	800ccbe <__swsetup_r+0x1e>
 800cce6:	4b24      	ldr	r3, [pc, #144]	; (800cd78 <__swsetup_r+0xd8>)
 800cce8:	429c      	cmp	r4, r3
 800ccea:	bf08      	it	eq
 800ccec:	68ec      	ldreq	r4, [r5, #12]
 800ccee:	e7e6      	b.n	800ccbe <__swsetup_r+0x1e>
 800ccf0:	0758      	lsls	r0, r3, #29
 800ccf2:	d512      	bpl.n	800cd1a <__swsetup_r+0x7a>
 800ccf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccf6:	b141      	cbz	r1, 800cd0a <__swsetup_r+0x6a>
 800ccf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccfc:	4299      	cmp	r1, r3
 800ccfe:	d002      	beq.n	800cd06 <__swsetup_r+0x66>
 800cd00:	4630      	mov	r0, r6
 800cd02:	f7fe fd8b 	bl	800b81c <_free_r>
 800cd06:	2300      	movs	r3, #0
 800cd08:	6363      	str	r3, [r4, #52]	; 0x34
 800cd0a:	89a3      	ldrh	r3, [r4, #12]
 800cd0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd10:	81a3      	strh	r3, [r4, #12]
 800cd12:	2300      	movs	r3, #0
 800cd14:	6063      	str	r3, [r4, #4]
 800cd16:	6923      	ldr	r3, [r4, #16]
 800cd18:	6023      	str	r3, [r4, #0]
 800cd1a:	89a3      	ldrh	r3, [r4, #12]
 800cd1c:	f043 0308 	orr.w	r3, r3, #8
 800cd20:	81a3      	strh	r3, [r4, #12]
 800cd22:	6923      	ldr	r3, [r4, #16]
 800cd24:	b94b      	cbnz	r3, 800cd3a <__swsetup_r+0x9a>
 800cd26:	89a3      	ldrh	r3, [r4, #12]
 800cd28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd30:	d003      	beq.n	800cd3a <__swsetup_r+0x9a>
 800cd32:	4621      	mov	r1, r4
 800cd34:	4630      	mov	r0, r6
 800cd36:	f000 f84d 	bl	800cdd4 <__smakebuf_r>
 800cd3a:	89a0      	ldrh	r0, [r4, #12]
 800cd3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd40:	f010 0301 	ands.w	r3, r0, #1
 800cd44:	d00a      	beq.n	800cd5c <__swsetup_r+0xbc>
 800cd46:	2300      	movs	r3, #0
 800cd48:	60a3      	str	r3, [r4, #8]
 800cd4a:	6963      	ldr	r3, [r4, #20]
 800cd4c:	425b      	negs	r3, r3
 800cd4e:	61a3      	str	r3, [r4, #24]
 800cd50:	6923      	ldr	r3, [r4, #16]
 800cd52:	b943      	cbnz	r3, 800cd66 <__swsetup_r+0xc6>
 800cd54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cd58:	d1ba      	bne.n	800ccd0 <__swsetup_r+0x30>
 800cd5a:	bd70      	pop	{r4, r5, r6, pc}
 800cd5c:	0781      	lsls	r1, r0, #30
 800cd5e:	bf58      	it	pl
 800cd60:	6963      	ldrpl	r3, [r4, #20]
 800cd62:	60a3      	str	r3, [r4, #8]
 800cd64:	e7f4      	b.n	800cd50 <__swsetup_r+0xb0>
 800cd66:	2000      	movs	r0, #0
 800cd68:	e7f7      	b.n	800cd5a <__swsetup_r+0xba>
 800cd6a:	bf00      	nop
 800cd6c:	20000058 	.word	0x20000058
 800cd70:	0800d464 	.word	0x0800d464
 800cd74:	0800d484 	.word	0x0800d484
 800cd78:	0800d444 	.word	0x0800d444

0800cd7c <abort>:
 800cd7c:	b508      	push	{r3, lr}
 800cd7e:	2006      	movs	r0, #6
 800cd80:	f000 f898 	bl	800ceb4 <raise>
 800cd84:	2001      	movs	r0, #1
 800cd86:	f7f5 fdb9 	bl	80028fc <_exit>

0800cd8a <__swhatbuf_r>:
 800cd8a:	b570      	push	{r4, r5, r6, lr}
 800cd8c:	460e      	mov	r6, r1
 800cd8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd92:	2900      	cmp	r1, #0
 800cd94:	b096      	sub	sp, #88	; 0x58
 800cd96:	4614      	mov	r4, r2
 800cd98:	461d      	mov	r5, r3
 800cd9a:	da07      	bge.n	800cdac <__swhatbuf_r+0x22>
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	602b      	str	r3, [r5, #0]
 800cda0:	89b3      	ldrh	r3, [r6, #12]
 800cda2:	061a      	lsls	r2, r3, #24
 800cda4:	d410      	bmi.n	800cdc8 <__swhatbuf_r+0x3e>
 800cda6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdaa:	e00e      	b.n	800cdca <__swhatbuf_r+0x40>
 800cdac:	466a      	mov	r2, sp
 800cdae:	f000 f89d 	bl	800ceec <_fstat_r>
 800cdb2:	2800      	cmp	r0, #0
 800cdb4:	dbf2      	blt.n	800cd9c <__swhatbuf_r+0x12>
 800cdb6:	9a01      	ldr	r2, [sp, #4]
 800cdb8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cdbc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cdc0:	425a      	negs	r2, r3
 800cdc2:	415a      	adcs	r2, r3
 800cdc4:	602a      	str	r2, [r5, #0]
 800cdc6:	e7ee      	b.n	800cda6 <__swhatbuf_r+0x1c>
 800cdc8:	2340      	movs	r3, #64	; 0x40
 800cdca:	2000      	movs	r0, #0
 800cdcc:	6023      	str	r3, [r4, #0]
 800cdce:	b016      	add	sp, #88	; 0x58
 800cdd0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cdd4 <__smakebuf_r>:
 800cdd4:	898b      	ldrh	r3, [r1, #12]
 800cdd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cdd8:	079d      	lsls	r5, r3, #30
 800cdda:	4606      	mov	r6, r0
 800cddc:	460c      	mov	r4, r1
 800cdde:	d507      	bpl.n	800cdf0 <__smakebuf_r+0x1c>
 800cde0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cde4:	6023      	str	r3, [r4, #0]
 800cde6:	6123      	str	r3, [r4, #16]
 800cde8:	2301      	movs	r3, #1
 800cdea:	6163      	str	r3, [r4, #20]
 800cdec:	b002      	add	sp, #8
 800cdee:	bd70      	pop	{r4, r5, r6, pc}
 800cdf0:	ab01      	add	r3, sp, #4
 800cdf2:	466a      	mov	r2, sp
 800cdf4:	f7ff ffc9 	bl	800cd8a <__swhatbuf_r>
 800cdf8:	9900      	ldr	r1, [sp, #0]
 800cdfa:	4605      	mov	r5, r0
 800cdfc:	4630      	mov	r0, r6
 800cdfe:	f7fe fd5d 	bl	800b8bc <_malloc_r>
 800ce02:	b948      	cbnz	r0, 800ce18 <__smakebuf_r+0x44>
 800ce04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce08:	059a      	lsls	r2, r3, #22
 800ce0a:	d4ef      	bmi.n	800cdec <__smakebuf_r+0x18>
 800ce0c:	f023 0303 	bic.w	r3, r3, #3
 800ce10:	f043 0302 	orr.w	r3, r3, #2
 800ce14:	81a3      	strh	r3, [r4, #12]
 800ce16:	e7e3      	b.n	800cde0 <__smakebuf_r+0xc>
 800ce18:	4b0d      	ldr	r3, [pc, #52]	; (800ce50 <__smakebuf_r+0x7c>)
 800ce1a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce1c:	89a3      	ldrh	r3, [r4, #12]
 800ce1e:	6020      	str	r0, [r4, #0]
 800ce20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce24:	81a3      	strh	r3, [r4, #12]
 800ce26:	9b00      	ldr	r3, [sp, #0]
 800ce28:	6163      	str	r3, [r4, #20]
 800ce2a:	9b01      	ldr	r3, [sp, #4]
 800ce2c:	6120      	str	r0, [r4, #16]
 800ce2e:	b15b      	cbz	r3, 800ce48 <__smakebuf_r+0x74>
 800ce30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce34:	4630      	mov	r0, r6
 800ce36:	f000 f86b 	bl	800cf10 <_isatty_r>
 800ce3a:	b128      	cbz	r0, 800ce48 <__smakebuf_r+0x74>
 800ce3c:	89a3      	ldrh	r3, [r4, #12]
 800ce3e:	f023 0303 	bic.w	r3, r3, #3
 800ce42:	f043 0301 	orr.w	r3, r3, #1
 800ce46:	81a3      	strh	r3, [r4, #12]
 800ce48:	89a0      	ldrh	r0, [r4, #12]
 800ce4a:	4305      	orrs	r5, r0
 800ce4c:	81a5      	strh	r5, [r4, #12]
 800ce4e:	e7cd      	b.n	800cdec <__smakebuf_r+0x18>
 800ce50:	0800c6e5 	.word	0x0800c6e5

0800ce54 <_malloc_usable_size_r>:
 800ce54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce58:	1f18      	subs	r0, r3, #4
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	bfbc      	itt	lt
 800ce5e:	580b      	ldrlt	r3, [r1, r0]
 800ce60:	18c0      	addlt	r0, r0, r3
 800ce62:	4770      	bx	lr

0800ce64 <_raise_r>:
 800ce64:	291f      	cmp	r1, #31
 800ce66:	b538      	push	{r3, r4, r5, lr}
 800ce68:	4604      	mov	r4, r0
 800ce6a:	460d      	mov	r5, r1
 800ce6c:	d904      	bls.n	800ce78 <_raise_r+0x14>
 800ce6e:	2316      	movs	r3, #22
 800ce70:	6003      	str	r3, [r0, #0]
 800ce72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce76:	bd38      	pop	{r3, r4, r5, pc}
 800ce78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ce7a:	b112      	cbz	r2, 800ce82 <_raise_r+0x1e>
 800ce7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce80:	b94b      	cbnz	r3, 800ce96 <_raise_r+0x32>
 800ce82:	4620      	mov	r0, r4
 800ce84:	f000 f830 	bl	800cee8 <_getpid_r>
 800ce88:	462a      	mov	r2, r5
 800ce8a:	4601      	mov	r1, r0
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce92:	f000 b817 	b.w	800cec4 <_kill_r>
 800ce96:	2b01      	cmp	r3, #1
 800ce98:	d00a      	beq.n	800ceb0 <_raise_r+0x4c>
 800ce9a:	1c59      	adds	r1, r3, #1
 800ce9c:	d103      	bne.n	800cea6 <_raise_r+0x42>
 800ce9e:	2316      	movs	r3, #22
 800cea0:	6003      	str	r3, [r0, #0]
 800cea2:	2001      	movs	r0, #1
 800cea4:	e7e7      	b.n	800ce76 <_raise_r+0x12>
 800cea6:	2400      	movs	r4, #0
 800cea8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ceac:	4628      	mov	r0, r5
 800ceae:	4798      	blx	r3
 800ceb0:	2000      	movs	r0, #0
 800ceb2:	e7e0      	b.n	800ce76 <_raise_r+0x12>

0800ceb4 <raise>:
 800ceb4:	4b02      	ldr	r3, [pc, #8]	; (800cec0 <raise+0xc>)
 800ceb6:	4601      	mov	r1, r0
 800ceb8:	6818      	ldr	r0, [r3, #0]
 800ceba:	f7ff bfd3 	b.w	800ce64 <_raise_r>
 800cebe:	bf00      	nop
 800cec0:	20000058 	.word	0x20000058

0800cec4 <_kill_r>:
 800cec4:	b538      	push	{r3, r4, r5, lr}
 800cec6:	4d07      	ldr	r5, [pc, #28]	; (800cee4 <_kill_r+0x20>)
 800cec8:	2300      	movs	r3, #0
 800ceca:	4604      	mov	r4, r0
 800cecc:	4608      	mov	r0, r1
 800cece:	4611      	mov	r1, r2
 800ced0:	602b      	str	r3, [r5, #0]
 800ced2:	f7f5 fd03 	bl	80028dc <_kill>
 800ced6:	1c43      	adds	r3, r0, #1
 800ced8:	d102      	bne.n	800cee0 <_kill_r+0x1c>
 800ceda:	682b      	ldr	r3, [r5, #0]
 800cedc:	b103      	cbz	r3, 800cee0 <_kill_r+0x1c>
 800cede:	6023      	str	r3, [r4, #0]
 800cee0:	bd38      	pop	{r3, r4, r5, pc}
 800cee2:	bf00      	nop
 800cee4:	20000848 	.word	0x20000848

0800cee8 <_getpid_r>:
 800cee8:	f7f5 bcf0 	b.w	80028cc <_getpid>

0800ceec <_fstat_r>:
 800ceec:	b538      	push	{r3, r4, r5, lr}
 800ceee:	4d07      	ldr	r5, [pc, #28]	; (800cf0c <_fstat_r+0x20>)
 800cef0:	2300      	movs	r3, #0
 800cef2:	4604      	mov	r4, r0
 800cef4:	4608      	mov	r0, r1
 800cef6:	4611      	mov	r1, r2
 800cef8:	602b      	str	r3, [r5, #0]
 800cefa:	f7f5 fd4e 	bl	800299a <_fstat>
 800cefe:	1c43      	adds	r3, r0, #1
 800cf00:	d102      	bne.n	800cf08 <_fstat_r+0x1c>
 800cf02:	682b      	ldr	r3, [r5, #0]
 800cf04:	b103      	cbz	r3, 800cf08 <_fstat_r+0x1c>
 800cf06:	6023      	str	r3, [r4, #0]
 800cf08:	bd38      	pop	{r3, r4, r5, pc}
 800cf0a:	bf00      	nop
 800cf0c:	20000848 	.word	0x20000848

0800cf10 <_isatty_r>:
 800cf10:	b538      	push	{r3, r4, r5, lr}
 800cf12:	4d06      	ldr	r5, [pc, #24]	; (800cf2c <_isatty_r+0x1c>)
 800cf14:	2300      	movs	r3, #0
 800cf16:	4604      	mov	r4, r0
 800cf18:	4608      	mov	r0, r1
 800cf1a:	602b      	str	r3, [r5, #0]
 800cf1c:	f7f5 fd4d 	bl	80029ba <_isatty>
 800cf20:	1c43      	adds	r3, r0, #1
 800cf22:	d102      	bne.n	800cf2a <_isatty_r+0x1a>
 800cf24:	682b      	ldr	r3, [r5, #0]
 800cf26:	b103      	cbz	r3, 800cf2a <_isatty_r+0x1a>
 800cf28:	6023      	str	r3, [r4, #0]
 800cf2a:	bd38      	pop	{r3, r4, r5, pc}
 800cf2c:	20000848 	.word	0x20000848

0800cf30 <_init>:
 800cf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf32:	bf00      	nop
 800cf34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf36:	bc08      	pop	{r3}
 800cf38:	469e      	mov	lr, r3
 800cf3a:	4770      	bx	lr

0800cf3c <_fini>:
 800cf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf3e:	bf00      	nop
 800cf40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf42:	bc08      	pop	{r3}
 800cf44:	469e      	mov	lr, r3
 800cf46:	4770      	bx	lr
